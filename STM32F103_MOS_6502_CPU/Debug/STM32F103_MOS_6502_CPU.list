
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001db0  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800413c  0800413c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800413c  0800413c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800413c  0800413c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008098  2000000c  08004150  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200080a4  08004150  000280a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098e3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189e  00000000  00000000  00029918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005aaa  00000000  00000000  0002b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00030c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac8  00000000  00000000  00031458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018abb  00000000  00000000  00031f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1b0  00000000  00000000  0004a9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000908f6  00000000  00000000  00055b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e6481  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001524  00000000  00000000  000e64d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002374 	.word	0x08002374

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002374 	.word	0x08002374

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <imp>:
static void (*optable[256])();
static uint8 penaltyop, penaltyaddr;

/*addressing mode functions, calculates effective addresses*/
static void imp() { 
}
 8000234:	4770      	bx	lr
	...

08000238 <imm>:
static void acc() { 
}

/*addressing mode functions, calculates effective addresses*/
static void imm() { 
    ea = pc++;
 8000238:	4a03      	ldr	r2, [pc, #12]	; (8000248 <imm+0x10>)
 800023a:	8813      	ldrh	r3, [r2, #0]
 800023c:	1c59      	adds	r1, r3, #1
 800023e:	8011      	strh	r1, [r2, #0]
 8000240:	4a02      	ldr	r2, [pc, #8]	; (800024c <imm+0x14>)
 8000242:	8013      	strh	r3, [r2, #0]
}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	2000008e 	.word	0x2000008e
 800024c:	20000034 	.word	0x20000034

08000250 <clc>:
            else clockticks6502++;
    }
}

static void clc() {
    clearcarry();
 8000250:	4a02      	ldr	r2, [pc, #8]	; (800025c <clc+0xc>)
 8000252:	7813      	ldrb	r3, [r2, #0]
 8000254:	f023 0301 	bic.w	r3, r3, #1
 8000258:	7013      	strb	r3, [r2, #0]
}
 800025a:	4770      	bx	lr
 800025c:	2000809b 	.word	0x2000809b

08000260 <cld>:

static void cld() {
    cleardecimal();
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <cld+0xc>)
 8000262:	7813      	ldrb	r3, [r2, #0]
 8000264:	f023 0308 	bic.w	r3, r3, #8
 8000268:	7013      	strb	r3, [r2, #0]
}
 800026a:	4770      	bx	lr
 800026c:	2000809b 	.word	0x2000809b

08000270 <cli>:

static void cli() {
    clearinterrupt();
 8000270:	4a02      	ldr	r2, [pc, #8]	; (800027c <cli+0xc>)
 8000272:	7813      	ldrb	r3, [r2, #0]
 8000274:	f023 0304 	bic.w	r3, r3, #4
 8000278:	7013      	strb	r3, [r2, #0]
}
 800027a:	4770      	bx	lr
 800027c:	2000809b 	.word	0x2000809b

08000280 <clv>:

static void clv() {
    clearoverflow();
 8000280:	4a02      	ldr	r2, [pc, #8]	; (800028c <clv+0xc>)
 8000282:	7813      	ldrb	r3, [r2, #0]
 8000284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000288:	7013      	strb	r3, [r2, #0]
}
 800028a:	4770      	bx	lr
 800028c:	2000809b 	.word	0x2000809b

08000290 <jmp>:
    zerocalc(y);
    signcalc(y);
}

static void jmp() {
    pc = ea;
 8000290:	4b02      	ldr	r3, [pc, #8]	; (800029c <jmp+0xc>)
 8000292:	881a      	ldrh	r2, [r3, #0]
 8000294:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <jmp+0x10>)
 8000296:	801a      	strh	r2, [r3, #0]
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000034 	.word	0x20000034
 80002a0:	2000008e 	.word	0x2000008e

080002a4 <nop>:
   
    putvalue(result);
}

static void nop() {
    switch (opcode) {
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <nop+0x28>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b7c      	cmp	r3, #124	; 0x7c
 80002aa:	d006      	beq.n	80002ba <nop+0x16>
 80002ac:	d809      	bhi.n	80002c2 <nop+0x1e>
 80002ae:	2b5c      	cmp	r3, #92	; 0x5c
 80002b0:	d003      	beq.n	80002ba <nop+0x16>
 80002b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80002b6:	2b1c      	cmp	r3, #28
 80002b8:	d102      	bne.n	80002c0 <nop+0x1c>
        case 0x3C:
        case 0x5C:
        case 0x7C:
        case 0xDC:
        case 0xFC:
            penaltyop = 1;
 80002ba:	2201      	movs	r2, #1
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <nop+0x2c>)
 80002be:	701a      	strb	r2, [r3, #0]
            break;
    }
}
 80002c0:	4770      	bx	lr
    switch (opcode) {
 80002c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80002c6:	2bdc      	cmp	r3, #220	; 0xdc
 80002c8:	e7f6      	b.n	80002b8 <nop+0x14>
 80002ca:	bf00      	nop
 80002cc:	2000008c 	.word	0x2000008c
 80002d0:	20000091 	.word	0x20000091

080002d4 <sec>:
    }
    saveaccum(result);
}

static void sec() {
    setcarry();
 80002d4:	4a02      	ldr	r2, [pc, #8]	; (80002e0 <sec+0xc>)
 80002d6:	7813      	ldrb	r3, [r2, #0]
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	7013      	strb	r3, [r2, #0]
}
 80002de:	4770      	bx	lr
 80002e0:	2000809b 	.word	0x2000809b

080002e4 <sed>:

static void sed() {
    setdecimal();
 80002e4:	4a02      	ldr	r2, [pc, #8]	; (80002f0 <sed+0xc>)
 80002e6:	7813      	ldrb	r3, [r2, #0]
 80002e8:	f043 0308 	orr.w	r3, r3, #8
 80002ec:	7013      	strb	r3, [r2, #0]
}
 80002ee:	4770      	bx	lr
 80002f0:	2000809b 	.word	0x2000809b

080002f4 <sei>:

static void sei() {
    setinterrupt();
 80002f4:	4a02      	ldr	r2, [pc, #8]	; (8000300 <sei+0xc>)
 80002f6:	7813      	ldrb	r3, [r2, #0]
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	7013      	strb	r3, [r2, #0]
}
 80002fe:	4770      	bx	lr
 8000300:	2000809b 	.word	0x2000809b

08000304 <txs>:
    zerocalc(a);
    signcalc(a);
}

static void txs() {
    sp = x;
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <txs+0xc>)
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	4b02      	ldr	r3, [pc, #8]	; (8000314 <txs+0x10>)
 800030a:	701a      	strb	r2, [r3, #0]
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	2000809c 	.word	0x2000809c
 8000314:	2000809a 	.word	0x2000809a

08000318 <bcc.part.0>:
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 8000318:	4a02      	ldr	r2, [pc, #8]	; (8000324 <bcc.part.0+0xc>)
 800031a:	6813      	ldr	r3, [r2, #0]
 800031c:	3302      	adds	r3, #2
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000030 	.word	0x20000030

08000328 <bcc>:
    if ((status & FLAG_CARRY) == 0) {
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <bcc+0x2c>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	07db      	lsls	r3, r3, #31
 800032e:	d410      	bmi.n	8000352 <bcc+0x2a>
        oldpc = pc;
 8000330:	4909      	ldr	r1, [pc, #36]	; (8000358 <bcc+0x30>)
        pc += reladdr;
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <bcc+0x34>)
        oldpc = pc;
 8000334:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	4413      	add	r3, r2
 800033a:	b29b      	uxth	r3, r3
 800033c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 800033e:	4053      	eors	r3, r2
 8000340:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000344:	d001      	beq.n	800034a <bcc+0x22>
 8000346:	f7ff bfe7 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <bcc+0x38>)
 800034c:	6813      	ldr	r3, [r2, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	6013      	str	r3, [r2, #0]
}
 8000352:	4770      	bx	lr
 8000354:	2000809b 	.word	0x2000809b
 8000358:	2000008e 	.word	0x2000008e
 800035c:	20008096 	.word	0x20008096
 8000360:	20000030 	.word	0x20000030

08000364 <bcs>:
    if ((status & FLAG_CARRY) == FLAG_CARRY) {
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <bcs+0x2c>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	07db      	lsls	r3, r3, #31
 800036a:	d510      	bpl.n	800038e <bcs+0x2a>
        oldpc = pc;
 800036c:	4909      	ldr	r1, [pc, #36]	; (8000394 <bcs+0x30>)
        pc += reladdr;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <bcs+0x34>)
        oldpc = pc;
 8000370:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	4413      	add	r3, r2
 8000376:	b29b      	uxth	r3, r3
 8000378:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 800037a:	4053      	eors	r3, r2
 800037c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000380:	d001      	beq.n	8000386 <bcs+0x22>
 8000382:	f7ff bfc9 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <bcs+0x38>)
 8000388:	6813      	ldr	r3, [r2, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	6013      	str	r3, [r2, #0]
}
 800038e:	4770      	bx	lr
 8000390:	2000809b 	.word	0x2000809b
 8000394:	2000008e 	.word	0x2000008e
 8000398:	20008096 	.word	0x20008096
 800039c:	20000030 	.word	0x20000030

080003a0 <beq>:
    if ((status & FLAG_ZERO) == FLAG_ZERO) {
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <beq+0x2c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	079b      	lsls	r3, r3, #30
 80003a6:	d510      	bpl.n	80003ca <beq+0x2a>
        oldpc = pc;
 80003a8:	4909      	ldr	r1, [pc, #36]	; (80003d0 <beq+0x30>)
        pc += reladdr;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <beq+0x34>)
        oldpc = pc;
 80003ac:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	4413      	add	r3, r2
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 80003b6:	4053      	eors	r3, r2
 80003b8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80003bc:	d001      	beq.n	80003c2 <beq+0x22>
 80003be:	f7ff bfab 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <beq+0x38>)
 80003c4:	6813      	ldr	r3, [r2, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	6013      	str	r3, [r2, #0]
}
 80003ca:	4770      	bx	lr
 80003cc:	2000809b 	.word	0x2000809b
 80003d0:	2000008e 	.word	0x2000008e
 80003d4:	20008096 	.word	0x20008096
 80003d8:	20000030 	.word	0x20000030

080003dc <bmi>:
    if ((status & FLAG_SIGN) == FLAG_SIGN) {
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <bmi+0x30>)
 80003de:	f993 3000 	ldrsb.w	r3, [r3]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	da10      	bge.n	8000408 <bmi+0x2c>
        oldpc = pc;
 80003e6:	490a      	ldr	r1, [pc, #40]	; (8000410 <bmi+0x34>)
        pc += reladdr;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <bmi+0x38>)
        oldpc = pc;
 80003ea:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 80003f4:	4053      	eors	r3, r2
 80003f6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80003fa:	d001      	beq.n	8000400 <bmi+0x24>
 80003fc:	f7ff bf8c 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <bmi+0x3c>)
 8000402:	6813      	ldr	r3, [r2, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000809b 	.word	0x2000809b
 8000410:	2000008e 	.word	0x2000008e
 8000414:	20008096 	.word	0x20008096
 8000418:	20000030 	.word	0x20000030

0800041c <bne>:
    if ((status & FLAG_ZERO) == 0) {
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <bne+0x2c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	079b      	lsls	r3, r3, #30
 8000422:	d410      	bmi.n	8000446 <bne+0x2a>
        oldpc = pc;
 8000424:	4909      	ldr	r1, [pc, #36]	; (800044c <bne+0x30>)
        pc += reladdr;
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <bne+0x34>)
        oldpc = pc;
 8000428:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	4413      	add	r3, r2
 800042e:	b29b      	uxth	r3, r3
 8000430:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 8000432:	4053      	eors	r3, r2
 8000434:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000438:	d001      	beq.n	800043e <bne+0x22>
 800043a:	f7ff bf6d 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <bne+0x38>)
 8000440:	6813      	ldr	r3, [r2, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	6013      	str	r3, [r2, #0]
}
 8000446:	4770      	bx	lr
 8000448:	2000809b 	.word	0x2000809b
 800044c:	2000008e 	.word	0x2000008e
 8000450:	20008096 	.word	0x20008096
 8000454:	20000030 	.word	0x20000030

08000458 <bpl>:
    if ((status & FLAG_SIGN) == 0) {
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <bpl+0x30>)
 800045a:	f993 3000 	ldrsb.w	r3, [r3]
 800045e:	2b00      	cmp	r3, #0
 8000460:	db10      	blt.n	8000484 <bpl+0x2c>
        oldpc = pc;
 8000462:	490a      	ldr	r1, [pc, #40]	; (800048c <bpl+0x34>)
        pc += reladdr;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <bpl+0x38>)
        oldpc = pc;
 8000466:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	b29b      	uxth	r3, r3
 800046e:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 8000470:	4053      	eors	r3, r2
 8000472:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000476:	d001      	beq.n	800047c <bpl+0x24>
 8000478:	f7ff bf4e 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <bpl+0x3c>)
 800047e:	6813      	ldr	r3, [r2, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	2000809b 	.word	0x2000809b
 800048c:	2000008e 	.word	0x2000008e
 8000490:	20008096 	.word	0x20008096
 8000494:	20000030 	.word	0x20000030

08000498 <bvc>:
    if ((status & FLAG_OVERFLOW) == 0) {
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <bvc+0x2c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	065b      	lsls	r3, r3, #25
 800049e:	d410      	bmi.n	80004c2 <bvc+0x2a>
        oldpc = pc;
 80004a0:	4909      	ldr	r1, [pc, #36]	; (80004c8 <bvc+0x30>)
        pc += reladdr;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <bvc+0x34>)
        oldpc = pc;
 80004a4:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 80004ae:	4053      	eors	r3, r2
 80004b0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80004b4:	d001      	beq.n	80004ba <bvc+0x22>
 80004b6:	f7ff bf2f 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <bvc+0x38>)
 80004bc:	6813      	ldr	r3, [r2, #0]
 80004be:	3301      	adds	r3, #1
 80004c0:	6013      	str	r3, [r2, #0]
}
 80004c2:	4770      	bx	lr
 80004c4:	2000809b 	.word	0x2000809b
 80004c8:	2000008e 	.word	0x2000008e
 80004cc:	20008096 	.word	0x20008096
 80004d0:	20000030 	.word	0x20000030

080004d4 <bvs>:
    if ((status & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <bvs+0x2c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	065b      	lsls	r3, r3, #25
 80004da:	d510      	bpl.n	80004fe <bvs+0x2a>
        oldpc = pc;
 80004dc:	4909      	ldr	r1, [pc, #36]	; (8000504 <bvs+0x30>)
        pc += reladdr;
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <bvs+0x34>)
        oldpc = pc;
 80004e0:	880a      	ldrh	r2, [r1, #0]
        pc += reladdr;
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	4413      	add	r3, r2
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; /*check if jump crossed a page boundary*/
 80004ea:	4053      	eors	r3, r2
 80004ec:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80004f0:	d001      	beq.n	80004f6 <bvs+0x22>
 80004f2:	f7ff bf11 	b.w	8000318 <bcc.part.0>
            else clockticks6502++;
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <bvs+0x38>)
 80004f8:	6813      	ldr	r3, [r2, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	4770      	bx	lr
 8000500:	2000809b 	.word	0x2000809b
 8000504:	2000008e 	.word	0x2000008e
 8000508:	20008096 	.word	0x20008096
 800050c:	20000030 	.word	0x20000030

08000510 <dex.part.0>:
    signcalc(x);
 8000510:	4a02      	ldr	r2, [pc, #8]	; (800051c <dex.part.0+0xc>)
 8000512:	7813      	ldrb	r3, [r2, #0]
 8000514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000518:	7013      	strb	r3, [r2, #0]
}
 800051a:	4770      	bx	lr
 800051c:	2000809b 	.word	0x2000809b

08000520 <dex>:
    x--;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <dex+0x2c>)
    zerocalc(x);
 8000522:	490b      	ldr	r1, [pc, #44]	; (8000550 <dex+0x30>)
    x--;
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	3a01      	subs	r2, #1
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 800052c:	780b      	ldrb	r3, [r1, #0]
 800052e:	b132      	cbz	r2, 800053e <dex+0x1e>
 8000530:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000534:	0612      	lsls	r2, r2, #24
 8000536:	700b      	strb	r3, [r1, #0]
 8000538:	d504      	bpl.n	8000544 <dex+0x24>
 800053a:	f7ff bfe9 	b.w	8000510 <dex.part.0>
    zerocalc(x);
 800053e:	f043 0302 	orr.w	r3, r3, #2
 8000542:	e7f7      	b.n	8000534 <dex+0x14>
    signcalc(x);
 8000544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000548:	700b      	strb	r3, [r1, #0]
}
 800054a:	4770      	bx	lr
 800054c:	2000809c 	.word	0x2000809c
 8000550:	2000809b 	.word	0x2000809b

08000554 <dey>:
    y--;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <dey+0x2c>)
    zerocalc(y);
 8000556:	490b      	ldr	r1, [pc, #44]	; (8000584 <dey+0x30>)
    y--;
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	3a01      	subs	r2, #1
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8000560:	780b      	ldrb	r3, [r1, #0]
 8000562:	b132      	cbz	r2, 8000572 <dey+0x1e>
 8000564:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000568:	0612      	lsls	r2, r2, #24
 800056a:	700b      	strb	r3, [r1, #0]
 800056c:	d504      	bpl.n	8000578 <dey+0x24>
 800056e:	f7ff bfcf 	b.w	8000510 <dex.part.0>
    zerocalc(y);
 8000572:	f043 0302 	orr.w	r3, r3, #2
 8000576:	e7f7      	b.n	8000568 <dey+0x14>
    signcalc(y);
 8000578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800057c:	700b      	strb	r3, [r1, #0]
}
 800057e:	4770      	bx	lr
 8000580:	2000809d 	.word	0x2000809d
 8000584:	2000809b 	.word	0x2000809b

08000588 <inx>:
    x++;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <inx+0x2c>)
    zerocalc(x);
 800058a:	490b      	ldr	r1, [pc, #44]	; (80005b8 <inx+0x30>)
    x++;
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	3201      	adds	r2, #1
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000594:	780b      	ldrb	r3, [r1, #0]
 8000596:	b132      	cbz	r2, 80005a6 <inx+0x1e>
 8000598:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800059c:	0612      	lsls	r2, r2, #24
 800059e:	700b      	strb	r3, [r1, #0]
 80005a0:	d504      	bpl.n	80005ac <inx+0x24>
 80005a2:	f7ff bfb5 	b.w	8000510 <dex.part.0>
    zerocalc(x);
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	e7f7      	b.n	800059c <inx+0x14>
    signcalc(x);
 80005ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005b0:	700b      	strb	r3, [r1, #0]
}
 80005b2:	4770      	bx	lr
 80005b4:	2000809c 	.word	0x2000809c
 80005b8:	2000809b 	.word	0x2000809b

080005bc <iny>:
    y++;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <iny+0x2c>)
    zerocalc(y);
 80005be:	490b      	ldr	r1, [pc, #44]	; (80005ec <iny+0x30>)
    y++;
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	3201      	adds	r2, #1
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 80005c8:	780b      	ldrb	r3, [r1, #0]
 80005ca:	b132      	cbz	r2, 80005da <iny+0x1e>
 80005cc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80005d0:	0612      	lsls	r2, r2, #24
 80005d2:	700b      	strb	r3, [r1, #0]
 80005d4:	d504      	bpl.n	80005e0 <iny+0x24>
 80005d6:	f7ff bf9b 	b.w	8000510 <dex.part.0>
    zerocalc(y);
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	e7f7      	b.n	80005d0 <iny+0x14>
    signcalc(y);
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	700b      	strb	r3, [r1, #0]
}
 80005e6:	4770      	bx	lr
 80005e8:	2000809d 	.word	0x2000809d
 80005ec:	2000809b 	.word	0x2000809b

080005f0 <tax>:
    x = a;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <tax+0x2c>)
    zerocalc(x);
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <tax+0x30>)
    x = a;
 80005f4:	7819      	ldrb	r1, [r3, #0]
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <tax+0x34>)
 80005f8:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80005fa:	7813      	ldrb	r3, [r2, #0]
 80005fc:	b131      	cbz	r1, 800060c <tax+0x1c>
 80005fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000602:	0609      	lsls	r1, r1, #24
 8000604:	7013      	strb	r3, [r2, #0]
 8000606:	d504      	bpl.n	8000612 <tax+0x22>
 8000608:	f7ff bf82 	b.w	8000510 <dex.part.0>
    zerocalc(x);
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	e7f7      	b.n	8000602 <tax+0x12>
    signcalc(x);
 8000612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000616:	7013      	strb	r3, [r2, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028
 8000620:	2000809b 	.word	0x2000809b
 8000624:	2000809c 	.word	0x2000809c

08000628 <tay>:
    y = a;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <tay+0x2c>)
    zerocalc(y);
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <tay+0x30>)
    y = a;
 800062c:	7819      	ldrb	r1, [r3, #0]
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <tay+0x34>)
 8000630:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 8000632:	7813      	ldrb	r3, [r2, #0]
 8000634:	b131      	cbz	r1, 8000644 <tay+0x1c>
 8000636:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 800063a:	0609      	lsls	r1, r1, #24
 800063c:	7013      	strb	r3, [r2, #0]
 800063e:	d504      	bpl.n	800064a <tay+0x22>
 8000640:	f7ff bf66 	b.w	8000510 <dex.part.0>
    zerocalc(y);
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	e7f7      	b.n	800063a <tay+0x12>
    signcalc(y);
 800064a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800064e:	7013      	strb	r3, [r2, #0]
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028
 8000658:	2000809b 	.word	0x2000809b
 800065c:	2000809d 	.word	0x2000809d

08000660 <tsx>:
    x = sp;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <tsx+0x2c>)
    zerocalc(x);
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <tsx+0x30>)
    x = sp;
 8000664:	7819      	ldrb	r1, [r3, #0]
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <tsx+0x34>)
 8000668:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800066a:	7813      	ldrb	r3, [r2, #0]
 800066c:	b131      	cbz	r1, 800067c <tsx+0x1c>
 800066e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000672:	0609      	lsls	r1, r1, #24
 8000674:	7013      	strb	r3, [r2, #0]
 8000676:	d504      	bpl.n	8000682 <tsx+0x22>
 8000678:	f7ff bf4a 	b.w	8000510 <dex.part.0>
    zerocalc(x);
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	e7f7      	b.n	8000672 <tsx+0x12>
    signcalc(x);
 8000682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000686:	7013      	strb	r3, [r2, #0]
}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000809a 	.word	0x2000809a
 8000690:	2000809b 	.word	0x2000809b
 8000694:	2000809c 	.word	0x2000809c

08000698 <txa>:
    a = x;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <txa+0x2c>)
    zerocalc(a);
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <txa+0x30>)
    a = x;
 800069c:	7819      	ldrb	r1, [r3, #0]
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <txa+0x34>)
 80006a0:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80006a2:	7813      	ldrb	r3, [r2, #0]
 80006a4:	b131      	cbz	r1, 80006b4 <txa+0x1c>
 80006a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80006aa:	0609      	lsls	r1, r1, #24
 80006ac:	7013      	strb	r3, [r2, #0]
 80006ae:	d504      	bpl.n	80006ba <txa+0x22>
 80006b0:	f7ff bf2e 	b.w	8000510 <dex.part.0>
    zerocalc(a);
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	e7f7      	b.n	80006aa <txa+0x12>
    signcalc(a);
 80006ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006be:	7013      	strb	r3, [r2, #0]
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000809c 	.word	0x2000809c
 80006c8:	2000809b 	.word	0x2000809b
 80006cc:	20000028 	.word	0x20000028

080006d0 <tya>:

static void tya() {
    a = y;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <tya+0x2c>)
   
    zerocalc(a);
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <tya+0x30>)
    a = y;
 80006d4:	7819      	ldrb	r1, [r3, #0]
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <tya+0x34>)
 80006d8:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80006da:	7813      	ldrb	r3, [r2, #0]
 80006dc:	b131      	cbz	r1, 80006ec <tya+0x1c>
 80006de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80006e2:	0609      	lsls	r1, r1, #24
 80006e4:	7013      	strb	r3, [r2, #0]
 80006e6:	d504      	bpl.n	80006f2 <tya+0x22>
 80006e8:	f7ff bf12 	b.w	8000510 <dex.part.0>
    zerocalc(a);
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	e7f7      	b.n	80006e2 <tya+0x12>
    signcalc(a);
 80006f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f6:	7013      	strb	r3, [r2, #0]
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000809d 	.word	0x2000809d
 8000700:	2000809b 	.word	0x2000809b
 8000704:	20000028 	.word	0x20000028

08000708 <dcp.part.0>:
    }

    static void isb() {
        inc();
        sbc();
        if (penaltyop && penaltyaddr) clockticks6502--;
 8000708:	4a02      	ldr	r2, [pc, #8]	; (8000714 <dcp.part.0+0xc>)
 800070a:	6813      	ldr	r3, [r2, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	6013      	str	r3, [r2, #0]
    }
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000030 	.word	0x20000030

08000718 <acc>:
 8000718:	4770      	bx	lr
	...

0800071c <reset6502>:
    pc = mem_6502_read16(0xfffc);
 800071c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <reset6502+0x1c>)
 8000722:	801a      	strh	r2, [r3, #0]
    sp = 0xfd;
 8000724:	22fd      	movs	r2, #253	; 0xfd
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <reset6502+0x20>)
 8000728:	701a      	strb	r2, [r3, #0]
    status |= FLAG_CONSTANT | FLAG_INTERRUPT;
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <reset6502+0x24>)
 800072c:	7813      	ldrb	r3, [r2, #0]
 800072e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000732:	7013      	strb	r3, [r2, #0]
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	2000008e 	.word	0x2000008e
 800073c:	2000809a 	.word	0x2000809a
 8000740:	2000809b 	.word	0x2000809b

08000744 <read6502>:
/**
 * Read from memory (MOS 6502)
 */
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
  // RAM
  if (address < RAM_SIZE) {
 8000744:	0403      	lsls	r3, r0, #16
 8000746:	d402      	bmi.n	800074e <read6502+0xa>
    return ram[address];
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <read6502+0x5c>)
  }

  // BASIC ROM
  if (address >= BASIC_START && address < BASIC_START + sizeof(basic)) {
    return basic[address - BASIC_START];
 800074a:	5cc0      	ldrb	r0, [r0, r3]
 800074c:	4770      	bx	lr
  if (address >= BASIC_START && address < BASIC_START + sizeof(basic)) {
 800074e:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8000752:	b29b      	uxth	r3, r3
 8000754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000758:	d201      	bcs.n	800075e <read6502+0x1a>
    return basic[address - BASIC_START];
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <read6502+0x60>)
 800075c:	e7f5      	b.n	800074a <read6502+0x6>
  }

  // PIA
  if (address >= PIA_START && address < 0xD013) {
 800075e:	f500 533f 	add.w	r3, r0, #12224	; 0x2fc0
 8000762:	3330      	adds	r3, #48	; 0x30
 8000764:	b29b      	uxth	r3, r3
 8000766:	2b02      	cmp	r3, #2
 8000768:	d811      	bhi.n	800078e <read6502+0x4a>
    // Set keyboard register to 0x00 to indicate no key pressed
    if (address == PIA_START) {
 800076a:	f24d 0310 	movw	r3, #53264	; 0xd010
 800076e:	4298      	cmp	r0, r3
 8000770:	d104      	bne.n	800077c <read6502+0x38>
      pia.keyboard_control = 0x00;
 8000772:	2200      	movs	r2, #0
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <read6502+0x64>)
      return pia.keyboard_register;
 8000776:	7818      	ldrb	r0, [r3, #0]
      pia.keyboard_control = 0x00;
 8000778:	705a      	strb	r2, [r3, #1]
      return pia.keyboard_register;
 800077a:	4770      	bx	lr
    }
    // Display register
    else if (address == PIA_START + 2) {
 800077c:	f24d 0312 	movw	r3, #53266	; 0xd012
 8000780:	4298      	cmp	r0, r3
 8000782:	d10b      	bne.n	800079c <read6502+0x58>
      uint8_t display_register = pia.display_register;
      pia.display_register = 0x00;
 8000784:	2200      	movs	r2, #0
      uint8_t display_register = pia.display_register;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <read6502+0x64>)
 8000788:	7898      	ldrb	r0, [r3, #2]
      pia.display_register = 0x00;
 800078a:	709a      	strb	r2, [r3, #2]
      return display_register;
 800078c:	4770      	bx	lr
    }
  }

  // WOZMON ROM
  if (address >= WOZMON_START && address < 0xFFFF) {
 800078e:	f500 7380 	add.w	r3, r0, #256	; 0x100
 8000792:	b29b      	uxth	r3, r3
 8000794:	2bfe      	cmp	r3, #254	; 0xfe
 8000796:	d801      	bhi.n	800079c <read6502+0x58>
    return monitor[address - WOZMON_START];
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <read6502+0x68>)
 800079a:	e7d6      	b.n	800074a <read6502+0x6>
  }

  // Unmapped
  return 0xFF;
 800079c:	20ff      	movs	r0, #255	; 0xff
}
 800079e:	4770      	bx	lr
 80007a0:	20000095 	.word	0x20000095
 80007a4:	07ff4810 	.word	0x07ff4810
 80007a8:	20000092 	.word	0x20000092
 80007ac:	07ff3910 	.word	0x07ff3910

080007b0 <exec6502>:
		An instruction might cause the tick count to wrap around into the billions.

		The system is changed so that now clockticks 6502 is reset every single time that exec is called.
	*/
    clockgoal6502 = tickcount;
    clockticks6502 = 0;
 80007b0:	2300      	movs	r3, #0
uint32 exec6502(uint32 tickcount) {
 80007b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    clockgoal6502 = tickcount;
 80007b6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8000844 <exec6502+0x94>
    clockticks6502 = 0;
 80007ba:	4c23      	ldr	r4, [pc, #140]	; (8000848 <exec6502+0x98>)
    while (clockticks6502 < clockgoal6502) {
        opcode = read6502(pc++);
 80007bc:	4e23      	ldr	r6, [pc, #140]	; (800084c <exec6502+0x9c>)
 80007be:	4d24      	ldr	r5, [pc, #144]	; (8000850 <exec6502+0xa0>)
    clockgoal6502 = tickcount;
 80007c0:	f8c8 0000 	str.w	r0, [r8]
    clockticks6502 = 0;
 80007c4:	6023      	str	r3, [r4, #0]
        status |= FLAG_CONSTANT;
 80007c6:	4f23      	ldr	r7, [pc, #140]	; (8000854 <exec6502+0xa4>)
    while (clockticks6502 < clockgoal6502) {
 80007c8:	6820      	ldr	r0, [r4, #0]
 80007ca:	f8d8 3000 	ldr.w	r3, [r8]
 80007ce:	4298      	cmp	r0, r3
 80007d0:	d301      	bcc.n	80007d6 <exec6502+0x26>
        if (penaltyop && penaltyaddr) {clockticks6502++;}
        instructions++;
        if (callexternal) (*loopexternal)();
    }
	return clockticks6502;
}
 80007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        opcode = read6502(pc++);
 80007d6:	8830      	ldrh	r0, [r6, #0]
        penaltyop = 0;
 80007d8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8000858 <exec6502+0xa8>
        opcode = read6502(pc++);
 80007dc:	1c43      	adds	r3, r0, #1
 80007de:	8033      	strh	r3, [r6, #0]
 80007e0:	f7ff ffb0 	bl	8000744 <read6502>
        status |= FLAG_CONSTANT;
 80007e4:	783b      	ldrb	r3, [r7, #0]
        penaltyaddr = 0;
 80007e6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800085c <exec6502+0xac>
        status |= FLAG_CONSTANT;
 80007ea:	f043 0320 	orr.w	r3, r3, #32
 80007ee:	703b      	strb	r3, [r7, #0]
        penaltyop = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f88a 3000 	strb.w	r3, [sl]
        penaltyaddr = 0;
 80007f6:	f889 3000 	strb.w	r3, [r9]
       	(*addrtable[opcode])();
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <exec6502+0xb0>)
        opcode = read6502(pc++);
 80007fc:	7028      	strb	r0, [r5, #0]
       	(*addrtable[opcode])();
 80007fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000802:	4798      	blx	r3
        (*optable[opcode])();
 8000804:	782a      	ldrb	r2, [r5, #0]
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <exec6502+0xb4>)
 8000808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080c:	4798      	blx	r3
        clockticks6502 += ticktable[opcode];
 800080e:	782a      	ldrb	r2, [r5, #0]
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <exec6502+0xb8>)
 8000812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000816:	6822      	ldr	r2, [r4, #0]
 8000818:	4413      	add	r3, r2
        if (penaltyop && penaltyaddr) {clockticks6502++;}
 800081a:	f89a 2000 	ldrb.w	r2, [sl]
        clockticks6502 += ticktable[opcode];
 800081e:	6023      	str	r3, [r4, #0]
        if (penaltyop && penaltyaddr) {clockticks6502++;}
 8000820:	b122      	cbz	r2, 800082c <exec6502+0x7c>
 8000822:	f899 2000 	ldrb.w	r2, [r9]
 8000826:	b10a      	cbz	r2, 800082c <exec6502+0x7c>
 8000828:	3301      	adds	r3, #1
 800082a:	6023      	str	r3, [r4, #0]
        instructions++;
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <exec6502+0xbc>)
 800082e:	6813      	ldr	r3, [r2, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	6013      	str	r3, [r2, #0]
        if (callexternal) (*loopexternal)();
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <exec6502+0xc0>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0c5      	beq.n	80007c8 <exec6502+0x18>
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <exec6502+0xc4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4798      	blx	r3
 8000842:	e7c0      	b.n	80007c6 <exec6502+0x16>
 8000844:	2000002c 	.word	0x2000002c
 8000848:	20000030 	.word	0x20000030
 800084c:	2000008e 	.word	0x2000008e
 8000850:	2000008c 	.word	0x2000008c
 8000854:	2000809b 	.word	0x2000809b
 8000858:	20000091 	.word	0x20000091
 800085c:	20000090 	.word	0x20000090
 8000860:	08002410 	.word	0x08002410
 8000864:	08003910 	.word	0x08003910
 8000868:	08003d10 	.word	0x08003d10
 800086c:	20000080 	.word	0x20000080
 8000870:	20000029 	.word	0x20000029
 8000874:	20000088 	.word	0x20000088

08000878 <getvalue>:
static ushort getvalue() {
 8000878:	b508      	push	{r3, lr}
    if (addrtable[opcode] == acc) return((ushort)a);
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <getvalue+0x24>)
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <getvalue+0x28>)
 8000880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <getvalue+0x2c>)
 8000886:	429a      	cmp	r2, r3
 8000888:	d102      	bne.n	8000890 <getvalue+0x18>
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <getvalue+0x30>)
 800088c:	7818      	ldrb	r0, [r3, #0]
}
 800088e:	bd08      	pop	{r3, pc}
        else return((ushort)read6502(ea));
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <getvalue+0x34>)
 8000892:	8818      	ldrh	r0, [r3, #0]
 8000894:	f7ff ff56 	bl	8000744 <read6502>
 8000898:	b280      	uxth	r0, r0
 800089a:	e7f8      	b.n	800088e <getvalue+0x16>
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	08002410 	.word	0x08002410
 80008a4:	08000719 	.word	0x08000719
 80008a8:	20000028 	.word	0x20000028
 80008ac:	20000034 	.word	0x20000034

080008b0 <sbc>:
    penaltyop = 1;
 80008b0:	2201      	movs	r2, #1
static void sbc() {
 80008b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (status & FLAG_DECIMAL) {
 80008b6:	4d40      	ldr	r5, [pc, #256]	; (80009b8 <sbc+0x108>)
    	A = a;
 80008b8:	4c40      	ldr	r4, [pc, #256]	; (80009bc <sbc+0x10c>)
    if (status & FLAG_DECIMAL) {
 80008ba:	7829      	ldrb	r1, [r5, #0]
    penaltyop = 1;
 80008bc:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <sbc+0x110>)
    	A = a;
 80008be:	7827      	ldrb	r7, [r4, #0]
    	C = (ushort)(status & FLAG_CARRY);
 80008c0:	ea01 0802 	and.w	r8, r1, r2
    if (status & FLAG_DECIMAL) {
 80008c4:	f011 0f08 	tst.w	r1, #8
 80008c8:	4e3e      	ldr	r6, [pc, #248]	; (80009c4 <sbc+0x114>)
    penaltyop = 1;
 80008ca:	701a      	strb	r2, [r3, #0]
    if (status & FLAG_DECIMAL) {
 80008cc:	eb08 0907 	add.w	r9, r8, r7
 80008d0:	d04a      	beq.n	8000968 <sbc+0xb8>
     	value = getvalue();B = value;value = value ^ 0x00FF;
 80008d2:	f7ff ffd1 	bl	8000878 <getvalue>
 80008d6:	f080 0cff 	eor.w	ip, r0, #255	; 0xff
 80008da:	fa1f fc8c 	uxth.w	ip, ip
    	result_dec = (ushort)a + value + (ushort)(status & FLAG_CARRY); /*dec*/
 80008de:	44e1      	add	r9, ip
 80008e0:	fa1f f289 	uxth.w	r2, r9
    	overflowcalc(result_dec, a, value); 
 80008e4:	ea87 0302 	eor.w	r3, r7, r2
 80008e8:	ea8c 0c02 	eor.w	ip, ip, r2
    	carrycalc(result_dec); 
 80008ec:	f419 4f7f 	tst.w	r9, #65280	; 0xff00
    	overflowcalc(result_dec, a, value); 
 80008f0:	ea03 0c0c 	and.w	ip, r3, ip
    	carrycalc(result_dec); 
 80008f4:	bf14      	ite	ne
 80008f6:	f041 0101 	orrne.w	r1, r1, #1
 80008fa:	f001 01fe 	andeq.w	r1, r1, #254	; 0xfe
    	overflowcalc(result_dec, a, value); 
 80008fe:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8000902:	bf14      	ite	ne
 8000904:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
 8000908:	f001 01bf 	andeq.w	r1, r1, #191	; 0xbf
    	signcalc(result_dec);
 800090c:	0613      	lsls	r3, r2, #24
    	zerocalc(result_dec);
 800090e:	b2d2      	uxtb	r2, r2
    	signcalc(result_dec);
 8000910:	bf4c      	ite	mi
 8000912:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 8000916:	f001 017f 	andpl.w	r1, r1, #127	; 0x7f
    	zerocalc(result_dec);
 800091a:	b312      	cbz	r2, 8000962 <sbc+0xb2>
 800091c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    	AL = (A & 0x0F) - (B & 0x0F) + C -1; /* 3a*/
 8000920:	f007 030f 	and.w	r3, r7, #15
 8000924:	f000 020f 	and.w	r2, r0, #15
 8000928:	4443      	add	r3, r8
 800092a:	1a9b      	subs	r3, r3, r2
 800092c:	b29b      	uxth	r3, r3
 800092e:	7029      	strb	r1, [r5, #0]
 8000930:	1e59      	subs	r1, r3, #1
    	if(AL & 0x8000)  AL =  ((AL - 0x06) & 0x0F) - 0x10; /*3b*/
 8000932:	040d      	lsls	r5, r1, #16
 8000934:	bf44      	itt	mi
 8000936:	3b07      	submi	r3, #7
 8000938:	f063 030f 	ornmi	r3, r3, #15
    	AL = (A & 0x0F) - (B & 0x0F) + C -1; /* 3a*/
 800093c:	b28a      	uxth	r2, r1
    	A = (A & 0xF0) - (B & 0xF0) + AL; /*3c*/
 800093e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    	if(AL & 0x8000)  AL =  ((AL - 0x06) & 0x0F) - 0x10; /*3b*/
 8000942:	bf48      	it	mi
 8000944:	b29a      	uxthmi	r2, r3
    	A = (A & 0xF0) - (B & 0xF0) + AL; /*3c*/
 8000946:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
 800094a:	1a18      	subs	r0, r3, r0
 800094c:	1813      	adds	r3, r2, r0
 800094e:	b29a      	uxth	r2, r3
    	if(A & 0x8000) A = A - 0x60; /*3d*/
 8000950:	0419      	lsls	r1, r3, #16
 8000952:	bf44      	itt	mi
 8000954:	3a60      	submi	r2, #96	; 0x60
 8000956:	b292      	uxthmi	r2, r2
    	result = A; /*3e*/
 8000958:	8032      	strh	r2, [r6, #0]
    saveaccum(result);
 800095a:	8833      	ldrh	r3, [r6, #0]
 800095c:	7023      	strb	r3, [r4, #0]
}
 800095e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    	zerocalc(result_dec);
 8000962:	f041 0102 	orr.w	r1, r1, #2
 8000966:	e7db      	b.n	8000920 <sbc+0x70>
        value = getvalue() ^ 0x00FF;
 8000968:	f7ff ff86 	bl	8000878 <getvalue>
 800096c:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8000970:	b280      	uxth	r0, r0
        result = (ushort)a + value + (ushort)(status & FLAG_CARRY);
 8000972:	eb00 0309 	add.w	r3, r0, r9
 8000976:	b29b      	uxth	r3, r3
        carrycalc(result);
 8000978:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
        zerocalc(result);
 800097c:	b2da      	uxtb	r2, r3
        result = (ushort)a + value + (ushort)(status & FLAG_CARRY);
 800097e:	8033      	strh	r3, [r6, #0]
        carrycalc(result);
 8000980:	bf14      	ite	ne
 8000982:	f041 0101 	orrne.w	r1, r1, #1
 8000986:	f001 01fe 	andeq.w	r1, r1, #254	; 0xfe
        zerocalc(result);
 800098a:	b192      	cbz	r2, 80009b2 <sbc+0x102>
 800098c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
        overflowcalc(result, a, value);
 8000990:	405f      	eors	r7, r3
 8000992:	4058      	eors	r0, r3
 8000994:	4007      	ands	r7, r0
 8000996:	063a      	lsls	r2, r7, #24
 8000998:	bf4c      	ite	mi
 800099a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
 800099e:	f001 01bf 	andpl.w	r1, r1, #191	; 0xbf
        signcalc(result);
 80009a2:	061b      	lsls	r3, r3, #24
 80009a4:	bf4c      	ite	mi
 80009a6:	f061 017f 	ornmi	r1, r1, #127	; 0x7f
 80009aa:	f001 017f 	andpl.w	r1, r1, #127	; 0x7f
 80009ae:	7029      	strb	r1, [r5, #0]
 80009b0:	e7d3      	b.n	800095a <sbc+0xaa>
        zerocalc(result);
 80009b2:	f041 0102 	orr.w	r1, r1, #2
 80009b6:	e7eb      	b.n	8000990 <sbc+0xe0>
 80009b8:	2000809b 	.word	0x2000809b
 80009bc:	20000028 	.word	0x20000028
 80009c0:	20000091 	.word	0x20000091
 80009c4:	20008098 	.word	0x20008098

080009c8 <cpx>:
static void cpx() {
 80009c8:	b510      	push	{r4, lr}
    value = getvalue();
 80009ca:	f7ff ff55 	bl	8000878 <getvalue>
    result = (ushort)x - value;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <cpx+0x48>)
    if (x >= (uint8)(value & 0x00FF)) setcarry();
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <cpx+0x4c>)
    result = (ushort)x - value;
 80009d2:	781c      	ldrb	r4, [r3, #0]
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <cpx+0x50>)
 80009d6:	1a21      	subs	r1, r4, r0
    if (x >= (uint8)(value & 0x00FF)) setcarry();
 80009d8:	b2c0      	uxtb	r0, r0
    result = (ushort)x - value;
 80009da:	b289      	uxth	r1, r1
    if (x >= (uint8)(value & 0x00FF)) setcarry();
 80009dc:	4284      	cmp	r4, r0
    result = (ushort)x - value;
 80009de:	8019      	strh	r1, [r3, #0]
    if (x >= (uint8)(value & 0x00FF)) setcarry();
 80009e0:	7813      	ldrb	r3, [r2, #0]
 80009e2:	d307      	bcc.n	80009f4 <cpx+0x2c>
 80009e4:	f043 0001 	orr.w	r0, r3, #1
 80009e8:	7010      	strb	r0, [r2, #0]
    if (x == (uint8)(value & 0x00FF)) setzero();
 80009ea:	d007      	beq.n	80009fc <cpx+0x34>
        else clearzero();
 80009ec:	7813      	ldrb	r3, [r2, #0]
 80009ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80009f2:	e005      	b.n	8000a00 <cpx+0x38>
        else clearcarry();
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	7013      	strb	r3, [r2, #0]
    if (x == (uint8)(value & 0x00FF)) setzero();
 80009fa:	e7f7      	b.n	80009ec <cpx+0x24>
 80009fc:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000a00:	0609      	lsls	r1, r1, #24
 8000a02:	bf4c      	ite	mi
 8000a04:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000a08:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000a0c:	7013      	strb	r3, [r2, #0]
}
 8000a0e:	bd10      	pop	{r4, pc}
 8000a10:	2000809c 	.word	0x2000809c
 8000a14:	2000809b 	.word	0x2000809b
 8000a18:	20008098 	.word	0x20008098

08000a1c <cmp>:
    penaltyop = 1;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <cmp+0x50>)
static void cmp() {
 8000a20:	b510      	push	{r4, lr}
    penaltyop = 1;
 8000a22:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000a24:	f7ff ff28 	bl	8000878 <getvalue>
    result = (ushort)a - value;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <cmp+0x54>)
    if (a >= (uint8)(value & 0x00FF)) setcarry();
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <cmp+0x58>)
    result = (ushort)a - value;
 8000a2c:	781c      	ldrb	r4, [r3, #0]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <cmp+0x5c>)
 8000a30:	1a21      	subs	r1, r4, r0
    if (a >= (uint8)(value & 0x00FF)) setcarry();
 8000a32:	b2c0      	uxtb	r0, r0
    result = (ushort)a - value;
 8000a34:	b289      	uxth	r1, r1
    if (a >= (uint8)(value & 0x00FF)) setcarry();
 8000a36:	4284      	cmp	r4, r0
    result = (ushort)a - value;
 8000a38:	8019      	strh	r1, [r3, #0]
    if (a >= (uint8)(value & 0x00FF)) setcarry();
 8000a3a:	7813      	ldrb	r3, [r2, #0]
 8000a3c:	d307      	bcc.n	8000a4e <cmp+0x32>
 8000a3e:	f043 0001 	orr.w	r0, r3, #1
 8000a42:	7010      	strb	r0, [r2, #0]
    if (a == (uint8)(value & 0x00FF)) setzero();
 8000a44:	d007      	beq.n	8000a56 <cmp+0x3a>
        else clearzero();
 8000a46:	7813      	ldrb	r3, [r2, #0]
 8000a48:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000a4c:	e005      	b.n	8000a5a <cmp+0x3e>
        else clearcarry();
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	7013      	strb	r3, [r2, #0]
    if (a == (uint8)(value & 0x00FF)) setzero();
 8000a54:	e7f7      	b.n	8000a46 <cmp+0x2a>
 8000a56:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000a5a:	0609      	lsls	r1, r1, #24
 8000a5c:	bf4c      	ite	mi
 8000a5e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000a62:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000a66:	7013      	strb	r3, [r2, #0]
}
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000091 	.word	0x20000091
 8000a70:	20000028 	.word	0x20000028
 8000a74:	2000809b 	.word	0x2000809b
 8000a78:	20008098 	.word	0x20008098

08000a7c <cpy>:
static void cpy() {
 8000a7c:	b510      	push	{r4, lr}
    value = getvalue();
 8000a7e:	f7ff fefb 	bl	8000878 <getvalue>
    result = (ushort)y - value;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <cpy+0x48>)
    if (y >= (uint8)(value & 0x00FF)) setcarry();
 8000a84:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <cpy+0x4c>)
    result = (ushort)y - value;
 8000a86:	781c      	ldrb	r4, [r3, #0]
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <cpy+0x50>)
 8000a8a:	1a21      	subs	r1, r4, r0
    if (y >= (uint8)(value & 0x00FF)) setcarry();
 8000a8c:	b2c0      	uxtb	r0, r0
    result = (ushort)y - value;
 8000a8e:	b289      	uxth	r1, r1
    if (y >= (uint8)(value & 0x00FF)) setcarry();
 8000a90:	4284      	cmp	r4, r0
    result = (ushort)y - value;
 8000a92:	8019      	strh	r1, [r3, #0]
    if (y >= (uint8)(value & 0x00FF)) setcarry();
 8000a94:	7813      	ldrb	r3, [r2, #0]
 8000a96:	d307      	bcc.n	8000aa8 <cpy+0x2c>
 8000a98:	f043 0001 	orr.w	r0, r3, #1
 8000a9c:	7010      	strb	r0, [r2, #0]
    if (y == (uint8)(value & 0x00FF)) setzero();
 8000a9e:	d007      	beq.n	8000ab0 <cpy+0x34>
        else clearzero();
 8000aa0:	7813      	ldrb	r3, [r2, #0]
 8000aa2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000aa6:	e005      	b.n	8000ab4 <cpy+0x38>
        else clearcarry();
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	7013      	strb	r3, [r2, #0]
    if (y == (uint8)(value & 0x00FF)) setzero();
 8000aae:	e7f7      	b.n	8000aa0 <cpy+0x24>
 8000ab0:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000ab4:	0609      	lsls	r1, r1, #24
 8000ab6:	bf4c      	ite	mi
 8000ab8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000abc:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000ac0:	7013      	strb	r3, [r2, #0]
}
 8000ac2:	bd10      	pop	{r4, pc}
 8000ac4:	2000809d 	.word	0x2000809d
 8000ac8:	2000809b 	.word	0x2000809b
 8000acc:	20008098 	.word	0x20008098

08000ad0 <ldx>:
    penaltyop = 1;
 8000ad0:	2201      	movs	r2, #1
static void ldx() {
 8000ad2:	b508      	push	{r3, lr}
    penaltyop = 1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <ldx+0x38>)
 8000ad6:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000ad8:	f7ff fece 	bl	8000878 <getvalue>
    x = (uint8)(value & 0x00FF);
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <ldx+0x3c>)
    zerocalc(x);
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <ldx+0x40>)
    x = (uint8)(value & 0x00FF);
 8000ae0:	b2c1      	uxtb	r1, r0
 8000ae2:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 8000ae4:	7813      	ldrb	r3, [r2, #0]
 8000ae6:	b141      	cbz	r1, 8000afa <ldx+0x2a>
 8000ae8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000aec:	0601      	lsls	r1, r0, #24
 8000aee:	7013      	strb	r3, [r2, #0]
 8000af0:	d506      	bpl.n	8000b00 <ldx+0x30>
}
 8000af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000af6:	f7ff bd0b 	b.w	8000510 <dex.part.0>
    zerocalc(x);
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	e7f5      	b.n	8000aec <ldx+0x1c>
    signcalc(x);
 8000b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b04:	7013      	strb	r3, [r2, #0]
}
 8000b06:	bd08      	pop	{r3, pc}
 8000b08:	20000091 	.word	0x20000091
 8000b0c:	2000809c 	.word	0x2000809c
 8000b10:	2000809b 	.word	0x2000809b

08000b14 <lda>:
    penaltyop = 1;
 8000b14:	2201      	movs	r2, #1
static void lda() {
 8000b16:	b508      	push	{r3, lr}
    penaltyop = 1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <lda+0x38>)
 8000b1a:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000b1c:	f7ff feac 	bl	8000878 <getvalue>
    a = (uint8)(value & 0x00FF);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <lda+0x3c>)
    zerocalc(a);
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <lda+0x40>)
    a = (uint8)(value & 0x00FF);
 8000b24:	b2c1      	uxtb	r1, r0
 8000b26:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	b141      	cbz	r1, 8000b3e <lda+0x2a>
 8000b2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8000b30:	0601      	lsls	r1, r0, #24
 8000b32:	7013      	strb	r3, [r2, #0]
 8000b34:	d506      	bpl.n	8000b44 <lda+0x30>
}
 8000b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b3a:	f7ff bce9 	b.w	8000510 <dex.part.0>
    zerocalc(a);
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	e7f5      	b.n	8000b30 <lda+0x1c>
    signcalc(a);
 8000b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b48:	7013      	strb	r3, [r2, #0]
}
 8000b4a:	bd08      	pop	{r3, pc}
 8000b4c:	20000091 	.word	0x20000091
 8000b50:	20000028 	.word	0x20000028
 8000b54:	2000809b 	.word	0x2000809b

08000b58 <lax>:
    static void lax() {
 8000b58:	b508      	push	{r3, lr}
        lda();
 8000b5a:	f7ff ffdb 	bl	8000b14 <lda>
    }
 8000b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ldx();
 8000b62:	f7ff bfb5 	b.w	8000ad0 <ldx>
	...

08000b68 <ldy>:
    penaltyop = 1;
 8000b68:	2201      	movs	r2, #1
static void ldy() {
 8000b6a:	b508      	push	{r3, lr}
    penaltyop = 1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <ldy+0x38>)
 8000b6e:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000b70:	f7ff fe82 	bl	8000878 <getvalue>
    y = (uint8)(value & 0x00FF);
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <ldy+0x3c>)
    zerocalc(y);
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <ldy+0x40>)
    y = (uint8)(value & 0x00FF);
 8000b78:	b2c1      	uxtb	r1, r0
 8000b7a:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 8000b7c:	7813      	ldrb	r3, [r2, #0]
 8000b7e:	b141      	cbz	r1, 8000b92 <ldy+0x2a>
 8000b80:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000b84:	0601      	lsls	r1, r0, #24
 8000b86:	7013      	strb	r3, [r2, #0]
 8000b88:	d506      	bpl.n	8000b98 <ldy+0x30>
}
 8000b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b8e:	f7ff bcbf 	b.w	8000510 <dex.part.0>
    zerocalc(y);
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	e7f5      	b.n	8000b84 <ldy+0x1c>
    signcalc(y);
 8000b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b9c:	7013      	strb	r3, [r2, #0]
}
 8000b9e:	bd08      	pop	{r3, pc}
 8000ba0:	20000091 	.word	0x20000091
 8000ba4:	2000809d 	.word	0x2000809d
 8000ba8:	2000809b 	.word	0x2000809b

08000bac <adc>:
    penaltyop = 1;
 8000bac:	2201      	movs	r2, #1
static void adc() {
 8000bae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (status & FLAG_DECIMAL) {
 8000bb2:	4e3b      	ldr	r6, [pc, #236]	; (8000ca0 <adc+0xf4>)
        A = a;
 8000bb4:	4d3b      	ldr	r5, [pc, #236]	; (8000ca4 <adc+0xf8>)
    if (status & FLAG_DECIMAL) {
 8000bb6:	7831      	ldrb	r1, [r6, #0]
    penaltyop = 1;
 8000bb8:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <adc+0xfc>)
        A = a;
 8000bba:	f895 8000 	ldrb.w	r8, [r5]
        result_dec = (ushort)A + value + (ushort)(status & FLAG_CARRY); /*dec*/
 8000bbe:	ea01 0402 	and.w	r4, r1, r2
    if (status & FLAG_DECIMAL) {
 8000bc2:	f011 0f08 	tst.w	r1, #8
 8000bc6:	4f39      	ldr	r7, [pc, #228]	; (8000cac <adc+0x100>)
    penaltyop = 1;
 8000bc8:	701a      	strb	r2, [r3, #0]
    if (status & FLAG_DECIMAL) {
 8000bca:	eb04 0908 	add.w	r9, r4, r8
 8000bce:	d041      	beq.n	8000c54 <adc+0xa8>
        value = getvalue();
 8000bd0:	f7ff fe52 	bl	8000878 <getvalue>
        AL = (A & 0x0F) + (value & 0x0F) + (ushort)(status & FLAG_CARRY);  /*SEQ 1A OR 2A*/
 8000bd4:	f008 030f 	and.w	r3, r8, #15
 8000bd8:	4423      	add	r3, r4
 8000bda:	f000 040f 	and.w	r4, r0, #15
 8000bde:	4423      	add	r3, r4
        if(AL >= 0xA) AL = ((AL + 0x06) & 0x0F) + 0x10; /*SEQ 1B OR SEQ 2B*/
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	bf84      	itt	hi
 8000be4:	3306      	addhi	r3, #6
 8000be6:	f003 030f 	andhi.w	r3, r3, #15
        result_dec = (ushort)A + value + (ushort)(status & FLAG_CARRY); /*dec*/
 8000bea:	eb00 0209 	add.w	r2, r0, r9
        A = (A & 0xF0) + (value & 0xF0) + AL; /*SEQ2C OR SEQ 1C*/
 8000bee:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
 8000bf2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
        if(AL >= 0xA) AL = ((AL + 0x06) & 0x0F) + 0x10; /*SEQ 1B OR SEQ 2B*/
 8000bf6:	bf88      	it	hi
 8000bf8:	3310      	addhi	r3, #16
        A = (A & 0xF0) + (value & 0xF0) + AL; /*SEQ2C OR SEQ 1C*/
 8000bfa:	4440      	add	r0, r8
 8000bfc:	4403      	add	r3, r0
        if(A & 0x80) setsign(); else clearsign(); /*SEQ 2E it says "bit 7"*/
 8000bfe:	061c      	lsls	r4, r3, #24
 8000c00:	bf4c      	ite	mi
 8000c02:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 8000c06:	f001 017f 	andpl.w	r1, r1, #127	; 0x7f
        if(A >= 0xA0) A += 0x60; /*SEQ 1E*/
 8000c0a:	2b9f      	cmp	r3, #159	; 0x9f
 8000c0c:	bf84      	itt	hi
 8000c0e:	3360      	addhi	r3, #96	; 0x60
 8000c10:	b29b      	uxthhi	r3, r3
        if(A & 0xff80) setoverflow();else clearoverflow();
 8000c12:	f023 007f 	bic.w	r0, r3, #127	; 0x7f
 8000c16:	b280      	uxth	r0, r0
        result_dec = (ushort)A + value + (ushort)(status & FLAG_CARRY); /*dec*/
 8000c18:	b292      	uxth	r2, r2
        result = A; /*1F*/
 8000c1a:	803b      	strh	r3, [r7, #0]
        if(A & 0xff80) setoverflow();else clearoverflow();
 8000c1c:	b140      	cbz	r0, 8000c30 <adc+0x84>
 8000c1e:	f041 0040 	orr.w	r0, r1, #64	; 0x40
        if(A >= 0x100) setcarry(); else clearcarry(); /*SEQ 1G*/
 8000c22:	2bff      	cmp	r3, #255	; 0xff
        if(A & 0xff80) setoverflow();else clearoverflow();
 8000c24:	7030      	strb	r0, [r6, #0]
        if(A >= 0x100) setcarry(); else clearcarry(); /*SEQ 1G*/
 8000c26:	d807      	bhi.n	8000c38 <adc+0x8c>
 8000c28:	7831      	ldrb	r1, [r6, #0]
 8000c2a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000c2e:	e005      	b.n	8000c3c <adc+0x90>
        if(A & 0xff80) setoverflow();else clearoverflow();
 8000c30:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000c34:	7031      	strb	r1, [r6, #0]
        if(A >= 0x100) setcarry(); else clearcarry(); /*SEQ 1G*/
 8000c36:	e7f7      	b.n	8000c28 <adc+0x7c>
 8000c38:	f041 0141 	orr.w	r1, r1, #65	; 0x41
        zerocalc(result_dec); /*Original nmos does zerocalc on the binary result.*/
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	b132      	cbz	r2, 8000c4e <adc+0xa2>
 8000c40:	f021 0102 	bic.w	r1, r1, #2
    saveaccum(result);
 8000c44:	883b      	ldrh	r3, [r7, #0]
        signcalc(result);
 8000c46:	7031      	strb	r1, [r6, #0]
    saveaccum(result);
 8000c48:	702b      	strb	r3, [r5, #0]
}
 8000c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        zerocalc(result_dec); /*Original nmos does zerocalc on the binary result.*/
 8000c4e:	f041 0102 	orr.w	r1, r1, #2
 8000c52:	e7f7      	b.n	8000c44 <adc+0x98>
        value = getvalue();
 8000c54:	f7ff fe10 	bl	8000878 <getvalue>
        result = (ushort)a + value + (ushort)(status & FLAG_CARRY);
 8000c58:	eb00 0209 	add.w	r2, r0, r9
 8000c5c:	b292      	uxth	r2, r2
        carrycalc(result);
 8000c5e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
        zerocalc(result);
 8000c62:	b2d3      	uxtb	r3, r2
        result = (ushort)a + value + (ushort)(status & FLAG_CARRY);
 8000c64:	803a      	strh	r2, [r7, #0]
        carrycalc(result);
 8000c66:	bf14      	ite	ne
 8000c68:	f041 0101 	orrne.w	r1, r1, #1
 8000c6c:	f001 01fe 	andeq.w	r1, r1, #254	; 0xfe
        zerocalc(result);
 8000c70:	b19b      	cbz	r3, 8000c9a <adc+0xee>
 8000c72:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
        overflowcalc(result, a, value);
 8000c76:	ea88 0802 	eor.w	r8, r8, r2
 8000c7a:	4050      	eors	r0, r2
 8000c7c:	ea00 0008 	and.w	r0, r0, r8
 8000c80:	0600      	lsls	r0, r0, #24
 8000c82:	bf4c      	ite	mi
 8000c84:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
 8000c88:	f001 01bf 	andpl.w	r1, r1, #191	; 0xbf
        signcalc(result);
 8000c8c:	0613      	lsls	r3, r2, #24
 8000c8e:	bf4c      	ite	mi
 8000c90:	f061 017f 	ornmi	r1, r1, #127	; 0x7f
 8000c94:	f001 017f 	andpl.w	r1, r1, #127	; 0x7f
 8000c98:	e7d4      	b.n	8000c44 <adc+0x98>
        zerocalc(result);
 8000c9a:	f041 0102 	orr.w	r1, r1, #2
 8000c9e:	e7ea      	b.n	8000c76 <adc+0xca>
 8000ca0:	2000809b 	.word	0x2000809b
 8000ca4:	20000028 	.word	0x20000028
 8000ca8:	20000091 	.word	0x20000091
 8000cac:	20008098 	.word	0x20008098

08000cb0 <eor>:
    penaltyop = 1;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <eor+0x3c>)
static void eor() {
 8000cb4:	b510      	push	{r4, lr}
    penaltyop = 1;
 8000cb6:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000cb8:	f7ff fdde 	bl	8000878 <getvalue>
    result = (ushort)a ^ value;
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <eor+0x40>)
    zerocalc(result);
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <eor+0x44>)
    result = (ushort)a ^ value;
 8000cc0:	7813      	ldrb	r3, [r2, #0]
 8000cc2:	4058      	eors	r0, r3
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <eor+0x48>)
    zerocalc(result);
 8000cc8:	b2c4      	uxtb	r4, r0
    result = (ushort)a ^ value;
 8000cca:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000ccc:	780b      	ldrb	r3, [r1, #0]
 8000cce:	b154      	cbz	r4, 8000ce6 <eor+0x36>
 8000cd0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000cd4:	0604      	lsls	r4, r0, #24
 8000cd6:	bf4c      	ite	mi
 8000cd8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000cdc:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000ce0:	700b      	strb	r3, [r1, #0]
    saveaccum(result);
 8000ce2:	7010      	strb	r0, [r2, #0]
}
 8000ce4:	bd10      	pop	{r4, pc}
    zerocalc(result);
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	e7f3      	b.n	8000cd4 <eor+0x24>
 8000cec:	20000091 	.word	0x20000091
 8000cf0:	20000028 	.word	0x20000028
 8000cf4:	2000809b 	.word	0x2000809b
 8000cf8:	20008098 	.word	0x20008098

08000cfc <bit>:
static void bit() {
 8000cfc:	b508      	push	{r3, lr}
    value = getvalue();
 8000cfe:	f7ff fdbb 	bl	8000878 <getvalue>
    result = (ushort)a & value;
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <bit+0x30>)
    zerocalc(result);
 8000d04:	490a      	ldr	r1, [pc, #40]	; (8000d30 <bit+0x34>)
    result = (ushort)a & value;
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <bit+0x38>)
 8000d0a:	4002      	ands	r2, r0
 8000d0c:	801a      	strh	r2, [r3, #0]
    zerocalc(result);
 8000d0e:	780b      	ldrb	r3, [r1, #0]
 8000d10:	b142      	cbz	r2, 8000d24 <bit+0x28>
 8000d12:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    status = (status & 0x3F) | (uint8)(value & 0xC0);
 8000d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	700b      	strb	r3, [r1, #0]
}
 8000d22:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	e7f5      	b.n	8000d16 <bit+0x1a>
 8000d2a:	bf00      	nop
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	2000809b 	.word	0x2000809b
 8000d34:	20008098 	.word	0x20008098

08000d38 <and>:
    penaltyop = 1;
 8000d38:	2201      	movs	r2, #1
static void and() {
 8000d3a:	b508      	push	{r3, lr}
    penaltyop = 1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <and+0x44>)
    result = (ushort)a & value;
 8000d3e:	4910      	ldr	r1, [pc, #64]	; (8000d80 <and+0x48>)
    penaltyop = 1;
 8000d40:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000d42:	f7ff fd99 	bl	8000878 <getvalue>
    result = (ushort)a & value;
 8000d46:	780b      	ldrb	r3, [r1, #0]
    zerocalc(result);
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <and+0x4c>)
    result = (ushort)a & value;
 8000d4a:	4018      	ands	r0, r3
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <and+0x50>)
 8000d4e:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000d50:	7813      	ldrb	r3, [r2, #0]
 8000d52:	b148      	cbz	r0, 8000d68 <and+0x30>
 8000d54:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000d58:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 8000d5c:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000d5e:	d107      	bne.n	8000d70 <and+0x38>
 8000d60:	7813      	ldrb	r3, [r2, #0]
 8000d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d66:	e005      	b.n	8000d74 <and+0x3c>
    zerocalc(result);
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000d6e:	e7f7      	b.n	8000d60 <and+0x28>
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8000d76:	7008      	strb	r0, [r1, #0]
}
 8000d78:	bd08      	pop	{r3, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000091 	.word	0x20000091
 8000d80:	20000028 	.word	0x20000028
 8000d84:	2000809b 	.word	0x2000809b
 8000d88:	20008098 	.word	0x20008098

08000d8c <ora>:
    penaltyop = 1;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <ora+0x3c>)
static void ora() {
 8000d90:	b510      	push	{r4, lr}
    penaltyop = 1;
 8000d92:	701a      	strb	r2, [r3, #0]
    value = getvalue();
 8000d94:	f7ff fd70 	bl	8000878 <getvalue>
    result = (ushort)a | value;
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <ora+0x40>)
    zerocalc(result);
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <ora+0x44>)
    result = (ushort)a | value;
 8000d9c:	7813      	ldrb	r3, [r2, #0]
 8000d9e:	4318      	orrs	r0, r3
 8000da0:	b280      	uxth	r0, r0
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <ora+0x48>)
    zerocalc(result);
 8000da4:	b2c4      	uxtb	r4, r0
    result = (ushort)a | value;
 8000da6:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000da8:	780b      	ldrb	r3, [r1, #0]
 8000daa:	b154      	cbz	r4, 8000dc2 <ora+0x36>
 8000dac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000db0:	0604      	lsls	r4, r0, #24
 8000db2:	bf4c      	ite	mi
 8000db4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000db8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000dbc:	700b      	strb	r3, [r1, #0]
    saveaccum(result);
 8000dbe:	7010      	strb	r0, [r2, #0]
}
 8000dc0:	bd10      	pop	{r4, pc}
    zerocalc(result);
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	e7f3      	b.n	8000db0 <ora+0x24>
 8000dc8:	20000091 	.word	0x20000091
 8000dcc:	20000028 	.word	0x20000028
 8000dd0:	2000809b 	.word	0x2000809b
 8000dd4:	20008098 	.word	0x20008098

08000dd8 <pull_6502_8>:
    return (read6502(BASE_STACK + ++sp));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <pull_6502_8+0x14>)
 8000dda:	7818      	ldrb	r0, [r3, #0]
 8000ddc:	3001      	adds	r0, #1
 8000dde:	b2c0      	uxtb	r0, r0
 8000de0:	7018      	strb	r0, [r3, #0]
 8000de2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000de6:	f7ff bcad 	b.w	8000744 <read6502>
 8000dea:	bf00      	nop
 8000dec:	2000809a 	.word	0x2000809a

08000df0 <pla>:
static void pla() {
 8000df0:	b508      	push	{r3, lr}
    a = pull_6502_8();
 8000df2:	f7ff fff1 	bl	8000dd8 <pull_6502_8>
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <pla+0x30>)
    zerocalc(a);
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <pla+0x34>)
    a = pull_6502_8();
 8000dfa:	7018      	strb	r0, [r3, #0]
    zerocalc(a);
 8000dfc:	7813      	ldrb	r3, [r2, #0]
 8000dfe:	b140      	cbz	r0, 8000e12 <pla+0x22>
 8000e00:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8000e04:	0601      	lsls	r1, r0, #24
 8000e06:	7013      	strb	r3, [r2, #0]
 8000e08:	d506      	bpl.n	8000e18 <pla+0x28>
}
 8000e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e0e:	f7ff bb7f 	b.w	8000510 <dex.part.0>
    zerocalc(a);
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	e7f5      	b.n	8000e04 <pla+0x14>
    signcalc(a);
 8000e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e1c:	7013      	strb	r3, [r2, #0]
}
 8000e1e:	bd08      	pop	{r3, pc}
 8000e20:	20000028 	.word	0x20000028
 8000e24:	2000809b 	.word	0x2000809b

08000e28 <plp>:
static void plp() {
 8000e28:	b508      	push	{r3, lr}
    status = pull_6502_8() | FLAG_CONSTANT;
 8000e2a:	f7ff ffd5 	bl	8000dd8 <pull_6502_8>
 8000e2e:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <plp+0x10>)
 8000e30:	f040 0020 	orr.w	r0, r0, #32
 8000e34:	7018      	strb	r0, [r3, #0]
}
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	2000809b 	.word	0x2000809b

08000e3c <pull_6502_16>:
static ushort pull_6502_16() {
 8000e3c:	b570      	push	{r4, r5, r6, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((ushort)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000e3e:	4d0b      	ldr	r5, [pc, #44]	; (8000e6c <pull_6502_16+0x30>)
 8000e40:	782e      	ldrb	r6, [r5, #0]
 8000e42:	1c70      	adds	r0, r6, #1
 8000e44:	4631      	mov	r1, r6
 8000e46:	b2c0      	uxtb	r0, r0
 8000e48:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000e4c:	f7ff fc7a 	bl	8000744 <read6502>
 8000e50:	3102      	adds	r1, #2
 8000e52:	b2c9      	uxtb	r1, r1
 8000e54:	4604      	mov	r4, r0
 8000e56:	f501 7080 	add.w	r0, r1, #256	; 0x100
 8000e5a:	f7ff fc73 	bl	8000744 <read6502>
    sp += 2;
 8000e5e:	3602      	adds	r6, #2
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((ushort)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000e60:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8000e64:	702e      	strb	r6, [r5, #0]
}
 8000e66:	b280      	uxth	r0, r0
 8000e68:	bd70      	pop	{r4, r5, r6, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000809a 	.word	0x2000809a

08000e70 <rts>:
static void rts() {
 8000e70:	b508      	push	{r3, lr}
    value = pull_6502_16();
 8000e72:	f7ff ffe3 	bl	8000e3c <pull_6502_16>
    pc = value + 1;
 8000e76:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <rts+0x10>)
 8000e78:	3001      	adds	r0, #1
 8000e7a:	8018      	strh	r0, [r3, #0]
}
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000008e 	.word	0x2000008e

08000e84 <rti>:
static void rti() {
 8000e84:	b508      	push	{r3, lr}
    status = pull_6502_8();
 8000e86:	f7ff ffa7 	bl	8000dd8 <pull_6502_8>
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <rti+0x14>)
 8000e8c:	7018      	strb	r0, [r3, #0]
    value = pull_6502_16();
 8000e8e:	f7ff ffd5 	bl	8000e3c <pull_6502_16>
    pc = value;
 8000e92:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <rti+0x18>)
 8000e94:	8018      	strh	r0, [r3, #0]
}
 8000e96:	bd08      	pop	{r3, pc}
 8000e98:	2000809b 	.word	0x2000809b
 8000e9c:	2000008e 	.word	0x2000008e

08000ea0 <zpy>:
static void zpy() { /*zero-page,Y*/
 8000ea0:	b508      	push	{r3, lr}
    ea = ((ushort)read6502((ushort)pc++) + (ushort)y) & 0xFF; /*zero-page wraparound*/
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <zpy+0x1c>)
 8000ea4:	8818      	ldrh	r0, [r3, #0]
 8000ea6:	1c42      	adds	r2, r0, #1
 8000ea8:	801a      	strh	r2, [r3, #0]
 8000eaa:	f7ff fc4b 	bl	8000744 <read6502>
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <zpy+0x20>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4418      	add	r0, r3
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <zpy+0x24>)
 8000eb6:	b2c0      	uxtb	r0, r0
 8000eb8:	8018      	strh	r0, [r3, #0]
}
 8000eba:	bd08      	pop	{r3, pc}
 8000ebc:	2000008e 	.word	0x2000008e
 8000ec0:	2000809d 	.word	0x2000809d
 8000ec4:	20000034 	.word	0x20000034

08000ec8 <ind>:
static void ind() { /*indirect*/
 8000ec8:	b570      	push	{r4, r5, r6, lr}
    eahelp = (ushort)read6502(pc) | (ushort)((ushort)read6502(pc+1) << 8);
 8000eca:	4e0f      	ldr	r6, [pc, #60]	; (8000f08 <ind+0x40>)
 8000ecc:	8834      	ldrh	r4, [r6, #0]
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff fc38 	bl	8000744 <read6502>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	1c60      	adds	r0, r4, #1
 8000ed8:	b280      	uxth	r0, r0
 8000eda:	f7ff fc33 	bl	8000744 <read6502>
 8000ede:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8000ee2:	b289      	uxth	r1, r1
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	f7ff fc2d 	bl	8000744 <read6502>
 8000eea:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); /*replicate 6502 page-boundary wraparound bug*/
 8000eec:	1c48      	adds	r0, r1, #1
 8000eee:	b2c0      	uxtb	r0, r0
 8000ef0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8000ef4:	4308      	orrs	r0, r1
 8000ef6:	f7ff fc25 	bl	8000744 <read6502>
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <ind+0x44>)
 8000efc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    pc += 2;
 8000f00:	3402      	adds	r4, #2
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8000f02:	801d      	strh	r5, [r3, #0]
    pc += 2;
 8000f04:	8034      	strh	r4, [r6, #0]
}
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	2000008e 	.word	0x2000008e
 8000f0c:	20000034 	.word	0x20000034

08000f10 <absx>:
static void absx() { /*absolute,X*/
 8000f10:	b538      	push	{r3, r4, r5, lr}
    ea = ((ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8));
 8000f12:	4d10      	ldr	r5, [pc, #64]	; (8000f54 <absx+0x44>)
 8000f14:	882c      	ldrh	r4, [r5, #0]
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fc14 	bl	8000744 <read6502>
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	1c60      	adds	r0, r4, #1
 8000f20:	b280      	uxth	r0, r0
 8000f22:	f7ff fc0f 	bl	8000744 <read6502>
    ea += (ushort)x;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <absx+0x48>)
    ea = ((ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8));
 8000f28:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    ea += (ushort)x;
 8000f2c:	781b      	ldrb	r3, [r3, #0]
    ea = ((ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8));
 8000f2e:	b280      	uxth	r0, r0
    ea += (ushort)x;
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <absx+0x4c>)
 8000f32:	4403      	add	r3, r0
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	8013      	strh	r3, [r2, #0]
    if (startpage != (ea & 0xFF00)) { /*one cycle penlty for page-crossing on some opcodes*/
 8000f38:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f40:	4298      	cmp	r0, r3
        penaltyaddr = 1;
 8000f42:	bf1c      	itt	ne
 8000f44:	2201      	movne	r2, #1
 8000f46:	4b06      	ldrne	r3, [pc, #24]	; (8000f60 <absx+0x50>)
    pc += 2;
 8000f48:	f104 0402 	add.w	r4, r4, #2
        penaltyaddr = 1;
 8000f4c:	bf18      	it	ne
 8000f4e:	701a      	strbne	r2, [r3, #0]
    pc += 2;
 8000f50:	802c      	strh	r4, [r5, #0]
}
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	2000008e 	.word	0x2000008e
 8000f58:	2000809c 	.word	0x2000809c
 8000f5c:	20000034 	.word	0x20000034
 8000f60:	20000090 	.word	0x20000090

08000f64 <absy>:
static void absy() { /*absolute,Y*/
 8000f64:	b538      	push	{r3, r4, r5, lr}
    ea = ((ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8));
 8000f66:	4d10      	ldr	r5, [pc, #64]	; (8000fa8 <absy+0x44>)
 8000f68:	882c      	ldrh	r4, [r5, #0]
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f7ff fbea 	bl	8000744 <read6502>
 8000f70:	4601      	mov	r1, r0
 8000f72:	1c60      	adds	r0, r4, #1
 8000f74:	b280      	uxth	r0, r0
 8000f76:	f7ff fbe5 	bl	8000744 <read6502>
    ea += (ushort)y;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <absy+0x48>)
    ea = ((ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8));
 8000f7c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    ea += (ushort)y;
 8000f80:	781b      	ldrb	r3, [r3, #0]
    ea = ((ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8));
 8000f82:	b280      	uxth	r0, r0
    ea += (ushort)y;
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <absy+0x4c>)
 8000f86:	4403      	add	r3, r0
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	8013      	strh	r3, [r2, #0]
    if (startpage != (ea & 0xFF00)) { /*one cycle penlty for page-crossing on some opcodes*/
 8000f8c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000f90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f94:	4298      	cmp	r0, r3
        penaltyaddr = 1;
 8000f96:	bf1c      	itt	ne
 8000f98:	2201      	movne	r2, #1
 8000f9a:	4b06      	ldrne	r3, [pc, #24]	; (8000fb4 <absy+0x50>)
    pc += 2;
 8000f9c:	f104 0402 	add.w	r4, r4, #2
        penaltyaddr = 1;
 8000fa0:	bf18      	it	ne
 8000fa2:	701a      	strbne	r2, [r3, #0]
    pc += 2;
 8000fa4:	802c      	strh	r4, [r5, #0]
}
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	2000008e 	.word	0x2000008e
 8000fac:	2000809d 	.word	0x2000809d
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	20000090 	.word	0x20000090

08000fb8 <zpx>:
static void zpx() { /*zero-page,X*/
 8000fb8:	b508      	push	{r3, lr}
    ea = ((ushort)read6502((ushort)pc++) + (ushort)x) & 0xFF; /*zero-page wraparound*/
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <zpx+0x1c>)
 8000fbc:	8818      	ldrh	r0, [r3, #0]
 8000fbe:	1c42      	adds	r2, r0, #1
 8000fc0:	801a      	strh	r2, [r3, #0]
 8000fc2:	f7ff fbbf 	bl	8000744 <read6502>
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <zpx+0x20>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4418      	add	r0, r3
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <zpx+0x24>)
 8000fce:	b2c0      	uxtb	r0, r0
 8000fd0:	8018      	strh	r0, [r3, #0]
}
 8000fd2:	bd08      	pop	{r3, pc}
 8000fd4:	2000008e 	.word	0x2000008e
 8000fd8:	2000809c 	.word	0x2000809c
 8000fdc:	20000034 	.word	0x20000034

08000fe0 <indy>:
    eahelp = (ushort)read6502(pc++);
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <indy+0x48>)
static void indy() { /* (indirect),Y*/
 8000fe2:	b510      	push	{r4, lr}
    eahelp = (ushort)read6502(pc++);
 8000fe4:	8818      	ldrh	r0, [r3, #0]
 8000fe6:	1c42      	adds	r2, r0, #1
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	f7ff fbab 	bl	8000744 <read6502>
 8000fee:	b284      	uxth	r4, r0
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff fba7 	bl	8000744 <read6502>
 8000ff6:	4601      	mov	r1, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); /*zero-page wraparound*/
 8000ff8:	1c60      	adds	r0, r4, #1
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8000ffa:	b2c0      	uxtb	r0, r0
 8000ffc:	f7ff fba2 	bl	8000744 <read6502>
    ea += (ushort)y;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <indy+0x4c>)
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8001002:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    ea += (ushort)y;
 8001006:	781b      	ldrb	r3, [r3, #0]
    ea = (ushort)read6502(eahelp) | ((ushort)read6502(eahelp2) << 8);
 8001008:	b280      	uxth	r0, r0
    ea += (ushort)y;
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <indy+0x50>)
 800100c:	4403      	add	r3, r0
 800100e:	b29b      	uxth	r3, r3
 8001010:	8013      	strh	r3, [r2, #0]
    if (startpage != (ea & 0xFF00)) { /*one cycle penlty for page-crossing on some opcodes*/
 8001012:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8001016:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800101a:	4283      	cmp	r3, r0
        penaltyaddr = 1;
 800101c:	bf1e      	ittt	ne
 800101e:	2201      	movne	r2, #1
 8001020:	4b04      	ldrne	r3, [pc, #16]	; (8001034 <indy+0x54>)
 8001022:	701a      	strbne	r2, [r3, #0]
}
 8001024:	bd10      	pop	{r4, pc}
 8001026:	bf00      	nop
 8001028:	2000008e 	.word	0x2000008e
 800102c:	2000809d 	.word	0x2000809d
 8001030:	20000034 	.word	0x20000034
 8001034:	20000090 	.word	0x20000090

08001038 <rel>:
static void rel() { /*relative for branch ops (8-bit immediate value, sign-extended)*/
 8001038:	b508      	push	{r3, lr}
    reladdr = (ushort)read6502(pc++);
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <rel+0x20>)
 800103c:	8818      	ldrh	r0, [r3, #0]
 800103e:	1c42      	adds	r2, r0, #1
 8001040:	801a      	strh	r2, [r3, #0]
 8001042:	f7ff fb7f 	bl	8000744 <read6502>
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <rel+0x24>)
 8001048:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 800104a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800104e:	bf18      	it	ne
 8001050:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8001054:	8013      	strh	r3, [r2, #0]
}
 8001056:	bd08      	pop	{r3, pc}
 8001058:	2000008e 	.word	0x2000008e
 800105c:	20008096 	.word	0x20008096

08001060 <abso>:
static void abso() { /*absolute*/
 8001060:	b538      	push	{r3, r4, r5, lr}
    ea = (ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8);
 8001062:	4d08      	ldr	r5, [pc, #32]	; (8001084 <abso+0x24>)
 8001064:	8829      	ldrh	r1, [r5, #0]
 8001066:	4608      	mov	r0, r1
 8001068:	f7ff fb6c 	bl	8000744 <read6502>
 800106c:	4604      	mov	r4, r0
 800106e:	1c48      	adds	r0, r1, #1
 8001070:	b280      	uxth	r0, r0
 8001072:	f7ff fb67 	bl	8000744 <read6502>
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <abso+0x28>)
 8001078:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    pc += 2;
 800107c:	3102      	adds	r1, #2
    ea = (ushort)read6502(pc) | ((ushort)read6502(pc+1) << 8);
 800107e:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8001080:	8029      	strh	r1, [r5, #0]
}
 8001082:	bd38      	pop	{r3, r4, r5, pc}
 8001084:	2000008e 	.word	0x2000008e
 8001088:	20000034 	.word	0x20000034

0800108c <zp>:
static void zp() { /*zero-page*/
 800108c:	b508      	push	{r3, lr}
    ea = (ushort)read6502((ushort)pc++);
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <zp+0x14>)
 8001090:	8818      	ldrh	r0, [r3, #0]
 8001092:	1c42      	adds	r2, r0, #1
 8001094:	801a      	strh	r2, [r3, #0]
 8001096:	f7ff fb55 	bl	8000744 <read6502>
 800109a:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <zp+0x18>)
 800109c:	8018      	strh	r0, [r3, #0]
}
 800109e:	bd08      	pop	{r3, pc}
 80010a0:	2000008e 	.word	0x2000008e
 80010a4:	20000034 	.word	0x20000034

080010a8 <indx>:
    eahelp = (ushort)(((ushort)read6502(pc++) + (ushort)x) & 0xFF); /*zero-page wraparound for table pointer*/
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <indx+0x30>)
static void indx() { /* (indirect,X)*/
 80010aa:	b510      	push	{r4, lr}
    eahelp = (ushort)(((ushort)read6502(pc++) + (ushort)x) & 0xFF); /*zero-page wraparound for table pointer*/
 80010ac:	8818      	ldrh	r0, [r3, #0]
 80010ae:	1c42      	adds	r2, r0, #1
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	f7ff fb47 	bl	8000744 <read6502>
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <indx+0x34>)
 80010b8:	7819      	ldrb	r1, [r3, #0]
 80010ba:	4401      	add	r1, r0
 80010bc:	b2c9      	uxtb	r1, r1
    ea = (ushort)read6502(eahelp & 0x00FF) | ((ushort)read6502((eahelp+1) & 0x00FF) << 8);
 80010be:	4608      	mov	r0, r1
 80010c0:	f7ff fb40 	bl	8000744 <read6502>
 80010c4:	3101      	adds	r1, #1
 80010c6:	4604      	mov	r4, r0
 80010c8:	b2c8      	uxtb	r0, r1
 80010ca:	f7ff fb3b 	bl	8000744 <read6502>
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <indx+0x38>)
 80010d0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80010d4:	801c      	strh	r4, [r3, #0]
}
 80010d6:	bd10      	pop	{r4, pc}
 80010d8:	2000008e 	.word	0x2000008e
 80010dc:	2000809c 	.word	0x2000809c
 80010e0:	20000034 	.word	0x20000034

080010e4 <write6502>:
/**
 * Write to memory (MOS 6502)
 */
void write6502(uint16_t address, uint8_t value) {
  // RAM
  if (address < RAM_SIZE) {
 80010e4:	0403      	lsls	r3, r0, #16
 80010e6:	d402      	bmi.n	80010ee <write6502+0xa>
    ram[address] = value;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <write6502+0x3c>)
 80010ea:	5419      	strb	r1, [r3, r0]
    return;
 80010ec:	4770      	bx	lr
  }

  // PIA
  if (address >= PIA_START && address < 0xD013) {
 80010ee:	f500 533f 	add.w	r3, r0, #12224	; 0x2fc0
 80010f2:	3330      	adds	r3, #48	; 0x30
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d811      	bhi.n	800111e <write6502+0x3a>
    if (address == PIA_START) {
 80010fa:	f24d 0310 	movw	r3, #53264	; 0xd010
 80010fe:	4298      	cmp	r0, r3
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <write6502+0x40>)
 8001102:	d103      	bne.n	800110c <write6502+0x28>
      pia.keyboard_register = value;
      // Set keyboard register to 0xFF to indicate key pressed
      pia.keyboard_control = 0xFF;
 8001104:	22ff      	movs	r2, #255	; 0xff
      pia.keyboard_register = value;
 8001106:	7019      	strb	r1, [r3, #0]
      pia.keyboard_control = 0xFF;
 8001108:	705a      	strb	r2, [r3, #1]
 800110a:	4770      	bx	lr
    }
    else if (address == PIA_START + 1) {
 800110c:	f24d 0211 	movw	r2, #53265	; 0xd011
 8001110:	4290      	cmp	r0, r2
 8001112:	d101      	bne.n	8001118 <write6502+0x34>
      pia.keyboard_control = value;
 8001114:	7059      	strb	r1, [r3, #1]
 8001116:	4770      	bx	lr
    }
    else if (address == PIA_START + 2) {
      pia.display_register = value ^ 0x80;
 8001118:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 800111c:	7099      	strb	r1, [r3, #2]
    }
  }

}
 800111e:	4770      	bx	lr
 8001120:	20000095 	.word	0x20000095
 8001124:	20000092 	.word	0x20000092

08001128 <push_6502_16>:
static void push_6502_16(ushort pushval) {
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112a:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 800112c:	4e08      	ldr	r6, [pc, #32]	; (8001150 <push_6502_16+0x28>)
 800112e:	0a01      	lsrs	r1, r0, #8
 8001130:	7837      	ldrb	r7, [r6, #0]
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8001132:	1e7c      	subs	r4, r7, #1
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8001134:	f507 7080 	add.w	r0, r7, #256	; 0x100
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8001138:	b2e4      	uxtb	r4, r4
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 800113a:	f7ff ffd3 	bl	80010e4 <write6502>
    sp -= 2;
 800113e:	3f02      	subs	r7, #2
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8001140:	b2e9      	uxtb	r1, r5
 8001142:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8001146:	f7ff ffcd 	bl	80010e4 <write6502>
    sp -= 2;
 800114a:	7037      	strb	r7, [r6, #0]
}
 800114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800114e:	bf00      	nop
 8001150:	2000809a 	.word	0x2000809a

08001154 <jsr>:
static void jsr() {
 8001154:	b510      	push	{r4, lr}
    push_6502_16(pc - 1);
 8001156:	4c05      	ldr	r4, [pc, #20]	; (800116c <jsr+0x18>)
 8001158:	8820      	ldrh	r0, [r4, #0]
 800115a:	3801      	subs	r0, #1
 800115c:	b280      	uxth	r0, r0
 800115e:	f7ff ffe3 	bl	8001128 <push_6502_16>
    pc = ea;
 8001162:	4b03      	ldr	r3, [pc, #12]	; (8001170 <jsr+0x1c>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	8023      	strh	r3, [r4, #0]
}
 8001168:	bd10      	pop	{r4, pc}
 800116a:	bf00      	nop
 800116c:	2000008e 	.word	0x2000008e
 8001170:	20000034 	.word	0x20000034

08001174 <push_6502_8>:
    write6502(BASE_STACK + sp--, pushval);
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <push_6502_8+0x14>)
static void push_6502_8(uint8 pushval) {
 8001176:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8001178:	7813      	ldrb	r3, [r2, #0]
 800117a:	1e58      	subs	r0, r3, #1
 800117c:	7010      	strb	r0, [r2, #0]
 800117e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8001182:	f7ff bfaf 	b.w	80010e4 <write6502>
 8001186:	bf00      	nop
 8001188:	2000809a 	.word	0x2000809a

0800118c <pha>:
    push_6502_8(a);
 800118c:	4b01      	ldr	r3, [pc, #4]	; (8001194 <pha+0x8>)
 800118e:	7818      	ldrb	r0, [r3, #0]
 8001190:	f7ff bff0 	b.w	8001174 <push_6502_8>
 8001194:	20000028 	.word	0x20000028

08001198 <php>:
    push_6502_8(status | FLAG_BREAK);
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <php+0xc>)
 800119a:	7818      	ldrb	r0, [r3, #0]
 800119c:	f040 0010 	orr.w	r0, r0, #16
 80011a0:	f7ff bfe8 	b.w	8001174 <push_6502_8>
 80011a4:	2000809b 	.word	0x2000809b

080011a8 <brk_6502>:
static void brk_6502() {
 80011a8:	b570      	push	{r4, r5, r6, lr}
    pc++;
 80011aa:	4d09      	ldr	r5, [pc, #36]	; (80011d0 <brk_6502+0x28>)
    push_6502_8(status | FLAG_BREAK); 
 80011ac:	4e09      	ldr	r6, [pc, #36]	; (80011d4 <brk_6502+0x2c>)
    pc++;
 80011ae:	8828      	ldrh	r0, [r5, #0]
 80011b0:	3001      	adds	r0, #1
    push_6502_16(pc); 
 80011b2:	b280      	uxth	r0, r0
 80011b4:	f7ff ffb8 	bl	8001128 <push_6502_16>
    push_6502_8(status | FLAG_BREAK); 
 80011b8:	7834      	ldrb	r4, [r6, #0]
 80011ba:	f044 0010 	orr.w	r0, r4, #16
 80011be:	f7ff ffd9 	bl	8001174 <push_6502_8>
    pc = (ushort)read6502(0xFFFE) | ((ushort)read6502(0xFFFF) << 8);
 80011c2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    setinterrupt();
 80011c6:	f044 0404 	orr.w	r4, r4, #4
 80011ca:	7034      	strb	r4, [r6, #0]
    pc = (ushort)read6502(0xFFFE) | ((ushort)read6502(0xFFFF) << 8);
 80011cc:	802b      	strh	r3, [r5, #0]
}
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
 80011d0:	2000008e 	.word	0x2000008e
 80011d4:	2000809b 	.word	0x2000809b

080011d8 <putvalue>:
    if (addrtable[opcode] == acc) a = (uint8)(saveval & 0x00FF);
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <putvalue+0x20>)
 80011da:	b2c1      	uxtb	r1, r0
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <putvalue+0x24>)
 80011e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <putvalue+0x28>)
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d102      	bne.n	80011f0 <putvalue+0x18>
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <putvalue+0x2c>)
 80011ec:	7019      	strb	r1, [r3, #0]
}
 80011ee:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <putvalue+0x30>)
 80011f2:	8818      	ldrh	r0, [r3, #0]
 80011f4:	f7ff bf76 	b.w	80010e4 <write6502>
 80011f8:	2000008c 	.word	0x2000008c
 80011fc:	08002410 	.word	0x08002410
 8001200:	08000719 	.word	0x08000719
 8001204:	20000028 	.word	0x20000028
 8001208:	20000034 	.word	0x20000034

0800120c <inc>:
static void inc() {
 800120c:	b508      	push	{r3, lr}
    value = getvalue();
 800120e:	f7ff fb33 	bl	8000878 <getvalue>
    result = value + 1;
 8001212:	3001      	adds	r0, #1
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <inc+0x38>)
 8001216:	b280      	uxth	r0, r0
    zerocalc(result);
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <inc+0x3c>)
 800121a:	b2c1      	uxtb	r1, r0
    result = value + 1;
 800121c:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 800121e:	7813      	ldrb	r3, [r2, #0]
 8001220:	b161      	cbz	r1, 800123c <inc+0x30>
 8001222:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001226:	0601      	lsls	r1, r0, #24
 8001228:	bf4c      	ite	mi
 800122a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800122e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001232:	7013      	strb	r3, [r2, #0]
}
 8001234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001238:	f7ff bfce 	b.w	80011d8 <putvalue>
    zerocalc(result);
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	e7f1      	b.n	8001226 <inc+0x1a>
 8001242:	bf00      	nop
 8001244:	20008098 	.word	0x20008098
 8001248:	2000809b 	.word	0x2000809b

0800124c <isb>:
    static void isb() {
 800124c:	b508      	push	{r3, lr}
        inc();
 800124e:	f7ff ffdd 	bl	800120c <inc>
        sbc();
 8001252:	f7ff fb2d 	bl	80008b0 <sbc>
        if (penaltyop && penaltyaddr) clockticks6502--;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <isb+0x20>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b133      	cbz	r3, 800126a <isb+0x1e>
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <isb+0x24>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b11b      	cbz	r3, 800126a <isb+0x1e>
    }
 8001262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001266:	f7ff ba4f 	b.w	8000708 <dcp.part.0>
 800126a:	bd08      	pop	{r3, pc}
 800126c:	20000091 	.word	0x20000091
 8001270:	20000090 	.word	0x20000090

08001274 <dec>:
static void dec() {
 8001274:	b508      	push	{r3, lr}
    value = getvalue();
 8001276:	f7ff faff 	bl	8000878 <getvalue>
    result = value - 1;
 800127a:	3801      	subs	r0, #1
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <dec+0x38>)
 800127e:	b280      	uxth	r0, r0
    zerocalc(result);
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <dec+0x3c>)
 8001282:	b2c1      	uxtb	r1, r0
    result = value - 1;
 8001284:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8001286:	7813      	ldrb	r3, [r2, #0]
 8001288:	b161      	cbz	r1, 80012a4 <dec+0x30>
 800128a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800128e:	0601      	lsls	r1, r0, #24
 8001290:	bf4c      	ite	mi
 8001292:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001296:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800129a:	7013      	strb	r3, [r2, #0]
}
 800129c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80012a0:	f7ff bf9a 	b.w	80011d8 <putvalue>
    zerocalc(result);
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	e7f1      	b.n	800128e <dec+0x1a>
 80012aa:	bf00      	nop
 80012ac:	20008098 	.word	0x20008098
 80012b0:	2000809b 	.word	0x2000809b

080012b4 <dcp>:
    static void dcp() {
 80012b4:	b508      	push	{r3, lr}
        dec();
 80012b6:	f7ff ffdd 	bl	8001274 <dec>
        cmp();
 80012ba:	f7ff fbaf 	bl	8000a1c <cmp>
        if (penaltyop && penaltyaddr) clockticks6502--;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <dcp+0x20>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b133      	cbz	r3, 80012d2 <dcp+0x1e>
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <dcp+0x24>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b11b      	cbz	r3, 80012d2 <dcp+0x1e>
    }
 80012ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012ce:	f7ff ba1b 	b.w	8000708 <dcp.part.0>
 80012d2:	bd08      	pop	{r3, pc}
 80012d4:	20000091 	.word	0x20000091
 80012d8:	20000090 	.word	0x20000090

080012dc <stx>:
    putvalue(x);
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <stx+0x8>)
 80012de:	7818      	ldrb	r0, [r3, #0]
 80012e0:	f7ff bf7a 	b.w	80011d8 <putvalue>
 80012e4:	2000809c 	.word	0x2000809c

080012e8 <sty>:
    putvalue(y);
 80012e8:	4b01      	ldr	r3, [pc, #4]	; (80012f0 <sty+0x8>)
 80012ea:	7818      	ldrb	r0, [r3, #0]
 80012ec:	f7ff bf74 	b.w	80011d8 <putvalue>
 80012f0:	2000809d 	.word	0x2000809d

080012f4 <sta>:
    putvalue(a);
 80012f4:	4b01      	ldr	r3, [pc, #4]	; (80012fc <sta+0x8>)
 80012f6:	7818      	ldrb	r0, [r3, #0]
 80012f8:	f7ff bf6e 	b.w	80011d8 <putvalue>
 80012fc:	20000028 	.word	0x20000028

08001300 <sax>:
    static void sax() {
 8001300:	b508      	push	{r3, lr}
        sta();
 8001302:	f7ff fff7 	bl	80012f4 <sta>
        stx();
 8001306:	f7ff ffe9 	bl	80012dc <stx>
        putvalue(a & x);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <sax+0x30>)
 800130c:	7818      	ldrb	r0, [r3, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <sax+0x34>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4018      	ands	r0, r3
 8001314:	f7ff ff60 	bl	80011d8 <putvalue>
        if (penaltyop && penaltyaddr) clockticks6502--;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <sax+0x38>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b133      	cbz	r3, 800132c <sax+0x2c>
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <sax+0x3c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b11b      	cbz	r3, 800132c <sax+0x2c>
    }
 8001324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001328:	f7ff b9ee 	b.w	8000708 <dcp.part.0>
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	20000028 	.word	0x20000028
 8001334:	2000809c 	.word	0x2000809c
 8001338:	20000091 	.word	0x20000091
 800133c:	20000090 	.word	0x20000090

08001340 <ror>:
static void ror() {
 8001340:	b510      	push	{r4, lr}
    value = getvalue();
 8001342:	f7ff fa99 	bl	8000878 <getvalue>
 8001346:	4601      	mov	r1, r0
    result = (value >> 1) | ((status & FLAG_CARRY) << 7);
 8001348:	4c11      	ldr	r4, [pc, #68]	; (8001390 <ror+0x50>)
    if (value & 1) setcarry();
 800134a:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((status & FLAG_CARRY) << 7);
 800134c:	7823      	ldrb	r3, [r4, #0]
 800134e:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8001358:	b290      	uxth	r0, r2
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <ror+0x54>)
    if (value & 1) setcarry();
 800135c:	bf48      	it	mi
 800135e:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((status & FLAG_CARRY) << 7);
 8001362:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 8001364:	b2c2      	uxtb	r2, r0
        else clearcarry();
 8001366:	bf58      	it	pl
 8001368:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800136c:	b162      	cbz	r2, 8001388 <ror+0x48>
 800136e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001372:	0602      	lsls	r2, r0, #24
 8001374:	bf4c      	ite	mi
 8001376:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800137a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800137e:	7023      	strb	r3, [r4, #0]
}
 8001380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 8001384:	f7ff bf28 	b.w	80011d8 <putvalue>
    zerocalc(result);
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	e7f1      	b.n	8001372 <ror+0x32>
 800138e:	bf00      	nop
 8001390:	2000809b 	.word	0x2000809b
 8001394:	20008098 	.word	0x20008098

08001398 <rra>:
    static void rra() {
 8001398:	b508      	push	{r3, lr}
        ror();
 800139a:	f7ff ffd1 	bl	8001340 <ror>
        adc();
 800139e:	f7ff fc05 	bl	8000bac <adc>
        if (penaltyop && penaltyaddr) clockticks6502--;
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <rra+0x20>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b133      	cbz	r3, 80013b6 <rra+0x1e>
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <rra+0x24>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b11b      	cbz	r3, 80013b6 <rra+0x1e>
    }
 80013ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80013b2:	f7ff b9a9 	b.w	8000708 <dcp.part.0>
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	20000091 	.word	0x20000091
 80013bc:	20000090 	.word	0x20000090

080013c0 <lsr>:
static void lsr() {
 80013c0:	b508      	push	{r3, lr}
    value = getvalue();
 80013c2:	f7ff fa59 	bl	8000878 <getvalue>
 80013c6:	4602      	mov	r2, r0
    result = value >> 1;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <lsr+0x44>)
    if (value & 1) setcarry();
 80013ca:	490f      	ldr	r1, [pc, #60]	; (8001408 <lsr+0x48>)
    result = value >> 1;
 80013cc:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80013d0:	8018      	strh	r0, [r3, #0]
    if (value & 1) setcarry();
 80013d2:	780b      	ldrb	r3, [r1, #0]
 80013d4:	07d2      	lsls	r2, r2, #31
    zerocalc(result);
 80013d6:	b2c2      	uxtb	r2, r0
    if (value & 1) setcarry();
 80013d8:	bf4c      	ite	mi
 80013da:	f043 0301 	orrmi.w	r3, r3, #1
        else clearcarry();
 80013de:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80013e2:	b162      	cbz	r2, 80013fe <lsr+0x3e>
 80013e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80013e8:	0602      	lsls	r2, r0, #24
 80013ea:	bf4c      	ite	mi
 80013ec:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80013f0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80013f4:	700b      	strb	r3, [r1, #0]
}
 80013f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80013fa:	f7ff beed 	b.w	80011d8 <putvalue>
    zerocalc(result);
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	e7f1      	b.n	80013e8 <lsr+0x28>
 8001404:	20008098 	.word	0x20008098
 8001408:	2000809b 	.word	0x2000809b

0800140c <sre>:
    static void sre() {
 800140c:	b508      	push	{r3, lr}
        lsr();
 800140e:	f7ff ffd7 	bl	80013c0 <lsr>
        eor();
 8001412:	f7ff fc4d 	bl	8000cb0 <eor>
        if (penaltyop && penaltyaddr) clockticks6502--;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <sre+0x20>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b133      	cbz	r3, 800142a <sre+0x1e>
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <sre+0x24>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b11b      	cbz	r3, 800142a <sre+0x1e>
    }
 8001422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001426:	f7ff b96f 	b.w	8000708 <dcp.part.0>
 800142a:	bd08      	pop	{r3, pc}
 800142c:	20000091 	.word	0x20000091
 8001430:	20000090 	.word	0x20000090

08001434 <rol>:
static void rol() {
 8001434:	b508      	push	{r3, lr}
    value = getvalue();
 8001436:	f7ff fa1f 	bl	8000878 <getvalue>
    result = (value << 1) | (status & FLAG_CARRY);
 800143a:	4911      	ldr	r1, [pc, #68]	; (8001480 <rol+0x4c>)
 800143c:	780b      	ldrb	r3, [r1, #0]
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <rol+0x50>)
 8001448:	b280      	uxth	r0, r0
    carrycalc(result);
 800144a:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (status & FLAG_CARRY);
 800144e:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 8001450:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 8001452:	bf14      	ite	ne
 8001454:	f043 0301 	orrne.w	r3, r3, #1
 8001458:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800145c:	b162      	cbz	r2, 8001478 <rol+0x44>
 800145e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001462:	0602      	lsls	r2, r0, #24
 8001464:	bf4c      	ite	mi
 8001466:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800146a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800146e:	700b      	strb	r3, [r1, #0]
}
 8001470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001474:	f7ff beb0 	b.w	80011d8 <putvalue>
    zerocalc(result);
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	e7f1      	b.n	8001462 <rol+0x2e>
 800147e:	bf00      	nop
 8001480:	2000809b 	.word	0x2000809b
 8001484:	20008098 	.word	0x20008098

08001488 <rla>:
    static void rla() {
 8001488:	b508      	push	{r3, lr}
        rol();
 800148a:	f7ff ffd3 	bl	8001434 <rol>
        and();
 800148e:	f7ff fc53 	bl	8000d38 <and>
        if (penaltyop && penaltyaddr) clockticks6502--;
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <rla+0x20>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b133      	cbz	r3, 80014a6 <rla+0x1e>
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <rla+0x24>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b11b      	cbz	r3, 80014a6 <rla+0x1e>
    }
 800149e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80014a2:	f7ff b931 	b.w	8000708 <dcp.part.0>
 80014a6:	bd08      	pop	{r3, pc}
 80014a8:	20000091 	.word	0x20000091
 80014ac:	20000090 	.word	0x20000090

080014b0 <asl>:
static void asl() {
 80014b0:	b508      	push	{r3, lr}
    value = getvalue();
 80014b2:	f7ff f9e1 	bl	8000878 <getvalue>
    result = value << 1;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <asl+0x44>)
    carrycalc(result);
 80014b8:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <asl+0x48>)
    result = value << 1;
 80014ba:	0040      	lsls	r0, r0, #1
 80014bc:	b280      	uxth	r0, r0
 80014be:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 80014c0:	7813      	ldrb	r3, [r2, #0]
 80014c2:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 80014c6:	bf14      	ite	ne
 80014c8:	f043 0301 	orrne.w	r3, r3, #1
 80014cc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80014d0:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 80014d4:	bf14      	ite	ne
 80014d6:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 80014da:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 80014de:	0601      	lsls	r1, r0, #24
 80014e0:	bf4c      	ite	mi
 80014e2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80014e6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80014ea:	7013      	strb	r3, [r2, #0]
}
 80014ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80014f0:	f7ff be72 	b.w	80011d8 <putvalue>
 80014f4:	20008098 	.word	0x20008098
 80014f8:	2000809b 	.word	0x2000809b

080014fc <slo>:
    static void slo() {
 80014fc:	b508      	push	{r3, lr}
        asl();
 80014fe:	f7ff ffd7 	bl	80014b0 <asl>
        ora();
 8001502:	f7ff fc43 	bl	8000d8c <ora>
        if (penaltyop && penaltyaddr) clockticks6502--;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <slo+0x20>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b133      	cbz	r3, 800151a <slo+0x1e>
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <slo+0x24>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b11b      	cbz	r3, 800151a <slo+0x1e>
    }
 8001512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001516:	f7ff b8f7 	b.w	8000708 <dcp.part.0>
 800151a:	bd08      	pop	{r3, pc}
 800151c:	20000091 	.word	0x20000091
 8001520:	20000090 	.word	0x20000090

08001524 <writelineTerminal>:

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8001528:	f7fe fe7c 	bl	8000224 <strlen>
 800152c:	4d08      	ldr	r5, [pc, #32]	; (8001550 <writelineTerminal+0x2c>)
 800152e:	4621      	mov	r1, r4
 8001530:	b282      	uxth	r2, r0
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	4628      	mov	r0, r5
 8001538:	f000 fe51 	bl	80021de <HAL_UART_Transmit>
 800153c:	4628      	mov	r0, r5
}
 800153e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	2202      	movs	r2, #2
 8001548:	4902      	ldr	r1, [pc, #8]	; (8001554 <writelineTerminal+0x30>)
 800154a:	f000 be48 	b.w	80021de <HAL_UART_Transmit>
 800154e:	bf00      	nop
 8001550:	20000038 	.word	0x20000038
 8001554:	0800238c 	.word	0x0800238c

08001558 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8001558:	b510      	push	{r4, lr}
 800155a:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800155c:	f7fe fe62 	bl	8000224 <strlen>
 8001560:	4621      	mov	r1, r4
}
 8001562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001566:	b282      	uxth	r2, r0
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <writeTerminal+0x1c>)
 800156e:	f000 be36 	b.w	80021de <HAL_UART_Transmit>
 8001572:	bf00      	nop
 8001574:	20000038 	.word	0x20000038

08001578 <initApple1>:
}

/**
 * Initialize Apple I
 */
void initApple1(void) {
 8001578:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 800157a:	4d18      	ldr	r5, [pc, #96]	; (80015dc <initApple1+0x64>)
    readTerminal((char *)keyboardBuffer);
 800157c:	4c18      	ldr	r4, [pc, #96]	; (80015e0 <initApple1+0x68>)
    HAL_Delay(1000);
 800157e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001582:	f000 f9bd 	bl	8001900 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 8001586:	4628      	mov	r0, r5
 8001588:	f7ff ffcc 	bl	8001524 <writelineTerminal>
    readTerminal((char *)keyboardBuffer);
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <initApple1+0x68>)
 800158e:	f000 f835 	bl	80015fc <readTerminal>
  } while (keyboardBuffer[0] != SPACE_KEY);
 8001592:	7823      	ldrb	r3, [r4, #0]
 8001594:	2b20      	cmp	r3, #32
 8001596:	d1f2      	bne.n	800157e <initApple1+0x6>

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <initApple1+0x6c>)
 800159a:	f7ff ffdd 	bl	8001558 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <initApple1+0x70>)
 80015a0:	f7ff f8bc 	bl	800071c <reset6502>
 80015a4:	f7ff ffbe 	bl	8001524 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <initApple1+0x74>)
 80015aa:	f7ff ffd5 	bl	8001558 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    ram[i] = 0x00;
 80015ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015b2:	2100      	movs	r1, #0
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <initApple1+0x78>)
 80015b6:	f000 fed5 	bl	8002364 <memset>
  }
  writelineTerminal(" Complete");
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <initApple1+0x70>)
 80015bc:	f7ff ffb2 	bl	8001524 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <initApple1+0x7c>)
 80015c2:	f7ff ffc9 	bl	8001558 <writeTerminal>
  pia.keyboard_register = 0x00;
 80015c6:	2200      	movs	r2, #0
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 80015cc:	701a      	strb	r2, [r3, #0]
  pia.keyboard_control = 0x00;
 80015ce:	705a      	strb	r2, [r3, #1]
  pia.display_register = 0x00;
 80015d0:	709a      	strb	r2, [r3, #2]
}
 80015d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 80015d6:	f7ff bfa5 	b.w	8001524 <writelineTerminal>
 80015da:	bf00      	nop
 80015dc:	0800238f 	.word	0x0800238f
 80015e0:	20000084 	.word	0x20000084
 80015e4:	080023ad 	.word	0x080023ad
 80015e8:	080023c1 	.word	0x080023c1
 80015ec:	080023cb 	.word	0x080023cb
 80015f0:	20000095 	.word	0x20000095
 80015f4:	080023df 	.word	0x080023df
 80015f8:	20000092 	.word	0x20000092

080015fc <readTerminal>:
void readTerminal(char *buffer) {
 80015fc:	b510      	push	{r4, lr}
 80015fe:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 8001600:	230a      	movs	r3, #10
 8001602:	2201      	movs	r2, #1
 8001604:	4601      	mov	r1, r0
 8001606:	480f      	ldr	r0, [pc, #60]	; (8001644 <readTerminal+0x48>)
 8001608:	f000 fe34 	bl	8002274 <HAL_UART_Receive>
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800160c:	7823      	ldrb	r3, [r4, #0]
 800160e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001612:	2a19      	cmp	r2, #25
 8001614:	d802      	bhi.n	800161c <readTerminal+0x20>
    buffer[0] -= 0x20;
 8001616:	3b20      	subs	r3, #32
    buffer[0] = '\r';
 8001618:	7023      	strb	r3, [r4, #0]
}
 800161a:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 800161c:	2b0a      	cmp	r3, #10
 800161e:	d101      	bne.n	8001624 <readTerminal+0x28>
    buffer[0] = '\r';
 8001620:	230d      	movs	r3, #13
 8001622:	e7f9      	b.n	8001618 <readTerminal+0x1c>
  else if (buffer[0] == 0x03) {
 8001624:	2b03      	cmp	r3, #3
 8001626:	d1f8      	bne.n	800161a <readTerminal+0x1e>
    writelineTerminal("Resetting in 5 seconds...");
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <readTerminal+0x4c>)
 800162a:	f7ff ff7b 	bl	8001524 <writelineTerminal>
    HAL_Delay(5000);
 800162e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001632:	f000 f965 	bl	8001900 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 8001636:	2220      	movs	r2, #32
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <readTerminal+0x50>)
 800163a:	701a      	strb	r2, [r3, #0]
}
 800163c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 8001640:	f7ff bf9a 	b.w	8001578 <initApple1>
 8001644:	20000038 	.word	0x20000038
 8001648:	080023f3 	.word	0x080023f3
 800164c:	20000084 	.word	0x20000084

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b510      	push	{r4, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001654:	2214      	movs	r2, #20
 8001656:	2100      	movs	r1, #0
 8001658:	a808      	add	r0, sp, #32
 800165a:	f000 fe83 	bl	8002364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165e:	2214      	movs	r2, #20
 8001660:	2100      	movs	r1, #0
 8001662:	a801      	add	r0, sp, #4
 8001664:	f000 fe7e 	bl	8002364 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001668:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800166a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001670:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001678:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001680:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f000 fa8f 	bl	8001ba4 <HAL_RCC_OscConfig>
 8001686:	b108      	cbz	r0, 800168c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168a:	e7fe      	b.n	800168a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001692:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001698:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169c:	4621      	mov	r1, r4
 800169e:	a801      	add	r0, sp, #4
 80016a0:	f000 fc42 	bl	8001f28 <HAL_RCC_ClockConfig>
 80016a4:	b108      	cbz	r0, 80016aa <SystemClock_Config+0x5a>
 80016a6:	b672      	cpsid	i
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <SystemClock_Config+0x58>
}
 80016aa:	b010      	add	sp, #64	; 0x40
 80016ac:	bd10      	pop	{r4, pc}
	...

080016b0 <main>:
{
 80016b0:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80016b2:	f000 f901 	bl	80018b8 <HAL_Init>
  SystemClock_Config();
 80016b6:	f7ff ffcb 	bl	8001650 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <main+0x88>)
  huart1.Instance = USART1;
 80016bc:	481f      	ldr	r0, [pc, #124]	; (800173c <main+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	f042 0210 	orr.w	r2, r2, #16
 80016c4:	619a      	str	r2, [r3, #24]
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	f002 0210 	and.w	r2, r2, #16
 80016cc:	9200      	str	r2, [sp, #0]
 80016ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	f042 0204 	orr.w	r2, r2, #4
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	699b      	ldr	r3, [r3, #24]
  huart1.Init.BaudRate = 115200;
 80016da:	4a19      	ldr	r2, [pc, #100]	; (8001740 <main+0x90>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	9b01      	ldr	r3, [sp, #4]
  huart1.Init.BaudRate = 115200;
 80016e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016e8:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ec:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ee:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016f8:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fa:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fc:	f000 fd40 	bl	8002180 <HAL_UART_Init>
 8001700:	b108      	cbz	r0, 8001706 <main+0x56>
 8001702:	b672      	cpsid	i
  while (1)
 8001704:	e7fe      	b.n	8001704 <main+0x54>
  initApple1(); // Initialize Apple I
 8001706:	f7ff ff37 	bl	8001578 <initApple1>
    readTerminal((char *)keyboardBuffer);
 800170a:	4d0e      	ldr	r5, [pc, #56]	; (8001744 <main+0x94>)
      pia.keyboard_register = value;
 800170c:	4c0e      	ldr	r4, [pc, #56]	; (8001748 <main+0x98>)
      pia.keyboard_control = 0xFF;
 800170e:	26ff      	movs	r6, #255	; 0xff
    readTerminal((char *)keyboardBuffer);
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <main+0x94>)
 8001712:	f7ff ff73 	bl	80015fc <readTerminal>
      pia.keyboard_register = value;
 8001716:	782b      	ldrb	r3, [r5, #0]
    exec6502(INSTRUCTION_CHUNK);
 8001718:	f242 7010 	movw	r0, #10000	; 0x2710
      pia.keyboard_register = value;
 800171c:	7023      	strb	r3, [r4, #0]
      pia.keyboard_control = 0xFF;
 800171e:	7066      	strb	r6, [r4, #1]
    exec6502(INSTRUCTION_CHUNK);
 8001720:	f7ff f846 	bl	80007b0 <exec6502>
      pia.display_register = 0x00;
 8001724:	2200      	movs	r2, #0
      uint8_t display_register = pia.display_register;
 8001726:	78a3      	ldrb	r3, [r4, #2]
      pia.display_register = 0x00;
 8001728:	70a2      	strb	r2, [r4, #2]
    if (read6502(PIA_START + 2) != 0x00) {
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <main+0x60>
      writeTerminal((char *)&pia.display_register);
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <main+0x9c>)
 8001730:	f7ff ff12 	bl	8001558 <writeTerminal>
 8001734:	e7eb      	b.n	800170e <main+0x5e>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	20000038 	.word	0x20000038
 8001740:	40013800 	.word	0x40013800
 8001744:	20000084 	.word	0x20000084
 8001748:	20000092 	.word	0x20000092
 800174c:	20000094 	.word	0x20000094

08001750 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_MspInit+0x3c>)
{
 8001752:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	f002 0201 	and.w	r2, r2, #1
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800176c:	61da      	str	r2, [r3, #28]
 800176e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800177a:	6853      	ldr	r3, [r2, #4]
 800177c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	b002      	add	sp, #8
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40010000 	.word	0x40010000

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
 8001798:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	2210      	movs	r2, #16
 800179c:	2100      	movs	r1, #0
 800179e:	a802      	add	r0, sp, #8
 80017a0:	f000 fde0 	bl	8002364 <memset>
  if(huart->Instance==USART1)
 80017a4:	6822      	ldr	r2, [r4, #0]
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x70>)
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d128      	bne.n	80017fe <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ac:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80017b0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	4815      	ldr	r0, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017b8:	619a      	str	r2, [r3, #24]
 80017ba:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80017be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017c2:	9200      	str	r2, [sp, #0]
 80017c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	f042 0204 	orr.w	r2, r2, #4
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f000 f8f5 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ee:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f000 f8eb 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017fe:	b006      	add	sp, #24
 8001800:	bd10      	pop	{r4, pc}
 8001802:	bf00      	nop
 8001804:	40013800 	.word	0x40013800
 8001808:	40010800 	.word	0x40010800

0800180c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler>

0800180e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler>

08001810 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler>

08001812 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler>

08001814 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler>

08001816 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 b85e 	b.w	80018dc <HAL_IncTick>

08001820 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	4770      	bx	lr
	...

08001824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001824:	f7ff fffc 	bl	8001820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800182a:	490c      	ldr	r1, [pc, #48]	; (800185c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001840:	4c09      	ldr	r4, [pc, #36]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f000 fd65 	bl	800231c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001852:	f7ff ff2d 	bl	80016b0 <main>
  bx lr
 8001856:	4770      	bx	lr
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001860:	08004144 	.word	0x08004144
  ldr r2, =_sbss
 8001864:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001868:	200080a4 	.word	0x200080a4

0800186c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_2_IRQHandler>
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_InitTick+0x3c>)
{
 8001874:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001876:	7818      	ldrb	r0, [r3, #0]
 8001878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_InitTick+0x40>)
 8001882:	6810      	ldr	r0, [r2, #0]
 8001884:	fbb0 f0f3 	udiv	r0, r0, r3
 8001888:	f000 f890 	bl	80019ac <HAL_SYSTICK_Config>
 800188c:	4604      	mov	r4, r0
 800188e:	b958      	cbnz	r0, 80018a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	2d0f      	cmp	r5, #15
 8001892:	d809      	bhi.n	80018a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	4602      	mov	r2, r0
 8001896:	4629      	mov	r1, r5
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f854 	bl	8001948 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4620      	mov	r0, r4
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_InitTick+0x44>)
 80018a4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
 80018aa:	e7fc      	b.n	80018a6 <HAL_InitTick+0x36>
 80018ac:	20000004 	.word	0x20000004
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x20>)
{
 80018ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c6:	f000 f82d 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	200f      	movs	r0, #15
 80018cc:	f7ff ffd0 	bl	8001870 <HAL_InitTick>
  HAL_MspInit();
 80018d0:	f7ff ff3e 	bl	8001750 <HAL_MspInit>
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	bd08      	pop	{r3, pc}
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <HAL_IncTick+0x10>)
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <HAL_IncTick+0x14>)
 80018e0:	6811      	ldr	r1, [r2, #0]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	440b      	add	r3, r1
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200080a0 	.word	0x200080a0
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018f4:	4b01      	ldr	r3, [pc, #4]	; (80018fc <HAL_GetTick+0x8>)
 80018f6:	6818      	ldr	r0, [r3, #0]
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200080a0 	.word	0x200080a0

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff fff6 	bl	80018f4 <HAL_GetTick>
 8001908:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800190c:	bf1e      	ittt	ne
 800190e:	4b04      	ldrne	r3, [pc, #16]	; (8001920 <HAL_Delay+0x20>)
 8001910:	781b      	ldrbne	r3, [r3, #0]
 8001912:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	1b43      	subs	r3, r0, r5
 800191a:	42a3      	cmp	r3, r4
 800191c:	d3fa      	bcc.n	8001914 <HAL_Delay+0x14>
  {
  }
}
 800191e:	bd38      	pop	{r3, r4, r5, pc}
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001926:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800192a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001932:	0412      	lsls	r2, r2, #16
 8001934:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001940:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b530      	push	{r4, r5, lr}
 800194c:	68dc      	ldr	r4, [r3, #12]
 800194e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001952:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	2b04      	cmp	r3, #4
 800195a:	bf28      	it	cs
 800195c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001964:	bf98      	it	ls
 8001966:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196c:	bf88      	it	hi
 800196e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	ea21 0303 	bic.w	r3, r1, r3
 8001974:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001976:	fa05 f404 	lsl.w	r4, r5, r4
 800197a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800197e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	bfac      	ite	ge
 8001986:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	4a07      	ldrlt	r2, [pc, #28]	; (80019a8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001990:	b2db      	uxtb	r3, r3
 8001992:	bfab      	itete	ge
 8001994:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019a2:	bd30      	pop	{r4, r5, pc}
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	e000ed14 	.word	0xe000ed14

080019ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	3801      	subs	r0, #1
 80019ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019b2:	d20b      	bcs.n	80019cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	21f0      	movs	r1, #240	; 0xf0
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019bc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019d8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80019da:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019dc:	4f6a      	ldr	r7, [pc, #424]	; (8001b88 <HAL_GPIO_Init+0x1b4>)
 80019de:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001b90 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 80019e4:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8001b94 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e8:	680c      	ldr	r4, [r1, #0]
 80019ea:	fa34 f506 	lsrs.w	r5, r4, r6
 80019ee:	d102      	bne.n	80019f6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80019f0:	b003      	add	sp, #12
 80019f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80019f6:	f04f 0801 	mov.w	r8, #1
 80019fa:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8001a02:	ea38 0404 	bics.w	r4, r8, r4
 8001a06:	f040 8081 	bne.w	8001b0c <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8001a0a:	684c      	ldr	r4, [r1, #4]
 8001a0c:	2c03      	cmp	r4, #3
 8001a0e:	d807      	bhi.n	8001a20 <HAL_GPIO_Init+0x4c>
 8001a10:	3c01      	subs	r4, #1
 8001a12:	2c02      	cmp	r4, #2
 8001a14:	f200 808c 	bhi.w	8001b30 <HAL_GPIO_Init+0x15c>
 8001a18:	e8df f004 	tbb	[pc, r4]
 8001a1c:	a29d      	.short	0xa29d
 8001a1e:	a8          	.byte	0xa8
 8001a1f:	00          	.byte	0x00
 8001a20:	2c12      	cmp	r4, #18
 8001a22:	f000 80a0 	beq.w	8001b66 <HAL_GPIO_Init+0x192>
 8001a26:	d873      	bhi.n	8001b10 <HAL_GPIO_Init+0x13c>
 8001a28:	2c11      	cmp	r4, #17
 8001a2a:	f000 8096 	beq.w	8001b5a <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2e:	2dff      	cmp	r5, #255	; 0xff
 8001a30:	bf98      	it	ls
 8001a32:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	bf88      	it	hi
 8001a3a:	f100 0a04 	addhi.w	sl, r0, #4
 8001a3e:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a42:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a46:	bf88      	it	hi
 8001a48:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a4a:	fa09 fb04 	lsl.w	fp, r9, r4
 8001a4e:	ea28 080b 	bic.w	r8, r8, fp
 8001a52:	fa02 f404 	lsl.w	r4, r2, r4
 8001a56:	ea48 0404 	orr.w	r4, r8, r4
 8001a5a:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001a62:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001a66:	d051      	beq.n	8001b0c <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a68:	69bc      	ldr	r4, [r7, #24]
 8001a6a:	f026 0803 	bic.w	r8, r6, #3
 8001a6e:	f044 0401 	orr.w	r4, r4, #1
 8001a72:	61bc      	str	r4, [r7, #24]
 8001a74:	69bc      	ldr	r4, [r7, #24]
 8001a76:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001a7a:	f004 0401 	and.w	r4, r4, #1
 8001a7e:	9401      	str	r4, [sp, #4]
 8001a80:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a84:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a88:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001a8e:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a92:	fa09 f90b 	lsl.w	r9, r9, fp
 8001a96:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9a:	4c3f      	ldr	r4, [pc, #252]	; (8001b98 <HAL_GPIO_Init+0x1c4>)
 8001a9c:	42a0      	cmp	r0, r4
 8001a9e:	d069      	beq.n	8001b74 <HAL_GPIO_Init+0x1a0>
 8001aa0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aa4:	42a0      	cmp	r0, r4
 8001aa6:	d067      	beq.n	8001b78 <HAL_GPIO_Init+0x1a4>
 8001aa8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aac:	42a0      	cmp	r0, r4
 8001aae:	d065      	beq.n	8001b7c <HAL_GPIO_Init+0x1a8>
 8001ab0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ab4:	42a0      	cmp	r0, r4
 8001ab6:	d063      	beq.n	8001b80 <HAL_GPIO_Init+0x1ac>
 8001ab8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	d061      	beq.n	8001b84 <HAL_GPIO_Init+0x1b0>
 8001ac0:	4560      	cmp	r0, ip
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2405      	moveq	r4, #5
 8001ac6:	2406      	movne	r4, #6
 8001ac8:	fa04 f40b 	lsl.w	r4, r4, fp
 8001acc:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001ad0:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ada:	bf14      	ite	ne
 8001adc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ade:	43ac      	biceq	r4, r5
 8001ae0:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae2:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae8:	bf14      	ite	ne
 8001aea:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aec:	43ac      	biceq	r4, r5
 8001aee:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001af6:	bf14      	ite	ne
 8001af8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afa:	43ac      	biceq	r4, r5
 8001afc:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001afe:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b00:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b04:	bf14      	ite	ne
 8001b06:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	43ac      	biceq	r4, r5
 8001b0a:	601c      	str	r4, [r3, #0]
	position++;
 8001b0c:	3601      	adds	r6, #1
 8001b0e:	e76b      	b.n	80019e8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001b10:	4574      	cmp	r4, lr
 8001b12:	d00d      	beq.n	8001b30 <HAL_GPIO_Init+0x15c>
 8001b14:	d818      	bhi.n	8001b48 <HAL_GPIO_Init+0x174>
 8001b16:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001b9c <HAL_GPIO_Init+0x1c8>
 8001b1a:	454c      	cmp	r4, r9
 8001b1c:	d008      	beq.n	8001b30 <HAL_GPIO_Init+0x15c>
 8001b1e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001b22:	454c      	cmp	r4, r9
 8001b24:	d004      	beq.n	8001b30 <HAL_GPIO_Init+0x15c>
 8001b26:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001b2a:	454c      	cmp	r4, r9
 8001b2c:	f47f af7f 	bne.w	8001a2e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b30:	688a      	ldr	r2, [r1, #8]
 8001b32:	b1ea      	cbz	r2, 8001b70 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b34:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001b36:	bf08      	it	eq
 8001b38:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001b40:	bf18      	it	ne
 8001b42:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001b46:	e772      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001b48:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001ba0 <HAL_GPIO_Init+0x1cc>
 8001b4c:	454c      	cmp	r4, r9
 8001b4e:	d0ef      	beq.n	8001b30 <HAL_GPIO_Init+0x15c>
 8001b50:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001b54:	e7e9      	b.n	8001b2a <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b56:	68ca      	ldr	r2, [r1, #12]
          break;
 8001b58:	e769      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b5a:	68ca      	ldr	r2, [r1, #12]
 8001b5c:	3204      	adds	r2, #4
          break;
 8001b5e:	e766      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b60:	68ca      	ldr	r2, [r1, #12]
 8001b62:	3208      	adds	r2, #8
          break;
 8001b64:	e763      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b66:	68ca      	ldr	r2, [r1, #12]
 8001b68:	320c      	adds	r2, #12
          break;
 8001b6a:	e760      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	e75e      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b70:	2204      	movs	r2, #4
 8001b72:	e75c      	b.n	8001a2e <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b74:	2400      	movs	r4, #0
 8001b76:	e7a7      	b.n	8001ac8 <HAL_GPIO_Init+0xf4>
 8001b78:	2401      	movs	r4, #1
 8001b7a:	e7a5      	b.n	8001ac8 <HAL_GPIO_Init+0xf4>
 8001b7c:	2402      	movs	r4, #2
 8001b7e:	e7a3      	b.n	8001ac8 <HAL_GPIO_Init+0xf4>
 8001b80:	2403      	movs	r4, #3
 8001b82:	e7a1      	b.n	8001ac8 <HAL_GPIO_Init+0xf4>
 8001b84:	2404      	movs	r4, #4
 8001b86:	e79f      	b.n	8001ac8 <HAL_GPIO_Init+0xf4>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010400 	.word	0x40010400
 8001b90:	40011c00 	.word	0x40011c00
 8001b94:	10220000 	.word	0x10220000
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	10120000 	.word	0x10120000
 8001ba0:	10310000 	.word	0x10310000

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba8:	4605      	mov	r5, r0
 8001baa:	b338      	cbz	r0, 8001bfc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	07db      	lsls	r3, r3, #31
 8001bb0:	d410      	bmi.n	8001bd4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	079f      	lsls	r7, r3, #30
 8001bb6:	d45e      	bmi.n	8001c76 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	0719      	lsls	r1, r3, #28
 8001bbc:	f100 8095 	bmi.w	8001cea <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	075a      	lsls	r2, r3, #29
 8001bc4:	f100 80c1 	bmi.w	8001d4a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	69e8      	ldr	r0, [r5, #28]
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f040 812c 	bne.w	8001e28 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e029      	b.n	8001c28 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4c90      	ldr	r4, [pc, #576]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d10a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x5c>
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	03de      	lsls	r6, r3, #15
 8001bee:	d507      	bpl.n	8001c00 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	039c      	lsls	r4, r3, #14
 8001bf4:	d5dd      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0xe>
 8001bf6:	686b      	ldr	r3, [r5, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1da      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	e013      	b.n	8001c28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c00:	686b      	ldr	r3, [r5, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d112      	bne.n	8001c2e <HAL_RCC_OscConfig+0x8a>
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c10:	f7ff fe70 	bl	80018f4 <HAL_GetTick>
 8001c14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	0398      	lsls	r0, r3, #14
 8001c1a:	d4ca      	bmi.n	8001bb2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fe6a 	bl	80018f4 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	2864      	cmp	r0, #100	; 0x64
 8001c24:	d9f7      	bls.n	8001c16 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001c26:	2003      	movs	r0, #3
}
 8001c28:	b002      	add	sp, #8
 8001c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	b99b      	cbnz	r3, 8001c58 <HAL_RCC_OscConfig+0xb4>
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	6023      	str	r3, [r4, #0]
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c40:	f7ff fe58 	bl	80018f4 <HAL_GetTick>
 8001c44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	0399      	lsls	r1, r3, #14
 8001c4a:	d5b2      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fe52 	bl	80018f4 <HAL_GetTick>
 8001c50:	1b80      	subs	r0, r0, r6
 8001c52:	2864      	cmp	r0, #100	; 0x64
 8001c54:	d9f7      	bls.n	8001c46 <HAL_RCC_OscConfig+0xa2>
 8001c56:	e7e6      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	d103      	bne.n	8001c68 <HAL_RCC_OscConfig+0xc4>
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	e7cf      	b.n	8001c08 <HAL_RCC_OscConfig+0x64>
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	e7cb      	b.n	8001c0e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4c68      	ldr	r4, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001c78:	6863      	ldr	r3, [r4, #4]
 8001c7a:	f013 0f0c 	tst.w	r3, #12
 8001c7e:	d007      	beq.n	8001c90 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c80:	6863      	ldr	r3, [r4, #4]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d110      	bne.n	8001cac <HAL_RCC_OscConfig+0x108>
 8001c8a:	6863      	ldr	r3, [r4, #4]
 8001c8c:	03da      	lsls	r2, r3, #15
 8001c8e:	d40d      	bmi.n	8001cac <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	079b      	lsls	r3, r3, #30
 8001c94:	d502      	bpl.n	8001c9c <HAL_RCC_OscConfig+0xf8>
 8001c96:	692b      	ldr	r3, [r5, #16]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d1af      	bne.n	8001bfc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	696a      	ldr	r2, [r5, #20]
 8001ca0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ca4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	e785      	b.n	8001bb8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cac:	692a      	ldr	r2, [r5, #16]
 8001cae:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x278>)
 8001cb0:	b16a      	cbz	r2, 8001cce <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fe1d 	bl	80018f4 <HAL_GetTick>
 8001cba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	079f      	lsls	r7, r3, #30
 8001cc0:	d4ec      	bmi.n	8001c9c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fe17 	bl	80018f4 <HAL_GetTick>
 8001cc6:	1b80      	subs	r0, r0, r6
 8001cc8:	2802      	cmp	r0, #2
 8001cca:	d9f7      	bls.n	8001cbc <HAL_RCC_OscConfig+0x118>
 8001ccc:	e7ab      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001cce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fe10 	bl	80018f4 <HAL_GetTick>
 8001cd4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	0798      	lsls	r0, r3, #30
 8001cda:	f57f af6d 	bpl.w	8001bb8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fe09 	bl	80018f4 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f6      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x132>
 8001ce8:	e79d      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cea:	69aa      	ldr	r2, [r5, #24]
 8001cec:	4e4a      	ldr	r6, [pc, #296]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001cee:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <HAL_RCC_OscConfig+0x278>)
 8001cf0:	b1e2      	cbz	r2, 8001d2c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fdfc 	bl	80018f4 <HAL_GetTick>
 8001cfc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d00:	079b      	lsls	r3, r3, #30
 8001d02:	d50d      	bpl.n	8001d20 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d10:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d12:	bf00      	nop
  }
  while (Delay --);
 8001d14:	9b01      	ldr	r3, [sp, #4]
 8001d16:	1e5a      	subs	r2, r3, #1
 8001d18:	9201      	str	r2, [sp, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_RCC_OscConfig+0x16e>
 8001d1e:	e74f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fde8 	bl	80018f4 <HAL_GetTick>
 8001d24:	1b00      	subs	r0, r0, r4
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9e9      	bls.n	8001cfe <HAL_RCC_OscConfig+0x15a>
 8001d2a:	e77c      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001d2c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001d30:	f7ff fde0 	bl	80018f4 <HAL_GetTick>
 8001d34:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d38:	079f      	lsls	r7, r3, #30
 8001d3a:	f57f af41 	bpl.w	8001bc0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fdd9 	bl	80018f4 <HAL_GetTick>
 8001d42:	1b00      	subs	r0, r0, r4
 8001d44:	2802      	cmp	r0, #2
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x192>
 8001d48:	e76d      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4c33      	ldr	r4, [pc, #204]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	69e3      	ldr	r3, [r4, #28]
 8001d4e:	00d8      	lsls	r0, r3, #3
 8001d50:	d424      	bmi.n	8001d9c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001d52:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	69e3      	ldr	r3, [r4, #28]
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	61e3      	str	r3, [r4, #28]
 8001d5c:	69e3      	ldr	r3, [r4, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4e2f      	ldr	r6, [pc, #188]	; (8001e24 <HAL_RCC_OscConfig+0x280>)
 8001d68:	6833      	ldr	r3, [r6, #0]
 8001d6a:	05d9      	lsls	r1, r3, #23
 8001d6c:	d518      	bpl.n	8001da0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	68eb      	ldr	r3, [r5, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d126      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x21e>
 8001d74:	6a23      	ldr	r3, [r4, #32]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fdba 	bl	80018f4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	6a23      	ldr	r3, [r4, #32]
 8001d88:	079b      	lsls	r3, r3, #30
 8001d8a:	d53f      	bpl.n	8001e0c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001d8c:	2f00      	cmp	r7, #0
 8001d8e:	f43f af1b 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	69e3      	ldr	r3, [r4, #28]
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61e3      	str	r3, [r4, #28]
 8001d9a:	e715      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001d9c:	2700      	movs	r7, #0
 8001d9e:	e7e2      	b.n	8001d66 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da0:	6833      	ldr	r3, [r6, #0]
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001da8:	f7ff fda4 	bl	80018f4 <HAL_GetTick>
 8001dac:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	6833      	ldr	r3, [r6, #0]
 8001db0:	05da      	lsls	r2, r3, #23
 8001db2:	d4dc      	bmi.n	8001d6e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7ff fd9e 	bl	80018f4 <HAL_GetTick>
 8001db8:	eba0 0008 	sub.w	r0, r0, r8
 8001dbc:	2864      	cmp	r0, #100	; 0x64
 8001dbe:	d9f6      	bls.n	8001dae <HAL_RCC_OscConfig+0x20a>
 8001dc0:	e731      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	b9ab      	cbnz	r3, 8001df0 <HAL_RCC_OscConfig+0x24c>
 8001dc4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	6223      	str	r3, [r4, #32]
 8001dd0:	6a23      	ldr	r3, [r4, #32]
 8001dd2:	f023 0304 	bic.w	r3, r3, #4
 8001dd6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fd8c 	bl	80018f4 <HAL_GetTick>
 8001ddc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	6a23      	ldr	r3, [r4, #32]
 8001de0:	0798      	lsls	r0, r3, #30
 8001de2:	d5d3      	bpl.n	8001d8c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff fd86 	bl	80018f4 <HAL_GetTick>
 8001de8:	1b80      	subs	r0, r0, r6
 8001dea:	4540      	cmp	r0, r8
 8001dec:	d9f7      	bls.n	8001dde <HAL_RCC_OscConfig+0x23a>
 8001dee:	e71a      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	6a23      	ldr	r3, [r4, #32]
 8001df4:	d103      	bne.n	8001dfe <HAL_RCC_OscConfig+0x25a>
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6223      	str	r3, [r4, #32]
 8001dfc:	e7ba      	b.n	8001d74 <HAL_RCC_OscConfig+0x1d0>
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6223      	str	r3, [r4, #32]
 8001e04:	6a23      	ldr	r3, [r4, #32]
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	e7b6      	b.n	8001d7a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fd72 	bl	80018f4 <HAL_GetTick>
 8001e10:	1b80      	subs	r0, r0, r6
 8001e12:	4540      	cmp	r0, r8
 8001e14:	d9b7      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1e2>
 8001e16:	e706      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	42420000 	.word	0x42420000
 8001e20:	20000000 	.word	0x20000000
 8001e24:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4c2a      	ldr	r4, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d03e      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	2200      	movs	r2, #0
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_RCC_OscConfig+0x334>)
 8001e38:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	d12c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fd59 	bl	80018f4 <HAL_GetTick>
 8001e42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	0199      	lsls	r1, r3, #6
 8001e48:	d420      	bmi.n	8001e8c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e4a:	6a2b      	ldr	r3, [r5, #32]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e52:	6862      	ldr	r2, [r4, #4]
 8001e54:	68a9      	ldr	r1, [r5, #8]
 8001e56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	430b      	orrs	r3, r1
 8001e64:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e68:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x334>)
 8001e70:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001e72:	f7ff fd3f 	bl	80018f4 <HAL_GetTick>
 8001e76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	019a      	lsls	r2, r3, #6
 8001e7c:	f53f aea8 	bmi.w	8001bd0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fd38 	bl	80018f4 <HAL_GetTick>
 8001e84:	1b40      	subs	r0, r0, r5
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d9f6      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2d4>
 8001e8a:	e6cc      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff fd32 	bl	80018f4 <HAL_GetTick>
 8001e90:	1b80      	subs	r0, r0, r6
 8001e92:	2802      	cmp	r0, #2
 8001e94:	d9d6      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2a0>
 8001e96:	e6c6      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001e98:	f7ff fd2c 	bl	80018f4 <HAL_GetTick>
 8001e9c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	f57f ae95 	bpl.w	8001bd0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff fd25 	bl	80018f4 <HAL_GetTick>
 8001eaa:	1b40      	subs	r0, r0, r5
 8001eac:	2802      	cmp	r0, #2
 8001eae:	d9f6      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2fa>
 8001eb0:	e6b9      	b.n	8001c26 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb2:	2801      	cmp	r0, #1
 8001eb4:	f43f aeb8 	beq.w	8001c28 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001eb8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	6a2a      	ldr	r2, [r5, #32]
 8001ebc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001ec0:	4291      	cmp	r1, r2
 8001ec2:	f47f ae9b 	bne.w	8001bfc <HAL_RCC_OscConfig+0x58>
 8001ec6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	f43f ae7f 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x2c>
 8001ed2:	e693      	b.n	8001bfc <HAL_RCC_OscConfig+0x58>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000

08001edc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x38>)
 8001ede:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee0:	f003 010c 	and.w	r1, r3, #12
 8001ee4:	2908      	cmp	r1, #8
 8001ee6:	d112      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001eea:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eee:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef2:	d509      	bpl.n	8001f08 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ef4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ef8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001efc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x44>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f02:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f06:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x48>)
 8001f0a:	4358      	muls	r0, r3
 8001f0c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08004128 	.word	0x08004128
 8001f1c:	007a1200 	.word	0x007a1200
 8001f20:	08004138 	.word	0x08004138
 8001f24:	003d0900 	.word	0x003d0900

08001f28 <HAL_RCC_ClockConfig>:
{
 8001f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f2e:	4604      	mov	r4, r0
 8001f30:	b910      	cbnz	r0, 8001f38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_RCC_ClockConfig+0x124>)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d328      	bcc.n	8001f96 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	6821      	ldr	r1, [r4, #0]
 8001f46:	078e      	lsls	r6, r1, #30
 8001f48:	d430      	bmi.n	8001fac <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	07ca      	lsls	r2, r1, #31
 8001f4c:	d443      	bmi.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	; (800204c <HAL_RCC_ClockConfig+0x124>)
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	42ab      	cmp	r3, r5
 8001f58:	d865      	bhi.n	8002026 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	6822      	ldr	r2, [r4, #0]
 8001f5c:	4d3c      	ldr	r5, [pc, #240]	; (8002050 <HAL_RCC_ClockConfig+0x128>)
 8001f5e:	f012 0f04 	tst.w	r2, #4
 8001f62:	d16c      	bne.n	800203e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	0713      	lsls	r3, r2, #28
 8001f66:	d506      	bpl.n	8001f76 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f68:	686b      	ldr	r3, [r5, #4]
 8001f6a:	6922      	ldr	r2, [r4, #16]
 8001f6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f74:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f76:	f7ff ffb1 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001f7a:	686b      	ldr	r3, [r5, #4]
 8001f7c:	4a35      	ldr	r2, [pc, #212]	; (8002054 <HAL_RCC_ClockConfig+0x12c>)
 8001f7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	40d8      	lsrs	r0, r3
 8001f86:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCC_ClockConfig+0x130>)
 8001f88:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_RCC_ClockConfig+0x134>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f7ff fc6f 	bl	8001870 <HAL_InitTick>
  return HAL_OK;
 8001f92:	2000      	movs	r0, #0
 8001f94:	e7ce      	b.n	8001f34 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	6813      	ldr	r3, [r2, #0]
 8001f98:	f023 0307 	bic.w	r3, r3, #7
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	428b      	cmp	r3, r1
 8001fa8:	d1c3      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xa>
 8001faa:	e7cb      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_RCC_ClockConfig+0x128>)
 8001fae:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb2:	bf1e      	ittt	ne
 8001fb4:	685a      	ldrne	r2, [r3, #4]
 8001fb6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001fba:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbe:	bf42      	ittt	mi
 8001fc0:	685a      	ldrmi	r2, [r3, #4]
 8001fc2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001fc6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	68a0      	ldr	r0, [r4, #8]
 8001fcc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	e7b9      	b.n	8001f4a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	6862      	ldr	r2, [r4, #4]
 8001fd8:	4e1d      	ldr	r6, [pc, #116]	; (8002050 <HAL_RCC_ClockConfig+0x128>)
 8001fda:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fdc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	d11a      	bne.n	8002016 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	d0a5      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fec:	f023 0303 	bic.w	r3, r3, #3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fc7e 	bl	80018f4 <HAL_GetTick>
 8001ff8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	6873      	ldr	r3, [r6, #4]
 8001ffc:	6862      	ldr	r2, [r4, #4]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002006:	d0a2      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f7ff fc74 	bl	80018f4 <HAL_GetTick>
 800200c:	1bc0      	subs	r0, r0, r7
 800200e:	4540      	cmp	r0, r8
 8002010:	d9f3      	bls.n	8001ffa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002012:	2003      	movs	r0, #3
 8002014:	e78e      	b.n	8001f34 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	2a02      	cmp	r2, #2
 8002018:	d102      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800201e:	e7e1      	b.n	8001fe4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	f013 0f02 	tst.w	r3, #2
 8002024:	e7de      	b.n	8001fe4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f023 0307 	bic.w	r3, r3, #7
 800202c:	432b      	orrs	r3, r5
 800202e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	42ab      	cmp	r3, r5
 8002038:	f47f af7b 	bne.w	8001f32 <HAL_RCC_ClockConfig+0xa>
 800203c:	e78d      	b.n	8001f5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203e:	686b      	ldr	r3, [r5, #4]
 8002040:	68e1      	ldr	r1, [r4, #12]
 8002042:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002046:	430b      	orrs	r3, r1
 8002048:	606b      	str	r3, [r5, #4]
 800204a:	e78b      	b.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	08004110 	.word	0x08004110
 8002058:	20000000 	.word	0x20000000
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800206e:	6810      	ldr	r0, [r2, #0]
}
 8002070:	40d8      	lsrs	r0, r3
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000
 8002078:	08004120 	.word	0x08004120
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800208e:	6810      	ldr	r0, [r2, #0]
}
 8002090:	40d8      	lsrs	r0, r3
 8002092:	4770      	bx	lr
 8002094:	40021000 	.word	0x40021000
 8002098:	08004120 	.word	0x08004120
 800209c:	20000000 	.word	0x20000000

080020a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	68c1      	ldr	r1, [r0, #12]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020ae:	430a      	orrs	r2, r1
 80020b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b2:	6882      	ldr	r2, [r0, #8]
 80020b4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80020b6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b8:	4302      	orrs	r2, r0
 80020ba:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80020bc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80020c0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020c4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80020c6:	430a      	orrs	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	69a1      	ldr	r1, [r4, #24]
 80020ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020d2:	430a      	orrs	r2, r1
 80020d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <UART_SetConfig+0x70>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d115      	bne.n	8002108 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020dc:	f7ff ffd0 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020e0:	2319      	movs	r3, #25
 80020e2:	4343      	muls	r3, r0
 80020e4:	6862      	ldr	r2, [r4, #4]
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ee:	2264      	movs	r2, #100	; 0x64
 80020f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80020f4:	fb02 3311 	mls	r3, r2, r1, r3
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	3332      	adds	r3, #50	; 0x32
 80020fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002100:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002104:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002106:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002108:	f7ff ffaa 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 800210c:	e7e8      	b.n	80020e0 <UART_SetConfig+0x40>
 800210e:	bf00      	nop
 8002110:	40013800 	.word	0x40013800

08002114 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	4604      	mov	r4, r0
 8002118:	460e      	mov	r6, r1
 800211a:	4617      	mov	r7, r2
 800211c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	6813      	ldr	r3, [r2, #0]
 8002122:	ea36 0303 	bics.w	r3, r6, r3
 8002126:	d101      	bne.n	800212c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002128:	2000      	movs	r0, #0
 800212a:	e028      	b.n	800217e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800212c:	1c6b      	adds	r3, r5, #1
 800212e:	d0f7      	beq.n	8002120 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002130:	b125      	cbz	r5, 800213c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002132:	f7ff fbdf 	bl	80018f4 <HAL_GetTick>
 8002136:	1bc0      	subs	r0, r0, r7
 8002138:	4285      	cmp	r5, r0
 800213a:	d2f0      	bcs.n	800211e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800213c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	f102 030c 	add.w	r3, r2, #12
 8002142:	e853 3f00 	ldrex	r3, [r3]
 8002146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214a:	320c      	adds	r2, #12
 800214c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002150:	6821      	ldr	r1, [r4, #0]
 8002152:	2800      	cmp	r0, #0
 8002154:	d1f2      	bne.n	800213c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	f101 0314 	add.w	r3, r1, #20
 800215a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002162:	f101 0014 	add.w	r0, r1, #20
 8002166:	e840 3200 	strex	r2, r3, [r0]
 800216a:	2a00      	cmp	r2, #0
 800216c:	d1f3      	bne.n	8002156 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800216e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002170:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002172:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8002176:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800217a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002180 <HAL_UART_Init>:
{
 8002180:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002182:	4604      	mov	r4, r0
 8002184:	b348      	cbz	r0, 80021da <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002186:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800218a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800218e:	b91b      	cbnz	r3, 8002198 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002190:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002194:	f7ff fafe 	bl	8001794 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002198:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800219a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800219c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80021a0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021a2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80021a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021a8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021aa:	f7ff ff79 	bl	80020a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ae:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021ca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021cc:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021d6:	6360      	str	r0, [r4, #52]	; 0x34
}
 80021d8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021da:	2001      	movs	r0, #1
 80021dc:	e7fc      	b.n	80021d8 <HAL_UART_Init+0x58>

080021de <HAL_UART_Transmit>:
{
 80021de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021e2:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80021e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80021e8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80021ea:	2b20      	cmp	r3, #32
{
 80021ec:	460e      	mov	r6, r1
 80021ee:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80021f0:	d13c      	bne.n	800226c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d03c      	beq.n	8002270 <HAL_UART_Transmit+0x92>
 80021f6:	2a00      	cmp	r2, #0
 80021f8:	d03a      	beq.n	8002270 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fa:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	2500      	movs	r5, #0
 80021fe:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002200:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002204:	f7ff fb76 	bl	80018f4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800220a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002210:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002212:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002214:	d103      	bne.n	800221e <HAL_UART_Transmit+0x40>
 8002216:	6923      	ldr	r3, [r4, #16]
 8002218:	b90b      	cbnz	r3, 800221e <HAL_UART_Transmit+0x40>
 800221a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800221c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800221e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002220:	b29b      	uxth	r3, r3
 8002222:	b953      	cbnz	r3, 800223a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002224:	464b      	mov	r3, r9
 8002226:	4642      	mov	r2, r8
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	4620      	mov	r0, r4
 800222c:	f7ff ff72 	bl	8002114 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002230:	b950      	cbnz	r0, 8002248 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002232:	2320      	movs	r3, #32
 8002234:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002238:	e007      	b.n	800224a <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	464b      	mov	r3, r9
 800223c:	4642      	mov	r2, r8
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff ff67 	bl	8002114 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002246:	b110      	cbz	r0, 800224e <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002248:	2003      	movs	r0, #3
}
 800224a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002250:	b94e      	cbnz	r6, 8002266 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002252:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002256:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800225a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800225c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800225e:	3901      	subs	r1, #1
 8002260:	b289      	uxth	r1, r1
 8002262:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002264:	e7db      	b.n	800221e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	f816 3b01 	ldrb.w	r3, [r6], #1
 800226a:	e7f6      	b.n	800225a <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800226c:	2002      	movs	r0, #2
 800226e:	e7ec      	b.n	800224a <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8002270:	2001      	movs	r0, #1
 8002272:	e7ea      	b.n	800224a <HAL_UART_Transmit+0x6c>

08002274 <HAL_UART_Receive>:
{
 8002274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002278:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800227a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 800227e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002280:	2b20      	cmp	r3, #32
{
 8002282:	460e      	mov	r6, r1
 8002284:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002286:	d143      	bne.n	8002310 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002288:	2900      	cmp	r1, #0
 800228a:	d043      	beq.n	8002314 <HAL_UART_Receive+0xa0>
 800228c:	2a00      	cmp	r2, #0
 800228e:	d041      	beq.n	8002314 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002290:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002292:	2500      	movs	r5, #0
 8002294:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002296:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800229a:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800229c:	f7ff fb2a 	bl	80018f4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80022a2:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80022a8:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022ac:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b0:	d103      	bne.n	80022ba <HAL_UART_Receive+0x46>
 80022b2:	6923      	ldr	r3, [r4, #16]
 80022b4:	b90b      	cbnz	r3, 80022ba <HAL_UART_Receive+0x46>
 80022b6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80022b8:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 80022ba:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80022bc:	b280      	uxth	r0, r0
 80022be:	b920      	cbnz	r0, 80022ca <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80022c0:	2320      	movs	r3, #32
 80022c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80022c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	4642      	mov	r2, r8
 80022ce:	2120      	movs	r1, #32
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff ff1f 	bl	8002114 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80022d6:	b9f8      	cbnz	r0, 8002318 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022d8:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80022da:	b94e      	cbnz	r6, 80022f0 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e2:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80022e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80022ee:	e7e4      	b.n	80022ba <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022f0:	68a2      	ldr	r2, [r4, #8]
 80022f2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80022f6:	d002      	beq.n	80022fe <HAL_UART_Receive+0x8a>
 80022f8:	b932      	cbnz	r2, 8002308 <HAL_UART_Receive+0x94>
 80022fa:	6922      	ldr	r2, [r4, #16]
 80022fc:	b922      	cbnz	r2, 8002308 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	b2c9      	uxtb	r1, r1
 8002302:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8002306:	e7ee      	b.n	80022e6 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800230e:	e7f8      	b.n	8002302 <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 8002310:	2002      	movs	r0, #2
 8002312:	e7d8      	b.n	80022c6 <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8002314:	2001      	movs	r0, #1
 8002316:	e7d6      	b.n	80022c6 <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
 800231a:	e7d4      	b.n	80022c6 <HAL_UART_Receive+0x52>

0800231c <__libc_init_array>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	2600      	movs	r6, #0
 8002320:	4d0c      	ldr	r5, [pc, #48]	; (8002354 <__libc_init_array+0x38>)
 8002322:	4c0d      	ldr	r4, [pc, #52]	; (8002358 <__libc_init_array+0x3c>)
 8002324:	1b64      	subs	r4, r4, r5
 8002326:	10a4      	asrs	r4, r4, #2
 8002328:	42a6      	cmp	r6, r4
 800232a:	d109      	bne.n	8002340 <__libc_init_array+0x24>
 800232c:	f000 f822 	bl	8002374 <_init>
 8002330:	2600      	movs	r6, #0
 8002332:	4d0a      	ldr	r5, [pc, #40]	; (800235c <__libc_init_array+0x40>)
 8002334:	4c0a      	ldr	r4, [pc, #40]	; (8002360 <__libc_init_array+0x44>)
 8002336:	1b64      	subs	r4, r4, r5
 8002338:	10a4      	asrs	r4, r4, #2
 800233a:	42a6      	cmp	r6, r4
 800233c:	d105      	bne.n	800234a <__libc_init_array+0x2e>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f855 3b04 	ldr.w	r3, [r5], #4
 8002344:	4798      	blx	r3
 8002346:	3601      	adds	r6, #1
 8002348:	e7ee      	b.n	8002328 <__libc_init_array+0xc>
 800234a:	f855 3b04 	ldr.w	r3, [r5], #4
 800234e:	4798      	blx	r3
 8002350:	3601      	adds	r6, #1
 8002352:	e7f2      	b.n	800233a <__libc_init_array+0x1e>
 8002354:	0800413c 	.word	0x0800413c
 8002358:	0800413c 	.word	0x0800413c
 800235c:	0800413c 	.word	0x0800413c
 8002360:	08004140 	.word	0x08004140

08002364 <memset>:
 8002364:	4603      	mov	r3, r0
 8002366:	4402      	add	r2, r0
 8002368:	4293      	cmp	r3, r2
 800236a:	d100      	bne.n	800236e <memset+0xa>
 800236c:	4770      	bx	lr
 800236e:	f803 1b01 	strb.w	r1, [r3], #1
 8002372:	e7f9      	b.n	8002368 <memset+0x4>

08002374 <_init>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr

08002380 <_fini>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	bf00      	nop
 8002384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002386:	bc08      	pop	{r3}
 8002388:	469e      	mov	lr, r3
 800238a:	4770      	bx	lr
