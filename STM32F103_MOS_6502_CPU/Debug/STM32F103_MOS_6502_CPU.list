
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb8  08002fc0  08002fc0  00012fc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b78  08004b78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b78  08004b78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b78  08004b78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080dc  2000000c  08004b8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200080e8  08004b8c  000280e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001146d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e3  00000000  00000000  000314a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000820a  00000000  00000000  00033685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0003b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  0003c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019645  00000000  00000000  0003d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e80e  00000000  00000000  00056b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000937e4  00000000  00000000  0006531b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f8aff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a6c  00000000  00000000  000f8b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002fa8 	.word	0x08002fa8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002fa8 	.word	0x08002fa8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Delay>:
	LCD_CURSOR_X = 0;
	// Draw the new cursor
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
}

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000234:	b082      	sub	sp, #8
 8000236:	9001      	str	r0, [sp, #4]
 8000238:	9b01      	ldr	r3, [sp, #4]
 800023a:	b90b      	cbnz	r3, 8000240 <Delay+0xc>
 800023c:	b002      	add	sp, #8
 800023e:	4770      	bx	lr
 8000240:	9b01      	ldr	r3, [sp, #4]
 8000242:	3b01      	subs	r3, #1
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	e7f7      	b.n	8000238 <Delay+0x4>

08000248 <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000248:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800024a:	4d0a      	ldr	r5, [pc, #40]	; (8000274 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 800024c:	4c0a      	ldr	r4, [pc, #40]	; (8000278 <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800024e:	4628      	mov	r0, r5
 8000250:	2200      	movs	r2, #0
 8000252:	2102      	movs	r1, #2
 8000254:	f002 fa1a 	bl	800268c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000258:	4620      	mov	r0, r4
 800025a:	f7ff ffeb 	bl	8000234 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	4628      	mov	r0, r5
 8000262:	2102      	movs	r1, #2
 8000264:	f002 fa12 	bl	800268c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000268:	4620      	mov	r0, r4
}
 800026a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 800026e:	f7ff bfe1 	b.w	8000234 <Delay>
 8000272:	bf00      	nop
 8000274:	40011800 	.word	0x40011800
 8000278:	0002bffc 	.word	0x0002bffc

0800027c <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800027c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000280:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000286:	2100      	movs	r1, #0
 8000288:	2081      	movs	r0, #129	; 0x81
 800028a:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800028c:	24ed      	movs	r4, #237	; 0xed
 800028e:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000290:	4b5c      	ldr	r3, [pc, #368]	; (8000404 <LCD_REG_Config+0x188>)
 8000292:	f04f 0c03 	mov.w	ip, #3
 8000296:	8019      	strh	r1, [r3, #0]
 8000298:	8018      	strh	r0, [r3, #0]
 800029a:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800029c:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800029e:	2464      	movs	r4, #100	; 0x64
 80002a0:	801c      	strh	r4, [r3, #0]
 80002a2:	2412      	movs	r4, #18
 80002a4:	f8a3 c000 	strh.w	ip, [r3]
 80002a8:	801c      	strh	r4, [r3, #0]
 80002aa:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002ac:	20e8      	movs	r0, #232	; 0xe8
 80002ae:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002b0:	2085      	movs	r0, #133	; 0x85
 80002b2:	f04f 0810 	mov.w	r8, #16
 80002b6:	8018      	strh	r0, [r3, #0]
 80002b8:	2078      	movs	r0, #120	; 0x78
 80002ba:	f8a3 8000 	strh.w	r8, [r3]
 80002be:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c0:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c2:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c6:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c8:	202c      	movs	r0, #44	; 0x2c
 80002ca:	f8a3 e000 	strh.w	lr, [r3]
 80002ce:	8018      	strh	r0, [r3, #0]
 80002d0:	2034      	movs	r0, #52	; 0x34
 80002d2:	8019      	strh	r1, [r3, #0]
 80002d4:	8018      	strh	r0, [r3, #0]
 80002d6:	2002      	movs	r0, #2
 80002d8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002da:	20f7      	movs	r0, #247	; 0xf7
 80002dc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002de:	2020      	movs	r0, #32
 80002e0:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e2:	20ea      	movs	r0, #234	; 0xea
 80002e4:	8010      	strh	r0, [r2, #0]
 80002e6:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002e8:	8019      	strh	r1, [r3, #0]
 80002ea:	f04f 091b 	mov.w	r9, #27
 80002ee:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002f0:	8010      	strh	r0, [r2, #0]
 80002f2:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002f4:	8019      	strh	r1, [r3, #0]
 80002f6:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002fa:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002fc:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002fe:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000300:	8018      	strh	r0, [r3, #0]
 8000302:	20a2      	movs	r0, #162	; 0xa2
 8000304:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000306:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000308:	2435      	movs	r4, #53	; 0x35
 800030a:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800030c:	24c1      	movs	r4, #193	; 0xc1
 800030e:	25c5      	movs	r5, #197	; 0xc5
 8000310:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000312:	2411      	movs	r4, #17
 8000314:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000316:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000318:	2545      	movs	r5, #69	; 0x45
 800031a:	801d      	strh	r5, [r3, #0]
 800031c:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800031e:	25c7      	movs	r5, #199	; 0xc7
 8000320:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000322:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000324:	20f2      	movs	r0, #242	; 0xf2
 8000326:	2626      	movs	r6, #38	; 0x26
 8000328:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032a:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800032c:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000330:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000332:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000334:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000336:	200f      	movs	r0, #15
 8000338:	8018      	strh	r0, [r3, #0]
 800033a:	801e      	strh	r6, [r3, #0]
 800033c:	2624      	movs	r6, #36	; 0x24
 800033e:	801e      	strh	r6, [r3, #0]
 8000340:	260b      	movs	r6, #11
 8000342:	801e      	strh	r6, [r3, #0]
 8000344:	260e      	movs	r6, #14
 8000346:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800034a:	801e      	strh	r6, [r3, #0]
 800034c:	2609      	movs	r6, #9
 800034e:	801e      	strh	r6, [r3, #0]
 8000350:	f8a3 a000 	strh.w	sl, [r3]
 8000354:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000358:	f8a3 a000 	strh.w	sl, [r3]
 800035c:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000360:	f8a3 a000 	strh.w	sl, [r3]
 8000364:	f04f 0a0c 	mov.w	sl, #12
 8000368:	f8a3 a000 	strh.w	sl, [r3]
 800036c:	f04f 0a17 	mov.w	sl, #23
 8000370:	f8a3 a000 	strh.w	sl, [r3]
 8000374:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000376:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800037a:	2607      	movs	r6, #7
 800037c:	8018      	strh	r0, [r3, #0]
 800037e:	801e      	strh	r6, [r3, #0]
 8000380:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000382:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000386:	f04f 0a19 	mov.w	sl, #25
 800038a:	8019      	strh	r1, [r3, #0]
 800038c:	f8a3 a000 	strh.w	sl, [r3]
 8000390:	f8a3 9000 	strh.w	r9, [r3]
 8000394:	f04f 0904 	mov.w	r9, #4
 8000398:	f8a3 9000 	strh.w	r9, [r3]
 800039c:	f8a3 8000 	strh.w	r8, [r3]
 80003a0:	801e      	strh	r6, [r3, #0]
 80003a2:	f04f 0847 	mov.w	r8, #71	; 0x47
 80003a6:	262a      	movs	r6, #42	; 0x2a
 80003a8:	801e      	strh	r6, [r3, #0]
 80003aa:	f8a3 8000 	strh.w	r8, [r3]
 80003ae:	f8a3 e000 	strh.w	lr, [r3]
 80003b2:	f8a3 c000 	strh.w	ip, [r3]
 80003b6:	f04f 0c06 	mov.w	ip, #6
 80003ba:	f8a3 c000 	strh.w	ip, [r3]
 80003be:	f8a3 c000 	strh.w	ip, [r3]
 80003c2:	801f      	strh	r7, [r3, #0]
 80003c4:	2738      	movs	r7, #56	; 0x38
 80003c6:	801f      	strh	r7, [r3, #0]
 80003c8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003ca:	2036      	movs	r0, #54	; 0x36
 80003cc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003ce:	2068      	movs	r0, #104	; 0x68
 80003d0:	8018      	strh	r0, [r3, #0]
 80003d2:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003d4:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003d6:	8019      	strh	r1, [r3, #0]
 80003d8:	8019      	strh	r1, [r3, #0]
 80003da:	8019      	strh	r1, [r3, #0]
 80003dc:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003de:	202b      	movs	r0, #43	; 0x2b
 80003e0:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003e2:	8019      	strh	r1, [r3, #0]
 80003e4:	8019      	strh	r1, [r3, #0]
 80003e6:	213f      	movs	r1, #63	; 0x3f
 80003e8:	801d      	strh	r5, [r3, #0]
 80003ea:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003ec:	213a      	movs	r1, #58	; 0x3a
 80003ee:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003f0:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003f4:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003f6:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 80003f8:	f7ff ff1c 	bl	8000234 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003fc:	2329      	movs	r3, #41	; 0x29
 80003fe:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000404:	60020000 	.word	0x60020000
 8000408:	0002bffc 	.word	0x0002bffc

0800040c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800040c:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800040e:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000412:	242a      	movs	r4, #42	; 0x2a
 8000414:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000416:	4c0f      	ldr	r4, [pc, #60]	; (8000454 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000418:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800041a:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800041c:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800041e:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000420:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000422:	3a01      	subs	r2, #1
 8000424:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000426:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000428:	3d01      	subs	r5, #1
 800042a:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800042e:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000430:	8025      	strh	r5, [r4, #0]
 8000432:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000434:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8000436:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000438:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 800043a:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800043c:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800043e:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000440:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000442:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000444:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000446:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800044a:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800044c:	8022      	strh	r2, [r4, #0]
 800044e:	8021      	strh	r1, [r4, #0]
	
}
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	bf00      	nop
 8000454:	60020000 	.word	0x60020000

08000458 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000458:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800045c:	222c      	movs	r2, #44	; 0x2c
 800045e:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000460:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000462:	4a03      	ldr	r2, [pc, #12]	; (8000470 <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000464:	4283      	cmp	r3, r0
 8000466:	d100      	bne.n	800046a <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 8000468:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800046a:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 800046c:	3301      	adds	r3, #1
 800046e:	e7f9      	b.n	8000464 <LCD_FillColor+0xc>
 8000470:	60020000 	.word	0x60020000

08000474 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4614      	mov	r4, r2
 8000478:	461d      	mov	r5, r3
 800047a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800047e:	f7ff ffc5 	bl	800040c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000482:	4631      	mov	r1, r6
 8000484:	fb05 f004 	mul.w	r0, r5, r4
	
}
 8000488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800048c:	f7ff bfe4 	b.w	8000458 <LCD_FillColor>

08000490 <LCD_INIT>:
{
 8000490:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000498:	4808      	ldr	r0, [pc, #32]	; (80004bc <LCD_INIT+0x2c>)
 800049a:	f002 f8f7 	bl	800268c <HAL_GPIO_WritePin>
	LCD_Rst();
 800049e:	f7ff fed3 	bl	8000248 <LCD_Rst>
	LCD_REG_Config();
 80004a2:	f7ff feeb 	bl	800027c <LCD_REG_Config>
	LCD_Clear (0, 0, 320, 240, BACKGROUND);
 80004a6:	2100      	movs	r1, #0
 80004a8:	23f0      	movs	r3, #240	; 0xf0
 80004aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80004ae:	4608      	mov	r0, r1
 80004b0:	9100      	str	r1, [sp, #0]
 80004b2:	f7ff ffdf 	bl	8000474 <LCD_Clear>
}
 80004b6:	b003      	add	sp, #12
 80004b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80004bc:	40011400 	.word	0x40011400

080004c0 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80004c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar;
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80004c2:	230a      	movs	r3, #10
{
 80004c4:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80004c6:	2208      	movs	r2, #8
 80004c8:	f7ff ffa0 	bl	800040c <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004cc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80004d0:	222c      	movs	r2, #44	; 0x2c
 80004d2:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80004d4:	230a      	movs	r3, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004d6:	f44f 65fd 	mov.w	r5, #2024	; 0x7e8
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <LCD_DrawChar+0x4c>)
 80004dc:	fb03 1104 	mla	r1, r3, r4, r1
 80004e0:	4c0b      	ldr	r4, [pc, #44]	; (8000510 <LCD_DrawChar+0x50>)
	{
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 80004e2:	2208      	movs	r2, #8
 80004e4:	f811 0b01 	ldrb.w	r0, [r1], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 80004e8:	f010 0601 	ands.w	r6, r0, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80004ec:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004f0:	bf14      	ite	ne
 80004f2:	8025      	strhne	r5, [r4, #0]
 80004f4:	8026      	strheq	r6, [r4, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80004f6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x07e8 ); // Matrix Green
			
			else
				LCD_Write_Data (  0x0000 );								
			
			ucTemp >>= 1;		
 80004fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80004fe:	d1f3      	bne.n	80004e8 <LCD_DrawChar+0x28>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000500:	3b01      	subs	r3, #1
 8000502:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000506:	d1ec      	bne.n	80004e2 <LCD_DrawChar+0x22>
			
		}
		
	}
	
}
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	bf00      	nop
 800050c:	08002fc0 	.word	0x08002fc0
 8000510:	60020000 	.word	0x60020000

08000514 <LCD_CursorForward>:
	LCD_CURSOR_X %= 40;
 8000514:	2228      	movs	r2, #40	; 0x28
	++LCD_CURSOR_X;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <LCD_CursorForward+0x28>)
 8000518:	7818      	ldrb	r0, [r3, #0]
 800051a:	3001      	adds	r0, #1
	LCD_CURSOR_X %= 40;
 800051c:	b2c0      	uxtb	r0, r0
 800051e:	fbb0 f1f2 	udiv	r1, r0, r2
 8000522:	fb02 0011 	mls	r0, r2, r1, r0
 8000526:	b2c0      	uxtb	r0, r0
 8000528:	7018      	strb	r0, [r3, #0]
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <LCD_CursorForward+0x2c>)
 800052c:	22db      	movs	r2, #219	; 0xdb
 800052e:	7819      	ldrb	r1, [r3, #0]
 8000530:	00c0      	lsls	r0, r0, #3
 8000532:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000536:	0049      	lsls	r1, r1, #1
 8000538:	f7ff bfc2 	b.w	80004c0 <LCD_DrawChar>
 800053c:	20000028 	.word	0x20000028
 8000540:	20000029 	.word	0x20000029

08000544 <LCD_CursorNewline>:
void LCD_CursorNewline ( void ) {
 8000544:	b513      	push	{r0, r1, r4, lr}
	if (++LCD_CURSOR_Y > 24) {
 8000546:	4c0f      	ldr	r4, [pc, #60]	; (8000584 <LCD_CursorNewline+0x40>)
 8000548:	7823      	ldrb	r3, [r4, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b18      	cmp	r3, #24
 8000550:	d80d      	bhi.n	800056e <LCD_CursorNewline+0x2a>
 8000552:	7023      	strb	r3, [r4, #0]
	LCD_CURSOR_X = 0;
 8000554:	2000      	movs	r0, #0
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000556:	22db      	movs	r2, #219	; 0xdb
 8000558:	7821      	ldrb	r1, [r4, #0]
	LCD_CURSOR_X = 0;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <LCD_CursorNewline+0x44>)
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800055c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000560:	0049      	lsls	r1, r1, #1
	LCD_CURSOR_X = 0;
 8000562:	7018      	strb	r0, [r3, #0]
}
 8000564:	b002      	add	sp, #8
 8000566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 800056a:	f7ff bfa9 	b.w	80004c0 <LCD_DrawChar>
		LCD_CURSOR_Y = 0;
 800056e:	2100      	movs	r1, #0
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000570:	23f0      	movs	r3, #240	; 0xf0
 8000572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000576:	4608      	mov	r0, r1
 8000578:	9100      	str	r1, [sp, #0]
		LCD_CURSOR_Y = 0;
 800057a:	7021      	strb	r1, [r4, #0]
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800057c:	f7ff ff7a 	bl	8000474 <LCD_Clear>
 8000580:	e7e8      	b.n	8000554 <LCD_CursorNewline+0x10>
 8000582:	bf00      	nop
 8000584:	20000029 	.word	0x20000029
 8000588:	20000028 	.word	0x20000028

0800058c <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8000594:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000598:	b902      	cbnz	r2, 800059c <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 800059a:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800059c:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
			usP += HEIGHT_EN_CHAR;
 80005a0:	bf82      	ittt	hi
 80005a2:	350a      	addhi	r5, #10
 80005a4:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 80005a6:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80005a8:	2de6      	cmp	r5, #230	; 0xe6
			usP = LCD_DispWindow_Start_PAGE;
 80005aa:	bf84      	itt	hi
 80005ac:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 80005ae:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 80005b0:	4629      	mov	r1, r5
 80005b2:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 80005b4:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 80005b6:	f7ff ff83 	bl	80004c0 <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 80005ba:	b2a4      	uxth	r4, r4
 80005bc:	e7ea      	b.n	8000594 <LCD_DrawString+0x8>
	...

080005c0 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 80005c0:	b538      	push	{r3, r4, r5, lr}
 80005c2:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80005c4:	f7ff fe2e 	bl	8000224 <strlen>
 80005c8:	4d0e      	ldr	r5, [pc, #56]	; (8000604 <writelineTerminal+0x44>)
 80005ca:	4621      	mov	r1, r4
 80005cc:	b282      	uxth	r2, r0
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	4628      	mov	r0, r5
 80005d4:	f002 fbaf 	bl	8002d36 <HAL_UART_Transmit>
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2202      	movs	r2, #2
 80005de:	4628      	mov	r0, r5
 80005e0:	4909      	ldr	r1, [pc, #36]	; (8000608 <writelineTerminal+0x48>)
 80005e2:	f002 fba8 	bl	8002d36 <HAL_UART_Transmit>

  // LCD
  LCD_DrawString(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, buffer);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <writelineTerminal+0x4c>)
 80005e8:	4622      	mov	r2, r4
 80005ea:	7819      	ldrb	r1, [r3, #0]
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <writelineTerminal+0x50>)
 80005ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80005f2:	7818      	ldrb	r0, [r3, #0]
 80005f4:	0049      	lsls	r1, r1, #1
 80005f6:	00c0      	lsls	r0, r0, #3
 80005f8:	f7ff ffc8 	bl	800058c <LCD_DrawString>
  LCD_CursorNewline();
}
 80005fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CursorNewline();
 8000600:	f7ff bfa0 	b.w	8000544 <LCD_CursorNewline>
 8000604:	20008074 	.word	0x20008074
 8000608:	080039c0 	.word	0x080039c0
 800060c:	20000029 	.word	0x20000029
 8000610:	20000028 	.word	0x20000028

08000614 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000618:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800061a:	f7ff fe03 	bl	8000224 <strlen>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 800061e:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	b282      	uxth	r2, r0
 8000626:	4621      	mov	r1, r4
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <writeTerminal+0x50>)
 800062a:	f002 fb84 	bl	8002d36 <HAL_UART_Transmit>
  uint8_t tempX = LCD_CURSOR_X;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <writeTerminal+0x54>)
 8000630:	f893 8000 	ldrb.w	r8, [r3]
  uint8_t tempY = LCD_CURSOR_Y;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <writeTerminal+0x58>)
 8000636:	781d      	ldrb	r5, [r3, #0]
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000638:	4620      	mov	r0, r4
 800063a:	f7ff fdf3 	bl	8000224 <strlen>
 800063e:	b2f7      	uxtb	r7, r6
 8000640:	42b8      	cmp	r0, r7
 8000642:	f106 0601 	add.w	r6, r6, #1
 8000646:	d809      	bhi.n	800065c <writeTerminal+0x48>
    LCD_CursorForward();
  }
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000648:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800064c:	4622      	mov	r2, r4
 800064e:	0069      	lsls	r1, r5, #1
 8000650:	ea4f 00c8 	mov.w	r0, r8, lsl #3
}
 8000654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000658:	f7ff bf98 	b.w	800058c <LCD_DrawString>
    LCD_CursorForward();
 800065c:	f7ff ff5a 	bl	8000514 <LCD_CursorForward>
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000660:	e7ea      	b.n	8000638 <writeTerminal+0x24>
 8000662:	bf00      	nop
 8000664:	20008074 	.word	0x20008074
 8000668:	20000028 	.word	0x20000028
 800066c:	20000029 	.word	0x20000029

08000670 <writeTerminalChar>:

/**
 * Write char to UART & LCD without line ending (STM32)
 */
void writeTerminalChar(char *buffer) {
 8000670:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000672:	2201      	movs	r2, #1
 8000674:	4601      	mov	r1, r0
void writeTerminalChar(char *buffer) {
 8000676:	4605      	mov	r5, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <writeTerminalChar+0x3c>)
 800067e:	f002 fb5a 	bl	8002d36 <HAL_UART_Transmit>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <writeTerminalChar+0x40>)
 8000684:	781e      	ldrb	r6, [r3, #0]
  uint8_t tempY = LCD_CURSOR_Y;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <writeTerminalChar+0x44>)
 8000688:	781c      	ldrb	r4, [r3, #0]
  char tempChar[2] = {0x00};
 800068a:	2300      	movs	r3, #0
 800068c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tempChar[0] = buffer[0];
 8000690:	782b      	ldrb	r3, [r5, #0]
  tempChar[1] = '\0';
  LCD_CursorForward();
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000692:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  tempChar[0] = buffer[0];
 8000696:	f88d 3004 	strb.w	r3, [sp, #4]
  LCD_CursorForward();
 800069a:	f7ff ff3b 	bl	8000514 <LCD_CursorForward>
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 800069e:	aa01      	add	r2, sp, #4
 80006a0:	0061      	lsls	r1, r4, #1
 80006a2:	00f0      	lsls	r0, r6, #3
 80006a4:	f7ff ff72 	bl	800058c <LCD_DrawString>
}
 80006a8:	b002      	add	sp, #8
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	20008074 	.word	0x20008074
 80006b0:	20000028 	.word	0x20000028
 80006b4:	20000029 	.word	0x20000029

080006b8 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 80006b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (value == 13) {
 80006ba:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 80006bc:	f88d 000f 	strb.w	r0, [sp, #15]
  if (value == 13) {
 80006c0:	d128      	bne.n	8000714 <handleOutput+0x5c>
    // UART Newline
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
    // LCD Newline
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006c2:	2400      	movs	r4, #0
 80006c4:	4d16      	ldr	r5, [pc, #88]	; (8000720 <handleOutput+0x68>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	2202      	movs	r2, #2
 80006cc:	4915      	ldr	r1, [pc, #84]	; (8000724 <handleOutput+0x6c>)
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <handleOutput+0x70>)
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006d0:	4e16      	ldr	r6, [pc, #88]	; (800072c <handleOutput+0x74>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 80006d2:	f002 fb30 	bl	8002d36 <HAL_UART_Transmit>
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 80006d6:	7829      	ldrb	r1, [r5, #0]
 80006d8:	7830      	ldrb	r0, [r6, #0]
 80006da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80006de:	230a      	movs	r3, #10
 80006e0:	2208      	movs	r2, #8
 80006e2:	9400      	str	r4, [sp, #0]
 80006e4:	0049      	lsls	r1, r1, #1
 80006e6:	00c0      	lsls	r0, r0, #3
 80006e8:	f7ff fec4 	bl	8000474 <LCD_Clear>
    if (++LCD_CURSOR_Y > 23) {
 80006ec:	782b      	ldrb	r3, [r5, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b17      	cmp	r3, #23
 80006f4:	d804      	bhi.n	8000700 <handleOutput+0x48>
 80006f6:	702b      	strb	r3, [r5, #0]
		  LCD_CURSOR_Y = 0;
		  // Clear the screen
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
	  }
	  LCD_CURSOR_X = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	7033      	strb	r3, [r6, #0]
  }
  else {
    writeTerminalChar((char *)&value);
  }
}
 80006fc:	b004      	add	sp, #16
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000700:	23f0      	movs	r3, #240	; 0xf0
 8000702:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000706:	4621      	mov	r1, r4
 8000708:	4620      	mov	r0, r4
 800070a:	9400      	str	r4, [sp, #0]
		  LCD_CURSOR_Y = 0;
 800070c:	702c      	strb	r4, [r5, #0]
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800070e:	f7ff feb1 	bl	8000474 <LCD_Clear>
 8000712:	e7f1      	b.n	80006f8 <handleOutput+0x40>
    writeTerminalChar((char *)&value);
 8000714:	f10d 000f 	add.w	r0, sp, #15
 8000718:	f7ff ffaa 	bl	8000670 <writeTerminalChar>
}
 800071c:	e7ee      	b.n	80006fc <handleOutput+0x44>
 800071e:	bf00      	nop
 8000720:	20000029 	.word	0x20000029
 8000724:	080039c0 	.word	0x080039c0
 8000728:	20008074 	.word	0x20008074
 800072c:	20000028 	.word	0x20000028

08000730 <write6502>:
  if (address < RAM_SIZE) {
 8000730:	0403      	lsls	r3, r0, #16
 8000732:	d402      	bmi.n	800073a <write6502+0xa>
    RAM[address] = value;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <write6502+0x20>)
 8000736:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 8000738:	4770      	bx	lr
 800073a:	f24d 0312 	movw	r3, #53266	; 0xd012
 800073e:	4298      	cmp	r0, r3
 8000740:	d105      	bne.n	800074e <write6502+0x1e>
    pia.display_register = value;
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <write6502+0x24>)
    handleOutput(value);
 8000744:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 8000748:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 800074a:	f7ff bfb5 	b.w	80006b8 <handleOutput>
}
 800074e:	4770      	bx	lr
 8000750:	2000002a 	.word	0x2000002a
 8000754:	200080bd 	.word	0x200080bd

08000758 <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 8000758:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 800075a:	4c18      	ldr	r4, [pc, #96]	; (80007bc <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 800075c:	4d18      	ldr	r5, [pc, #96]	; (80007c0 <initApple1+0x68>)
    HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000762:	f001 fe41 	bl	80023e8 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff ff2a 	bl	80005c0 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <initApple1+0x68>)
 800076e:	f000 f835 	bl	80007dc <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 8000772:	782b      	ldrb	r3, [r5, #0]
 8000774:	2b20      	cmp	r3, #32
 8000776:	d1f2      	bne.n	800075e <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 8000778:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 800077c:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 800077e:	f7ff ff49 	bl	8000614 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 8000782:	f000 f9db 	bl	8000b3c <reset6502>
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <initApple1+0x70>)
 8000788:	f7ff ff1a 	bl	80005c0 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <initApple1+0x74>)
 800078e:	f7ff ff41 	bl	8000614 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 8000792:	4621      	mov	r1, r4
 8000794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <initApple1+0x78>)
 800079a:	f002 fbfd 	bl	8002f98 <memset>
  }
  writelineTerminal(" Complete");
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <initApple1+0x70>)
 80007a0:	f7ff ff0e 	bl	80005c0 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <initApple1+0x7c>)
 80007a6:	f7ff ff35 	bl	8000614 <writeTerminal>
  pia.keyboard_register = 0x00;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 80007ae:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 80007b0:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 80007b2:	709c      	strb	r4, [r3, #2]
}
 80007b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 80007b8:	f7ff bf02 	b.w	80005c0 <writelineTerminal>
 80007bc:	080039c3 	.word	0x080039c3
 80007c0:	200080bc 	.word	0x200080bc
 80007c4:	080039e1 	.word	0x080039e1
 80007c8:	080039f5 	.word	0x080039f5
 80007cc:	080039ff 	.word	0x080039ff
 80007d0:	2000002a 	.word	0x2000002a
 80007d4:	08003a13 	.word	0x08003a13
 80007d8:	200080bd 	.word	0x200080bd

080007dc <handleInput>:
void handleInput(char *buffer) {
 80007dc:	b510      	push	{r4, lr}
 80007de:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80007e0:	230a      	movs	r3, #10
 80007e2:	2201      	movs	r2, #1
 80007e4:	4601      	mov	r1, r0
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <handleInput+0x5c>)
 80007e8:	f002 faf0 	bl	8002dcc <HAL_UART_Receive>
  buffer[0] &= 0x7F; // Mask out MSB
 80007ec:	7823      	ldrb	r3, [r4, #0]
 80007ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 80007f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80007f6:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 80007f8:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 80007fa:	d802      	bhi.n	8000802 <handleInput+0x26>
    buffer[0] -= 0x20;
 80007fc:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 80007fe:	7023      	strb	r3, [r4, #0]
}
 8000800:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d101      	bne.n	800080a <handleInput+0x2e>
    buffer[0] = '\r';
 8000806:	230d      	movs	r3, #13
 8000808:	e7f9      	b.n	80007fe <handleInput+0x22>
  else if (buffer[0] == '\b') {
 800080a:	2b08      	cmp	r3, #8
 800080c:	d101      	bne.n	8000812 <handleInput+0x36>
    buffer[0] = 0x5F;
 800080e:	235f      	movs	r3, #95	; 0x5f
 8000810:	e7f5      	b.n	80007fe <handleInput+0x22>
  else if (buffer[0] == 0x7F) {
 8000812:	2b7f      	cmp	r3, #127	; 0x7f
 8000814:	d0fb      	beq.n	800080e <handleInput+0x32>
  else if (buffer[0] == 0x03) {
 8000816:	2b03      	cmp	r3, #3
 8000818:	d1f2      	bne.n	8000800 <handleInput+0x24>
    writelineTerminal("[Ctrl + C] Resetting in 5 seconds...");
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <handleInput+0x60>)
 800081c:	f7ff fed0 	bl	80005c0 <writelineTerminal>
    HAL_Delay(5000);
 8000820:	f241 3088 	movw	r0, #5000	; 0x1388
 8000824:	f001 fde0 	bl	80023e8 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 8000828:	2220      	movs	r2, #32
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <handleInput+0x64>)
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 8000832:	f7ff bf91 	b.w	8000758 <initApple1>
 8000836:	bf00      	nop
 8000838:	20008074 	.word	0x20008074
 800083c:	08003a27 	.word	0x08003a27
 8000840:	200080bc 	.word	0x200080bc

08000844 <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 8000844:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 8000846:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 8000848:	d402      	bmi.n	8000850 <read6502+0xc>
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 800084c:	5c18      	ldrb	r0, [r3, r0]
 800084e:	e005      	b.n	800085c <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 8000850:	f24d 0310 	movw	r3, #53264	; 0xd010
 8000854:	4298      	cmp	r0, r3
 8000856:	d102      	bne.n	800085e <read6502+0x1a>
    return pia.keyboard_register;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <read6502+0x64>)
 800085a:	7818      	ldrb	r0, [r3, #0]
}
 800085c:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 800085e:	f24d 0311 	movw	r3, #53265	; 0xd011
 8000862:	4298      	cmp	r0, r3
 8000864:	d10f      	bne.n	8000886 <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 8000866:	4c11      	ldr	r4, [pc, #68]	; (80008ac <read6502+0x68>)
 8000868:	4620      	mov	r0, r4
 800086a:	f7ff ffb7 	bl	80007dc <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 800086e:	7823      	ldrb	r3, [r4, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <read6502+0x64>)
 8000872:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8000876:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 8000878:	b90b      	cbnz	r3, 800087e <read6502+0x3a>
      return 0x00;
 800087a:	2000      	movs	r0, #0
 800087c:	e7ee      	b.n	800085c <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 800087e:	2300      	movs	r3, #0
      return 0x80;
 8000880:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 8000882:	7023      	strb	r3, [r4, #0]
      return 0x80;
 8000884:	e7ea      	b.n	800085c <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 8000886:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800088a:	b29b      	uxth	r3, r3
 800088c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000890:	d202      	bcs.n	8000898 <read6502+0x54>
      return BASIC[BASIC_addr];
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <read6502+0x6c>)
 8000894:	5cd0      	ldrb	r0, [r2, r3]
 8000896:	e7e1      	b.n	800085c <read6502+0x18>
  if (address >= 0xF000) {
 8000898:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 800089c:	d3ed      	bcc.n	800087a <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <read6502+0x70>)
 80008a0:	b2c0      	uxtb	r0, r0
 80008a2:	e7d3      	b.n	800084c <read6502+0x8>
 80008a4:	2000002a 	.word	0x2000002a
 80008a8:	200080bd 	.word	0x200080bd
 80008ac:	200080bc 	.word	0x200080bc
 80008b0:	08003a4c 	.word	0x08003a4c
 80008b4:	08004a4c 	.word	0x08004a4c

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b510      	push	{r4, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008bc:	2214      	movs	r2, #20
 80008be:	2100      	movs	r1, #0
 80008c0:	a808      	add	r0, sp, #32
 80008c2:	f002 fb69 	bl	8002f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c6:	2214      	movs	r2, #20
 80008c8:	2100      	movs	r1, #0
 80008ca:	a801      	add	r0, sp, #4
 80008cc:	f002 fb64 	bl	8002f98 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f001 fed5 	bl	8002698 <HAL_RCC_OscConfig>
 80008ee:	b108      	cbz	r0, 80008f4 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000904:	4621      	mov	r1, r4
 8000906:	a801      	add	r0, sp, #4
 8000908:	f002 f888 	bl	8002a1c <HAL_RCC_ClockConfig>
 800090c:	b108      	cbz	r0, 8000912 <SystemClock_Config+0x5a>
 800090e:	b672      	cpsid	i
  while (1)
 8000910:	e7fe      	b.n	8000910 <SystemClock_Config+0x58>
}
 8000912:	b010      	add	sp, #64	; 0x40
 8000914:	bd10      	pop	{r4, pc}
	...

08000918 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	2510      	movs	r5, #16
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800091e:	f001 fd3f 	bl	80023a0 <HAL_Init>
  SystemClock_Config();
 8000922:	f7ff ffc9 	bl	80008b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	462a      	mov	r2, r5
 8000928:	2100      	movs	r1, #0
 800092a:	a805      	add	r0, sp, #20
 800092c:	f002 fb34 	bl	8002f98 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <main+0x12c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000932:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	432a      	orrs	r2, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	619a      	str	r2, [r3, #24]
 8000944:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	402a      	ands	r2, r5
 800094c:	9201      	str	r2, [sp, #4]
 800094e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000950:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000952:	483d      	ldr	r0, [pc, #244]	; (8000a48 <main+0x130>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000958:	619a      	str	r2, [r3, #24]
 800095a:	699a      	ldr	r2, [r3, #24]
 800095c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000960:	9202      	str	r2, [sp, #8]
 8000962:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000964:	699a      	ldr	r2, [r3, #24]
 8000966:	f042 0220 	orr.w	r2, r2, #32
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	f002 0220 	and.w	r2, r2, #32
 8000972:	9203      	str	r2, [sp, #12]
 8000974:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	f042 0204 	orr.w	r2, r2, #4
 800097c:	619a      	str	r2, [r3, #24]
 800097e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	9304      	str	r3, [sp, #16]
 8000988:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800098a:	f001 fe7f 	bl	800268c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2102      	movs	r1, #2
 8000992:	482e      	ldr	r0, [pc, #184]	; (8000a4c <main+0x134>)
 8000994:	f001 fe7a 	bl	800268c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000998:	482b      	ldr	r0, [pc, #172]	; (8000a48 <main+0x130>)
 800099a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	e9cd 6805 	strd	r6, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a0:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f001 fd8a 	bl	80024bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80009a8:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80009aa:	4828      	ldr	r0, [pc, #160]	; (8000a4c <main+0x134>)
 80009ac:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	e9cd 3805 	strd	r3, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f001 fd81 	bl	80024bc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80009ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80009be:	4824      	ldr	r0, [pc, #144]	; (8000a50 <main+0x138>)
  huart1.Init.BaudRate = 115200;
 80009c0:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <main+0x13c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80009c6:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ca:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80009cc:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d4:	f002 f980 	bl	8002cd8 <HAL_UART_Init>
 80009d8:	4602      	mov	r2, r0
 80009da:	b108      	cbz	r0, 80009e0 <main+0xc8>
 80009dc:	b672      	cpsid	i
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0xc6>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80009e0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80009e4:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80009e6:	481c      	ldr	r0, [pc, #112]	; (8000a58 <main+0x140>)
  Timing.DataSetupTime = 255;
 80009e8:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80009ea:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80009ec:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80009f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 80009f4:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 80009f6:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 80009fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 80009fe:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a00:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a02:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a06:	e9c0 5205 	strd	r5, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a0a:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a0e:	e9c0 2609 	strd	r2, r6, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000a12:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a16:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 8000a1a:	9509      	str	r5, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8000a1c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a1e:	f002 f8b9 	bl	8002b94 <HAL_SRAM_Init>
 8000a22:	b108      	cbz	r0, 8000a28 <main+0x110>
 8000a24:	b672      	cpsid	i
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0x10e>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <main+0x144>)
 8000a2a:	69d3      	ldr	r3, [r2, #28]
 8000a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a30:	61d3      	str	r3, [r2, #28]
  LCD_INIT(); // Initialize LCD
 8000a32:	f7ff fd2d 	bl	8000490 <LCD_INIT>
  initApple1(); // Initialize Apple I
 8000a36:	f7ff fe8f 	bl	8000758 <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 8000a3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a3e:	f000 ffe1 	bl	8001a04 <exec6502>
  while (1)
 8000a42:	e7fa      	b.n	8000a3a <main+0x122>
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40011400 	.word	0x40011400
 8000a4c:	40011800 	.word	0x40011800
 8000a50:	20008074 	.word	0x20008074
 8000a54:	40013800 	.word	0x40013800
 8000a58:	2000802c 	.word	0x2000802c
 8000a5c:	40010000 	.word	0x40010000

08000a60 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 8000a60:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <getvalue+0x1c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b113      	cbz	r3, 8000a6e <getvalue+0xe>
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <getvalue+0x20>)
 8000a6a:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 8000a6c:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <getvalue+0x24>)
 8000a70:	8818      	ldrh	r0, [r3, #0]
 8000a72:	f7ff fee7 	bl	8000844 <read6502>
 8000a76:	b280      	uxth	r0, r0
 8000a78:	e7f8      	b.n	8000a6c <getvalue+0xc>
 8000a7a:	bf00      	nop
 8000a7c:	200080db 	.word	0x200080db
 8000a80:	200080c1 	.word	0x200080c1
 8000a84:	200080ca 	.word	0x200080ca

08000a88 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000a88:	4a02      	ldr	r2, [pc, #8]	; (8000a94 <bcc.part.0+0xc>)
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200080c4 	.word	0x200080c4

08000a98 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 8000a98:	4a02      	ldr	r2, [pc, #8]	; (8000aa4 <dex.part.0+0xc>)
 8000a9a:	7813      	ldrb	r3, [r2, #0]
 8000a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aa0:	7013      	strb	r3, [r2, #0]
}
 8000aa2:	4770      	bx	lr
 8000aa4:	200080c8 	.word	0x200080c8

08000aa8 <push16>:
void push16(uint16_t pushval) {
 8000aa8:	b538      	push	{r3, r4, r5, lr}
 8000aaa:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8000aac:	4c09      	ldr	r4, [pc, #36]	; (8000ad4 <push16+0x2c>)
 8000aae:	0a29      	lsrs	r1, r5, #8
 8000ab0:	7820      	ldrb	r0, [r4, #0]
 8000ab2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000ab6:	f7ff fe3b 	bl	8000730 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8000aba:	7823      	ldrb	r3, [r4, #0]
 8000abc:	b2e9      	uxtb	r1, r5
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000ac6:	f7ff fe33 	bl	8000730 <write6502>
    sp -= 2;
 8000aca:	7823      	ldrb	r3, [r4, #0]
 8000acc:	3b02      	subs	r3, #2
 8000ace:	7023      	strb	r3, [r4, #0]
}
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200080da 	.word	0x200080da

08000ad8 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <push8+0x14>)
void push8(uint8_t pushval) {
 8000ada:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8000adc:	7813      	ldrb	r3, [r2, #0]
 8000ade:	1e58      	subs	r0, r3, #1
 8000ae0:	7010      	strb	r0, [r2, #0]
 8000ae2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000ae6:	f7ff be23 	b.w	8000730 <write6502>
 8000aea:	bf00      	nop
 8000aec:	200080da 	.word	0x200080da

08000af0 <pull16>:
uint16_t pull16() {
 8000af0:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000af2:	4d0b      	ldr	r5, [pc, #44]	; (8000b20 <pull16+0x30>)
 8000af4:	7828      	ldrb	r0, [r5, #0]
 8000af6:	3001      	adds	r0, #1
 8000af8:	b2c0      	uxtb	r0, r0
 8000afa:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000afe:	f7ff fea1 	bl	8000844 <read6502>
 8000b02:	4604      	mov	r4, r0
 8000b04:	7828      	ldrb	r0, [r5, #0]
 8000b06:	3002      	adds	r0, #2
 8000b08:	b2c0      	uxtb	r0, r0
 8000b0a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000b0e:	f7ff fe99 	bl	8000844 <read6502>
    sp += 2;
 8000b12:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000b14:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8000b18:	3302      	adds	r3, #2
 8000b1a:	702b      	strb	r3, [r5, #0]
}
 8000b1c:	b280      	uxth	r0, r0
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
 8000b20:	200080da 	.word	0x200080da

08000b24 <pull8>:
    return (read6502(BASE_STACK + ++sp));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <pull8+0x14>)
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	3001      	adds	r0, #1
 8000b2a:	b2c0      	uxtb	r0, r0
 8000b2c:	7018      	strb	r0, [r3, #0]
 8000b2e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000b32:	f7ff be87 	b.w	8000844 <read6502>
 8000b36:	bf00      	nop
 8000b38:	200080da 	.word	0x200080da

08000b3c <reset6502>:
void reset6502() {
 8000b3c:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 8000b3e:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 8000b42:	f7ff fe7f 	bl	8000844 <read6502>
 8000b46:	4604      	mov	r4, r0
 8000b48:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8000b4c:	f7ff fe7a 	bl	8000844 <read6502>
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <reset6502+0x3c>)
 8000b52:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000b56:	801c      	strh	r4, [r3, #0]
    a = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <reset6502+0x40>)
 8000b5c:	7013      	strb	r3, [r2, #0]
    x = 0;
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <reset6502+0x44>)
 8000b60:	7013      	strb	r3, [r2, #0]
    y = 0;
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <reset6502+0x48>)
 8000b64:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 8000b66:	22fd      	movs	r2, #253	; 0xfd
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <reset6502+0x4c>)
 8000b6a:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <reset6502+0x50>)
 8000b6e:	7813      	ldrb	r3, [r2, #0]
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	7013      	strb	r3, [r2, #0]
}
 8000b76:	bd10      	pop	{r4, pc}
 8000b78:	200080d4 	.word	0x200080d4
 8000b7c:	200080c1 	.word	0x200080c1
 8000b80:	200080de 	.word	0x200080de
 8000b84:	200080df 	.word	0x200080df
 8000b88:	200080da 	.word	0x200080da
 8000b8c:	200080c8 	.word	0x200080c8

08000b90 <imm>:
    ea = pc++;
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <imm+0x10>)
 8000b92:	8813      	ldrh	r3, [r2, #0]
 8000b94:	1c59      	adds	r1, r3, #1
 8000b96:	8011      	strh	r1, [r2, #0]
 8000b98:	4a02      	ldr	r2, [pc, #8]	; (8000ba4 <imm+0x14>)
 8000b9a:	8013      	strh	r3, [r2, #0]
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200080d4 	.word	0x200080d4
 8000ba4:	200080ca 	.word	0x200080ca

08000ba8 <zp>:
void zp() { // zero-page
 8000ba8:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <zp+0x14>)
 8000bac:	8818      	ldrh	r0, [r3, #0]
 8000bae:	1c42      	adds	r2, r0, #1
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	f7ff fe47 	bl	8000844 <read6502>
 8000bb6:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <zp+0x18>)
 8000bb8:	8018      	strh	r0, [r3, #0]
}
 8000bba:	bd08      	pop	{r3, pc}
 8000bbc:	200080d4 	.word	0x200080d4
 8000bc0:	200080ca 	.word	0x200080ca

08000bc4 <zpx>:
void zpx() { // zero-page,X
 8000bc4:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <zpx+0x1c>)
 8000bc8:	8818      	ldrh	r0, [r3, #0]
 8000bca:	1c42      	adds	r2, r0, #1
 8000bcc:	801a      	strh	r2, [r3, #0]
 8000bce:	f7ff fe39 	bl	8000844 <read6502>
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <zpx+0x20>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4418      	add	r0, r3
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <zpx+0x24>)
 8000bda:	b2c0      	uxtb	r0, r0
 8000bdc:	8018      	strh	r0, [r3, #0]
}
 8000bde:	bd08      	pop	{r3, pc}
 8000be0:	200080d4 	.word	0x200080d4
 8000be4:	200080de 	.word	0x200080de
 8000be8:	200080ca 	.word	0x200080ca

08000bec <zpy>:
void zpy() { // zero-page,Y
 8000bec:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <zpy+0x1c>)
 8000bf0:	8818      	ldrh	r0, [r3, #0]
 8000bf2:	1c42      	adds	r2, r0, #1
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	f7ff fe25 	bl	8000844 <read6502>
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <zpy+0x20>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4418      	add	r0, r3
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <zpy+0x24>)
 8000c02:	b2c0      	uxtb	r0, r0
 8000c04:	8018      	strh	r0, [r3, #0]
}
 8000c06:	bd08      	pop	{r3, pc}
 8000c08:	200080d4 	.word	0x200080d4
 8000c0c:	200080df 	.word	0x200080df
 8000c10:	200080ca 	.word	0x200080ca

08000c14 <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 8000c14:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <rel+0x20>)
 8000c18:	8818      	ldrh	r0, [r3, #0]
 8000c1a:	1c42      	adds	r2, r0, #1
 8000c1c:	801a      	strh	r2, [r3, #0]
 8000c1e:	f7ff fe11 	bl	8000844 <read6502>
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <rel+0x24>)
 8000c24:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 8000c26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000c2a:	bf18      	it	ne
 8000c2c:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8000c30:	8013      	strh	r3, [r2, #0]
}
 8000c32:	bd08      	pop	{r3, pc}
 8000c34:	200080d4 	.word	0x200080d4
 8000c38:	200080d6 	.word	0x200080d6

08000c3c <abso>:
void abso() { // absolute
 8000c3c:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 8000c3e:	4d09      	ldr	r5, [pc, #36]	; (8000c64 <abso+0x28>)
 8000c40:	8828      	ldrh	r0, [r5, #0]
 8000c42:	f7ff fdff 	bl	8000844 <read6502>
 8000c46:	4604      	mov	r4, r0
 8000c48:	8828      	ldrh	r0, [r5, #0]
 8000c4a:	3001      	adds	r0, #1
 8000c4c:	b280      	uxth	r0, r0
 8000c4e:	f7ff fdf9 	bl	8000844 <read6502>
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <abso+0x2c>)
 8000c54:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000c58:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000c5a:	882b      	ldrh	r3, [r5, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	802b      	strh	r3, [r5, #0]
}
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	200080d4 	.word	0x200080d4
 8000c68:	200080ca 	.word	0x200080ca

08000c6c <absx>:
void absx() { // absolute,X
 8000c6c:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000c6e:	4d0a      	ldr	r5, [pc, #40]	; (8000c98 <absx+0x2c>)
 8000c70:	8828      	ldrh	r0, [r5, #0]
 8000c72:	f7ff fde7 	bl	8000844 <read6502>
 8000c76:	4604      	mov	r4, r0
 8000c78:	8828      	ldrh	r0, [r5, #0]
 8000c7a:	3001      	adds	r0, #1
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	f7ff fde1 	bl	8000844 <read6502>
    ea += (uint16_t)x;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000c84:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 8000c88:	7818      	ldrb	r0, [r3, #0]
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <absx+0x34>)
 8000c8c:	4404      	add	r4, r0
 8000c8e:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000c90:	882b      	ldrh	r3, [r5, #0]
 8000c92:	3302      	adds	r3, #2
 8000c94:	802b      	strh	r3, [r5, #0]
}
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
 8000c98:	200080d4 	.word	0x200080d4
 8000c9c:	200080de 	.word	0x200080de
 8000ca0:	200080ca 	.word	0x200080ca

08000ca4 <absy>:
void absy() { // absolute,Y
 8000ca4:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000ca6:	4d0a      	ldr	r5, [pc, #40]	; (8000cd0 <absy+0x2c>)
 8000ca8:	8828      	ldrh	r0, [r5, #0]
 8000caa:	f7ff fdcb 	bl	8000844 <read6502>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	8828      	ldrh	r0, [r5, #0]
 8000cb2:	3001      	adds	r0, #1
 8000cb4:	b280      	uxth	r0, r0
 8000cb6:	f7ff fdc5 	bl	8000844 <read6502>
    ea += (uint16_t)y;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000cbc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 8000cc0:	7818      	ldrb	r0, [r3, #0]
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <absy+0x34>)
 8000cc4:	4404      	add	r4, r0
 8000cc6:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000cc8:	882b      	ldrh	r3, [r5, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	802b      	strh	r3, [r5, #0]
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	200080d4 	.word	0x200080d4
 8000cd4:	200080df 	.word	0x200080df
 8000cd8:	200080ca 	.word	0x200080ca

08000cdc <ind>:
void ind() { // indirect
 8000cdc:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 8000cde:	4e10      	ldr	r6, [pc, #64]	; (8000d20 <ind+0x44>)
 8000ce0:	8830      	ldrh	r0, [r6, #0]
 8000ce2:	f7ff fdaf 	bl	8000844 <read6502>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	8830      	ldrh	r0, [r6, #0]
 8000cea:	3001      	adds	r0, #1
 8000cec:	b280      	uxth	r0, r0
 8000cee:	f7ff fda9 	bl	8000844 <read6502>
 8000cf2:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000cf6:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff fda3 	bl	8000844 <read6502>
 8000cfe:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8000d00:	1c60      	adds	r0, r4, #1
 8000d02:	b2c0      	uxtb	r0, r0
 8000d04:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000d08:	4320      	orrs	r0, r4
 8000d0a:	f7ff fd9b 	bl	8000844 <read6502>
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <ind+0x48>)
 8000d10:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000d14:	801d      	strh	r5, [r3, #0]
    pc += 2;
 8000d16:	8833      	ldrh	r3, [r6, #0]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	8033      	strh	r3, [r6, #0]
}
 8000d1c:	bd70      	pop	{r4, r5, r6, pc}
 8000d1e:	bf00      	nop
 8000d20:	200080d4 	.word	0x200080d4
 8000d24:	200080ca 	.word	0x200080ca

08000d28 <indx>:
void indx() { //  (indirect,X)
 8000d28:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <indx+0x30>)
 8000d2c:	8818      	ldrh	r0, [r3, #0]
 8000d2e:	1c42      	adds	r2, r0, #1
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	f7ff fd87 	bl	8000844 <read6502>
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <indx+0x34>)
 8000d38:	781c      	ldrb	r4, [r3, #0]
 8000d3a:	4404      	add	r4, r0
 8000d3c:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fd80 	bl	8000844 <read6502>
 8000d44:	3401      	adds	r4, #1
 8000d46:	4605      	mov	r5, r0
 8000d48:	b2e0      	uxtb	r0, r4
 8000d4a:	f7ff fd7b 	bl	8000844 <read6502>
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <indx+0x38>)
 8000d50:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000d54:	801d      	strh	r5, [r3, #0]
}
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
 8000d58:	200080d4 	.word	0x200080d4
 8000d5c:	200080de 	.word	0x200080de
 8000d60:	200080ca 	.word	0x200080ca

08000d64 <indy>:
void indy() { //  (indirect),Y
 8000d64:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <indy+0x30>)
 8000d68:	8818      	ldrh	r0, [r3, #0]
 8000d6a:	1c42      	adds	r2, r0, #1
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	f7ff fd69 	bl	8000844 <read6502>
 8000d72:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fd65 	bl	8000844 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 8000d7a:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000d7c:	4605      	mov	r5, r0
 8000d7e:	b2e0      	uxtb	r0, r4
 8000d80:	f7ff fd60 	bl	8000844 <read6502>
    ea += (uint16_t)y;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000d86:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 8000d8a:	7818      	ldrb	r0, [r3, #0]
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <indy+0x38>)
 8000d8e:	4405      	add	r5, r0
 8000d90:	801d      	strh	r5, [r3, #0]
}
 8000d92:	bd38      	pop	{r3, r4, r5, pc}
 8000d94:	200080d4 	.word	0x200080d4
 8000d98:	200080df 	.word	0x200080df
 8000d9c:	200080ca 	.word	0x200080ca

08000da0 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <putvalue+0x18>)
 8000da2:	b2c1      	uxtb	r1, r0
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b113      	cbz	r3, 8000dae <putvalue+0xe>
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <putvalue+0x1c>)
 8000daa:	7019      	strb	r1, [r3, #0]
}
 8000dac:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <putvalue+0x20>)
 8000db0:	8818      	ldrh	r0, [r3, #0]
 8000db2:	f7ff bcbd 	b.w	8000730 <write6502>
 8000db6:	bf00      	nop
 8000db8:	200080db 	.word	0x200080db
 8000dbc:	200080c1 	.word	0x200080c1
 8000dc0:	200080ca 	.word	0x200080ca

08000dc4 <adc>:
void adc() {
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 8000dc6:	f7ff fe4b 	bl	8000a60 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000dca:	4d24      	ldr	r5, [pc, #144]	; (8000e5c <adc+0x98>)
    value = getvalue();
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000dce:	4c25      	ldr	r4, [pc, #148]	; (8000e64 <adc+0xa0>)
    value = getvalue();
 8000dd0:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000dd2:	782b      	ldrb	r3, [r5, #0]
 8000dd4:	7821      	ldrb	r1, [r4, #0]
 8000dd6:	f003 0201 	and.w	r2, r3, #1
 8000dda:	440a      	add	r2, r1
 8000ddc:	4e22      	ldr	r6, [pc, #136]	; (8000e68 <adc+0xa4>)
 8000dde:	4402      	add	r2, r0
 8000de0:	b292      	uxth	r2, r2
    carrycalc(result);
 8000de2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000de6:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8000de8:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8000dea:	bf14      	ite	ne
 8000dec:	f043 0301 	orrne.w	r3, r3, #1
 8000df0:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000df4:	b1c6      	cbz	r6, 8000e28 <adc+0x64>
 8000df6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8000dfa:	ea81 0602 	eor.w	r6, r1, r2
 8000dfe:	ea80 0702 	eor.w	r7, r0, r2
 8000e02:	4630      	mov	r0, r6
 8000e04:	4038      	ands	r0, r7
 8000e06:	0607      	lsls	r7, r0, #24
 8000e08:	bf4c      	ite	mi
 8000e0a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8000e0e:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8000e12:	0616      	lsls	r6, r2, #24
 8000e14:	bf4c      	ite	mi
 8000e16:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000e1a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 8000e1e:	0718      	lsls	r0, r3, #28
 8000e20:	d405      	bmi.n	8000e2e <adc+0x6a>
 8000e22:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 8000e24:	7022      	strb	r2, [r4, #0]
}
 8000e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	e7e5      	b.n	8000dfa <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 8000e2e:	f001 000f 	and.w	r0, r1, #15
 8000e32:	2809      	cmp	r0, #9
            a += 0x06;
 8000e34:	bf84      	itt	hi
 8000e36:	3106      	addhi	r1, #6
 8000e38:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8000e3a:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 8000e3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8000e40:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8000e44:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8000e46:	4909      	ldr	r1, [pc, #36]	; (8000e6c <adc+0xa8>)
        clearcarry();
 8000e48:	702b      	strb	r3, [r5, #0]
            setcarry();
 8000e4a:	bf84      	itt	hi
 8000e4c:	f043 0301 	orrhi.w	r3, r3, #1
 8000e50:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8000e52:	680b      	ldr	r3, [r1, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	600b      	str	r3, [r1, #0]
 8000e58:	e7e4      	b.n	8000e24 <adc+0x60>
 8000e5a:	bf00      	nop
 8000e5c:	200080c8 	.word	0x200080c8
 8000e60:	200080dc 	.word	0x200080dc
 8000e64:	200080c1 	.word	0x200080c1
 8000e68:	200080d8 	.word	0x200080d8
 8000e6c:	200080c4 	.word	0x200080c4

08000e70 <op_and>:
void op_and() {
 8000e70:	b508      	push	{r3, lr}
    value = getvalue();
 8000e72:	f7ff fdf5 	bl	8000a60 <getvalue>
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <op_and+0x40>)
    result = (uint16_t)a & value;
 8000e78:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <op_and+0x44>)
    value = getvalue();
 8000e7a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000e7c:	780b      	ldrb	r3, [r1, #0]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <op_and+0x48>)
 8000e80:	4018      	ands	r0, r3
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <op_and+0x4c>)
 8000e84:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000e86:	7813      	ldrb	r3, [r2, #0]
 8000e88:	b148      	cbz	r0, 8000e9e <op_and+0x2e>
 8000e8a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000e8e:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 8000e92:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000e94:	d107      	bne.n	8000ea6 <op_and+0x36>
 8000e96:	7813      	ldrb	r3, [r2, #0]
 8000e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e9c:	e005      	b.n	8000eaa <op_and+0x3a>
    zerocalc(result);
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000ea4:	e7f7      	b.n	8000e96 <op_and+0x26>
 8000ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eaa:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8000eac:	7008      	strb	r0, [r1, #0]
}
 8000eae:	bd08      	pop	{r3, pc}
 8000eb0:	200080dc 	.word	0x200080dc
 8000eb4:	200080c1 	.word	0x200080c1
 8000eb8:	200080c8 	.word	0x200080c8
 8000ebc:	200080d8 	.word	0x200080d8

08000ec0 <asl>:
void asl() {
 8000ec0:	b508      	push	{r3, lr}
    value = getvalue();
 8000ec2:	f7ff fdcd 	bl	8000a60 <getvalue>
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <asl+0x48>)
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <asl+0x4c>)
 8000eca:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <asl+0x50>)
 8000ece:	0040      	lsls	r0, r0, #1
 8000ed0:	b280      	uxth	r0, r0
 8000ed2:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8000ed4:	7813      	ldrb	r3, [r2, #0]
 8000ed6:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8000eda:	bf14      	ite	ne
 8000edc:	f043 0301 	orrne.w	r3, r3, #1
 8000ee0:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000ee4:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 8000ee8:	bf14      	ite	ne
 8000eea:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8000eee:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8000ef2:	0601      	lsls	r1, r0, #24
 8000ef4:	bf4c      	ite	mi
 8000ef6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000efa:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000efe:	7013      	strb	r3, [r2, #0]
}
 8000f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000f04:	f7ff bf4c 	b.w	8000da0 <putvalue>
 8000f08:	200080dc 	.word	0x200080dc
 8000f0c:	200080c8 	.word	0x200080c8
 8000f10:	200080d8 	.word	0x200080d8

08000f14 <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <bcc+0x30>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	07db      	lsls	r3, r3, #31
 8000f1a:	d412      	bmi.n	8000f42 <bcc+0x2e>
        oldpc = pc;
 8000f1c:	490a      	ldr	r1, [pc, #40]	; (8000f48 <bcc+0x34>)
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <bcc+0x38>)
 8000f20:	880a      	ldrh	r2, [r1, #0]
 8000f22:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <bcc+0x3c>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000f2e:	4053      	eors	r3, r2
 8000f30:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000f34:	d001      	beq.n	8000f3a <bcc+0x26>
 8000f36:	f7ff bda7 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <bcc+0x40>)
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	4770      	bx	lr
 8000f44:	200080c8 	.word	0x200080c8
 8000f48:	200080d4 	.word	0x200080d4
 8000f4c:	200080d0 	.word	0x200080d0
 8000f50:	200080d6 	.word	0x200080d6
 8000f54:	200080c4 	.word	0x200080c4

08000f58 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <bcs+0x30>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	07db      	lsls	r3, r3, #31
 8000f5e:	d512      	bpl.n	8000f86 <bcs+0x2e>
        oldpc = pc;
 8000f60:	490a      	ldr	r1, [pc, #40]	; (8000f8c <bcs+0x34>)
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <bcs+0x38>)
 8000f64:	880a      	ldrh	r2, [r1, #0]
 8000f66:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <bcs+0x3c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000f72:	4053      	eors	r3, r2
 8000f74:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000f78:	d001      	beq.n	8000f7e <bcs+0x26>
 8000f7a:	f7ff bd85 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <bcs+0x40>)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	4770      	bx	lr
 8000f88:	200080c8 	.word	0x200080c8
 8000f8c:	200080d4 	.word	0x200080d4
 8000f90:	200080d0 	.word	0x200080d0
 8000f94:	200080d6 	.word	0x200080d6
 8000f98:	200080c4 	.word	0x200080c4

08000f9c <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <beq+0x30>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	079b      	lsls	r3, r3, #30
 8000fa2:	d512      	bpl.n	8000fca <beq+0x2e>
        oldpc = pc;
 8000fa4:	490a      	ldr	r1, [pc, #40]	; (8000fd0 <beq+0x34>)
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <beq+0x38>)
 8000fa8:	880a      	ldrh	r2, [r1, #0]
 8000faa:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <beq+0x3c>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000fb6:	4053      	eors	r3, r2
 8000fb8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000fbc:	d001      	beq.n	8000fc2 <beq+0x26>
 8000fbe:	f7ff bd63 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 8000fc2:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <beq+0x40>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]
}
 8000fca:	4770      	bx	lr
 8000fcc:	200080c8 	.word	0x200080c8
 8000fd0:	200080d4 	.word	0x200080d4
 8000fd4:	200080d0 	.word	0x200080d0
 8000fd8:	200080d6 	.word	0x200080d6
 8000fdc:	200080c4 	.word	0x200080c4

08000fe0 <op_bit>:
void op_bit() {
 8000fe0:	b508      	push	{r3, lr}
    value = getvalue();
 8000fe2:	f7ff fd3d 	bl	8000a60 <getvalue>
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <op_bit+0x34>)
    result = (uint16_t)a & value;
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <op_bit+0x38>)
    value = getvalue();
 8000fea:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <op_bit+0x3c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4003      	ands	r3, r0
 8000ff2:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <op_bit+0x40>)
 8000ff6:	b14b      	cbz	r3, 800100c <op_bit+0x2c>
 8000ff8:	7813      	ldrb	r3, [r2, #0]
 8000ffa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8000ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001002:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8001006:	4303      	orrs	r3, r0
 8001008:	7013      	strb	r3, [r2, #0]
}
 800100a:	bd08      	pop	{r3, pc}
    zerocalc(result);
 800100c:	7813      	ldrb	r3, [r2, #0]
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	e7f4      	b.n	8000ffe <op_bit+0x1e>
 8001014:	200080dc 	.word	0x200080dc
 8001018:	200080d8 	.word	0x200080d8
 800101c:	200080c1 	.word	0x200080c1
 8001020:	200080c8 	.word	0x200080c8

08001024 <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <bmi+0x34>)
 8001026:	f993 3000 	ldrsb.w	r3, [r3]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da12      	bge.n	8001054 <bmi+0x30>
        oldpc = pc;
 800102e:	490b      	ldr	r1, [pc, #44]	; (800105c <bmi+0x38>)
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <bmi+0x3c>)
 8001032:	880a      	ldrh	r2, [r1, #0]
 8001034:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <bmi+0x40>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b29b      	uxth	r3, r3
 800103e:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001040:	4053      	eors	r3, r2
 8001042:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001046:	d001      	beq.n	800104c <bmi+0x28>
 8001048:	f7ff bd1e 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <bmi+0x44>)
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200080c8 	.word	0x200080c8
 800105c:	200080d4 	.word	0x200080d4
 8001060:	200080d0 	.word	0x200080d0
 8001064:	200080d6 	.word	0x200080d6
 8001068:	200080c4 	.word	0x200080c4

0800106c <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <bne+0x30>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	079b      	lsls	r3, r3, #30
 8001072:	d412      	bmi.n	800109a <bne+0x2e>
        oldpc = pc;
 8001074:	490a      	ldr	r1, [pc, #40]	; (80010a0 <bne+0x34>)
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <bne+0x38>)
 8001078:	880a      	ldrh	r2, [r1, #0]
 800107a:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <bne+0x3c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	4413      	add	r3, r2
 8001082:	b29b      	uxth	r3, r3
 8001084:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001086:	4053      	eors	r3, r2
 8001088:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800108c:	d001      	beq.n	8001092 <bne+0x26>
 800108e:	f7ff bcfb 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <bne+0x40>)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	4770      	bx	lr
 800109c:	200080c8 	.word	0x200080c8
 80010a0:	200080d4 	.word	0x200080d4
 80010a4:	200080d0 	.word	0x200080d0
 80010a8:	200080d6 	.word	0x200080d6
 80010ac:	200080c4 	.word	0x200080c4

080010b0 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <bpl+0x34>)
 80010b2:	f993 3000 	ldrsb.w	r3, [r3]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db12      	blt.n	80010e0 <bpl+0x30>
        oldpc = pc;
 80010ba:	490b      	ldr	r1, [pc, #44]	; (80010e8 <bpl+0x38>)
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <bpl+0x3c>)
 80010be:	880a      	ldrh	r2, [r1, #0]
 80010c0:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <bpl+0x40>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80010cc:	4053      	eors	r3, r2
 80010ce:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80010d2:	d001      	beq.n	80010d8 <bpl+0x28>
 80010d4:	f7ff bcd8 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <bpl+0x44>)
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200080c8 	.word	0x200080c8
 80010e8:	200080d4 	.word	0x200080d4
 80010ec:	200080d0 	.word	0x200080d0
 80010f0:	200080d6 	.word	0x200080d6
 80010f4:	200080c4 	.word	0x200080c4

080010f8 <brk>:
void brk() {
 80010f8:	b538      	push	{r3, r4, r5, lr}
    pc++;
 80010fa:	4d0f      	ldr	r5, [pc, #60]	; (8001138 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 80010fc:	4c0f      	ldr	r4, [pc, #60]	; (800113c <brk+0x44>)
    pc++;
 80010fe:	8828      	ldrh	r0, [r5, #0]
 8001100:	3001      	adds	r0, #1
 8001102:	b280      	uxth	r0, r0
 8001104:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8001106:	f7ff fccf 	bl	8000aa8 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 800110a:	7820      	ldrb	r0, [r4, #0]
 800110c:	f040 0010 	orr.w	r0, r0, #16
 8001110:	f7ff fce2 	bl	8000ad8 <push8>
    setinterrupt(); // set interrupt flag
 8001114:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001116:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001120:	f7ff fb90 	bl	8000844 <read6502>
 8001124:	4604      	mov	r4, r0
 8001126:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800112a:	f7ff fb8b 	bl	8000844 <read6502>
 800112e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8001132:	802c      	strh	r4, [r5, #0]
}
 8001134:	bd38      	pop	{r3, r4, r5, pc}
 8001136:	bf00      	nop
 8001138:	200080d4 	.word	0x200080d4
 800113c:	200080c8 	.word	0x200080c8

08001140 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <bvc+0x30>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	065b      	lsls	r3, r3, #25
 8001146:	d412      	bmi.n	800116e <bvc+0x2e>
        oldpc = pc;
 8001148:	490a      	ldr	r1, [pc, #40]	; (8001174 <bvc+0x34>)
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <bvc+0x38>)
 800114c:	880a      	ldrh	r2, [r1, #0]
 800114e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <bvc+0x3c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800115a:	4053      	eors	r3, r2
 800115c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001160:	d001      	beq.n	8001166 <bvc+0x26>
 8001162:	f7ff bc91 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <bvc+0x40>)
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	4770      	bx	lr
 8001170:	200080c8 	.word	0x200080c8
 8001174:	200080d4 	.word	0x200080d4
 8001178:	200080d0 	.word	0x200080d0
 800117c:	200080d6 	.word	0x200080d6
 8001180:	200080c4 	.word	0x200080c4

08001184 <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <bvs+0x30>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	065b      	lsls	r3, r3, #25
 800118a:	d512      	bpl.n	80011b2 <bvs+0x2e>
        oldpc = pc;
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <bvs+0x34>)
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <bvs+0x38>)
 8001190:	880a      	ldrh	r2, [r1, #0]
 8001192:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <bvs+0x3c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800119e:	4053      	eors	r3, r2
 80011a0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80011a4:	d001      	beq.n	80011aa <bvs+0x26>
 80011a6:	f7ff bc6f 	b.w	8000a88 <bcc.part.0>
            else clockticks6502++;
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <bvs+0x40>)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	6013      	str	r3, [r2, #0]
}
 80011b2:	4770      	bx	lr
 80011b4:	200080c8 	.word	0x200080c8
 80011b8:	200080d4 	.word	0x200080d4
 80011bc:	200080d0 	.word	0x200080d0
 80011c0:	200080d6 	.word	0x200080d6
 80011c4:	200080c4 	.word	0x200080c4

080011c8 <clc>:
    clearcarry();
 80011c8:	4a02      	ldr	r2, [pc, #8]	; (80011d4 <clc+0xc>)
 80011ca:	7813      	ldrb	r3, [r2, #0]
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	7013      	strb	r3, [r2, #0]
}
 80011d2:	4770      	bx	lr
 80011d4:	200080c8 	.word	0x200080c8

080011d8 <cld>:
    cleardecimal();
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <cld+0xc>)
 80011da:	7813      	ldrb	r3, [r2, #0]
 80011dc:	f023 0308 	bic.w	r3, r3, #8
 80011e0:	7013      	strb	r3, [r2, #0]
}
 80011e2:	4770      	bx	lr
 80011e4:	200080c8 	.word	0x200080c8

080011e8 <cli>:
    clearinterrupt();
 80011e8:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <cli+0xc>)
 80011ea:	7813      	ldrb	r3, [r2, #0]
 80011ec:	f023 0304 	bic.w	r3, r3, #4
 80011f0:	7013      	strb	r3, [r2, #0]
}
 80011f2:	4770      	bx	lr
 80011f4:	200080c8 	.word	0x200080c8

080011f8 <clv>:
    clearoverflow();
 80011f8:	4a02      	ldr	r2, [pc, #8]	; (8001204 <clv+0xc>)
 80011fa:	7813      	ldrb	r3, [r2, #0]
 80011fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001200:	7013      	strb	r3, [r2, #0]
}
 8001202:	4770      	bx	lr
 8001204:	200080c8 	.word	0x200080c8

08001208 <cmp>:
void cmp() {
 8001208:	b508      	push	{r3, lr}
    value = getvalue();
 800120a:	f7ff fc29 	bl	8000a60 <getvalue>
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <cmp+0x4c>)
    result = (uint16_t)a - value;
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <cmp+0x50>)
    value = getvalue();
 8001212:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <cmp+0x54>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	1a19      	subs	r1, r3, r0
 800121a:	b289      	uxth	r1, r1
 800121c:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 800121e:	b2c0      	uxtb	r0, r0
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <cmp+0x58>)
 8001222:	4283      	cmp	r3, r0
 8001224:	7813      	ldrb	r3, [r2, #0]
 8001226:	d307      	bcc.n	8001238 <cmp+0x30>
 8001228:	f043 0001 	orr.w	r0, r3, #1
 800122c:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 800122e:	d007      	beq.n	8001240 <cmp+0x38>
        else clearzero();
 8001230:	7813      	ldrb	r3, [r2, #0]
 8001232:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001236:	e005      	b.n	8001244 <cmp+0x3c>
        else clearcarry();
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 800123e:	e7f7      	b.n	8001230 <cmp+0x28>
 8001240:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001244:	0609      	lsls	r1, r1, #24
 8001246:	bf4c      	ite	mi
 8001248:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800124c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001250:	7013      	strb	r3, [r2, #0]
}
 8001252:	bd08      	pop	{r3, pc}
 8001254:	200080dc 	.word	0x200080dc
 8001258:	200080d8 	.word	0x200080d8
 800125c:	200080c1 	.word	0x200080c1
 8001260:	200080c8 	.word	0x200080c8

08001264 <cpx>:
void cpx() {
 8001264:	b508      	push	{r3, lr}
    value = getvalue();
 8001266:	f7ff fbfb 	bl	8000a60 <getvalue>
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <cpx+0x4c>)
    result = (uint16_t)x - value;
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <cpx+0x50>)
    value = getvalue();
 800126e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <cpx+0x54>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	1a19      	subs	r1, r3, r0
 8001276:	b289      	uxth	r1, r1
 8001278:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 800127a:	b2c0      	uxtb	r0, r0
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <cpx+0x58>)
 800127e:	4283      	cmp	r3, r0
 8001280:	7813      	ldrb	r3, [r2, #0]
 8001282:	d307      	bcc.n	8001294 <cpx+0x30>
 8001284:	f043 0001 	orr.w	r0, r3, #1
 8001288:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 800128a:	d007      	beq.n	800129c <cpx+0x38>
        else clearzero();
 800128c:	7813      	ldrb	r3, [r2, #0]
 800128e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001292:	e005      	b.n	80012a0 <cpx+0x3c>
        else clearcarry();
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 800129a:	e7f7      	b.n	800128c <cpx+0x28>
 800129c:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 80012a0:	0609      	lsls	r1, r1, #24
 80012a2:	bf4c      	ite	mi
 80012a4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80012a8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80012ac:	7013      	strb	r3, [r2, #0]
}
 80012ae:	bd08      	pop	{r3, pc}
 80012b0:	200080dc 	.word	0x200080dc
 80012b4:	200080d8 	.word	0x200080d8
 80012b8:	200080de 	.word	0x200080de
 80012bc:	200080c8 	.word	0x200080c8

080012c0 <cpy>:
void cpy() {
 80012c0:	b508      	push	{r3, lr}
    value = getvalue();
 80012c2:	f7ff fbcd 	bl	8000a60 <getvalue>
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <cpy+0x4c>)
    result = (uint16_t)y - value;
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <cpy+0x50>)
    value = getvalue();
 80012ca:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <cpy+0x54>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	1a19      	subs	r1, r3, r0
 80012d2:	b289      	uxth	r1, r1
 80012d4:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 80012d6:	b2c0      	uxtb	r0, r0
 80012d8:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <cpy+0x58>)
 80012da:	4283      	cmp	r3, r0
 80012dc:	7813      	ldrb	r3, [r2, #0]
 80012de:	d307      	bcc.n	80012f0 <cpy+0x30>
 80012e0:	f043 0001 	orr.w	r0, r3, #1
 80012e4:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 80012e6:	d007      	beq.n	80012f8 <cpy+0x38>
        else clearzero();
 80012e8:	7813      	ldrb	r3, [r2, #0]
 80012ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80012ee:	e005      	b.n	80012fc <cpy+0x3c>
        else clearcarry();
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 80012f6:	e7f7      	b.n	80012e8 <cpy+0x28>
 80012f8:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 80012fc:	0609      	lsls	r1, r1, #24
 80012fe:	bf4c      	ite	mi
 8001300:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001304:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001308:	7013      	strb	r3, [r2, #0]
}
 800130a:	bd08      	pop	{r3, pc}
 800130c:	200080dc 	.word	0x200080dc
 8001310:	200080d8 	.word	0x200080d8
 8001314:	200080df 	.word	0x200080df
 8001318:	200080c8 	.word	0x200080c8

0800131c <dec>:
void dec() {
 800131c:	b508      	push	{r3, lr}
    value = getvalue();
 800131e:	f7ff fb9f 	bl	8000a60 <getvalue>
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <dec+0x3c>)
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <dec+0x40>)
 8001326:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <dec+0x44>)
 800132a:	3801      	subs	r0, #1
 800132c:	b280      	uxth	r0, r0
 800132e:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8001330:	b2c3      	uxtb	r3, r0
 8001332:	b16b      	cbz	r3, 8001350 <dec+0x34>
 8001334:	7813      	ldrb	r3, [r2, #0]
 8001336:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800133a:	0601      	lsls	r1, r0, #24
 800133c:	bf4c      	ite	mi
 800133e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001342:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001346:	7013      	strb	r3, [r2, #0]
}
 8001348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 800134c:	f7ff bd28 	b.w	8000da0 <putvalue>
    zerocalc(result);
 8001350:	7813      	ldrb	r3, [r2, #0]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	e7f0      	b.n	800133a <dec+0x1e>
 8001358:	200080dc 	.word	0x200080dc
 800135c:	200080c8 	.word	0x200080c8
 8001360:	200080d8 	.word	0x200080d8

08001364 <dex>:
    x--;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <dex+0x2c>)
    zerocalc(x);
 8001366:	490b      	ldr	r1, [pc, #44]	; (8001394 <dex+0x30>)
    x--;
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	3a01      	subs	r2, #1
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001370:	780b      	ldrb	r3, [r1, #0]
 8001372:	b132      	cbz	r2, 8001382 <dex+0x1e>
 8001374:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001378:	0612      	lsls	r2, r2, #24
 800137a:	700b      	strb	r3, [r1, #0]
 800137c:	d504      	bpl.n	8001388 <dex+0x24>
 800137e:	f7ff bb8b 	b.w	8000a98 <dex.part.0>
    zerocalc(x);
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	e7f7      	b.n	8001378 <dex+0x14>
    signcalc(x);
 8001388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800138c:	700b      	strb	r3, [r1, #0]
}
 800138e:	4770      	bx	lr
 8001390:	200080de 	.word	0x200080de
 8001394:	200080c8 	.word	0x200080c8

08001398 <dey>:

void dey() {
    y--;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <dey+0x2c>)
   
    zerocalc(y);
 800139a:	490b      	ldr	r1, [pc, #44]	; (80013c8 <dey+0x30>)
    y--;
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	3a01      	subs	r2, #1
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 80013a4:	780b      	ldrb	r3, [r1, #0]
 80013a6:	b132      	cbz	r2, 80013b6 <dey+0x1e>
 80013a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80013ac:	0612      	lsls	r2, r2, #24
 80013ae:	700b      	strb	r3, [r1, #0]
 80013b0:	d504      	bpl.n	80013bc <dey+0x24>
 80013b2:	f7ff bb71 	b.w	8000a98 <dex.part.0>
    zerocalc(y);
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	e7f7      	b.n	80013ac <dey+0x14>
    signcalc(y);
 80013bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013c0:	700b      	strb	r3, [r1, #0]
}
 80013c2:	4770      	bx	lr
 80013c4:	200080df 	.word	0x200080df
 80013c8:	200080c8 	.word	0x200080c8

080013cc <eor>:

void eor() {
 80013cc:	b508      	push	{r3, lr}
    value = getvalue();
 80013ce:	f7ff fb47 	bl	8000a60 <getvalue>
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 80013d4:	490d      	ldr	r1, [pc, #52]	; (800140c <eor+0x40>)
    value = getvalue();
 80013d6:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 80013d8:	780b      	ldrb	r3, [r1, #0]
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <eor+0x44>)
 80013dc:	4058      	eors	r0, r3
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <eor+0x48>)
 80013e0:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 80013e2:	b2c3      	uxtb	r3, r0
 80013e4:	b163      	cbz	r3, 8001400 <eor+0x34>
 80013e6:	7813      	ldrb	r3, [r2, #0]
 80013e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80013ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80013f0:	bf14      	ite	ne
 80013f2:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 80013f6:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 80013fa:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 80013fc:	7008      	strb	r0, [r1, #0]
}
 80013fe:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001400:	7813      	ldrb	r3, [r2, #0]
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	e7f1      	b.n	80013ec <eor+0x20>
 8001408:	200080dc 	.word	0x200080dc
 800140c:	200080c1 	.word	0x200080c1
 8001410:	200080c8 	.word	0x200080c8
 8001414:	200080d8 	.word	0x200080d8

08001418 <inc>:

void inc() {
 8001418:	b508      	push	{r3, lr}
    value = getvalue();
 800141a:	f7ff fb21 	bl	8000a60 <getvalue>
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <inc+0x3c>)
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <inc+0x40>)
 8001422:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <inc+0x44>)
 8001426:	3001      	adds	r0, #1
 8001428:	b280      	uxth	r0, r0
 800142a:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 800142c:	b2c3      	uxtb	r3, r0
 800142e:	b16b      	cbz	r3, 800144c <inc+0x34>
 8001430:	7813      	ldrb	r3, [r2, #0]
 8001432:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001436:	0601      	lsls	r1, r0, #24
 8001438:	bf4c      	ite	mi
 800143a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800143e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001442:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001448:	f7ff bcaa 	b.w	8000da0 <putvalue>
    zerocalc(result);
 800144c:	7813      	ldrb	r3, [r2, #0]
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	e7f0      	b.n	8001436 <inc+0x1e>
 8001454:	200080dc 	.word	0x200080dc
 8001458:	200080c8 	.word	0x200080c8
 800145c:	200080d8 	.word	0x200080d8

08001460 <inx>:

void inx() {
    x++;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <inx+0x2c>)
   
    zerocalc(x);
 8001462:	490b      	ldr	r1, [pc, #44]	; (8001490 <inx+0x30>)
    x++;
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	3201      	adds	r2, #1
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 800146c:	780b      	ldrb	r3, [r1, #0]
 800146e:	b132      	cbz	r2, 800147e <inx+0x1e>
 8001470:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001474:	0612      	lsls	r2, r2, #24
 8001476:	700b      	strb	r3, [r1, #0]
 8001478:	d504      	bpl.n	8001484 <inx+0x24>
 800147a:	f7ff bb0d 	b.w	8000a98 <dex.part.0>
    zerocalc(x);
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	e7f7      	b.n	8001474 <inx+0x14>
    signcalc(x);
 8001484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001488:	700b      	strb	r3, [r1, #0]
}
 800148a:	4770      	bx	lr
 800148c:	200080de 	.word	0x200080de
 8001490:	200080c8 	.word	0x200080c8

08001494 <iny>:

void iny() {
    y++;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <iny+0x2c>)
   
    zerocalc(y);
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <iny+0x30>)
    y++;
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	3201      	adds	r2, #1
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 80014a0:	780b      	ldrb	r3, [r1, #0]
 80014a2:	b132      	cbz	r2, 80014b2 <iny+0x1e>
 80014a4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80014a8:	0612      	lsls	r2, r2, #24
 80014aa:	700b      	strb	r3, [r1, #0]
 80014ac:	d504      	bpl.n	80014b8 <iny+0x24>
 80014ae:	f7ff baf3 	b.w	8000a98 <dex.part.0>
    zerocalc(y);
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	e7f7      	b.n	80014a8 <iny+0x14>
    signcalc(y);
 80014b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014bc:	700b      	strb	r3, [r1, #0]
}
 80014be:	4770      	bx	lr
 80014c0:	200080df 	.word	0x200080df
 80014c4:	200080c8 	.word	0x200080c8

080014c8 <jmp>:

void jmp() {
    pc = ea;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <jmp+0xc>)
 80014ca:	881a      	ldrh	r2, [r3, #0]
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <jmp+0x10>)
 80014ce:	801a      	strh	r2, [r3, #0]
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200080ca 	.word	0x200080ca
 80014d8:	200080d4 	.word	0x200080d4

080014dc <jsr>:

void jsr() {
 80014dc:	b510      	push	{r4, lr}
    push16(pc - 1);
 80014de:	4c05      	ldr	r4, [pc, #20]	; (80014f4 <jsr+0x18>)
 80014e0:	8820      	ldrh	r0, [r4, #0]
 80014e2:	3801      	subs	r0, #1
 80014e4:	b280      	uxth	r0, r0
 80014e6:	f7ff fadf 	bl	8000aa8 <push16>
    pc = ea;
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <jsr+0x1c>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	8023      	strh	r3, [r4, #0]
}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	200080d4 	.word	0x200080d4
 80014f8:	200080ca 	.word	0x200080ca

080014fc <lda>:

void lda() {
 80014fc:	b508      	push	{r3, lr}
    value = getvalue();
 80014fe:	f7ff faaf 	bl	8000a60 <getvalue>
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <lda+0x3c>)
    value = getvalue();
 8001506:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001508:	b2c3      	uxtb	r3, r0
 800150a:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <lda+0x40>)
 800150e:	b14b      	cbz	r3, 8001524 <lda+0x28>
 8001510:	7813      	ldrb	r3, [r2, #0]
 8001512:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001516:	0601      	lsls	r1, r0, #24
 8001518:	7013      	strb	r3, [r2, #0]
 800151a:	d507      	bpl.n	800152c <lda+0x30>
}
 800151c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001520:	f7ff baba 	b.w	8000a98 <dex.part.0>
    zerocalc(a);
 8001524:	7813      	ldrb	r3, [r2, #0]
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	e7f4      	b.n	8001516 <lda+0x1a>
    signcalc(a);
 800152c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001530:	7013      	strb	r3, [r2, #0]
}
 8001532:	bd08      	pop	{r3, pc}
 8001534:	200080dc 	.word	0x200080dc
 8001538:	200080c1 	.word	0x200080c1
 800153c:	200080c8 	.word	0x200080c8

08001540 <ldx>:

void ldx() {
 8001540:	b508      	push	{r3, lr}
    value = getvalue();
 8001542:	f7ff fa8d 	bl	8000a60 <getvalue>
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <ldx+0x3c>)
    value = getvalue();
 800154a:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 800154c:	b2c3      	uxtb	r3, r0
 800154e:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <ldx+0x40>)
 8001552:	b14b      	cbz	r3, 8001568 <ldx+0x28>
 8001554:	7813      	ldrb	r3, [r2, #0]
 8001556:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800155a:	0601      	lsls	r1, r0, #24
 800155c:	7013      	strb	r3, [r2, #0]
 800155e:	d507      	bpl.n	8001570 <ldx+0x30>
}
 8001560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001564:	f7ff ba98 	b.w	8000a98 <dex.part.0>
    zerocalc(x);
 8001568:	7813      	ldrb	r3, [r2, #0]
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	e7f4      	b.n	800155a <ldx+0x1a>
    signcalc(x);
 8001570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001574:	7013      	strb	r3, [r2, #0]
}
 8001576:	bd08      	pop	{r3, pc}
 8001578:	200080dc 	.word	0x200080dc
 800157c:	200080de 	.word	0x200080de
 8001580:	200080c8 	.word	0x200080c8

08001584 <ldy>:

void ldy() {
 8001584:	b508      	push	{r3, lr}
    value = getvalue();
 8001586:	f7ff fa6b 	bl	8000a60 <getvalue>
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <ldy+0x3c>)
    value = getvalue();
 800158e:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 8001590:	b2c3      	uxtb	r3, r0
 8001592:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <ldy+0x40>)
 8001596:	b14b      	cbz	r3, 80015ac <ldy+0x28>
 8001598:	7813      	ldrb	r3, [r2, #0]
 800159a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 800159e:	0601      	lsls	r1, r0, #24
 80015a0:	7013      	strb	r3, [r2, #0]
 80015a2:	d507      	bpl.n	80015b4 <ldy+0x30>
}
 80015a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015a8:	f7ff ba76 	b.w	8000a98 <dex.part.0>
    zerocalc(y);
 80015ac:	7813      	ldrb	r3, [r2, #0]
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	e7f4      	b.n	800159e <ldy+0x1a>
    signcalc(y);
 80015b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015b8:	7013      	strb	r3, [r2, #0]
}
 80015ba:	bd08      	pop	{r3, pc}
 80015bc:	200080dc 	.word	0x200080dc
 80015c0:	200080df 	.word	0x200080df
 80015c4:	200080c8 	.word	0x200080c8

080015c8 <lsr>:

void lsr() {
 80015c8:	b508      	push	{r3, lr}
    value = getvalue();
 80015ca:	f7ff fa49 	bl	8000a60 <getvalue>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 80015d2:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 80015d6:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <lsr+0x50>)
 80015da:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80015de:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 80015e2:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 80015e4:	7813      	ldrb	r3, [r2, #0]
 80015e6:	bf14      	ite	ne
 80015e8:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 80015ec:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80015f0:	b161      	cbz	r1, 800160c <lsr+0x44>
 80015f2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80015f6:	0601      	lsls	r1, r0, #24
 80015f8:	bf4c      	ite	mi
 80015fa:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80015fe:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001602:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001608:	f7ff bbca 	b.w	8000da0 <putvalue>
    zerocalc(result);
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	e7f1      	b.n	80015f6 <lsr+0x2e>
 8001612:	bf00      	nop
 8001614:	200080dc 	.word	0x200080dc
 8001618:	200080d8 	.word	0x200080d8
 800161c:	200080c8 	.word	0x200080c8

08001620 <ora>:

void nop() {
}

void ora() {
 8001620:	b508      	push	{r3, lr}
    value = getvalue();
 8001622:	f7ff fa1d 	bl	8000a60 <getvalue>
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <ora+0x3c>)
    result = (uint16_t)a | value;
 8001628:	490d      	ldr	r1, [pc, #52]	; (8001660 <ora+0x40>)
    value = getvalue();
 800162a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 800162c:	780b      	ldrb	r3, [r1, #0]
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <ora+0x44>)
 8001630:	4318      	orrs	r0, r3
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <ora+0x48>)
 8001634:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001636:	b2c3      	uxtb	r3, r0
 8001638:	b163      	cbz	r3, 8001654 <ora+0x34>
 800163a:	7813      	ldrb	r3, [r2, #0]
 800163c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001640:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001644:	bf14      	ite	ne
 8001646:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800164a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 800164e:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001650:	7008      	strb	r0, [r1, #0]
}
 8001652:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001654:	7813      	ldrb	r3, [r2, #0]
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	e7f1      	b.n	8001640 <ora+0x20>
 800165c:	200080dc 	.word	0x200080dc
 8001660:	200080c1 	.word	0x200080c1
 8001664:	200080c8 	.word	0x200080c8
 8001668:	200080d8 	.word	0x200080d8

0800166c <pha>:

void pha() {
    push8(a);
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <pha+0x8>)
 800166e:	7818      	ldrb	r0, [r3, #0]
 8001670:	f7ff ba32 	b.w	8000ad8 <push8>
 8001674:	200080c1 	.word	0x200080c1

08001678 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <php+0xc>)
 800167a:	7818      	ldrb	r0, [r3, #0]
 800167c:	f040 0010 	orr.w	r0, r0, #16
 8001680:	f7ff ba2a 	b.w	8000ad8 <push8>
 8001684:	200080c8 	.word	0x200080c8

08001688 <pla>:
}

void pla() {
 8001688:	b508      	push	{r3, lr}
    a = pull8();
 800168a:	f7ff fa4b 	bl	8000b24 <pull8>
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <pla+0x30>)
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <pla+0x34>)
 8001692:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 8001694:	7813      	ldrb	r3, [r2, #0]
 8001696:	b140      	cbz	r0, 80016aa <pla+0x22>
 8001698:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 800169c:	0601      	lsls	r1, r0, #24
 800169e:	7013      	strb	r3, [r2, #0]
 80016a0:	d506      	bpl.n	80016b0 <pla+0x28>
}
 80016a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80016a6:	f7ff b9f7 	b.w	8000a98 <dex.part.0>
    zerocalc(a);
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	e7f5      	b.n	800169c <pla+0x14>
    signcalc(a);
 80016b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016b4:	7013      	strb	r3, [r2, #0]
}
 80016b6:	bd08      	pop	{r3, pc}
 80016b8:	200080c1 	.word	0x200080c1
 80016bc:	200080c8 	.word	0x200080c8

080016c0 <plp>:

void plp() {
 80016c0:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 80016c2:	f7ff fa2f 	bl	8000b24 <pull8>
 80016c6:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <plp+0x10>)
 80016c8:	f040 0020 	orr.w	r0, r0, #32
 80016cc:	7018      	strb	r0, [r3, #0]
}
 80016ce:	bd08      	pop	{r3, pc}
 80016d0:	200080c8 	.word	0x200080c8

080016d4 <rol>:

void rol() {
 80016d4:	b508      	push	{r3, lr}
    value = getvalue();
 80016d6:	f7ff f9c3 	bl	8000a60 <getvalue>
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 80016dc:	4912      	ldr	r1, [pc, #72]	; (8001728 <rol+0x54>)
    value = getvalue();
 80016de:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 80016e0:	780b      	ldrb	r3, [r1, #0]
 80016e2:	f003 0201 	and.w	r2, r3, #1
 80016e6:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <rol+0x58>)
 80016ec:	b280      	uxth	r0, r0
   
    carrycalc(result);
 80016ee:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 80016f2:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 80016f4:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 80016f6:	bf14      	ite	ne
 80016f8:	f043 0301 	orrne.w	r3, r3, #1
 80016fc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001700:	b162      	cbz	r2, 800171c <rol+0x48>
 8001702:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001706:	0602      	lsls	r2, r0, #24
 8001708:	bf4c      	ite	mi
 800170a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800170e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001712:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 8001714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001718:	f7ff bb42 	b.w	8000da0 <putvalue>
    zerocalc(result);
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	e7f1      	b.n	8001706 <rol+0x32>
 8001722:	bf00      	nop
 8001724:	200080dc 	.word	0x200080dc
 8001728:	200080c8 	.word	0x200080c8
 800172c:	200080d8 	.word	0x200080d8

08001730 <ror>:

void ror() {
 8001730:	b510      	push	{r4, lr}
    value = getvalue();
 8001732:	f7ff f995 	bl	8000a60 <getvalue>
 8001736:	4601      	mov	r1, r0
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800173a:	4c12      	ldr	r4, [pc, #72]	; (8001784 <ror+0x54>)
    value = getvalue();
 800173c:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800173e:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 8001740:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001742:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <ror+0x58>)
    if (value & 1) setcarry();
 800174e:	bf48      	it	mi
 8001750:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001754:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 8001756:	b2c2      	uxtb	r2, r0
        else clearcarry();
 8001758:	bf58      	it	pl
 800175a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800175e:	b162      	cbz	r2, 800177a <ror+0x4a>
 8001760:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001764:	0602      	lsls	r2, r0, #24
 8001766:	bf4c      	ite	mi
 8001768:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800176c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001770:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 8001772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 8001776:	f7ff bb13 	b.w	8000da0 <putvalue>
    zerocalc(result);
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	e7f1      	b.n	8001764 <ror+0x34>
 8001780:	200080dc 	.word	0x200080dc
 8001784:	200080c8 	.word	0x200080c8
 8001788:	200080d8 	.word	0x200080d8

0800178c <rti>:

void rti() {
 800178c:	b508      	push	{r3, lr}
    cpustatus = pull8();
 800178e:	f7ff f9c9 	bl	8000b24 <pull8>
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <rti+0x18>)
 8001794:	7018      	strb	r0, [r3, #0]
    value = pull16();
 8001796:	f7ff f9ab 	bl	8000af0 <pull16>
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <rti+0x1c>)
 800179c:	8018      	strh	r0, [r3, #0]
    pc = value;
 800179e:	4b03      	ldr	r3, [pc, #12]	; (80017ac <rti+0x20>)
 80017a0:	8018      	strh	r0, [r3, #0]
}
 80017a2:	bd08      	pop	{r3, pc}
 80017a4:	200080c8 	.word	0x200080c8
 80017a8:	200080dc 	.word	0x200080dc
 80017ac:	200080d4 	.word	0x200080d4

080017b0 <rts>:

void rts() {
 80017b0:	b508      	push	{r3, lr}
    value = pull16();
 80017b2:	f7ff f99d 	bl	8000af0 <pull16>
 80017b6:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <rts+0x14>)
 80017b8:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <rts+0x18>)
 80017bc:	3001      	adds	r0, #1
 80017be:	8018      	strh	r0, [r3, #0]
}
 80017c0:	bd08      	pop	{r3, pc}
 80017c2:	bf00      	nop
 80017c4:	200080dc 	.word	0x200080dc
 80017c8:	200080d4 	.word	0x200080d4

080017cc <sbc>:

void sbc() {
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 80017ce:	f7ff f947 	bl	8000a60 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80017d2:	4d27      	ldr	r5, [pc, #156]	; (8001870 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <sbc+0xa8>)
 80017d6:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 80017da:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80017dc:	4c26      	ldr	r4, [pc, #152]	; (8001878 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 80017de:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80017e0:	782b      	ldrb	r3, [r5, #0]
 80017e2:	7821      	ldrb	r1, [r4, #0]
 80017e4:	f003 0201 	and.w	r2, r3, #1
 80017e8:	440a      	add	r2, r1
 80017ea:	4e24      	ldr	r6, [pc, #144]	; (800187c <sbc+0xb0>)
 80017ec:	4402      	add	r2, r0
 80017ee:	b292      	uxth	r2, r2
   
    carrycalc(result);
 80017f0:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80017f4:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 80017f6:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 80017f8:	bf14      	ite	ne
 80017fa:	f043 0301 	orrne.w	r3, r3, #1
 80017fe:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001802:	b1c6      	cbz	r6, 8001836 <sbc+0x6a>
 8001804:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8001808:	ea81 0602 	eor.w	r6, r1, r2
 800180c:	ea80 0702 	eor.w	r7, r0, r2
 8001810:	4630      	mov	r0, r6
 8001812:	4038      	ands	r0, r7
 8001814:	0607      	lsls	r7, r0, #24
 8001816:	bf4c      	ite	mi
 8001818:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800181c:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8001820:	0616      	lsls	r6, r2, #24
 8001822:	bf4c      	ite	mi
 8001824:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001828:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 800182c:	0718      	lsls	r0, r3, #28
 800182e:	d405      	bmi.n	800183c <sbc+0x70>
 8001830:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 8001832:	7022      	strb	r2, [r4, #0]
}
 8001834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	e7e5      	b.n	8001808 <sbc+0x3c>
        a -= 0x66;
 800183c:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 8001840:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 8001842:	f000 000f 	and.w	r0, r0, #15
 8001846:	2809      	cmp	r0, #9
            a += 0x06;
 8001848:	bf8a      	itet	hi
 800184a:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 800184c:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 800184e:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8001850:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 8001852:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8001856:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800185a:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 800185c:	4908      	ldr	r1, [pc, #32]	; (8001880 <sbc+0xb4>)
        clearcarry();
 800185e:	702b      	strb	r3, [r5, #0]
            setcarry();
 8001860:	bf84      	itt	hi
 8001862:	f043 0301 	orrhi.w	r3, r3, #1
 8001866:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8001868:	680b      	ldr	r3, [r1, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	600b      	str	r3, [r1, #0]
 800186e:	e7e0      	b.n	8001832 <sbc+0x66>
 8001870:	200080c8 	.word	0x200080c8
 8001874:	200080dc 	.word	0x200080dc
 8001878:	200080c1 	.word	0x200080c1
 800187c:	200080d8 	.word	0x200080d8
 8001880:	200080c4 	.word	0x200080c4

08001884 <sec>:

void sec() {
    setcarry();
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <sec+0xc>)
 8001886:	7813      	ldrb	r3, [r2, #0]
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	7013      	strb	r3, [r2, #0]
}
 800188e:	4770      	bx	lr
 8001890:	200080c8 	.word	0x200080c8

08001894 <sed>:

void sed() {
    setdecimal();
 8001894:	4a02      	ldr	r2, [pc, #8]	; (80018a0 <sed+0xc>)
 8001896:	7813      	ldrb	r3, [r2, #0]
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	7013      	strb	r3, [r2, #0]
}
 800189e:	4770      	bx	lr
 80018a0:	200080c8 	.word	0x200080c8

080018a4 <sei>:

void sei() {
    setinterrupt();
 80018a4:	4a02      	ldr	r2, [pc, #8]	; (80018b0 <sei+0xc>)
 80018a6:	7813      	ldrb	r3, [r2, #0]
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	7013      	strb	r3, [r2, #0]
}
 80018ae:	4770      	bx	lr
 80018b0:	200080c8 	.word	0x200080c8

080018b4 <sta>:

void sta() {
    putvalue(a);
 80018b4:	4b01      	ldr	r3, [pc, #4]	; (80018bc <sta+0x8>)
 80018b6:	7818      	ldrb	r0, [r3, #0]
 80018b8:	f7ff ba72 	b.w	8000da0 <putvalue>
 80018bc:	200080c1 	.word	0x200080c1

080018c0 <stx>:
}

void stx() {
    putvalue(x);
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <stx+0x8>)
 80018c2:	7818      	ldrb	r0, [r3, #0]
 80018c4:	f7ff ba6c 	b.w	8000da0 <putvalue>
 80018c8:	200080de 	.word	0x200080de

080018cc <sty>:
}

void sty() {
    putvalue(y);
 80018cc:	4b01      	ldr	r3, [pc, #4]	; (80018d4 <sty+0x8>)
 80018ce:	7818      	ldrb	r0, [r3, #0]
 80018d0:	f7ff ba66 	b.w	8000da0 <putvalue>
 80018d4:	200080df 	.word	0x200080df

080018d8 <tax>:
}

void tax() {
    x = a;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <tax+0x2c>)
   
    zerocalc(x);
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <tax+0x30>)
    x = a;
 80018dc:	7819      	ldrb	r1, [r3, #0]
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <tax+0x34>)
 80018e0:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80018e2:	7813      	ldrb	r3, [r2, #0]
 80018e4:	b131      	cbz	r1, 80018f4 <tax+0x1c>
 80018e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80018ea:	0609      	lsls	r1, r1, #24
 80018ec:	7013      	strb	r3, [r2, #0]
 80018ee:	d504      	bpl.n	80018fa <tax+0x22>
 80018f0:	f7ff b8d2 	b.w	8000a98 <dex.part.0>
    zerocalc(x);
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	e7f7      	b.n	80018ea <tax+0x12>
    signcalc(x);
 80018fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018fe:	7013      	strb	r3, [r2, #0]
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200080c1 	.word	0x200080c1
 8001908:	200080c8 	.word	0x200080c8
 800190c:	200080de 	.word	0x200080de

08001910 <tay>:

void tay() {
    y = a;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <tay+0x2c>)
   
    zerocalc(y);
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <tay+0x30>)
    y = a;
 8001914:	7819      	ldrb	r1, [r3, #0]
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <tay+0x34>)
 8001918:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 800191a:	7813      	ldrb	r3, [r2, #0]
 800191c:	b131      	cbz	r1, 800192c <tay+0x1c>
 800191e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001922:	0609      	lsls	r1, r1, #24
 8001924:	7013      	strb	r3, [r2, #0]
 8001926:	d504      	bpl.n	8001932 <tay+0x22>
 8001928:	f7ff b8b6 	b.w	8000a98 <dex.part.0>
    zerocalc(y);
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	e7f7      	b.n	8001922 <tay+0x12>
    signcalc(y);
 8001932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001936:	7013      	strb	r3, [r2, #0]
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200080c1 	.word	0x200080c1
 8001940:	200080c8 	.word	0x200080c8
 8001944:	200080df 	.word	0x200080df

08001948 <tsx>:

void tsx() {
    x = sp;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <tsx+0x2c>)
   
    zerocalc(x);
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <tsx+0x30>)
    x = sp;
 800194c:	7819      	ldrb	r1, [r3, #0]
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <tsx+0x34>)
 8001950:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 8001952:	7813      	ldrb	r3, [r2, #0]
 8001954:	b131      	cbz	r1, 8001964 <tsx+0x1c>
 8001956:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800195a:	0609      	lsls	r1, r1, #24
 800195c:	7013      	strb	r3, [r2, #0]
 800195e:	d504      	bpl.n	800196a <tsx+0x22>
 8001960:	f7ff b89a 	b.w	8000a98 <dex.part.0>
    zerocalc(x);
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	e7f7      	b.n	800195a <tsx+0x12>
    signcalc(x);
 800196a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196e:	7013      	strb	r3, [r2, #0]
}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200080da 	.word	0x200080da
 8001978:	200080c8 	.word	0x200080c8
 800197c:	200080de 	.word	0x200080de

08001980 <txa>:

void txa() {
    a = x;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <txa+0x2c>)
   
    zerocalc(a);
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <txa+0x30>)
    a = x;
 8001984:	7819      	ldrb	r1, [r3, #0]
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <txa+0x34>)
 8001988:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 800198a:	7813      	ldrb	r3, [r2, #0]
 800198c:	b131      	cbz	r1, 800199c <txa+0x1c>
 800198e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001992:	0609      	lsls	r1, r1, #24
 8001994:	7013      	strb	r3, [r2, #0]
 8001996:	d504      	bpl.n	80019a2 <txa+0x22>
 8001998:	f7ff b87e 	b.w	8000a98 <dex.part.0>
    zerocalc(a);
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	e7f7      	b.n	8001992 <txa+0x12>
    signcalc(a);
 80019a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a6:	7013      	strb	r3, [r2, #0]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200080de 	.word	0x200080de
 80019b0:	200080c8 	.word	0x200080c8
 80019b4:	200080c1 	.word	0x200080c1

080019b8 <txs>:

void txs() {
    sp = x;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <txs+0xc>)
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <txs+0x10>)
 80019be:	701a      	strb	r2, [r3, #0]
}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200080de 	.word	0x200080de
 80019c8:	200080da 	.word	0x200080da

080019cc <tya>:

void tya() {
    a = y;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <tya+0x2c>)
   
    zerocalc(a);
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <tya+0x30>)
    a = y;
 80019d0:	7819      	ldrb	r1, [r3, #0]
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <tya+0x34>)
 80019d4:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80019d6:	7813      	ldrb	r3, [r2, #0]
 80019d8:	b131      	cbz	r1, 80019e8 <tya+0x1c>
 80019da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80019de:	0609      	lsls	r1, r1, #24
 80019e0:	7013      	strb	r3, [r2, #0]
 80019e2:	d504      	bpl.n	80019ee <tya+0x22>
 80019e4:	f7ff b858 	b.w	8000a98 <dex.part.0>
    zerocalc(a);
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	e7f7      	b.n	80019de <tya+0x12>
    signcalc(a);
 80019ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f2:	7013      	strb	r3, [r2, #0]
}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200080df 	.word	0x200080df
 80019fc:	200080c8 	.word	0x200080c8
 8001a00:	200080c1 	.word	0x200080c1

08001a04 <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 8001a08:	4e01      	ldr	r6, [pc, #4]	; (8001a10 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 8001a0a:	4d02      	ldr	r5, [pc, #8]	; (8001a14 <exec6502+0x10>)
  while (tickcount--) {
 8001a0c:	b924      	cbnz	r4, 8001a18 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	200080d4 	.word	0x200080d4
 8001a14:	200080db 	.word	0x200080db
    opcode = read6502(pc++);
 8001a18:	8830      	ldrh	r0, [r6, #0]
 8001a1a:	1c43      	adds	r3, r0, #1
 8001a1c:	8033      	strh	r3, [r6, #0]
 8001a1e:	f7fe ff11 	bl	8000844 <read6502>
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <exec6502+0x38>)
    opcode = read6502(pc++);
 8001a26:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8001a28:	7813      	ldrb	r3, [r2, #0]
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	702b      	strb	r3, [r5, #0]
 8001a34:	e004      	b.n	8001a40 <exec6502+0x3c>
 8001a36:	bf00      	nop
 8001a38:	200080d2 	.word	0x200080d2
 8001a3c:	200080c8 	.word	0x200080c8
		switch (opcode) {
 8001a40:	28fe      	cmp	r0, #254	; 0xfe
 8001a42:	f200 8103 	bhi.w	8001c4c <exec6502+0x248>
 8001a46:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001a4a:	00ff      	.short	0x00ff
 8001a4c:	01010107 	.word	0x01010107
 8001a50:	01010101 	.word	0x01010101
 8001a54:	0111010c 	.word	0x0111010c
 8001a58:	01160101 	.word	0x01160101
 8001a5c:	011e0119 	.word	0x011e0119
 8001a60:	01010101 	.word	0x01010101
 8001a64:	01280123 	.word	0x01280123
 8001a68:	012d0101 	.word	0x012d0101
 8001a6c:	01010132 	.word	0x01010132
 8001a70:	01010101 	.word	0x01010101
 8001a74:	013c0137 	.word	0x013c0137
 8001a78:	01410101 	.word	0x01410101
 8001a7c:	01010144 	.word	0x01010144
 8001a80:	01010101 	.word	0x01010101
 8001a84:	014e0149 	.word	0x014e0149
 8001a88:	01530101 	.word	0x01530101
 8001a8c:	01010158 	.word	0x01010158
 8001a90:	015d0101 	.word	0x015d0101
 8001a94:	01670162 	.word	0x01670162
 8001a98:	016c0101 	.word	0x016c0101
 8001a9c:	0174016f 	.word	0x0174016f
 8001aa0:	01790101 	.word	0x01790101
 8001aa4:	0183017e 	.word	0x0183017e
 8001aa8:	01880101 	.word	0x01880101
 8001aac:	0101018d 	.word	0x0101018d
 8001ab0:	01010101 	.word	0x01010101
 8001ab4:	01970192 	.word	0x01970192
 8001ab8:	019c0101 	.word	0x019c0101
 8001abc:	0101019f 	.word	0x0101019f
 8001ac0:	01010101 	.word	0x01010101
 8001ac4:	01a901a4 	.word	0x01a901a4
 8001ac8:	01ae0101 	.word	0x01ae0101
 8001acc:	010101b1 	.word	0x010101b1
 8001ad0:	01010101 	.word	0x01010101
 8001ad4:	01bb01b6 	.word	0x01bb01b6
 8001ad8:	01c00101 	.word	0x01c00101
 8001adc:	01c801c3 	.word	0x01c801c3
 8001ae0:	01cd0101 	.word	0x01cd0101
 8001ae4:	01d701d2 	.word	0x01d701d2
 8001ae8:	01dc0101 	.word	0x01dc0101
 8001aec:	010101e1 	.word	0x010101e1
 8001af0:	01010101 	.word	0x01010101
 8001af4:	01eb01e6 	.word	0x01eb01e6
 8001af8:	01f00101 	.word	0x01f00101
 8001afc:	010101f3 	.word	0x010101f3
 8001b00:	01010101 	.word	0x01010101
 8001b04:	01fd01f8 	.word	0x01fd01f8
 8001b08:	02020101 	.word	0x02020101
 8001b0c:	01010205 	.word	0x01010205
 8001b10:	01010101 	.word	0x01010101
 8001b14:	020f020a 	.word	0x020f020a
 8001b18:	02140101 	.word	0x02140101
 8001b1c:	021c0217 	.word	0x021c0217
 8001b20:	02210101 	.word	0x02210101
 8001b24:	022b0226 	.word	0x022b0226
 8001b28:	02300101 	.word	0x02300101
 8001b2c:	01010235 	.word	0x01010235
 8001b30:	01010101 	.word	0x01010101
 8001b34:	023f023a 	.word	0x023f023a
 8001b38:	02440101 	.word	0x02440101
 8001b3c:	01010247 	.word	0x01010247
 8001b40:	01010101 	.word	0x01010101
 8001b44:	0251024c 	.word	0x0251024c
 8001b48:	01010101 	.word	0x01010101
 8001b4c:	01010256 	.word	0x01010256
 8001b50:	025b0101 	.word	0x025b0101
 8001b54:	02650260 	.word	0x02650260
 8001b58:	026a0101 	.word	0x026a0101
 8001b5c:	026d0101 	.word	0x026d0101
 8001b60:	02700101 	.word	0x02700101
 8001b64:	027a0275 	.word	0x027a0275
 8001b68:	027f0101 	.word	0x027f0101
 8001b6c:	01010284 	.word	0x01010284
 8001b70:	02890101 	.word	0x02890101
 8001b74:	0293028e 	.word	0x0293028e
 8001b78:	02980101 	.word	0x02980101
 8001b7c:	02a3029b 	.word	0x02a3029b
 8001b80:	01010101 	.word	0x01010101
 8001b84:	010102a6 	.word	0x010102a6
 8001b88:	02ab0101 	.word	0x02ab0101
 8001b8c:	02b502b0 	.word	0x02b502b0
 8001b90:	02ba0101 	.word	0x02ba0101
 8001b94:	02c402bf 	.word	0x02c402bf
 8001b98:	02c90101 	.word	0x02c90101
 8001b9c:	02d102cc 	.word	0x02d102cc
 8001ba0:	02d40101 	.word	0x02d40101
 8001ba4:	02de02d9 	.word	0x02de02d9
 8001ba8:	02e30101 	.word	0x02e30101
 8001bac:	010102e8 	.word	0x010102e8
 8001bb0:	02ed0101 	.word	0x02ed0101
 8001bb4:	02f702f2 	.word	0x02f702f2
 8001bb8:	02fc0101 	.word	0x02fc0101
 8001bbc:	030402ff 	.word	0x030402ff
 8001bc0:	03070101 	.word	0x03070101
 8001bc4:	0311030c 	.word	0x0311030c
 8001bc8:	03160101 	.word	0x03160101
 8001bcc:	0101031b 	.word	0x0101031b
 8001bd0:	03200101 	.word	0x03200101
 8001bd4:	032a0325 	.word	0x032a0325
 8001bd8:	032f0101 	.word	0x032f0101
 8001bdc:	03370332 	.word	0x03370332
 8001be0:	033a0101 	.word	0x033a0101
 8001be4:	0344033f 	.word	0x0344033f
 8001be8:	03490101 	.word	0x03490101
 8001bec:	0101034e 	.word	0x0101034e
 8001bf0:	01010101 	.word	0x01010101
 8001bf4:	03580353 	.word	0x03580353
 8001bf8:	035d0101 	.word	0x035d0101
 8001bfc:	01010360 	.word	0x01010360
 8001c00:	01010101 	.word	0x01010101
 8001c04:	036a0365 	.word	0x036a0365
 8001c08:	036f0101 	.word	0x036f0101
 8001c0c:	01010374 	.word	0x01010374
 8001c10:	03790101 	.word	0x03790101
 8001c14:	0383037e 	.word	0x0383037e
 8001c18:	03880101 	.word	0x03880101
 8001c1c:	0101038b 	.word	0x0101038b
 8001c20:	0390038b 	.word	0x0390038b
 8001c24:	039a0395 	.word	0x039a0395
 8001c28:	039f0101 	.word	0x039f0101
 8001c2c:	010103a4 	.word	0x010103a4
 8001c30:	01010101 	.word	0x01010101
 8001c34:	03ae03a9 	.word	0x03ae03a9
 8001c38:	03b30101 	.word	0x03b30101
 8001c3c:	010103b6 	.word	0x010103b6
 8001c40:	01010101 	.word	0x01010101
 8001c44:	03c003bb 	.word	0x03c003bb
			brk();
 8001c48:	f7ff fa56 	bl	80010f8 <brk>
      instructions++;
 8001c4c:	4acf      	ldr	r2, [pc, #828]	; (8001f8c <exec6502+0x588>)
 8001c4e:	3c01      	subs	r4, #1
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e6d9      	b.n	8001a0c <exec6502+0x8>
			indx();
 8001c58:	f7ff f866 	bl	8000d28 <indx>
			ora();
 8001c5c:	f7ff fce0 	bl	8001620 <ora>
			break;
 8001c60:	e7f4      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001c62:	f7fe ffa1 	bl	8000ba8 <zp>
			ora();
 8001c66:	f7ff fcdb 	bl	8001620 <ora>
			break;
 8001c6a:	e7ef      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001c6c:	f7fe ff9c 	bl	8000ba8 <zp>
			asl();
 8001c70:	f7ff f926 	bl	8000ec0 <asl>
			break;
 8001c74:	e7ea      	b.n	8001c4c <exec6502+0x248>
			php();
 8001c76:	f7ff fcff 	bl	8001678 <php>
			break;
 8001c7a:	e7e7      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001c7c:	f7fe ff88 	bl	8000b90 <imm>
			ora();
 8001c80:	f7ff fcce 	bl	8001620 <ora>
			break;
 8001c84:	e7e2      	b.n	8001c4c <exec6502+0x248>
  useaccum = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	702b      	strb	r3, [r5, #0]
			asl();
 8001c8a:	f7ff f919 	bl	8000ec0 <asl>
			break;
 8001c8e:	e7dd      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001c90:	f7fe ffd4 	bl	8000c3c <abso>
			ora();
 8001c94:	f7ff fcc4 	bl	8001620 <ora>
			break;
 8001c98:	e7d8      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001c9a:	f7fe ffcf 	bl	8000c3c <abso>
			asl();
 8001c9e:	f7ff f90f 	bl	8000ec0 <asl>
			break;
 8001ca2:	e7d3      	b.n	8001c4c <exec6502+0x248>
			rel();
 8001ca4:	f7fe ffb6 	bl	8000c14 <rel>
			bpl();
 8001ca8:	f7ff fa02 	bl	80010b0 <bpl>
			break;
 8001cac:	e7ce      	b.n	8001c4c <exec6502+0x248>
			indy();
 8001cae:	f7ff f859 	bl	8000d64 <indy>
			ora();
 8001cb2:	f7ff fcb5 	bl	8001620 <ora>
			break;
 8001cb6:	e7c9      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001cb8:	f7fe ff84 	bl	8000bc4 <zpx>
			ora();
 8001cbc:	f7ff fcb0 	bl	8001620 <ora>
			break;
 8001cc0:	e7c4      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001cc2:	f7fe ff7f 	bl	8000bc4 <zpx>
			asl();
 8001cc6:	f7ff f8fb 	bl	8000ec0 <asl>
			break;
 8001cca:	e7bf      	b.n	8001c4c <exec6502+0x248>
			clc();
 8001ccc:	f7ff fa7c 	bl	80011c8 <clc>
			break;
 8001cd0:	e7bc      	b.n	8001c4c <exec6502+0x248>
			absy();
 8001cd2:	f7fe ffe7 	bl	8000ca4 <absy>
			ora();
 8001cd6:	f7ff fca3 	bl	8001620 <ora>
			break;
 8001cda:	e7b7      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001cdc:	f7fe ffc6 	bl	8000c6c <absx>
			ora();
 8001ce0:	f7ff fc9e 	bl	8001620 <ora>
			break;
 8001ce4:	e7b2      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001ce6:	f7fe ffc1 	bl	8000c6c <absx>
			asl();
 8001cea:	f7ff f8e9 	bl	8000ec0 <asl>
			break;
 8001cee:	e7ad      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001cf0:	f7fe ffa4 	bl	8000c3c <abso>
			jsr();
 8001cf4:	f7ff fbf2 	bl	80014dc <jsr>
			break;
 8001cf8:	e7a8      	b.n	8001c4c <exec6502+0x248>
			indx();
 8001cfa:	f7ff f815 	bl	8000d28 <indx>
			op_and();
 8001cfe:	f7ff f8b7 	bl	8000e70 <op_and>
			break;
 8001d02:	e7a3      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001d04:	f7fe ff50 	bl	8000ba8 <zp>
			op_bit();
 8001d08:	f7ff f96a 	bl	8000fe0 <op_bit>
			break;
 8001d0c:	e79e      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001d0e:	f7fe ff4b 	bl	8000ba8 <zp>
			op_and();
 8001d12:	f7ff f8ad 	bl	8000e70 <op_and>
			break;
 8001d16:	e799      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001d18:	f7fe ff46 	bl	8000ba8 <zp>
			rol();
 8001d1c:	f7ff fcda 	bl	80016d4 <rol>
			break;
 8001d20:	e794      	b.n	8001c4c <exec6502+0x248>
			plp();
 8001d22:	f7ff fccd 	bl	80016c0 <plp>
			break;
 8001d26:	e791      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001d28:	f7fe ff32 	bl	8000b90 <imm>
			op_and();
 8001d2c:	f7ff f8a0 	bl	8000e70 <op_and>
			break;
 8001d30:	e78c      	b.n	8001c4c <exec6502+0x248>
  useaccum = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	702b      	strb	r3, [r5, #0]
			rol();
 8001d36:	f7ff fccd 	bl	80016d4 <rol>
			break;
 8001d3a:	e787      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001d3c:	f7fe ff7e 	bl	8000c3c <abso>
			op_bit();
 8001d40:	f7ff f94e 	bl	8000fe0 <op_bit>
			break;
 8001d44:	e782      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001d46:	f7fe ff79 	bl	8000c3c <abso>
			op_and();
 8001d4a:	f7ff f891 	bl	8000e70 <op_and>
			break;
 8001d4e:	e77d      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001d50:	f7fe ff74 	bl	8000c3c <abso>
			rol();
 8001d54:	f7ff fcbe 	bl	80016d4 <rol>
			break;
 8001d58:	e778      	b.n	8001c4c <exec6502+0x248>
			rel();
 8001d5a:	f7fe ff5b 	bl	8000c14 <rel>
			bmi();
 8001d5e:	f7ff f961 	bl	8001024 <bmi>
			break;
 8001d62:	e773      	b.n	8001c4c <exec6502+0x248>
			indy();
 8001d64:	f7fe fffe 	bl	8000d64 <indy>
			op_and();
 8001d68:	f7ff f882 	bl	8000e70 <op_and>
			break;
 8001d6c:	e76e      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001d6e:	f7fe ff29 	bl	8000bc4 <zpx>
			op_and();
 8001d72:	f7ff f87d 	bl	8000e70 <op_and>
			break;
 8001d76:	e769      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001d78:	f7fe ff24 	bl	8000bc4 <zpx>
			rol();
 8001d7c:	f7ff fcaa 	bl	80016d4 <rol>
			break;
 8001d80:	e764      	b.n	8001c4c <exec6502+0x248>
			sec();
 8001d82:	f7ff fd7f 	bl	8001884 <sec>
			break;
 8001d86:	e761      	b.n	8001c4c <exec6502+0x248>
			absy();
 8001d88:	f7fe ff8c 	bl	8000ca4 <absy>
			op_and();
 8001d8c:	f7ff f870 	bl	8000e70 <op_and>
			break;
 8001d90:	e75c      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001d92:	f7fe ff6b 	bl	8000c6c <absx>
			op_and();
 8001d96:	f7ff f86b 	bl	8000e70 <op_and>
			break;
 8001d9a:	e757      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001d9c:	f7fe ff66 	bl	8000c6c <absx>
			rol();
 8001da0:	f7ff fc98 	bl	80016d4 <rol>
			break;
 8001da4:	e752      	b.n	8001c4c <exec6502+0x248>
			rti();
 8001da6:	f7ff fcf1 	bl	800178c <rti>
			break;
 8001daa:	e74f      	b.n	8001c4c <exec6502+0x248>
			indx();
 8001dac:	f7fe ffbc 	bl	8000d28 <indx>
			eor();
 8001db0:	f7ff fb0c 	bl	80013cc <eor>
			break;
 8001db4:	e74a      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001db6:	f7fe fef7 	bl	8000ba8 <zp>
			eor();
 8001dba:	f7ff fb07 	bl	80013cc <eor>
			break;
 8001dbe:	e745      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001dc0:	f7fe fef2 	bl	8000ba8 <zp>
			lsr();
 8001dc4:	f7ff fc00 	bl	80015c8 <lsr>
			break;
 8001dc8:	e740      	b.n	8001c4c <exec6502+0x248>
			pha();
 8001dca:	f7ff fc4f 	bl	800166c <pha>
			break;
 8001dce:	e73d      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001dd0:	f7fe fede 	bl	8000b90 <imm>
			eor();
 8001dd4:	f7ff fafa 	bl	80013cc <eor>
			break;
 8001dd8:	e738      	b.n	8001c4c <exec6502+0x248>
  useaccum = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	702b      	strb	r3, [r5, #0]
			lsr();
 8001dde:	f7ff fbf3 	bl	80015c8 <lsr>
			break;
 8001de2:	e733      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001de4:	f7fe ff2a 	bl	8000c3c <abso>
			jmp();
 8001de8:	f7ff fb6e 	bl	80014c8 <jmp>
			break;
 8001dec:	e72e      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001dee:	f7fe ff25 	bl	8000c3c <abso>
			eor();
 8001df2:	f7ff faeb 	bl	80013cc <eor>
			break;
 8001df6:	e729      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001df8:	f7fe ff20 	bl	8000c3c <abso>
			lsr();
 8001dfc:	f7ff fbe4 	bl	80015c8 <lsr>
			break;
 8001e00:	e724      	b.n	8001c4c <exec6502+0x248>
			rel();
 8001e02:	f7fe ff07 	bl	8000c14 <rel>
			bvc();
 8001e06:	f7ff f99b 	bl	8001140 <bvc>
			break;
 8001e0a:	e71f      	b.n	8001c4c <exec6502+0x248>
			indy();
 8001e0c:	f7fe ffaa 	bl	8000d64 <indy>
			eor();
 8001e10:	f7ff fadc 	bl	80013cc <eor>
			break;
 8001e14:	e71a      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001e16:	f7fe fed5 	bl	8000bc4 <zpx>
			eor();
 8001e1a:	f7ff fad7 	bl	80013cc <eor>
			break;
 8001e1e:	e715      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001e20:	f7fe fed0 	bl	8000bc4 <zpx>
			lsr();
 8001e24:	f7ff fbd0 	bl	80015c8 <lsr>
			break;
 8001e28:	e710      	b.n	8001c4c <exec6502+0x248>
			cli();
 8001e2a:	f7ff f9dd 	bl	80011e8 <cli>
			break;
 8001e2e:	e70d      	b.n	8001c4c <exec6502+0x248>
			absy();
 8001e30:	f7fe ff38 	bl	8000ca4 <absy>
			eor();
 8001e34:	f7ff faca 	bl	80013cc <eor>
			break;
 8001e38:	e708      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001e3a:	f7fe ff17 	bl	8000c6c <absx>
			eor();
 8001e3e:	f7ff fac5 	bl	80013cc <eor>
			break;
 8001e42:	e703      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001e44:	f7fe ff12 	bl	8000c6c <absx>
			lsr();
 8001e48:	f7ff fbbe 	bl	80015c8 <lsr>
			break;
 8001e4c:	e6fe      	b.n	8001c4c <exec6502+0x248>
			rts();
 8001e4e:	f7ff fcaf 	bl	80017b0 <rts>
			break;
 8001e52:	e6fb      	b.n	8001c4c <exec6502+0x248>
			indx();
 8001e54:	f7fe ff68 	bl	8000d28 <indx>
			adc();
 8001e58:	f7fe ffb4 	bl	8000dc4 <adc>
			break;
 8001e5c:	e6f6      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001e5e:	f7fe fea3 	bl	8000ba8 <zp>
			adc();
 8001e62:	f7fe ffaf 	bl	8000dc4 <adc>
			break;
 8001e66:	e6f1      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001e68:	f7fe fe9e 	bl	8000ba8 <zp>
			ror();
 8001e6c:	f7ff fc60 	bl	8001730 <ror>
			break;
 8001e70:	e6ec      	b.n	8001c4c <exec6502+0x248>
			pla();
 8001e72:	f7ff fc09 	bl	8001688 <pla>
			break;
 8001e76:	e6e9      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001e78:	f7fe fe8a 	bl	8000b90 <imm>
			adc();
 8001e7c:	f7fe ffa2 	bl	8000dc4 <adc>
			break;
 8001e80:	e6e4      	b.n	8001c4c <exec6502+0x248>
  useaccum = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	702b      	strb	r3, [r5, #0]
			ror();
 8001e86:	f7ff fc53 	bl	8001730 <ror>
			break;
 8001e8a:	e6df      	b.n	8001c4c <exec6502+0x248>
			ind();
 8001e8c:	f7fe ff26 	bl	8000cdc <ind>
			jmp();
 8001e90:	f7ff fb1a 	bl	80014c8 <jmp>
			break;
 8001e94:	e6da      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001e96:	f7fe fed1 	bl	8000c3c <abso>
			adc();
 8001e9a:	f7fe ff93 	bl	8000dc4 <adc>
			break;
 8001e9e:	e6d5      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001ea0:	f7fe fecc 	bl	8000c3c <abso>
			ror();
 8001ea4:	f7ff fc44 	bl	8001730 <ror>
			break;
 8001ea8:	e6d0      	b.n	8001c4c <exec6502+0x248>
			rel();
 8001eaa:	f7fe feb3 	bl	8000c14 <rel>
			bvs();
 8001eae:	f7ff f969 	bl	8001184 <bvs>
			break;
 8001eb2:	e6cb      	b.n	8001c4c <exec6502+0x248>
			indy();
 8001eb4:	f7fe ff56 	bl	8000d64 <indy>
			adc();
 8001eb8:	f7fe ff84 	bl	8000dc4 <adc>
			break;
 8001ebc:	e6c6      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001ebe:	f7fe fe81 	bl	8000bc4 <zpx>
			adc();
 8001ec2:	f7fe ff7f 	bl	8000dc4 <adc>
			break;
 8001ec6:	e6c1      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001ec8:	f7fe fe7c 	bl	8000bc4 <zpx>
			ror();
 8001ecc:	f7ff fc30 	bl	8001730 <ror>
			break;
 8001ed0:	e6bc      	b.n	8001c4c <exec6502+0x248>
			sei();
 8001ed2:	f7ff fce7 	bl	80018a4 <sei>
			break;
 8001ed6:	e6b9      	b.n	8001c4c <exec6502+0x248>
			absy();
 8001ed8:	f7fe fee4 	bl	8000ca4 <absy>
			adc();
 8001edc:	f7fe ff72 	bl	8000dc4 <adc>
			break;
 8001ee0:	e6b4      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001ee2:	f7fe fec3 	bl	8000c6c <absx>
			adc();
 8001ee6:	f7fe ff6d 	bl	8000dc4 <adc>
			break;
 8001eea:	e6af      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001eec:	f7fe febe 	bl	8000c6c <absx>
			ror();
 8001ef0:	f7ff fc1e 	bl	8001730 <ror>
			break;
 8001ef4:	e6aa      	b.n	8001c4c <exec6502+0x248>
			indx();
 8001ef6:	f7fe ff17 	bl	8000d28 <indx>
			sta();
 8001efa:	f7ff fcdb 	bl	80018b4 <sta>
			break;
 8001efe:	e6a5      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001f00:	f7fe fe52 	bl	8000ba8 <zp>
			sty();
 8001f04:	f7ff fce2 	bl	80018cc <sty>
			break;
 8001f08:	e6a0      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001f0a:	f7fe fe4d 	bl	8000ba8 <zp>
			sta();
 8001f0e:	f7ff fcd1 	bl	80018b4 <sta>
			break;
 8001f12:	e69b      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001f14:	f7fe fe48 	bl	8000ba8 <zp>
			stx();
 8001f18:	f7ff fcd2 	bl	80018c0 <stx>
			break;
 8001f1c:	e696      	b.n	8001c4c <exec6502+0x248>
			dey();
 8001f1e:	f7ff fa3b 	bl	8001398 <dey>
			break;
 8001f22:	e693      	b.n	8001c4c <exec6502+0x248>
			txa();
 8001f24:	f7ff fd2c 	bl	8001980 <txa>
			break;
 8001f28:	e690      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001f2a:	f7fe fe87 	bl	8000c3c <abso>
			sty();
 8001f2e:	f7ff fccd 	bl	80018cc <sty>
			break;
 8001f32:	e68b      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001f34:	f7fe fe82 	bl	8000c3c <abso>
			sta();
 8001f38:	f7ff fcbc 	bl	80018b4 <sta>
			break;
 8001f3c:	e686      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001f3e:	f7fe fe7d 	bl	8000c3c <abso>
			stx();
 8001f42:	f7ff fcbd 	bl	80018c0 <stx>
			break;
 8001f46:	e681      	b.n	8001c4c <exec6502+0x248>
			rel();
 8001f48:	f7fe fe64 	bl	8000c14 <rel>
			bcc();
 8001f4c:	f7fe ffe2 	bl	8000f14 <bcc>
			break;
 8001f50:	e67c      	b.n	8001c4c <exec6502+0x248>
			indy();
 8001f52:	f7fe ff07 	bl	8000d64 <indy>
			sta();
 8001f56:	f7ff fcad 	bl	80018b4 <sta>
			break;
 8001f5a:	e677      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001f5c:	f7fe fe32 	bl	8000bc4 <zpx>
			sty();
 8001f60:	f7ff fcb4 	bl	80018cc <sty>
			break;
 8001f64:	e672      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8001f66:	f7fe fe2d 	bl	8000bc4 <zpx>
			sta();
 8001f6a:	f7ff fca3 	bl	80018b4 <sta>
			break;
 8001f6e:	e66d      	b.n	8001c4c <exec6502+0x248>
			zpy();
 8001f70:	f7fe fe3c 	bl	8000bec <zpy>
			stx();
 8001f74:	f7ff fca4 	bl	80018c0 <stx>
			break;
 8001f78:	e668      	b.n	8001c4c <exec6502+0x248>
			tya();
 8001f7a:	f7ff fd27 	bl	80019cc <tya>
			break;
 8001f7e:	e665      	b.n	8001c4c <exec6502+0x248>
			absy();
 8001f80:	f7fe fe90 	bl	8000ca4 <absy>
			sta();
 8001f84:	f7ff fc96 	bl	80018b4 <sta>
			break;
 8001f88:	e660      	b.n	8001c4c <exec6502+0x248>
 8001f8a:	bf00      	nop
 8001f8c:	200080cc 	.word	0x200080cc
			txs();
 8001f90:	f7ff fd12 	bl	80019b8 <txs>
			break;
 8001f94:	e65a      	b.n	8001c4c <exec6502+0x248>
			absx();
 8001f96:	f7fe fe69 	bl	8000c6c <absx>
			sta();
 8001f9a:	f7ff fc8b 	bl	80018b4 <sta>
			break;
 8001f9e:	e655      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001fa0:	f7fe fdf6 	bl	8000b90 <imm>
			ldy();
 8001fa4:	f7ff faee 	bl	8001584 <ldy>
			break;
 8001fa8:	e650      	b.n	8001c4c <exec6502+0x248>
			indx();
 8001faa:	f7fe febd 	bl	8000d28 <indx>
			lda();
 8001fae:	f7ff faa5 	bl	80014fc <lda>
			break;
 8001fb2:	e64b      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001fb4:	f7fe fdec 	bl	8000b90 <imm>
			ldx();
 8001fb8:	f7ff fac2 	bl	8001540 <ldx>
			break;
 8001fbc:	e646      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001fbe:	f7fe fdf3 	bl	8000ba8 <zp>
			ldy();
 8001fc2:	f7ff fadf 	bl	8001584 <ldy>
			break;
 8001fc6:	e641      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001fc8:	f7fe fdee 	bl	8000ba8 <zp>
			lda();
 8001fcc:	f7ff fa96 	bl	80014fc <lda>
			break;
 8001fd0:	e63c      	b.n	8001c4c <exec6502+0x248>
			zp();
 8001fd2:	f7fe fde9 	bl	8000ba8 <zp>
			ldx();
 8001fd6:	f7ff fab3 	bl	8001540 <ldx>
			break;
 8001fda:	e637      	b.n	8001c4c <exec6502+0x248>
			tay();
 8001fdc:	f7ff fc98 	bl	8001910 <tay>
			break;
 8001fe0:	e634      	b.n	8001c4c <exec6502+0x248>
			imm();
 8001fe2:	f7fe fdd5 	bl	8000b90 <imm>
			lda();
 8001fe6:	f7ff fa89 	bl	80014fc <lda>
			break;
 8001fea:	e62f      	b.n	8001c4c <exec6502+0x248>
			tax();
 8001fec:	f7ff fc74 	bl	80018d8 <tax>
			break;
 8001ff0:	e62c      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001ff2:	f7fe fe23 	bl	8000c3c <abso>
			ldy();
 8001ff6:	f7ff fac5 	bl	8001584 <ldy>
			break;
 8001ffa:	e627      	b.n	8001c4c <exec6502+0x248>
			abso();
 8001ffc:	f7fe fe1e 	bl	8000c3c <abso>
			lda();
 8002000:	f7ff fa7c 	bl	80014fc <lda>
			break;
 8002004:	e622      	b.n	8001c4c <exec6502+0x248>
			abso();
 8002006:	f7fe fe19 	bl	8000c3c <abso>
			ldx();
 800200a:	f7ff fa99 	bl	8001540 <ldx>
			break;
 800200e:	e61d      	b.n	8001c4c <exec6502+0x248>
			rel();
 8002010:	f7fe fe00 	bl	8000c14 <rel>
			bcs();
 8002014:	f7fe ffa0 	bl	8000f58 <bcs>
			break;
 8002018:	e618      	b.n	8001c4c <exec6502+0x248>
			indy();
 800201a:	f7fe fea3 	bl	8000d64 <indy>
			lda();
 800201e:	f7ff fa6d 	bl	80014fc <lda>
			break;
 8002022:	e613      	b.n	8001c4c <exec6502+0x248>
			zpx();
 8002024:	f7fe fdce 	bl	8000bc4 <zpx>
			ldy();
 8002028:	f7ff faac 	bl	8001584 <ldy>
			break;
 800202c:	e60e      	b.n	8001c4c <exec6502+0x248>
			zpx();
 800202e:	f7fe fdc9 	bl	8000bc4 <zpx>
			lda();
 8002032:	f7ff fa63 	bl	80014fc <lda>
			break;
 8002036:	e609      	b.n	8001c4c <exec6502+0x248>
			zpy();
 8002038:	f7fe fdd8 	bl	8000bec <zpy>
			ldx();
 800203c:	f7ff fa80 	bl	8001540 <ldx>
			break;
 8002040:	e604      	b.n	8001c4c <exec6502+0x248>
			clv();
 8002042:	f7ff f8d9 	bl	80011f8 <clv>
			break;
 8002046:	e601      	b.n	8001c4c <exec6502+0x248>
			absy();
 8002048:	f7fe fe2c 	bl	8000ca4 <absy>
			lda();
 800204c:	f7ff fa56 	bl	80014fc <lda>
			break;
 8002050:	e5fc      	b.n	8001c4c <exec6502+0x248>
			tsx();
 8002052:	f7ff fc79 	bl	8001948 <tsx>
			break;
 8002056:	e5f9      	b.n	8001c4c <exec6502+0x248>
			absx();
 8002058:	f7fe fe08 	bl	8000c6c <absx>
			ldy();
 800205c:	f7ff fa92 	bl	8001584 <ldy>
			break;
 8002060:	e5f4      	b.n	8001c4c <exec6502+0x248>
			absx();
 8002062:	f7fe fe03 	bl	8000c6c <absx>
			lda();
 8002066:	f7ff fa49 	bl	80014fc <lda>
			break;
 800206a:	e5ef      	b.n	8001c4c <exec6502+0x248>
			absy();
 800206c:	f7fe fe1a 	bl	8000ca4 <absy>
			ldx();
 8002070:	f7ff fa66 	bl	8001540 <ldx>
			break;
 8002074:	e5ea      	b.n	8001c4c <exec6502+0x248>
			imm();
 8002076:	f7fe fd8b 	bl	8000b90 <imm>
			cpy();
 800207a:	f7ff f921 	bl	80012c0 <cpy>
			break;
 800207e:	e5e5      	b.n	8001c4c <exec6502+0x248>
			indx();
 8002080:	f7fe fe52 	bl	8000d28 <indx>
			cmp();
 8002084:	f7ff f8c0 	bl	8001208 <cmp>
			break;
 8002088:	e5e0      	b.n	8001c4c <exec6502+0x248>
			zp();
 800208a:	f7fe fd8d 	bl	8000ba8 <zp>
			cpy();
 800208e:	f7ff f917 	bl	80012c0 <cpy>
			break;
 8002092:	e5db      	b.n	8001c4c <exec6502+0x248>
			zp();
 8002094:	f7fe fd88 	bl	8000ba8 <zp>
			cmp();
 8002098:	f7ff f8b6 	bl	8001208 <cmp>
			break;
 800209c:	e5d6      	b.n	8001c4c <exec6502+0x248>
			zp();
 800209e:	f7fe fd83 	bl	8000ba8 <zp>
			dec();
 80020a2:	f7ff f93b 	bl	800131c <dec>
			break;
 80020a6:	e5d1      	b.n	8001c4c <exec6502+0x248>
			iny();
 80020a8:	f7ff f9f4 	bl	8001494 <iny>
			break;
 80020ac:	e5ce      	b.n	8001c4c <exec6502+0x248>
			imm();
 80020ae:	f7fe fd6f 	bl	8000b90 <imm>
			cmp();
 80020b2:	f7ff f8a9 	bl	8001208 <cmp>
			break;
 80020b6:	e5c9      	b.n	8001c4c <exec6502+0x248>
			dex();
 80020b8:	f7ff f954 	bl	8001364 <dex>
			break;
 80020bc:	e5c6      	b.n	8001c4c <exec6502+0x248>
			abso();
 80020be:	f7fe fdbd 	bl	8000c3c <abso>
			cpy();
 80020c2:	f7ff f8fd 	bl	80012c0 <cpy>
			break;
 80020c6:	e5c1      	b.n	8001c4c <exec6502+0x248>
			abso();
 80020c8:	f7fe fdb8 	bl	8000c3c <abso>
			cmp();
 80020cc:	f7ff f89c 	bl	8001208 <cmp>
			break;
 80020d0:	e5bc      	b.n	8001c4c <exec6502+0x248>
			abso();
 80020d2:	f7fe fdb3 	bl	8000c3c <abso>
			dec();
 80020d6:	f7ff f921 	bl	800131c <dec>
			break;
 80020da:	e5b7      	b.n	8001c4c <exec6502+0x248>
			rel();
 80020dc:	f7fe fd9a 	bl	8000c14 <rel>
			bne();
 80020e0:	f7fe ffc4 	bl	800106c <bne>
			break;
 80020e4:	e5b2      	b.n	8001c4c <exec6502+0x248>
			indy();
 80020e6:	f7fe fe3d 	bl	8000d64 <indy>
			cmp();
 80020ea:	f7ff f88d 	bl	8001208 <cmp>
			break;
 80020ee:	e5ad      	b.n	8001c4c <exec6502+0x248>
			zpx();
 80020f0:	f7fe fd68 	bl	8000bc4 <zpx>
			cmp();
 80020f4:	f7ff f888 	bl	8001208 <cmp>
			break;
 80020f8:	e5a8      	b.n	8001c4c <exec6502+0x248>
			zpx();
 80020fa:	f7fe fd63 	bl	8000bc4 <zpx>
			dec();
 80020fe:	f7ff f90d 	bl	800131c <dec>
			break;
 8002102:	e5a3      	b.n	8001c4c <exec6502+0x248>
			cld();
 8002104:	f7ff f868 	bl	80011d8 <cld>
			break;
 8002108:	e5a0      	b.n	8001c4c <exec6502+0x248>
			absy();
 800210a:	f7fe fdcb 	bl	8000ca4 <absy>
			cmp();
 800210e:	f7ff f87b 	bl	8001208 <cmp>
			break;
 8002112:	e59b      	b.n	8001c4c <exec6502+0x248>
			absx();
 8002114:	f7fe fdaa 	bl	8000c6c <absx>
			cmp();
 8002118:	f7ff f876 	bl	8001208 <cmp>
			break;
 800211c:	e596      	b.n	8001c4c <exec6502+0x248>
			absx();
 800211e:	f7fe fda5 	bl	8000c6c <absx>
			dec();
 8002122:	f7ff f8fb 	bl	800131c <dec>
			break;
 8002126:	e591      	b.n	8001c4c <exec6502+0x248>
			imm();
 8002128:	f7fe fd32 	bl	8000b90 <imm>
			cpx();
 800212c:	f7ff f89a 	bl	8001264 <cpx>
			break;
 8002130:	e58c      	b.n	8001c4c <exec6502+0x248>
			indx();
 8002132:	f7fe fdf9 	bl	8000d28 <indx>
			sbc();
 8002136:	f7ff fb49 	bl	80017cc <sbc>
			break;
 800213a:	e587      	b.n	8001c4c <exec6502+0x248>
			zp();
 800213c:	f7fe fd34 	bl	8000ba8 <zp>
			cpx();
 8002140:	f7ff f890 	bl	8001264 <cpx>
			break;
 8002144:	e582      	b.n	8001c4c <exec6502+0x248>
			zp();
 8002146:	f7fe fd2f 	bl	8000ba8 <zp>
			sbc();
 800214a:	f7ff fb3f 	bl	80017cc <sbc>
			break;
 800214e:	e57d      	b.n	8001c4c <exec6502+0x248>
			zp();
 8002150:	f7fe fd2a 	bl	8000ba8 <zp>
			inc();
 8002154:	f7ff f960 	bl	8001418 <inc>
			break;
 8002158:	e578      	b.n	8001c4c <exec6502+0x248>
			inx();
 800215a:	f7ff f981 	bl	8001460 <inx>
			break;
 800215e:	e575      	b.n	8001c4c <exec6502+0x248>
			imm();
 8002160:	f7fe fd16 	bl	8000b90 <imm>
			sbc();
 8002164:	f7ff fb32 	bl	80017cc <sbc>
			break;
 8002168:	e570      	b.n	8001c4c <exec6502+0x248>
			abso();
 800216a:	f7fe fd67 	bl	8000c3c <abso>
			cpx();
 800216e:	f7ff f879 	bl	8001264 <cpx>
			break;
 8002172:	e56b      	b.n	8001c4c <exec6502+0x248>
			abso();
 8002174:	f7fe fd62 	bl	8000c3c <abso>
			sbc();
 8002178:	f7ff fb28 	bl	80017cc <sbc>
			break;
 800217c:	e566      	b.n	8001c4c <exec6502+0x248>
			abso();
 800217e:	f7fe fd5d 	bl	8000c3c <abso>
			inc();
 8002182:	f7ff f949 	bl	8001418 <inc>
			break;
 8002186:	e561      	b.n	8001c4c <exec6502+0x248>
			rel();
 8002188:	f7fe fd44 	bl	8000c14 <rel>
			beq();
 800218c:	f7fe ff06 	bl	8000f9c <beq>
			break;
 8002190:	e55c      	b.n	8001c4c <exec6502+0x248>
			indy();
 8002192:	f7fe fde7 	bl	8000d64 <indy>
			sbc();
 8002196:	f7ff fb19 	bl	80017cc <sbc>
			break;
 800219a:	e557      	b.n	8001c4c <exec6502+0x248>
			zpx();
 800219c:	f7fe fd12 	bl	8000bc4 <zpx>
			sbc();
 80021a0:	f7ff fb14 	bl	80017cc <sbc>
			break;
 80021a4:	e552      	b.n	8001c4c <exec6502+0x248>
			zpx();
 80021a6:	f7fe fd0d 	bl	8000bc4 <zpx>
			inc();
 80021aa:	f7ff f935 	bl	8001418 <inc>
			break;
 80021ae:	e54d      	b.n	8001c4c <exec6502+0x248>
			sed();
 80021b0:	f7ff fb70 	bl	8001894 <sed>
			break;
 80021b4:	e54a      	b.n	8001c4c <exec6502+0x248>
			absy();
 80021b6:	f7fe fd75 	bl	8000ca4 <absy>
			sbc();
 80021ba:	f7ff fb07 	bl	80017cc <sbc>
			break;
 80021be:	e545      	b.n	8001c4c <exec6502+0x248>
			absx();
 80021c0:	f7fe fd54 	bl	8000c6c <absx>
			sbc();
 80021c4:	f7ff fb02 	bl	80017cc <sbc>
			break;
 80021c8:	e540      	b.n	8001c4c <exec6502+0x248>
			absx();
 80021ca:	f7fe fd4f 	bl	8000c6c <absx>
			inc();
 80021ce:	f7ff f923 	bl	8001418 <inc>
			break;
 80021d2:	e53b      	b.n	8001c4c <exec6502+0x248>

080021d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_MspInit+0x3c>)
{
 80021d6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	619a      	str	r2, [r3, #24]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	f002 0201 	and.w	r2, r2, #1
 80021e6:	9200      	str	r2, [sp, #0]
 80021e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021f0:	61da      	str	r2, [r3, #28]
 80021f2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021fe:	6853      	ldr	r3, [r2, #4]
 8002200:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	b002      	add	sp, #8
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000

08002218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002218:	b510      	push	{r4, lr}
 800221a:	4604      	mov	r4, r0
 800221c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221e:	2210      	movs	r2, #16
 8002220:	2100      	movs	r1, #0
 8002222:	a802      	add	r0, sp, #8
 8002224:	f000 feb8 	bl	8002f98 <memset>
  if(huart->Instance==USART1)
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_UART_MspInit+0x70>)
 800222c:	429a      	cmp	r2, r3
 800222e:	d128      	bne.n	8002282 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002230:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002234:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	4815      	ldr	r0, [pc, #84]	; (800228c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800223c:	619a      	str	r2, [r3, #24]
 800223e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002242:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002246:	9200      	str	r2, [sp, #0]
 8002248:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	f042 0204 	orr.w	r2, r2, #4
 8002250:	619a      	str	r2, [r3, #24]
 8002252:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f000 f927 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002272:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002276:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f000 f91d 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002282:	b006      	add	sp, #24
 8002284:	bd10      	pop	{r4, pc}
 8002286:	bf00      	nop
 8002288:	40013800 	.word	0x40013800
 800228c:	40010800 	.word	0x40010800

08002290 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002290:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002292:	b530      	push	{r4, r5, lr}
 8002294:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002296:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_SRAM_MspInit+0x54>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	b9fa      	cbnz	r2, 80022de <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 80022a6:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022a8:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 80022aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ae:	615a      	str	r2, [r3, #20]
 80022b0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b2:	480e      	ldr	r0, [pc, #56]	; (80022ec <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c8:	f000 f8f8 	bl	80024bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80022cc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d0:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_SRAM_MspInit+0x60>)
 80022d2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022da:	f000 f8ef 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80022de:	b007      	add	sp, #28
 80022e0:	bd30      	pop	{r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	200080e0 	.word	0x200080e0
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40011800 	.word	0x40011800
 80022f0:	40011400 	.word	0x40011400

080022f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler>

080022f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler>

080022f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <MemManage_Handler>

080022fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler>

080022fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler>

080022fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fe:	4770      	bx	lr

08002300 <DebugMon_Handler>:
 8002300:	4770      	bx	lr

08002302 <PendSV_Handler>:
 8002302:	4770      	bx	lr

08002304 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 b85e 	b.w	80023c4 <HAL_IncTick>

08002308 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	4770      	bx	lr
	...

0800230c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800230c:	f7ff fffc 	bl	8002308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002312:	490c      	ldr	r1, [pc, #48]	; (8002344 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002328:	4c09      	ldr	r4, [pc, #36]	; (8002350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002336:	f000 fe0b 	bl	8002f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800233a:	f7fe faed 	bl	8000918 <main>
  bx lr
 800233e:	4770      	bx	lr
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002348:	08004b80 	.word	0x08004b80
  ldr r2, =_sbss
 800234c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002350:	200080e8 	.word	0x200080e8

08002354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC1_2_IRQHandler>
	...

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_InitTick+0x3c>)
{
 800235c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235e:	7818      	ldrb	r0, [r3, #0]
 8002360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002364:	fbb3 f3f0 	udiv	r3, r3, r0
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_InitTick+0x40>)
 800236a:	6810      	ldr	r0, [r2, #0]
 800236c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002370:	f000 f890 	bl	8002494 <HAL_SYSTICK_Config>
 8002374:	4604      	mov	r4, r0
 8002376:	b958      	cbnz	r0, 8002390 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002378:	2d0f      	cmp	r5, #15
 800237a:	d809      	bhi.n	8002390 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	4602      	mov	r2, r0
 800237e:	4629      	mov	r1, r5
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 f854 	bl	8002430 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4620      	mov	r0, r4
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_InitTick+0x44>)
 800238c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800238e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
 8002392:	e7fc      	b.n	800238e <HAL_InitTick+0x36>
 8002394:	20000004 	.word	0x20000004
 8002398:	20000000 	.word	0x20000000
 800239c:	20000008 	.word	0x20000008

080023a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_Init+0x20>)
{
 80023a2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	f043 0310 	orr.w	r3, r3, #16
 80023ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ae:	f000 f82d 	bl	800240c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b2:	200f      	movs	r0, #15
 80023b4:	f7ff ffd0 	bl	8002358 <HAL_InitTick>
  HAL_MspInit();
 80023b8:	f7ff ff0c 	bl	80021d4 <HAL_MspInit>
}
 80023bc:	2000      	movs	r0, #0
 80023be:	bd08      	pop	{r3, pc}
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023c4:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <HAL_IncTick+0x10>)
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_IncTick+0x14>)
 80023c8:	6811      	ldr	r1, [r2, #0]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	440b      	add	r3, r1
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	200080e4 	.word	0x200080e4
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023dc:	4b01      	ldr	r3, [pc, #4]	; (80023e4 <HAL_GetTick+0x8>)
 80023de:	6818      	ldr	r0, [r3, #0]
}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200080e4 	.word	0x200080e4

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fff6 	bl	80023dc <HAL_GetTick>
 80023f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80023f4:	bf1e      	ittt	ne
 80023f6:	4b04      	ldrne	r3, [pc, #16]	; (8002408 <HAL_Delay+0x20>)
 80023f8:	781b      	ldrbne	r3, [r3, #0]
 80023fa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	1b43      	subs	r3, r0, r5
 8002402:	42a3      	cmp	r3, r4
 8002404:	d3fa      	bcc.n	80023fc <HAL_Delay+0x14>
  {
  }
}
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800240e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002412:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800241a:	0412      	lsls	r2, r2, #16
 800241c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002428:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b530      	push	{r4, r5, lr}
 8002434:	68dc      	ldr	r4, [r3, #12]
 8002436:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	2b04      	cmp	r3, #4
 8002442:	bf28      	it	cs
 8002444:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244c:	bf98      	it	ls
 800244e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002454:	bf88      	it	hi
 8002456:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	ea21 0303 	bic.w	r3, r1, r3
 800245c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245e:	fa05 f404 	lsl.w	r4, r5, r4
 8002462:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002466:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	bfac      	ite	ge
 800246e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	4a07      	ldrlt	r2, [pc, #28]	; (8002490 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002478:	b2db      	uxtb	r3, r3
 800247a:	bfab      	itete	ge
 800247c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800248a:	bd30      	pop	{r4, r5, pc}
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	e000ed14 	.word	0xe000ed14

08002494 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	3801      	subs	r0, #1
 8002496:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800249a:	d20b      	bcs.n	80024b4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	21f0      	movs	r1, #240	; 0xf0
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024aa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024b4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80024c2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c4:	4f6a      	ldr	r7, [pc, #424]	; (8002670 <HAL_GPIO_Init+0x1b4>)
 80024c6:	4b6b      	ldr	r3, [pc, #428]	; (8002674 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c8:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002678 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 80024cc:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 800267c <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d0:	680c      	ldr	r4, [r1, #0]
 80024d2:	fa34 f506 	lsrs.w	r5, r4, r6
 80024d6:	d102      	bne.n	80024de <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80024d8:	b003      	add	sp, #12
 80024da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80024de:	f04f 0801 	mov.w	r8, #1
 80024e2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 80024ea:	ea38 0404 	bics.w	r4, r8, r4
 80024ee:	f040 8081 	bne.w	80025f4 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 80024f2:	684c      	ldr	r4, [r1, #4]
 80024f4:	2c03      	cmp	r4, #3
 80024f6:	d807      	bhi.n	8002508 <HAL_GPIO_Init+0x4c>
 80024f8:	3c01      	subs	r4, #1
 80024fa:	2c02      	cmp	r4, #2
 80024fc:	f200 808c 	bhi.w	8002618 <HAL_GPIO_Init+0x15c>
 8002500:	e8df f004 	tbb	[pc, r4]
 8002504:	a29d      	.short	0xa29d
 8002506:	a8          	.byte	0xa8
 8002507:	00          	.byte	0x00
 8002508:	2c12      	cmp	r4, #18
 800250a:	f000 80a0 	beq.w	800264e <HAL_GPIO_Init+0x192>
 800250e:	d873      	bhi.n	80025f8 <HAL_GPIO_Init+0x13c>
 8002510:	2c11      	cmp	r4, #17
 8002512:	f000 8096 	beq.w	8002642 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002516:	2dff      	cmp	r5, #255	; 0xff
 8002518:	bf98      	it	ls
 800251a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800251c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002520:	bf88      	it	hi
 8002522:	f100 0a04 	addhi.w	sl, r0, #4
 8002526:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800252a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800252e:	bf88      	it	hi
 8002530:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002532:	fa09 fb04 	lsl.w	fp, r9, r4
 8002536:	ea28 080b 	bic.w	r8, r8, fp
 800253a:	fa02 f404 	lsl.w	r4, r2, r4
 800253e:	ea48 0404 	orr.w	r4, r8, r4
 8002542:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002546:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800254a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800254e:	d051      	beq.n	80025f4 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002550:	69bc      	ldr	r4, [r7, #24]
 8002552:	f026 0803 	bic.w	r8, r6, #3
 8002556:	f044 0401 	orr.w	r4, r4, #1
 800255a:	61bc      	str	r4, [r7, #24]
 800255c:	69bc      	ldr	r4, [r7, #24]
 800255e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002562:	f004 0401 	and.w	r4, r4, #1
 8002566:	9401      	str	r4, [sp, #4]
 8002568:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800256c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002570:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002572:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002576:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800257a:	fa09 f90b 	lsl.w	r9, r9, fp
 800257e:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002582:	4c3f      	ldr	r4, [pc, #252]	; (8002680 <HAL_GPIO_Init+0x1c4>)
 8002584:	42a0      	cmp	r0, r4
 8002586:	d069      	beq.n	800265c <HAL_GPIO_Init+0x1a0>
 8002588:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800258c:	42a0      	cmp	r0, r4
 800258e:	d067      	beq.n	8002660 <HAL_GPIO_Init+0x1a4>
 8002590:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002594:	42a0      	cmp	r0, r4
 8002596:	d065      	beq.n	8002664 <HAL_GPIO_Init+0x1a8>
 8002598:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800259c:	42a0      	cmp	r0, r4
 800259e:	d063      	beq.n	8002668 <HAL_GPIO_Init+0x1ac>
 80025a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80025a4:	42a0      	cmp	r0, r4
 80025a6:	d061      	beq.n	800266c <HAL_GPIO_Init+0x1b0>
 80025a8:	4560      	cmp	r0, ip
 80025aa:	bf0c      	ite	eq
 80025ac:	2405      	moveq	r4, #5
 80025ae:	2406      	movne	r4, #6
 80025b0:	fa04 f40b 	lsl.w	r4, r4, fp
 80025b4:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80025b8:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80025bc:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025be:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80025c2:	bf14      	ite	ne
 80025c4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c6:	43ac      	biceq	r4, r5
 80025c8:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ca:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025cc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80025d0:	bf14      	ite	ne
 80025d2:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025d4:	43ac      	biceq	r4, r5
 80025d6:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80025d8:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80025de:	bf14      	ite	ne
 80025e0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e2:	43ac      	biceq	r4, r5
 80025e4:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80025e6:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80025ec:	bf14      	ite	ne
 80025ee:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025f0:	43ac      	biceq	r4, r5
 80025f2:	601c      	str	r4, [r3, #0]
	position++;
 80025f4:	3601      	adds	r6, #1
 80025f6:	e76b      	b.n	80024d0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80025f8:	4574      	cmp	r4, lr
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x15c>
 80025fc:	d818      	bhi.n	8002630 <HAL_GPIO_Init+0x174>
 80025fe:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002684 <HAL_GPIO_Init+0x1c8>
 8002602:	454c      	cmp	r4, r9
 8002604:	d008      	beq.n	8002618 <HAL_GPIO_Init+0x15c>
 8002606:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800260a:	454c      	cmp	r4, r9
 800260c:	d004      	beq.n	8002618 <HAL_GPIO_Init+0x15c>
 800260e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002612:	454c      	cmp	r4, r9
 8002614:	f47f af7f 	bne.w	8002516 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002618:	688a      	ldr	r2, [r1, #8]
 800261a:	b1ea      	cbz	r2, 8002658 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800261c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800261e:	bf08      	it	eq
 8002620:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002624:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002628:	bf18      	it	ne
 800262a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800262e:	e772      	b.n	8002516 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002630:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8002688 <HAL_GPIO_Init+0x1cc>
 8002634:	454c      	cmp	r4, r9
 8002636:	d0ef      	beq.n	8002618 <HAL_GPIO_Init+0x15c>
 8002638:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800263c:	e7e9      	b.n	8002612 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800263e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002640:	e769      	b.n	8002516 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002642:	68ca      	ldr	r2, [r1, #12]
 8002644:	3204      	adds	r2, #4
          break;
 8002646:	e766      	b.n	8002516 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002648:	68ca      	ldr	r2, [r1, #12]
 800264a:	3208      	adds	r2, #8
          break;
 800264c:	e763      	b.n	8002516 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800264e:	68ca      	ldr	r2, [r1, #12]
 8002650:	320c      	adds	r2, #12
          break;
 8002652:	e760      	b.n	8002516 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002654:	2200      	movs	r2, #0
 8002656:	e75e      	b.n	8002516 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002658:	2204      	movs	r2, #4
 800265a:	e75c      	b.n	8002516 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800265c:	2400      	movs	r4, #0
 800265e:	e7a7      	b.n	80025b0 <HAL_GPIO_Init+0xf4>
 8002660:	2401      	movs	r4, #1
 8002662:	e7a5      	b.n	80025b0 <HAL_GPIO_Init+0xf4>
 8002664:	2402      	movs	r4, #2
 8002666:	e7a3      	b.n	80025b0 <HAL_GPIO_Init+0xf4>
 8002668:	2403      	movs	r4, #3
 800266a:	e7a1      	b.n	80025b0 <HAL_GPIO_Init+0xf4>
 800266c:	2404      	movs	r4, #4
 800266e:	e79f      	b.n	80025b0 <HAL_GPIO_Init+0xf4>
 8002670:	40021000 	.word	0x40021000
 8002674:	40010400 	.word	0x40010400
 8002678:	40011c00 	.word	0x40011c00
 800267c:	10220000 	.word	0x10220000
 8002680:	40010800 	.word	0x40010800
 8002684:	10120000 	.word	0x10120000
 8002688:	10310000 	.word	0x10310000

0800268c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268c:	b10a      	cbz	r2, 8002692 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268e:	6101      	str	r1, [r0, #16]
  }
}
 8002690:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002692:	0409      	lsls	r1, r1, #16
 8002694:	e7fb      	b.n	800268e <HAL_GPIO_WritePin+0x2>
	...

08002698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800269c:	4605      	mov	r5, r0
 800269e:	b338      	cbz	r0, 80026f0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a0:	6803      	ldr	r3, [r0, #0]
 80026a2:	07db      	lsls	r3, r3, #31
 80026a4:	d410      	bmi.n	80026c8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	079f      	lsls	r7, r3, #30
 80026aa:	d45e      	bmi.n	800276a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	0719      	lsls	r1, r3, #28
 80026b0:	f100 8095 	bmi.w	80027de <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	075a      	lsls	r2, r3, #29
 80026b8:	f100 80c1 	bmi.w	800283e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026bc:	69e8      	ldr	r0, [r5, #28]
 80026be:	2800      	cmp	r0, #0
 80026c0:	f040 812c 	bne.w	800291c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80026c4:	2000      	movs	r0, #0
 80026c6:	e029      	b.n	800271c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c8:	4c90      	ldr	r4, [pc, #576]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d10a      	bne.n	80026f4 <HAL_RCC_OscConfig+0x5c>
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	03de      	lsls	r6, r3, #15
 80026e2:	d507      	bpl.n	80026f4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	039c      	lsls	r4, r3, #14
 80026e8:	d5dd      	bpl.n	80026a6 <HAL_RCC_OscConfig+0xe>
 80026ea:	686b      	ldr	r3, [r5, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1da      	bne.n	80026a6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e013      	b.n	800271c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f4:	686b      	ldr	r3, [r5, #4]
 80026f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fa:	d112      	bne.n	8002722 <HAL_RCC_OscConfig+0x8a>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002704:	f7ff fe6a 	bl	80023dc <HAL_GetTick>
 8002708:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	0398      	lsls	r0, r3, #14
 800270e:	d4ca      	bmi.n	80026a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff fe64 	bl	80023dc <HAL_GetTick>
 8002714:	1b80      	subs	r0, r0, r6
 8002716:	2864      	cmp	r0, #100	; 0x64
 8002718:	d9f7      	bls.n	800270a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800271a:	2003      	movs	r0, #3
}
 800271c:	b002      	add	sp, #8
 800271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002722:	b99b      	cbnz	r3, 800274c <HAL_RCC_OscConfig+0xb4>
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6023      	str	r3, [r4, #0]
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002734:	f7ff fe52 	bl	80023dc <HAL_GetTick>
 8002738:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	0399      	lsls	r1, r3, #14
 800273e:	d5b2      	bpl.n	80026a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fe4c 	bl	80023dc <HAL_GetTick>
 8002744:	1b80      	subs	r0, r0, r6
 8002746:	2864      	cmp	r0, #100	; 0x64
 8002748:	d9f7      	bls.n	800273a <HAL_RCC_OscConfig+0xa2>
 800274a:	e7e6      	b.n	800271a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	d103      	bne.n	800275c <HAL_RCC_OscConfig+0xc4>
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	e7cf      	b.n	80026fc <HAL_RCC_OscConfig+0x64>
 800275c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	e7cb      	b.n	8002702 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276a:	4c68      	ldr	r4, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	f013 0f0c 	tst.w	r3, #12
 8002772:	d007      	beq.n	8002784 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002774:	6863      	ldr	r3, [r4, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b08      	cmp	r3, #8
 800277c:	d110      	bne.n	80027a0 <HAL_RCC_OscConfig+0x108>
 800277e:	6863      	ldr	r3, [r4, #4]
 8002780:	03da      	lsls	r2, r3, #15
 8002782:	d40d      	bmi.n	80027a0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	079b      	lsls	r3, r3, #30
 8002788:	d502      	bpl.n	8002790 <HAL_RCC_OscConfig+0xf8>
 800278a:	692b      	ldr	r3, [r5, #16]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d1af      	bne.n	80026f0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	696a      	ldr	r2, [r5, #20]
 8002794:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002798:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	e785      	b.n	80026ac <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a0:	692a      	ldr	r2, [r5, #16]
 80027a2:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_RCC_OscConfig+0x278>)
 80027a4:	b16a      	cbz	r2, 80027c2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027aa:	f7ff fe17 	bl	80023dc <HAL_GetTick>
 80027ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	079f      	lsls	r7, r3, #30
 80027b4:	d4ec      	bmi.n	8002790 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7ff fe11 	bl	80023dc <HAL_GetTick>
 80027ba:	1b80      	subs	r0, r0, r6
 80027bc:	2802      	cmp	r0, #2
 80027be:	d9f7      	bls.n	80027b0 <HAL_RCC_OscConfig+0x118>
 80027c0:	e7ab      	b.n	800271a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80027c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027c4:	f7ff fe0a 	bl	80023dc <HAL_GetTick>
 80027c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	0798      	lsls	r0, r3, #30
 80027ce:	f57f af6d 	bpl.w	80026ac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d2:	f7ff fe03 	bl	80023dc <HAL_GetTick>
 80027d6:	1b80      	subs	r0, r0, r6
 80027d8:	2802      	cmp	r0, #2
 80027da:	d9f6      	bls.n	80027ca <HAL_RCC_OscConfig+0x132>
 80027dc:	e79d      	b.n	800271a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027de:	69aa      	ldr	r2, [r5, #24]
 80027e0:	4e4a      	ldr	r6, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_RCC_OscConfig+0x278>)
 80027e4:	b1e2      	cbz	r2, 8002820 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80027e6:	2201      	movs	r2, #1
 80027e8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80027ec:	f7ff fdf6 	bl	80023dc <HAL_GetTick>
 80027f0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80027f4:	079b      	lsls	r3, r3, #30
 80027f6:	d50d      	bpl.n	8002814 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fbb3 f3f2 	udiv	r3, r3, r2
 8002804:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002806:	bf00      	nop
  }
  while (Delay --);
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_RCC_OscConfig+0x16e>
 8002812:	e74f      	b.n	80026b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002814:	f7ff fde2 	bl	80023dc <HAL_GetTick>
 8002818:	1b00      	subs	r0, r0, r4
 800281a:	2802      	cmp	r0, #2
 800281c:	d9e9      	bls.n	80027f2 <HAL_RCC_OscConfig+0x15a>
 800281e:	e77c      	b.n	800271a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002820:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002824:	f7ff fdda 	bl	80023dc <HAL_GetTick>
 8002828:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800282c:	079f      	lsls	r7, r3, #30
 800282e:	f57f af41 	bpl.w	80026b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002832:	f7ff fdd3 	bl	80023dc <HAL_GetTick>
 8002836:	1b00      	subs	r0, r0, r4
 8002838:	2802      	cmp	r0, #2
 800283a:	d9f6      	bls.n	800282a <HAL_RCC_OscConfig+0x192>
 800283c:	e76d      	b.n	800271a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4c33      	ldr	r4, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002840:	69e3      	ldr	r3, [r4, #28]
 8002842:	00d8      	lsls	r0, r3, #3
 8002844:	d424      	bmi.n	8002890 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002846:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	69e3      	ldr	r3, [r4, #28]
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284e:	61e3      	str	r3, [r4, #28]
 8002850:	69e3      	ldr	r3, [r4, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4e2f      	ldr	r6, [pc, #188]	; (8002918 <HAL_RCC_OscConfig+0x280>)
 800285c:	6833      	ldr	r3, [r6, #0]
 800285e:	05d9      	lsls	r1, r3, #23
 8002860:	d518      	bpl.n	8002894 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002862:	68eb      	ldr	r3, [r5, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d126      	bne.n	80028b6 <HAL_RCC_OscConfig+0x21e>
 8002868:	6a23      	ldr	r3, [r4, #32]
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002870:	f7ff fdb4 	bl	80023dc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002878:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287a:	6a23      	ldr	r3, [r4, #32]
 800287c:	079b      	lsls	r3, r3, #30
 800287e:	d53f      	bpl.n	8002900 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002880:	2f00      	cmp	r7, #0
 8002882:	f43f af1b 	beq.w	80026bc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	69e3      	ldr	r3, [r4, #28]
 8002888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288c:	61e3      	str	r3, [r4, #28]
 800288e:	e715      	b.n	80026bc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002890:	2700      	movs	r7, #0
 8002892:	e7e2      	b.n	800285a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002894:	6833      	ldr	r3, [r6, #0]
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800289c:	f7ff fd9e 	bl	80023dc <HAL_GetTick>
 80028a0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	6833      	ldr	r3, [r6, #0]
 80028a4:	05da      	lsls	r2, r3, #23
 80028a6:	d4dc      	bmi.n	8002862 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7ff fd98 	bl	80023dc <HAL_GetTick>
 80028ac:	eba0 0008 	sub.w	r0, r0, r8
 80028b0:	2864      	cmp	r0, #100	; 0x64
 80028b2:	d9f6      	bls.n	80028a2 <HAL_RCC_OscConfig+0x20a>
 80028b4:	e731      	b.n	800271a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	b9ab      	cbnz	r3, 80028e4 <HAL_RCC_OscConfig+0x24c>
 80028b8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6223      	str	r3, [r4, #32]
 80028c4:	6a23      	ldr	r3, [r4, #32]
 80028c6:	f023 0304 	bic.w	r3, r3, #4
 80028ca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80028cc:	f7ff fd86 	bl	80023dc <HAL_GetTick>
 80028d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	6a23      	ldr	r3, [r4, #32]
 80028d4:	0798      	lsls	r0, r3, #30
 80028d6:	d5d3      	bpl.n	8002880 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7ff fd80 	bl	80023dc <HAL_GetTick>
 80028dc:	1b80      	subs	r0, r0, r6
 80028de:	4540      	cmp	r0, r8
 80028e0:	d9f7      	bls.n	80028d2 <HAL_RCC_OscConfig+0x23a>
 80028e2:	e71a      	b.n	800271a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	6a23      	ldr	r3, [r4, #32]
 80028e8:	d103      	bne.n	80028f2 <HAL_RCC_OscConfig+0x25a>
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6223      	str	r3, [r4, #32]
 80028f0:	e7ba      	b.n	8002868 <HAL_RCC_OscConfig+0x1d0>
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6223      	str	r3, [r4, #32]
 80028f8:	6a23      	ldr	r3, [r4, #32]
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	e7b6      	b.n	800286e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7ff fd6c 	bl	80023dc <HAL_GetTick>
 8002904:	1b80      	subs	r0, r0, r6
 8002906:	4540      	cmp	r0, r8
 8002908:	d9b7      	bls.n	800287a <HAL_RCC_OscConfig+0x1e2>
 800290a:	e706      	b.n	800271a <HAL_RCC_OscConfig+0x82>
 800290c:	40021000 	.word	0x40021000
 8002910:	42420000 	.word	0x42420000
 8002914:	20000000 	.word	0x20000000
 8002918:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291c:	4c2a      	ldr	r4, [pc, #168]	; (80029c8 <HAL_RCC_OscConfig+0x330>)
 800291e:	6863      	ldr	r3, [r4, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d03e      	beq.n	80029a6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002928:	2200      	movs	r2, #0
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCC_OscConfig+0x334>)
 800292c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002930:	d12c      	bne.n	800298c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002932:	f7ff fd53 	bl	80023dc <HAL_GetTick>
 8002936:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	0199      	lsls	r1, r3, #6
 800293c:	d420      	bmi.n	8002980 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800293e:	6a2b      	ldr	r3, [r5, #32]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d105      	bne.n	8002952 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002946:	6862      	ldr	r2, [r4, #4]
 8002948:	68a9      	ldr	r1, [r5, #8]
 800294a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800294e:	430a      	orrs	r2, r1
 8002950:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002952:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002954:	6862      	ldr	r2, [r4, #4]
 8002956:	430b      	orrs	r3, r1
 8002958:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800295c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800295e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002960:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x334>)
 8002964:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002966:	f7ff fd39 	bl	80023dc <HAL_GetTick>
 800296a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	019a      	lsls	r2, r3, #6
 8002970:	f53f aea8 	bmi.w	80026c4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff fd32 	bl	80023dc <HAL_GetTick>
 8002978:	1b40      	subs	r0, r0, r5
 800297a:	2802      	cmp	r0, #2
 800297c:	d9f6      	bls.n	800296c <HAL_RCC_OscConfig+0x2d4>
 800297e:	e6cc      	b.n	800271a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff fd2c 	bl	80023dc <HAL_GetTick>
 8002984:	1b80      	subs	r0, r0, r6
 8002986:	2802      	cmp	r0, #2
 8002988:	d9d6      	bls.n	8002938 <HAL_RCC_OscConfig+0x2a0>
 800298a:	e6c6      	b.n	800271a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800298c:	f7ff fd26 	bl	80023dc <HAL_GetTick>
 8002990:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	019b      	lsls	r3, r3, #6
 8002996:	f57f ae95 	bpl.w	80026c4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7ff fd1f 	bl	80023dc <HAL_GetTick>
 800299e:	1b40      	subs	r0, r0, r5
 80029a0:	2802      	cmp	r0, #2
 80029a2:	d9f6      	bls.n	8002992 <HAL_RCC_OscConfig+0x2fa>
 80029a4:	e6b9      	b.n	800271a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a6:	2801      	cmp	r0, #1
 80029a8:	f43f aeb8 	beq.w	800271c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80029ac:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	6a2a      	ldr	r2, [r5, #32]
 80029b0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80029b4:	4291      	cmp	r1, r2
 80029b6:	f47f ae9b 	bne.w	80026f0 <HAL_RCC_OscConfig+0x58>
 80029ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c0:	4293      	cmp	r3, r2
 80029c2:	f43f ae7f 	beq.w	80026c4 <HAL_RCC_OscConfig+0x2c>
 80029c6:	e693      	b.n	80026f0 <HAL_RCC_OscConfig+0x58>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	42420000 	.word	0x42420000

080029d0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80029d0:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x38>)
 80029d2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80029d4:	f003 010c 	and.w	r1, r3, #12
 80029d8:	2908      	cmp	r1, #8
 80029da:	d112      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029dc:	480b      	ldr	r0, [pc, #44]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x3c>)
 80029de:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e6:	d509      	bpl.n	80029fc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029f0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x44>)
 80029f4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029fa:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x48>)
 80029fe:	4358      	muls	r0, r3
 8002a00:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002a02:	4803      	ldr	r0, [pc, #12]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08004b64 	.word	0x08004b64
 8002a10:	007a1200 	.word	0x007a1200
 8002a14:	08004b74 	.word	0x08004b74
 8002a18:	003d0900 	.word	0x003d0900

08002a1c <HAL_RCC_ClockConfig>:
{
 8002a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a20:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a22:	4604      	mov	r4, r0
 8002a24:	b910      	cbnz	r0, 8002a2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
}
 8002a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4a44      	ldr	r2, [pc, #272]	; (8002b40 <HAL_RCC_ClockConfig+0x124>)
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d328      	bcc.n	8002a8a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	6821      	ldr	r1, [r4, #0]
 8002a3a:	078e      	lsls	r6, r1, #30
 8002a3c:	d430      	bmi.n	8002aa0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	07ca      	lsls	r2, r1, #31
 8002a40:	d443      	bmi.n	8002aca <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a42:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x124>)
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	42ab      	cmp	r3, r5
 8002a4c:	d865      	bhi.n	8002b1a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	4d3c      	ldr	r5, [pc, #240]	; (8002b44 <HAL_RCC_ClockConfig+0x128>)
 8002a52:	f012 0f04 	tst.w	r2, #4
 8002a56:	d16c      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	0713      	lsls	r3, r2, #28
 8002a5a:	d506      	bpl.n	8002a6a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5c:	686b      	ldr	r3, [r5, #4]
 8002a5e:	6922      	ldr	r2, [r4, #16]
 8002a60:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a68:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6a:	f7ff ffb1 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	686b      	ldr	r3, [r5, #4]
 8002a70:	4a35      	ldr	r2, [pc, #212]	; (8002b48 <HAL_RCC_ClockConfig+0x12c>)
 8002a72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	40d8      	lsrs	r0, r3
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_ClockConfig+0x130>)
 8002a7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x134>)
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	f7ff fc69 	bl	8002358 <HAL_InitTick>
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
 8002a88:	e7ce      	b.n	8002a28 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	f023 0307 	bic.w	r3, r3, #7
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a94:	6813      	ldr	r3, [r2, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	428b      	cmp	r3, r1
 8002a9c:	d1c3      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xa>
 8002a9e:	e7cb      	b.n	8002a38 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_RCC_ClockConfig+0x128>)
 8002aa2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa6:	bf1e      	ittt	ne
 8002aa8:	685a      	ldrne	r2, [r3, #4]
 8002aaa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002aae:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab2:	bf42      	ittt	mi
 8002ab4:	685a      	ldrmi	r2, [r3, #4]
 8002ab6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002aba:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	68a0      	ldr	r0, [r4, #8]
 8002ac0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	e7b9      	b.n	8002a3e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	6862      	ldr	r2, [r4, #4]
 8002acc:	4e1d      	ldr	r6, [pc, #116]	; (8002b44 <HAL_RCC_ClockConfig+0x128>)
 8002ace:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	d11a      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	d0a5      	beq.n	8002a26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae0:	f023 0303 	bic.w	r3, r3, #3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002ae8:	f7ff fc78 	bl	80023dc <HAL_GetTick>
 8002aec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	6873      	ldr	r3, [r6, #4]
 8002af0:	6862      	ldr	r2, [r4, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002afa:	d0a2      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7ff fc6e 	bl	80023dc <HAL_GetTick>
 8002b00:	1bc0      	subs	r0, r0, r7
 8002b02:	4540      	cmp	r0, r8
 8002b04:	d9f3      	bls.n	8002aee <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002b06:	2003      	movs	r0, #3
 8002b08:	e78e      	b.n	8002a28 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	2a02      	cmp	r2, #2
 8002b0c:	d102      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b12:	e7e1      	b.n	8002ad8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	f013 0f02 	tst.w	r3, #2
 8002b18:	e7de      	b.n	8002ad8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
 8002b20:	432b      	orrs	r3, r5
 8002b22:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	42ab      	cmp	r3, r5
 8002b2c:	f47f af7b 	bne.w	8002a26 <HAL_RCC_ClockConfig+0xa>
 8002b30:	e78d      	b.n	8002a4e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b32:	686b      	ldr	r3, [r5, #4]
 8002b34:	68e1      	ldr	r1, [r4, #12]
 8002b36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	606b      	str	r3, [r5, #4]
 8002b3e:	e78b      	b.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08004b4c 	.word	0x08004b4c
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000008 	.word	0x20000008

08002b54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b62:	6810      	ldr	r0, [r2, #0]
}
 8002b64:	40d8      	lsrs	r0, r3
 8002b66:	4770      	bx	lr
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08004b5c 	.word	0x08004b5c
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	4a03      	ldr	r2, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b82:	6810      	ldr	r0, [r2, #0]
}
 8002b84:	40d8      	lsrs	r0, r3
 8002b86:	4770      	bx	lr
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08004b5c 	.word	0x08004b5c
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	460e      	mov	r6, r1
 8002b98:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	b348      	cbz	r0, 8002bf2 <HAL_SRAM_Init+0x5e>
 8002b9e:	6983      	ldr	r3, [r0, #24]
 8002ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba4:	d025      	beq.n	8002bf2 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002ba6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002baa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bae:	b91b      	cbnz	r3, 8002bb8 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002bb0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002bb4:	f7ff fb6c 	bl	8002290 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002bb8:	f104 0108 	add.w	r1, r4, #8
 8002bbc:	6820      	ldr	r0, [r4, #0]
 8002bbe:	f000 f959 	bl	8002e74 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002bc2:	4631      	mov	r1, r6
 8002bc4:	68a2      	ldr	r2, [r4, #8]
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	f000 f986 	bl	8002ed8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002bcc:	4629      	mov	r1, r5
 8002bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd0:	68a2      	ldr	r2, [r4, #8]
 8002bd2:	6860      	ldr	r0, [r4, #4]
 8002bd4:	f000 f99e 	bl	8002f14 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8002bdc:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002bde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	e7fc      	b.n	8002bf0 <HAL_SRAM_Init+0x5c>
	...

08002bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	6803      	ldr	r3, [r0, #0]
 8002bfe:	68c1      	ldr	r1, [r0, #12]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c06:	430a      	orrs	r2, r1
 8002c08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c0a:	6882      	ldr	r2, [r0, #8]
 8002c0c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002c0e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c10:	4302      	orrs	r2, r0
 8002c12:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002c14:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002c18:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c1c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	69a1      	ldr	r1, [r4, #24]
 8002c26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <UART_SetConfig+0x70>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d115      	bne.n	8002c60 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c34:	f7ff ff9e 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c38:	2319      	movs	r3, #25
 8002c3a:	4343      	muls	r3, r0
 8002c3c:	6862      	ldr	r2, [r4, #4]
 8002c3e:	6820      	ldr	r0, [r4, #0]
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c46:	2264      	movs	r2, #100	; 0x64
 8002c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c4c:	fb02 3311 	mls	r3, r2, r1, r3
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	3332      	adds	r3, #50	; 0x32
 8002c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002c5c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c5e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7ff ff78 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8002c64:	e7e8      	b.n	8002c38 <UART_SetConfig+0x40>
 8002c66:	bf00      	nop
 8002c68:	40013800 	.word	0x40013800

08002c6c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	4604      	mov	r4, r0
 8002c70:	460e      	mov	r6, r1
 8002c72:	4617      	mov	r7, r2
 8002c74:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	ea36 0303 	bics.w	r3, r6, r3
 8002c7e:	d101      	bne.n	8002c84 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002c80:	2000      	movs	r0, #0
 8002c82:	e028      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002c84:	1c6b      	adds	r3, r5, #1
 8002c86:	d0f7      	beq.n	8002c78 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c88:	b125      	cbz	r5, 8002c94 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002c8a:	f7ff fba7 	bl	80023dc <HAL_GetTick>
 8002c8e:	1bc0      	subs	r0, r0, r7
 8002c90:	4285      	cmp	r5, r0
 8002c92:	d2f0      	bcs.n	8002c76 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c94:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	f102 030c 	add.w	r3, r2, #12
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	320c      	adds	r2, #12
 8002ca4:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002ca8:	6821      	ldr	r1, [r4, #0]
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d1f2      	bne.n	8002c94 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	f101 0314 	add.w	r3, r1, #20
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	f101 0014 	add.w	r0, r1, #20
 8002cbe:	e840 3200 	strex	r2, r3, [r0]
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d1f3      	bne.n	8002cae <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8002cc6:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002cc8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002cca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8002cce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8002cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cd8 <HAL_UART_Init>:
{
 8002cd8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002cda:	4604      	mov	r4, r0
 8002cdc:	b348      	cbz	r0, 8002d32 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ce6:	b91b      	cbnz	r3, 8002cf0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002ce8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002cec:	f7ff fa94 	bl	8002218 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002cf2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002cf8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002cfa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d00:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d02:	f7ff ff79 	bl	8002bf8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d06:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d18:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d20:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d22:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d2e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002d30:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
 8002d34:	e7fc      	b.n	8002d30 <HAL_UART_Init+0x58>

08002d36 <HAL_UART_Transmit>:
{
 8002d36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d3a:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002d40:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002d42:	2b20      	cmp	r3, #32
{
 8002d44:	460e      	mov	r6, r1
 8002d46:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d48:	d13c      	bne.n	8002dc4 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d03c      	beq.n	8002dc8 <HAL_UART_Transmit+0x92>
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	d03a      	beq.n	8002dc8 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d52:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	2500      	movs	r5, #0
 8002d56:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d58:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002d5c:	f7ff fb3e 	bl	80023dc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d60:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002d62:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002d68:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d6a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	d103      	bne.n	8002d76 <HAL_UART_Transmit+0x40>
 8002d6e:	6923      	ldr	r3, [r4, #16]
 8002d70:	b90b      	cbnz	r3, 8002d76 <HAL_UART_Transmit+0x40>
 8002d72:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002d74:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002d76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b953      	cbnz	r3, 8002d92 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	4642      	mov	r2, r8
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff ff72 	bl	8002c6c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002d88:	b950      	cbnz	r0, 8002da0 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	464b      	mov	r3, r9
 8002d94:	4642      	mov	r2, r8
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff67 	bl	8002c6c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002d9e:	b110      	cbz	r0, 8002da6 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002da0:	2003      	movs	r0, #3
}
 8002da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002da8:	b94e      	cbnz	r6, 8002dbe <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002daa:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002db4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002db6:	3901      	subs	r1, #1
 8002db8:	b289      	uxth	r1, r1
 8002dba:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002dbc:	e7db      	b.n	8002d76 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002dc2:	e7f6      	b.n	8002db2 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	e7ec      	b.n	8002da2 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
 8002dca:	e7ea      	b.n	8002da2 <HAL_UART_Transmit+0x6c>

08002dcc <HAL_UART_Receive>:
{
 8002dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd0:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8002dd6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd8:	2b20      	cmp	r3, #32
{
 8002dda:	460e      	mov	r6, r1
 8002ddc:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dde:	d143      	bne.n	8002e68 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002de0:	2900      	cmp	r1, #0
 8002de2:	d043      	beq.n	8002e6c <HAL_UART_Receive+0xa0>
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d041      	beq.n	8002e6c <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002de8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	2500      	movs	r5, #0
 8002dec:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dee:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8002df4:	f7ff faf2 	bl	80023dc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002dfa:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002e00:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e04:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e08:	d103      	bne.n	8002e12 <HAL_UART_Receive+0x46>
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	b90b      	cbnz	r3, 8002e12 <HAL_UART_Receive+0x46>
 8002e0e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002e10:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8002e12:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002e14:	b280      	uxth	r0, r0
 8002e16:	b920      	cbnz	r0, 8002e22 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8002e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	463b      	mov	r3, r7
 8002e24:	4642      	mov	r2, r8
 8002e26:	2120      	movs	r1, #32
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7ff ff1f 	bl	8002c6c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002e2e:	b9f8      	cbnz	r0, 8002e70 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e30:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8002e32:	b94e      	cbnz	r6, 8002e48 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8002e3e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002e46:	e7e4      	b.n	8002e12 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e48:	68a2      	ldr	r2, [r4, #8]
 8002e4a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002e4e:	d002      	beq.n	8002e56 <HAL_UART_Receive+0x8a>
 8002e50:	b932      	cbnz	r2, 8002e60 <HAL_UART_Receive+0x94>
 8002e52:	6922      	ldr	r2, [r4, #16]
 8002e54:	b922      	cbnz	r2, 8002e60 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	b2c9      	uxtb	r1, r1
 8002e5a:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8002e5e:	e7ee      	b.n	8002e3e <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002e66:	e7f8      	b.n	8002e5a <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 8002e68:	2002      	movs	r0, #2
 8002e6a:	e7d8      	b.n	8002e1e <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	e7d6      	b.n	8002e1e <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 8002e70:	2003      	movs	r0, #3
 8002e72:	e7d4      	b.n	8002e1e <HAL_UART_Receive+0x52>

08002e74 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002e74:	680a      	ldr	r2, [r1, #0]
{
 8002e76:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002e78:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002e7c:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002e86:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002e88:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	bf0c      	ite	eq
 8002e90:	2440      	moveq	r4, #64	; 0x40
 8002e92:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002e94:	4333      	orrs	r3, r6
 8002e96:	68ce      	ldr	r6, [r1, #12]
 8002e98:	4333      	orrs	r3, r6
 8002e9a:	690e      	ldr	r6, [r1, #16]
 8002e9c:	4333      	orrs	r3, r6
 8002e9e:	694e      	ldr	r6, [r1, #20]
 8002ea0:	4333      	orrs	r3, r6
 8002ea2:	69ce      	ldr	r6, [r1, #28]
 8002ea4:	4333      	orrs	r3, r6
 8002ea6:	6a0e      	ldr	r6, [r1, #32]
 8002ea8:	4333      	orrs	r3, r6
 8002eaa:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8002eac:	4333      	orrs	r3, r6
 8002eae:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8002eb0:	4333      	orrs	r3, r6
 8002eb2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8002eb4:	4333      	orrs	r3, r6
 8002eb6:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8002eb8:	4333      	orrs	r3, r6
 8002eba:	698e      	ldr	r6, [r1, #24]
 8002ebc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002ebe:	4333      	orrs	r3, r6
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <FSMC_NORSRAM_Init+0x60>)
 8002ec4:	4029      	ands	r1, r5
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	4323      	orrs	r3, r4
 8002eca:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	bf00      	nop
 8002ed4:	fff00080 	.word	0xfff00080

08002ed8 <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002ed8:	680b      	ldr	r3, [r1, #0]
{
 8002eda:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002edc:	698c      	ldr	r4, [r1, #24]
 8002ede:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	684c      	ldr	r4, [r1, #4]
 8002ee6:	6850      	ldr	r0, [r2, #4]
 8002ee8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002eec:	688c      	ldr	r4, [r1, #8]
 8002eee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002ef2:	68cc      	ldr	r4, [r1, #12]
 8002ef4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002ef8:	690c      	ldr	r4, [r1, #16]
 8002efa:	6949      	ldr	r1, [r1, #20]
 8002efc:	3c01      	subs	r4, #1
 8002efe:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002f02:	3902      	subs	r1, #2
 8002f04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f08:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8002f0c:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8002f0e:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002f10:	6053      	str	r3, [r2, #4]
}
 8002f12:	bd10      	pop	{r4, pc}

08002f14 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8002f18:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002f1a:	d114      	bne.n	8002f46 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002f1c:	698d      	ldr	r5, [r1, #24]
 8002f1e:	680b      	ldr	r3, [r1, #0]
 8002f20:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002f24:	432b      	orrs	r3, r5
 8002f26:	684d      	ldr	r5, [r1, #4]
 8002f28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002f2c:	688d      	ldr	r5, [r1, #8]
 8002f2e:	68c9      	ldr	r1, [r1, #12]
 8002f30:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002f34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8002f3a:	4021      	ands	r1, r4
 8002f3c:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002f3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002f42:	2000      	movs	r0, #0
 8002f44:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002f46:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002f4a:	e7f8      	b.n	8002f3e <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8002f4c:	cff00000 	.word	0xcff00000

08002f50 <__libc_init_array>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2600      	movs	r6, #0
 8002f54:	4d0c      	ldr	r5, [pc, #48]	; (8002f88 <__libc_init_array+0x38>)
 8002f56:	4c0d      	ldr	r4, [pc, #52]	; (8002f8c <__libc_init_array+0x3c>)
 8002f58:	1b64      	subs	r4, r4, r5
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	42a6      	cmp	r6, r4
 8002f5e:	d109      	bne.n	8002f74 <__libc_init_array+0x24>
 8002f60:	f000 f822 	bl	8002fa8 <_init>
 8002f64:	2600      	movs	r6, #0
 8002f66:	4d0a      	ldr	r5, [pc, #40]	; (8002f90 <__libc_init_array+0x40>)
 8002f68:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <__libc_init_array+0x44>)
 8002f6a:	1b64      	subs	r4, r4, r5
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	42a6      	cmp	r6, r4
 8002f70:	d105      	bne.n	8002f7e <__libc_init_array+0x2e>
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f78:	4798      	blx	r3
 8002f7a:	3601      	adds	r6, #1
 8002f7c:	e7ee      	b.n	8002f5c <__libc_init_array+0xc>
 8002f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f82:	4798      	blx	r3
 8002f84:	3601      	adds	r6, #1
 8002f86:	e7f2      	b.n	8002f6e <__libc_init_array+0x1e>
 8002f88:	08004b78 	.word	0x08004b78
 8002f8c:	08004b78 	.word	0x08004b78
 8002f90:	08004b78 	.word	0x08004b78
 8002f94:	08004b7c 	.word	0x08004b7c

08002f98 <memset>:
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4402      	add	r2, r0
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <memset+0xa>
 8002fa0:	4770      	bx	lr
 8002fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa6:	e7f9      	b.n	8002f9c <memset+0x4>

08002fa8 <_init>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr

08002fb4 <_fini>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr
