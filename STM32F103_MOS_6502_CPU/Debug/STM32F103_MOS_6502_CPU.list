
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cf0  080051d0  080051d0  000151d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec0  08006ec0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec0  08006ec0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080f0  20000090  08006f58  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008180  08006f58  00028180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d83  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002579  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008307  00000000  00000000  000343b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0003c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  0003d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a20a  00000000  00000000  0003e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f926  00000000  00000000  00058602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094def  00000000  00000000  00067f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fcd17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023e4  00000000  00000000  000fcd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000090 	.word	0x20000090
 8000204:	00000000 	.word	0x00000000
 8000208:	080051b4 	.word	0x080051b4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000094 	.word	0x20000094
 8000224:	080051b4 	.word	0x080051b4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <Delay>:
	LCD_CURSOR_X = 0;
	// Draw the new cursor
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
}

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b50:	b082      	sub	sp, #8
 8000b52:	9001      	str	r0, [sp, #4]
 8000b54:	9b01      	ldr	r3, [sp, #4]
 8000b56:	b90b      	cbnz	r3, 8000b5c <Delay+0xc>
 8000b58:	b002      	add	sp, #8
 8000b5a:	4770      	bx	lr
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	e7f7      	b.n	8000b54 <Delay+0x4>

08000b64 <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000b64:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b66:	4d0a      	ldr	r5, [pc, #40]	; (8000b90 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	f002 fb24 	bl	80031bc <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff ffeb 	bl	8000b50 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	2102      	movs	r1, #2
 8000b80:	f002 fb1c 	bl	80031bc <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000b84:	4620      	mov	r0, r4
}
 8000b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 8000b8a:	f7ff bfe1 	b.w	8000b50 <Delay>
 8000b8e:	bf00      	nop
 8000b90:	40011800 	.word	0x40011800
 8000b94:	0002bffc 	.word	0x0002bffc

08000b98 <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b98:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b9c:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2081      	movs	r0, #129	; 0x81
 8000ba6:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ba8:	24ed      	movs	r4, #237	; 0xed
 8000baa:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bac:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <LCD_REG_Config+0x188>)
 8000bae:	f04f 0c03 	mov.w	ip, #3
 8000bb2:	8019      	strh	r1, [r3, #0]
 8000bb4:	8018      	strh	r0, [r3, #0]
 8000bb6:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bb8:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bba:	2464      	movs	r4, #100	; 0x64
 8000bbc:	801c      	strh	r4, [r3, #0]
 8000bbe:	2412      	movs	r4, #18
 8000bc0:	f8a3 c000 	strh.w	ip, [r3]
 8000bc4:	801c      	strh	r4, [r3, #0]
 8000bc6:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bc8:	20e8      	movs	r0, #232	; 0xe8
 8000bca:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bcc:	2085      	movs	r0, #133	; 0x85
 8000bce:	f04f 0810 	mov.w	r8, #16
 8000bd2:	8018      	strh	r0, [r3, #0]
 8000bd4:	2078      	movs	r0, #120	; 0x78
 8000bd6:	f8a3 8000 	strh.w	r8, [r3]
 8000bda:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bdc:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bde:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000be2:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000be4:	202c      	movs	r0, #44	; 0x2c
 8000be6:	f8a3 e000 	strh.w	lr, [r3]
 8000bea:	8018      	strh	r0, [r3, #0]
 8000bec:	2034      	movs	r0, #52	; 0x34
 8000bee:	8019      	strh	r1, [r3, #0]
 8000bf0:	8018      	strh	r0, [r3, #0]
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bf6:	20f7      	movs	r0, #247	; 0xf7
 8000bf8:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bfe:	20ea      	movs	r0, #234	; 0xea
 8000c00:	8010      	strh	r0, [r2, #0]
 8000c02:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c04:	8019      	strh	r1, [r3, #0]
 8000c06:	f04f 091b 	mov.w	r9, #27
 8000c0a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c0c:	8010      	strh	r0, [r2, #0]
 8000c0e:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c10:	8019      	strh	r1, [r3, #0]
 8000c12:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c16:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c18:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c1a:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c1c:	8018      	strh	r0, [r3, #0]
 8000c1e:	20a2      	movs	r0, #162	; 0xa2
 8000c20:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c22:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c24:	2435      	movs	r4, #53	; 0x35
 8000c26:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c28:	24c1      	movs	r4, #193	; 0xc1
 8000c2a:	25c5      	movs	r5, #197	; 0xc5
 8000c2c:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c2e:	2411      	movs	r4, #17
 8000c30:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c32:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c34:	2545      	movs	r5, #69	; 0x45
 8000c36:	801d      	strh	r5, [r3, #0]
 8000c38:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c3a:	25c7      	movs	r5, #199	; 0xc7
 8000c3c:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c3e:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c40:	20f2      	movs	r0, #242	; 0xf2
 8000c42:	2626      	movs	r6, #38	; 0x26
 8000c44:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c46:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c48:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c4a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c4c:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c4e:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c50:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c52:	200f      	movs	r0, #15
 8000c54:	8018      	strh	r0, [r3, #0]
 8000c56:	801e      	strh	r6, [r3, #0]
 8000c58:	2624      	movs	r6, #36	; 0x24
 8000c5a:	801e      	strh	r6, [r3, #0]
 8000c5c:	260b      	movs	r6, #11
 8000c5e:	801e      	strh	r6, [r3, #0]
 8000c60:	260e      	movs	r6, #14
 8000c62:	f04f 0a54 	mov.w	sl, #84	; 0x54
 8000c66:	801e      	strh	r6, [r3, #0]
 8000c68:	2609      	movs	r6, #9
 8000c6a:	801e      	strh	r6, [r3, #0]
 8000c6c:	f8a3 a000 	strh.w	sl, [r3]
 8000c70:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000c74:	f8a3 a000 	strh.w	sl, [r3]
 8000c78:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000c7c:	f8a3 a000 	strh.w	sl, [r3]
 8000c80:	f04f 0a0c 	mov.w	sl, #12
 8000c84:	f8a3 a000 	strh.w	sl, [r3]
 8000c88:	f04f 0a17 	mov.w	sl, #23
 8000c8c:	f8a3 a000 	strh.w	sl, [r3]
 8000c90:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c92:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c96:	2607      	movs	r6, #7
 8000c98:	8018      	strh	r0, [r3, #0]
 8000c9a:	801e      	strh	r6, [r3, #0]
 8000c9c:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c9e:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ca2:	f04f 0a19 	mov.w	sl, #25
 8000ca6:	8019      	strh	r1, [r3, #0]
 8000ca8:	f8a3 a000 	strh.w	sl, [r3]
 8000cac:	f8a3 9000 	strh.w	r9, [r3]
 8000cb0:	f04f 0904 	mov.w	r9, #4
 8000cb4:	f8a3 9000 	strh.w	r9, [r3]
 8000cb8:	f8a3 8000 	strh.w	r8, [r3]
 8000cbc:	801e      	strh	r6, [r3, #0]
 8000cbe:	f04f 0847 	mov.w	r8, #71	; 0x47
 8000cc2:	262a      	movs	r6, #42	; 0x2a
 8000cc4:	801e      	strh	r6, [r3, #0]
 8000cc6:	f8a3 8000 	strh.w	r8, [r3]
 8000cca:	f8a3 e000 	strh.w	lr, [r3]
 8000cce:	f8a3 c000 	strh.w	ip, [r3]
 8000cd2:	f04f 0c06 	mov.w	ip, #6
 8000cd6:	f8a3 c000 	strh.w	ip, [r3]
 8000cda:	f8a3 c000 	strh.w	ip, [r3]
 8000cde:	801f      	strh	r7, [r3, #0]
 8000ce0:	2738      	movs	r7, #56	; 0x38
 8000ce2:	801f      	strh	r7, [r3, #0]
 8000ce4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ce6:	2036      	movs	r0, #54	; 0x36
 8000ce8:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cea:	2068      	movs	r0, #104	; 0x68
 8000cec:	8018      	strh	r0, [r3, #0]
 8000cee:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cf0:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cf2:	8019      	strh	r1, [r3, #0]
 8000cf4:	8019      	strh	r1, [r3, #0]
 8000cf6:	8019      	strh	r1, [r3, #0]
 8000cf8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cfa:	202b      	movs	r0, #43	; 0x2b
 8000cfc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cfe:	8019      	strh	r1, [r3, #0]
 8000d00:	8019      	strh	r1, [r3, #0]
 8000d02:	213f      	movs	r1, #63	; 0x3f
 8000d04:	801d      	strh	r5, [r3, #0]
 8000d06:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d08:	213a      	movs	r1, #58	; 0x3a
 8000d0a:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d0c:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d10:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d12:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 8000d14:	f7ff ff1c 	bl	8000b50 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d18:	2329      	movs	r3, #41	; 0x29
 8000d1a:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d20:	60020000 	.word	0x60020000
 8000d24:	0002bffc 	.word	0x0002bffc

08000d28 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000d28:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d2a:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000d2e:	242a      	movs	r4, #42	; 0x2a
 8000d30:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d32:	4c0f      	ldr	r4, [pc, #60]	; (8000d70 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000d34:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d36:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000d38:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d3a:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d3c:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d42:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d44:	3d01      	subs	r5, #1
 8000d46:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d4a:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d4c:	8025      	strh	r5, [r4, #0]
 8000d4e:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d50:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8000d52:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d54:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 8000d56:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d58:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d5a:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d5c:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d5e:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d60:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d62:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d66:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d68:	8022      	strh	r2, [r4, #0]
 8000d6a:	8021      	strh	r1, [r4, #0]
	
}
 8000d6c:	bd70      	pop	{r4, r5, r6, pc}
 8000d6e:	bf00      	nop
 8000d70:	60020000 	.word	0x60020000

08000d74 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d74:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d78:	222c      	movs	r2, #44	; 0x2c
 8000d7a:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000d7c:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000d80:	4283      	cmp	r3, r0
 8000d82:	d100      	bne.n	8000d86 <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 8000d84:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d86:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000d88:	3301      	adds	r3, #1
 8000d8a:	e7f9      	b.n	8000d80 <LCD_FillColor+0xc>
 8000d8c:	60020000 	.word	0x60020000

08000d90 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4614      	mov	r4, r2
 8000d94:	461d      	mov	r5, r3
 8000d96:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000d9a:	f7ff ffc5 	bl	8000d28 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000d9e:	4631      	mov	r1, r6
 8000da0:	fb05 f004 	mul.w	r0, r5, r4
	
}
 8000da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000da8:	f7ff bfe4 	b.w	8000d74 <LCD_FillColor>

08000dac <LCD_INIT>:
{
 8000dac:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <LCD_INIT+0x2c>)
 8000db6:	f002 fa01 	bl	80031bc <HAL_GPIO_WritePin>
	LCD_Rst();
 8000dba:	f7ff fed3 	bl	8000b64 <LCD_Rst>
	LCD_REG_Config();
 8000dbe:	f7ff feeb 	bl	8000b98 <LCD_REG_Config>
	LCD_Clear (0, 0, 320, 240, BACKGROUND);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	23f0      	movs	r3, #240	; 0xf0
 8000dc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dca:	4608      	mov	r0, r1
 8000dcc:	9100      	str	r1, [sp, #0]
 8000dce:	f7ff ffdf 	bl	8000d90 <LCD_Clear>
}
 8000dd2:	b003      	add	sp, #12
 8000dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd8:	40011400 	.word	0x40011400

08000ddc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar;
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000dde:	230a      	movs	r3, #10
{
 8000de0:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000de2:	2208      	movs	r2, #8
 8000de4:	f7ff ffa0 	bl	8000d28 <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000de8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000dec:	222c      	movs	r2, #44	; 0x2c
 8000dee:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000df0:	230a      	movs	r3, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000df2:	f44f 65fd 	mov.w	r5, #2024	; 0x7e8
 8000df6:	490c      	ldr	r1, [pc, #48]	; (8000e28 <LCD_DrawChar+0x4c>)
 8000df8:	fb03 1104 	mla	r1, r3, r4, r1
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LCD_DrawChar+0x50>)
	{
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 8000dfe:	2208      	movs	r2, #8
 8000e00:	f811 0b01 	ldrb.w	r0, [r1], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 8000e04:	f010 0601 	ands.w	r6, r0, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e08:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e0c:	bf14      	ite	ne
 8000e0e:	8025      	strhne	r5, [r4, #0]
 8000e10:	8026      	strheq	r6, [r4, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e12:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x07e8 ); // Matrix Green
			
			else
				LCD_Write_Data (  0x0000 );								
			
			ucTemp >>= 1;		
 8000e16:	ea4f 0050 	mov.w	r0, r0, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e1a:	d1f3      	bne.n	8000e04 <LCD_DrawChar+0x28>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000e22:	d1ec      	bne.n	8000dfe <LCD_DrawChar+0x22>
			
		}
		
	}
	
}
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
 8000e26:	bf00      	nop
 8000e28:	080051d0 	.word	0x080051d0
 8000e2c:	60020000 	.word	0x60020000

08000e30 <LCD_CursorForward>:
	LCD_CURSOR_X %= 40;
 8000e30:	2228      	movs	r2, #40	; 0x28
	++LCD_CURSOR_X;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <LCD_CursorForward+0x28>)
 8000e34:	7818      	ldrb	r0, [r3, #0]
 8000e36:	3001      	adds	r0, #1
	LCD_CURSOR_X %= 40;
 8000e38:	b2c0      	uxtb	r0, r0
 8000e3a:	fbb0 f1f2 	udiv	r1, r0, r2
 8000e3e:	fb02 0011 	mls	r0, r2, r1, r0
 8000e42:	b2c0      	uxtb	r0, r0
 8000e44:	7018      	strb	r0, [r3, #0]
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LCD_CursorForward+0x2c>)
 8000e48:	22db      	movs	r2, #219	; 0xdb
 8000e4a:	7819      	ldrb	r1, [r3, #0]
 8000e4c:	00c0      	lsls	r0, r0, #3
 8000e4e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	f7ff bfc2 	b.w	8000ddc <LCD_DrawChar>
 8000e58:	200000ac 	.word	0x200000ac
 8000e5c:	200000ad 	.word	0x200000ad

08000e60 <LCD_CursorNewline>:
void LCD_CursorNewline ( void ) {
 8000e60:	b513      	push	{r0, r1, r4, lr}
	if (++LCD_CURSOR_Y > 24) {
 8000e62:	4c0f      	ldr	r4, [pc, #60]	; (8000ea0 <LCD_CursorNewline+0x40>)
 8000e64:	7823      	ldrb	r3, [r4, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b18      	cmp	r3, #24
 8000e6c:	d80d      	bhi.n	8000e8a <LCD_CursorNewline+0x2a>
 8000e6e:	7023      	strb	r3, [r4, #0]
	LCD_CURSOR_X = 0;
 8000e70:	2000      	movs	r0, #0
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e72:	22db      	movs	r2, #219	; 0xdb
 8000e74:	7821      	ldrb	r1, [r4, #0]
	LCD_CURSOR_X = 0;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <LCD_CursorNewline+0x44>)
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000e7c:	0049      	lsls	r1, r1, #1
	LCD_CURSOR_X = 0;
 8000e7e:	7018      	strb	r0, [r3, #0]
}
 8000e80:	b002      	add	sp, #8
 8000e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e86:	f7ff bfa9 	b.w	8000ddc <LCD_DrawChar>
		LCD_CURSOR_Y = 0;
 8000e8a:	2100      	movs	r1, #0
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000e8c:	23f0      	movs	r3, #240	; 0xf0
 8000e8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e92:	4608      	mov	r0, r1
 8000e94:	9100      	str	r1, [sp, #0]
		LCD_CURSOR_Y = 0;
 8000e96:	7021      	strb	r1, [r4, #0]
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000e98:	f7ff ff7a 	bl	8000d90 <LCD_Clear>
 8000e9c:	e7e8      	b.n	8000e70 <LCD_CursorNewline+0x10>
 8000e9e:	bf00      	nop
 8000ea0:	200000ad 	.word	0x200000ad
 8000ea4:	200000ac 	.word	0x200000ac

08000ea8 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4604      	mov	r4, r0
 8000eac:	460d      	mov	r5, r1
 8000eae:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8000eb0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000eb4:	b902      	cbnz	r2, 8000eb8 <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000eb8:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
			usP += HEIGHT_EN_CHAR;
 8000ebc:	bf82      	ittt	hi
 8000ebe:	350a      	addhi	r5, #10
 8000ec0:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 8000ec2:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000ec4:	2de6      	cmp	r5, #230	; 0xe6
			usP = LCD_DispWindow_Start_PAGE;
 8000ec6:	bf84      	itt	hi
 8000ec8:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 8000eca:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 8000ecc:	4629      	mov	r1, r5
 8000ece:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 8000ed0:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 8000ed2:	f7ff ff83 	bl	8000ddc <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	e7ea      	b.n	8000eb0 <LCD_DrawString+0x8>
	...

08000edc <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000ee0:	f7ff f9a2 	bl	8000228 <strlen>
 8000ee4:	4d0e      	ldr	r5, [pc, #56]	; (8000f20 <writelineTerminal+0x44>)
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	b282      	uxth	r2, r0
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	4628      	mov	r0, r5
 8000ef0:	f002 fcc5 	bl	800387e <HAL_UART_Transmit>
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4628      	mov	r0, r5
 8000efc:	4909      	ldr	r1, [pc, #36]	; (8000f24 <writelineTerminal+0x48>)
 8000efe:	f002 fcbe 	bl	800387e <HAL_UART_Transmit>

  // LCD
  LCD_DrawString(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, buffer);
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <writelineTerminal+0x4c>)
 8000f04:	4622      	mov	r2, r4
 8000f06:	7819      	ldrb	r1, [r3, #0]
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <writelineTerminal+0x50>)
 8000f0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f0e:	7818      	ldrb	r0, [r3, #0]
 8000f10:	0049      	lsls	r1, r1, #1
 8000f12:	00c0      	lsls	r0, r0, #3
 8000f14:	f7ff ffc8 	bl	8000ea8 <LCD_DrawString>
  LCD_CursorNewline();
}
 8000f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CursorNewline();
 8000f1c:	f7ff bfa0 	b.w	8000e60 <LCD_CursorNewline>
 8000f20:	200080f8 	.word	0x200080f8
 8000f24:	08005bd0 	.word	0x08005bd0
 8000f28:	200000ad 	.word	0x200000ad
 8000f2c:	200000ac 	.word	0x200000ac

08000f30 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f34:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f36:	f7ff f977 	bl	8000228 <strlen>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f3a:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	b282      	uxth	r2, r0
 8000f42:	4621      	mov	r1, r4
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <writeTerminal+0x50>)
 8000f46:	f002 fc9a 	bl	800387e <HAL_UART_Transmit>
  uint8_t tempX = LCD_CURSOR_X;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <writeTerminal+0x54>)
 8000f4c:	f893 8000 	ldrb.w	r8, [r3]
  uint8_t tempY = LCD_CURSOR_Y;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <writeTerminal+0x58>)
 8000f52:	781d      	ldrb	r5, [r3, #0]
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff f967 	bl	8000228 <strlen>
 8000f5a:	b2f7      	uxtb	r7, r6
 8000f5c:	42b8      	cmp	r0, r7
 8000f5e:	f106 0601 	add.w	r6, r6, #1
 8000f62:	d809      	bhi.n	8000f78 <writeTerminal+0x48>
    LCD_CursorForward();
  }
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000f64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000f68:	4622      	mov	r2, r4
 8000f6a:	0069      	lsls	r1, r5, #1
 8000f6c:	ea4f 00c8 	mov.w	r0, r8, lsl #3
}
 8000f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000f74:	f7ff bf98 	b.w	8000ea8 <LCD_DrawString>
    LCD_CursorForward();
 8000f78:	f7ff ff5a 	bl	8000e30 <LCD_CursorForward>
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f7c:	e7ea      	b.n	8000f54 <writeTerminal+0x24>
 8000f7e:	bf00      	nop
 8000f80:	200080f8 	.word	0x200080f8
 8000f84:	200000ac 	.word	0x200000ac
 8000f88:	200000ad 	.word	0x200000ad

08000f8c <writeTerminalChar>:

/**
 * Write char to UART & LCD without line ending (STM32)
 */
void writeTerminalChar(char *buffer) {
 8000f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4601      	mov	r1, r0
void writeTerminalChar(char *buffer) {
 8000f92:	4605      	mov	r5, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <writeTerminalChar+0x3c>)
 8000f9a:	f002 fc70 	bl	800387e <HAL_UART_Transmit>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <writeTerminalChar+0x40>)
 8000fa0:	781e      	ldrb	r6, [r3, #0]
  uint8_t tempY = LCD_CURSOR_Y;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <writeTerminalChar+0x44>)
 8000fa4:	781c      	ldrb	r4, [r3, #0]
  char tempChar[2] = {0x00};
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tempChar[0] = buffer[0];
 8000fac:	782b      	ldrb	r3, [r5, #0]
  tempChar[1] = '\0';
  LCD_CursorForward();
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000fae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  tempChar[0] = buffer[0];
 8000fb2:	f88d 3004 	strb.w	r3, [sp, #4]
  LCD_CursorForward();
 8000fb6:	f7ff ff3b 	bl	8000e30 <LCD_CursorForward>
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000fba:	aa01      	add	r2, sp, #4
 8000fbc:	0061      	lsls	r1, r4, #1
 8000fbe:	00f0      	lsls	r0, r6, #3
 8000fc0:	f7ff ff72 	bl	8000ea8 <LCD_DrawString>
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	200080f8 	.word	0x200080f8
 8000fcc:	200000ac 	.word	0x200000ac
 8000fd0:	200000ad 	.word	0x200000ad

08000fd4 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 8000fd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (value == 13) {
 8000fd6:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 8000fd8:	f88d 000f 	strb.w	r0, [sp, #15]
  if (value == 13) {
 8000fdc:	d128      	bne.n	8001030 <handleOutput+0x5c>
    // UART Newline
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
    // LCD Newline
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8000fde:	2400      	movs	r4, #0
 8000fe0:	4d16      	ldr	r5, [pc, #88]	; (800103c <handleOutput+0x68>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4915      	ldr	r1, [pc, #84]	; (8001040 <handleOutput+0x6c>)
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <handleOutput+0x70>)
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8000fec:	4e16      	ldr	r6, [pc, #88]	; (8001048 <handleOutput+0x74>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000fee:	f002 fc46 	bl	800387e <HAL_UART_Transmit>
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8000ff2:	7829      	ldrb	r1, [r5, #0]
 8000ff4:	7830      	ldrb	r0, [r6, #0]
 8000ff6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	9400      	str	r4, [sp, #0]
 8001000:	0049      	lsls	r1, r1, #1
 8001002:	00c0      	lsls	r0, r0, #3
 8001004:	f7ff fec4 	bl	8000d90 <LCD_Clear>
    if (++LCD_CURSOR_Y > 23) {
 8001008:	782b      	ldrb	r3, [r5, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b17      	cmp	r3, #23
 8001010:	d804      	bhi.n	800101c <handleOutput+0x48>
 8001012:	702b      	strb	r3, [r5, #0]
		  LCD_CURSOR_Y = 0;
		  // Clear the screen
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
	  }
	  LCD_CURSOR_X = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	7033      	strb	r3, [r6, #0]
  }
  else {
    writeTerminalChar((char *)&value);
  }
}
 8001018:	b004      	add	sp, #16
 800101a:	bd70      	pop	{r4, r5, r6, pc}
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800101c:	23f0      	movs	r3, #240	; 0xf0
 800101e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001022:	4621      	mov	r1, r4
 8001024:	4620      	mov	r0, r4
 8001026:	9400      	str	r4, [sp, #0]
		  LCD_CURSOR_Y = 0;
 8001028:	702c      	strb	r4, [r5, #0]
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800102a:	f7ff feb1 	bl	8000d90 <LCD_Clear>
 800102e:	e7f1      	b.n	8001014 <handleOutput+0x40>
    writeTerminalChar((char *)&value);
 8001030:	f10d 000f 	add.w	r0, sp, #15
 8001034:	f7ff ffaa 	bl	8000f8c <writeTerminalChar>
}
 8001038:	e7ee      	b.n	8001018 <handleOutput+0x44>
 800103a:	bf00      	nop
 800103c:	200000ad 	.word	0x200000ad
 8001040:	08005bd0 	.word	0x08005bd0
 8001044:	200080f8 	.word	0x200080f8
 8001048:	200000ac 	.word	0x200000ac

0800104c <write6502>:
  if (address < RAM_SIZE) {
 800104c:	0403      	lsls	r3, r0, #16
 800104e:	d402      	bmi.n	8001056 <write6502+0xa>
    RAM[address] = value;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <write6502+0x20>)
 8001052:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 8001054:	4770      	bx	lr
 8001056:	f24d 0312 	movw	r3, #53266	; 0xd012
 800105a:	4298      	cmp	r0, r3
 800105c:	d105      	bne.n	800106a <write6502+0x1e>
    pia.display_register = value;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <write6502+0x24>)
    handleOutput(value);
 8001060:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 8001064:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 8001066:	f7ff bfb5 	b.w	8000fd4 <handleOutput>
}
 800106a:	4770      	bx	lr
 800106c:	200000ae 	.word	0x200000ae
 8001070:	20008141 	.word	0x20008141

08001074 <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 8001074:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 8001076:	4c18      	ldr	r4, [pc, #96]	; (80010d8 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 8001078:	4d18      	ldr	r5, [pc, #96]	; (80010dc <initApple1+0x68>)
    HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f001 ff37 	bl	8002ef0 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff ff2a 	bl	8000edc <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <initApple1+0x68>)
 800108a:	f000 f835 	bl	80010f8 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 800108e:	782b      	ldrb	r3, [r5, #0]
 8001090:	2b20      	cmp	r3, #32
 8001092:	d1f2      	bne.n	800107a <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 8001094:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 8001098:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 800109a:	f7ff ff49 	bl	8000f30 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 800109e:	f000 f9ff 	bl	80014a0 <reset6502>
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <initApple1+0x70>)
 80010a4:	f7ff ff1a 	bl	8000edc <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <initApple1+0x74>)
 80010aa:	f7ff ff41 	bl	8000f30 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 80010ae:	4621      	mov	r1, r4
 80010b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <initApple1+0x78>)
 80010b6:	f002 fd19 	bl	8003aec <memset>
  }
  writelineTerminal(" Complete");
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <initApple1+0x70>)
 80010bc:	f7ff ff0e 	bl	8000edc <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <initApple1+0x7c>)
 80010c2:	f7ff ff35 	bl	8000f30 <writeTerminal>
  pia.keyboard_register = 0x00;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 80010ca:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 80010cc:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 80010ce:	709c      	strb	r4, [r3, #2]
}
 80010d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 80010d4:	f7ff bf02 	b.w	8000edc <writelineTerminal>
 80010d8:	08005bd3 	.word	0x08005bd3
 80010dc:	20008140 	.word	0x20008140
 80010e0:	08005bf1 	.word	0x08005bf1
 80010e4:	08005c05 	.word	0x08005c05
 80010e8:	08005c0f 	.word	0x08005c0f
 80010ec:	200000ae 	.word	0x200000ae
 80010f0:	08005c23 	.word	0x08005c23
 80010f4:	20008141 	.word	0x20008141

080010f8 <handleInput>:
void handleInput(char *buffer) {
 80010f8:	b510      	push	{r4, lr}
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80010fa:	4601      	mov	r1, r0
void handleInput(char *buffer) {
 80010fc:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80010fe:	230a      	movs	r3, #10
 8001100:	2201      	movs	r2, #1
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <handleInput+0x68>)
 8001104:	f002 fc06 	bl	8003914 <HAL_UART_Receive>
  if(isKbrdReady()){
 8001108:	f001 fd3e 	bl	8002b88 <isKbrdReady>
 800110c:	b110      	cbz	r0, 8001114 <handleInput+0x1c>
	  buffer[0] = getAscii();
 800110e:	f001 fd41 	bl	8002b94 <getAscii>
 8001112:	7020      	strb	r0, [r4, #0]
  buffer[0] &= 0x7F; // Mask out MSB
 8001114:	7823      	ldrb	r3, [r4, #0]
 8001116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800111a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800111e:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 8001120:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8001122:	d802      	bhi.n	800112a <handleInput+0x32>
    buffer[0] -= 0x20;
 8001124:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 8001126:	7023      	strb	r3, [r4, #0]
}
 8001128:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 800112a:	2b0a      	cmp	r3, #10
 800112c:	d101      	bne.n	8001132 <handleInput+0x3a>
    buffer[0] = '\r';
 800112e:	230d      	movs	r3, #13
 8001130:	e7f9      	b.n	8001126 <handleInput+0x2e>
  else if (buffer[0] == '\b') {
 8001132:	2b08      	cmp	r3, #8
 8001134:	d101      	bne.n	800113a <handleInput+0x42>
    buffer[0] = 0x5F;
 8001136:	235f      	movs	r3, #95	; 0x5f
 8001138:	e7f5      	b.n	8001126 <handleInput+0x2e>
  else if (buffer[0] == 0x7F) {
 800113a:	2b7f      	cmp	r3, #127	; 0x7f
 800113c:	d0fb      	beq.n	8001136 <handleInput+0x3e>
  else if (buffer[0] == 0x03) {
 800113e:	2b03      	cmp	r3, #3
 8001140:	d1f2      	bne.n	8001128 <handleInput+0x30>
    writelineTerminal("[Ctrl + C] Resetting in 5 seconds...");
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <handleInput+0x6c>)
 8001144:	f7ff feca 	bl	8000edc <writelineTerminal>
    HAL_Delay(5000);
 8001148:	f241 3088 	movw	r0, #5000	; 0x1388
 800114c:	f001 fed0 	bl	8002ef0 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 8001150:	2220      	movs	r2, #32
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <handleInput+0x70>)
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 800115a:	f7ff bf8b 	b.w	8001074 <initApple1>
 800115e:	bf00      	nop
 8001160:	200080f8 	.word	0x200080f8
 8001164:	08005c37 	.word	0x08005c37
 8001168:	20008140 	.word	0x20008140

0800116c <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 800116c:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 800116e:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 8001170:	d402      	bmi.n	8001178 <read6502+0xc>
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 8001174:	5c18      	ldrb	r0, [r3, r0]
 8001176:	e005      	b.n	8001184 <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 8001178:	f24d 0310 	movw	r3, #53264	; 0xd010
 800117c:	4298      	cmp	r0, r3
 800117e:	d102      	bne.n	8001186 <read6502+0x1a>
    return pia.keyboard_register;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <read6502+0x64>)
 8001182:	7818      	ldrb	r0, [r3, #0]
}
 8001184:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 8001186:	f24d 0311 	movw	r3, #53265	; 0xd011
 800118a:	4298      	cmp	r0, r3
 800118c:	d10f      	bne.n	80011ae <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 800118e:	4c11      	ldr	r4, [pc, #68]	; (80011d4 <read6502+0x68>)
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ffb1 	bl	80010f8 <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 8001196:	7823      	ldrb	r3, [r4, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <read6502+0x64>)
 800119a:	f063 017f 	orn	r1, r3, #127	; 0x7f
 800119e:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 80011a0:	b90b      	cbnz	r3, 80011a6 <read6502+0x3a>
      return 0x00;
 80011a2:	2000      	movs	r0, #0
 80011a4:	e7ee      	b.n	8001184 <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 80011a6:	2300      	movs	r3, #0
      return 0x80;
 80011a8:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 80011aa:	7023      	strb	r3, [r4, #0]
      return 0x80;
 80011ac:	e7ea      	b.n	8001184 <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 80011ae:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b8:	d202      	bcs.n	80011c0 <read6502+0x54>
      return BASIC[BASIC_addr];
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <read6502+0x6c>)
 80011bc:	5cd0      	ldrb	r0, [r2, r3]
 80011be:	e7e1      	b.n	8001184 <read6502+0x18>
  if (address >= 0xF000) {
 80011c0:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80011c4:	d3ed      	bcc.n	80011a2 <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <read6502+0x70>)
 80011c8:	b2c0      	uxtb	r0, r0
 80011ca:	e7d3      	b.n	8001174 <read6502+0x8>
 80011cc:	200000ae 	.word	0x200000ae
 80011d0:	20008141 	.word	0x20008141
 80011d4:	20008140 	.word	0x20008140
 80011d8:	08005c5c 	.word	0x08005c5c
 80011dc:	08006c5c 	.word	0x08006c5c

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e4:	2214      	movs	r2, #20
 80011e6:	2100      	movs	r1, #0
 80011e8:	a808      	add	r0, sp, #32
 80011ea:	f002 fc7f 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ee:	2214      	movs	r2, #20
 80011f0:	2100      	movs	r1, #0
 80011f2:	a801      	add	r0, sp, #4
 80011f4:	f002 fc7a 	bl	8003aec <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fe:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001200:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001210:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f001 ffe5 	bl	80031e0 <HAL_RCC_OscConfig>
 8001216:	b108      	cbz	r0, 800121c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121a:	e7fe      	b.n	800121a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122c:	4621      	mov	r1, r4
 800122e:	a801      	add	r0, sp, #4
 8001230:	f002 f998 	bl	8003564 <HAL_RCC_ClockConfig>
 8001234:	b108      	cbz	r0, 800123a <SystemClock_Config+0x5a>
 8001236:	b672      	cpsid	i
  while (1)
 8001238:	e7fe      	b.n	8001238 <SystemClock_Config+0x58>
}
 800123a:	b010      	add	sp, #64	; 0x40
 800123c:	bd10      	pop	{r4, pc}
	...

08001240 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	2610      	movs	r6, #16
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001246:	f001 fe2f 	bl	8002ea8 <HAL_Init>
  SystemClock_Config();
 800124a:	f7ff ffc9 	bl	80011e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	4632      	mov	r2, r6
 8001250:	2100      	movs	r1, #0
 8001252:	a805      	add	r0, sp, #20
 8001254:	f002 fc4a 	bl	8003aec <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <main+0x160>)
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001260:	4850      	ldr	r0, [pc, #320]	; (80013a4 <main+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4332      	orrs	r2, r6
 8001264:	619a      	str	r2, [r3, #24]
 8001266:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4032      	ands	r2, r6
 800126c:	9201      	str	r2, [sp, #4]
 800126e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	619a      	str	r2, [r3, #24]
 800127a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	f002 0204 	and.w	r2, r2, #4
 8001284:	9202      	str	r2, [sp, #8]
 8001286:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001288:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800128a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800128e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800129a:	9203      	str	r2, [sp, #12]
 800129c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	619a      	str	r2, [r3, #24]
 80012a6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	9304      	str	r3, [sp, #16]
 80012b0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80012b2:	f001 ff83 	bl	80031bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	483b      	ldr	r0, [pc, #236]	; (80013a8 <main+0x168>)
 80012bc:	f001 ff7e 	bl	80031bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c0:	2220      	movs	r2, #32
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <main+0x16c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	483a      	ldr	r0, [pc, #232]	; (80013b0 <main+0x170>)
 80012c6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f001 fe87 	bl	8002fe0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	4836      	ldr	r0, [pc, #216]	; (80013b0 <main+0x170>)
 80012d6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f001 fe7f 	bl	8002fe0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80012e2:	4830      	ldr	r0, [pc, #192]	; (80013a4 <main+0x164>)
 80012e4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	e9cd 7505 	strd	r7, r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ec:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f001 fe76 	bl	8002fe0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80012f4:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80012f6:	482c      	ldr	r0, [pc, #176]	; (80013a8 <main+0x168>)
 80012f8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	e9cd 4807 	strd	r4, r8, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001302:	f001 fe6d 	bl	8002fe0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001306:	4622      	mov	r2, r4
 8001308:	4621      	mov	r1, r4
 800130a:	2017      	movs	r0, #23
 800130c:	f001 fe14 	bl	8002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001310:	2017      	movs	r0, #23
 8001312:	f001 fe43 	bl	8002f9c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8001316:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800131a:	4826      	ldr	r0, [pc, #152]	; (80013b4 <main+0x174>)
  huart1.Init.BaudRate = 115200;
 800131c:	4926      	ldr	r1, [pc, #152]	; (80013b8 <main+0x178>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001322:	e9c0 1300 	strd	r1, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001326:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8001328:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001330:	f002 fa76 	bl	8003820 <HAL_UART_Init>
 8001334:	4602      	mov	r2, r0
 8001336:	b108      	cbz	r0, 800133c <main+0xfc>
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <main+0xfa>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800133c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001340:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001342:	481e      	ldr	r0, [pc, #120]	; (80013bc <main+0x17c>)
  Timing.DataSetupTime = 255;
 8001344:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001346:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001348:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800134c:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 8001350:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 8001352:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 8001356:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 800135a:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800135c:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800135e:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001362:	e9c0 6205 	strd	r6, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001366:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800136a:	e9c0 2709 	strd	r2, r7, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800136e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001372:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 8001376:	9609      	str	r6, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8001378:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800137a:	f002 f9af 	bl	80036dc <HAL_SRAM_Init>
 800137e:	b108      	cbz	r0, 8001384 <main+0x144>
 8001380:	b672      	cpsid	i
  while (1)
 8001382:	e7fe      	b.n	8001382 <main+0x142>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <main+0x180>)
 8001386:	69d3      	ldr	r3, [r2, #28]
 8001388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138c:	61d3      	str	r3, [r2, #28]
  LCD_INIT(); // Initialize LCD
 800138e:	f7ff fd0d 	bl	8000dac <LCD_INIT>
  initApple1(); // Initialize Apple I
 8001392:	f7ff fe6f 	bl	8001074 <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 8001396:	f242 7010 	movw	r0, #10000	; 0x2710
 800139a:	f000 ffe5 	bl	8002368 <exec6502>
  while (1)
 800139e:	e7fa      	b.n	8001396 <main+0x156>
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40011800 	.word	0x40011800
 80013ac:	10210000 	.word	0x10210000
 80013b0:	40010800 	.word	0x40010800
 80013b4:	200080f8 	.word	0x200080f8
 80013b8:	40013800 	.word	0x40013800
 80013bc:	200080b0 	.word	0x200080b0
 80013c0:	40010000 	.word	0x40010000

080013c4 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 80013c4:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <getvalue+0x1c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b113      	cbz	r3, 80013d2 <getvalue+0xe>
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <getvalue+0x20>)
 80013ce:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 80013d0:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <getvalue+0x24>)
 80013d4:	8818      	ldrh	r0, [r3, #0]
 80013d6:	f7ff fec9 	bl	800116c <read6502>
 80013da:	b280      	uxth	r0, r0
 80013dc:	e7f8      	b.n	80013d0 <getvalue+0xc>
 80013de:	bf00      	nop
 80013e0:	2000815f 	.word	0x2000815f
 80013e4:	20008145 	.word	0x20008145
 80013e8:	2000814e 	.word	0x2000814e

080013ec <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80013ec:	4a02      	ldr	r2, [pc, #8]	; (80013f8 <bcc.part.0+0xc>)
 80013ee:	6813      	ldr	r3, [r2, #0]
 80013f0:	3302      	adds	r3, #2
 80013f2:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20008148 	.word	0x20008148

080013fc <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 80013fc:	4a02      	ldr	r2, [pc, #8]	; (8001408 <dex.part.0+0xc>)
 80013fe:	7813      	ldrb	r3, [r2, #0]
 8001400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001404:	7013      	strb	r3, [r2, #0]
}
 8001406:	4770      	bx	lr
 8001408:	2000814c 	.word	0x2000814c

0800140c <push16>:
void push16(uint16_t pushval) {
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8001410:	4c09      	ldr	r4, [pc, #36]	; (8001438 <push16+0x2c>)
 8001412:	0a29      	lsrs	r1, r5, #8
 8001414:	7820      	ldrb	r0, [r4, #0]
 8001416:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800141a:	f7ff fe17 	bl	800104c <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 800141e:	7823      	ldrb	r3, [r4, #0]
 8001420:	b2e9      	uxtb	r1, r5
 8001422:	3b01      	subs	r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800142a:	f7ff fe0f 	bl	800104c <write6502>
    sp -= 2;
 800142e:	7823      	ldrb	r3, [r4, #0]
 8001430:	3b02      	subs	r3, #2
 8001432:	7023      	strb	r3, [r4, #0]
}
 8001434:	bd38      	pop	{r3, r4, r5, pc}
 8001436:	bf00      	nop
 8001438:	2000815e 	.word	0x2000815e

0800143c <push8>:
    write6502(BASE_STACK + sp--, pushval);
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <push8+0x14>)
void push8(uint8_t pushval) {
 800143e:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8001440:	7813      	ldrb	r3, [r2, #0]
 8001442:	1e58      	subs	r0, r3, #1
 8001444:	7010      	strb	r0, [r2, #0]
 8001446:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800144a:	f7ff bdff 	b.w	800104c <write6502>
 800144e:	bf00      	nop
 8001450:	2000815e 	.word	0x2000815e

08001454 <pull16>:
uint16_t pull16() {
 8001454:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8001456:	4d0b      	ldr	r5, [pc, #44]	; (8001484 <pull16+0x30>)
 8001458:	7828      	ldrb	r0, [r5, #0]
 800145a:	3001      	adds	r0, #1
 800145c:	b2c0      	uxtb	r0, r0
 800145e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001462:	f7ff fe83 	bl	800116c <read6502>
 8001466:	4604      	mov	r4, r0
 8001468:	7828      	ldrb	r0, [r5, #0]
 800146a:	3002      	adds	r0, #2
 800146c:	b2c0      	uxtb	r0, r0
 800146e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001472:	f7ff fe7b 	bl	800116c <read6502>
    sp += 2;
 8001476:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8001478:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 800147c:	3302      	adds	r3, #2
 800147e:	702b      	strb	r3, [r5, #0]
}
 8001480:	b280      	uxth	r0, r0
 8001482:	bd38      	pop	{r3, r4, r5, pc}
 8001484:	2000815e 	.word	0x2000815e

08001488 <pull8>:
    return (read6502(BASE_STACK + ++sp));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <pull8+0x14>)
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	3001      	adds	r0, #1
 800148e:	b2c0      	uxtb	r0, r0
 8001490:	7018      	strb	r0, [r3, #0]
 8001492:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001496:	f7ff be69 	b.w	800116c <read6502>
 800149a:	bf00      	nop
 800149c:	2000815e 	.word	0x2000815e

080014a0 <reset6502>:
void reset6502() {
 80014a0:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 80014a2:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 80014a6:	f7ff fe61 	bl	800116c <read6502>
 80014aa:	4604      	mov	r4, r0
 80014ac:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 80014b0:	f7ff fe5c 	bl	800116c <read6502>
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <reset6502+0x3c>)
 80014b6:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80014ba:	801c      	strh	r4, [r3, #0]
    a = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <reset6502+0x40>)
 80014c0:	7013      	strb	r3, [r2, #0]
    x = 0;
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <reset6502+0x44>)
 80014c4:	7013      	strb	r3, [r2, #0]
    y = 0;
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <reset6502+0x48>)
 80014c8:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 80014ca:	22fd      	movs	r2, #253	; 0xfd
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <reset6502+0x4c>)
 80014ce:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <reset6502+0x50>)
 80014d2:	7813      	ldrb	r3, [r2, #0]
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	7013      	strb	r3, [r2, #0]
}
 80014da:	bd10      	pop	{r4, pc}
 80014dc:	20008158 	.word	0x20008158
 80014e0:	20008145 	.word	0x20008145
 80014e4:	20008162 	.word	0x20008162
 80014e8:	20008163 	.word	0x20008163
 80014ec:	2000815e 	.word	0x2000815e
 80014f0:	2000814c 	.word	0x2000814c

080014f4 <imm>:
    ea = pc++;
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <imm+0x10>)
 80014f6:	8813      	ldrh	r3, [r2, #0]
 80014f8:	1c59      	adds	r1, r3, #1
 80014fa:	8011      	strh	r1, [r2, #0]
 80014fc:	4a02      	ldr	r2, [pc, #8]	; (8001508 <imm+0x14>)
 80014fe:	8013      	strh	r3, [r2, #0]
}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20008158 	.word	0x20008158
 8001508:	2000814e 	.word	0x2000814e

0800150c <zp>:
void zp() { // zero-page
 800150c:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <zp+0x14>)
 8001510:	8818      	ldrh	r0, [r3, #0]
 8001512:	1c42      	adds	r2, r0, #1
 8001514:	801a      	strh	r2, [r3, #0]
 8001516:	f7ff fe29 	bl	800116c <read6502>
 800151a:	4b02      	ldr	r3, [pc, #8]	; (8001524 <zp+0x18>)
 800151c:	8018      	strh	r0, [r3, #0]
}
 800151e:	bd08      	pop	{r3, pc}
 8001520:	20008158 	.word	0x20008158
 8001524:	2000814e 	.word	0x2000814e

08001528 <zpx>:
void zpx() { // zero-page,X
 8001528:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <zpx+0x1c>)
 800152c:	8818      	ldrh	r0, [r3, #0]
 800152e:	1c42      	adds	r2, r0, #1
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	f7ff fe1b 	bl	800116c <read6502>
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <zpx+0x20>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4418      	add	r0, r3
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <zpx+0x24>)
 800153e:	b2c0      	uxtb	r0, r0
 8001540:	8018      	strh	r0, [r3, #0]
}
 8001542:	bd08      	pop	{r3, pc}
 8001544:	20008158 	.word	0x20008158
 8001548:	20008162 	.word	0x20008162
 800154c:	2000814e 	.word	0x2000814e

08001550 <zpy>:
void zpy() { // zero-page,Y
 8001550:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <zpy+0x1c>)
 8001554:	8818      	ldrh	r0, [r3, #0]
 8001556:	1c42      	adds	r2, r0, #1
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	f7ff fe07 	bl	800116c <read6502>
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <zpy+0x20>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4418      	add	r0, r3
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <zpy+0x24>)
 8001566:	b2c0      	uxtb	r0, r0
 8001568:	8018      	strh	r0, [r3, #0]
}
 800156a:	bd08      	pop	{r3, pc}
 800156c:	20008158 	.word	0x20008158
 8001570:	20008163 	.word	0x20008163
 8001574:	2000814e 	.word	0x2000814e

08001578 <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 8001578:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <rel+0x20>)
 800157c:	8818      	ldrh	r0, [r3, #0]
 800157e:	1c42      	adds	r2, r0, #1
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	f7ff fdf3 	bl	800116c <read6502>
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <rel+0x24>)
 8001588:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 800158a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800158e:	bf18      	it	ne
 8001590:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8001594:	8013      	strh	r3, [r2, #0]
}
 8001596:	bd08      	pop	{r3, pc}
 8001598:	20008158 	.word	0x20008158
 800159c:	2000815a 	.word	0x2000815a

080015a0 <abso>:
void abso() { // absolute
 80015a0:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 80015a2:	4d09      	ldr	r5, [pc, #36]	; (80015c8 <abso+0x28>)
 80015a4:	8828      	ldrh	r0, [r5, #0]
 80015a6:	f7ff fde1 	bl	800116c <read6502>
 80015aa:	4604      	mov	r4, r0
 80015ac:	8828      	ldrh	r0, [r5, #0]
 80015ae:	3001      	adds	r0, #1
 80015b0:	b280      	uxth	r0, r0
 80015b2:	f7ff fddb 	bl	800116c <read6502>
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <abso+0x2c>)
 80015b8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80015bc:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80015be:	882b      	ldrh	r3, [r5, #0]
 80015c0:	3302      	adds	r3, #2
 80015c2:	802b      	strh	r3, [r5, #0]
}
 80015c4:	bd38      	pop	{r3, r4, r5, pc}
 80015c6:	bf00      	nop
 80015c8:	20008158 	.word	0x20008158
 80015cc:	2000814e 	.word	0x2000814e

080015d0 <absx>:
void absx() { // absolute,X
 80015d0:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80015d2:	4d0a      	ldr	r5, [pc, #40]	; (80015fc <absx+0x2c>)
 80015d4:	8828      	ldrh	r0, [r5, #0]
 80015d6:	f7ff fdc9 	bl	800116c <read6502>
 80015da:	4604      	mov	r4, r0
 80015dc:	8828      	ldrh	r0, [r5, #0]
 80015de:	3001      	adds	r0, #1
 80015e0:	b280      	uxth	r0, r0
 80015e2:	f7ff fdc3 	bl	800116c <read6502>
    ea += (uint16_t)x;
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80015e8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <absx+0x34>)
 80015f0:	4404      	add	r4, r0
 80015f2:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80015f4:	882b      	ldrh	r3, [r5, #0]
 80015f6:	3302      	adds	r3, #2
 80015f8:	802b      	strh	r3, [r5, #0]
}
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	20008158 	.word	0x20008158
 8001600:	20008162 	.word	0x20008162
 8001604:	2000814e 	.word	0x2000814e

08001608 <absy>:
void absy() { // absolute,Y
 8001608:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 800160a:	4d0a      	ldr	r5, [pc, #40]	; (8001634 <absy+0x2c>)
 800160c:	8828      	ldrh	r0, [r5, #0]
 800160e:	f7ff fdad 	bl	800116c <read6502>
 8001612:	4604      	mov	r4, r0
 8001614:	8828      	ldrh	r0, [r5, #0]
 8001616:	3001      	adds	r0, #1
 8001618:	b280      	uxth	r0, r0
 800161a:	f7ff fda7 	bl	800116c <read6502>
    ea += (uint16_t)y;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8001620:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 8001624:	7818      	ldrb	r0, [r3, #0]
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <absy+0x34>)
 8001628:	4404      	add	r4, r0
 800162a:	801c      	strh	r4, [r3, #0]
    pc += 2;
 800162c:	882b      	ldrh	r3, [r5, #0]
 800162e:	3302      	adds	r3, #2
 8001630:	802b      	strh	r3, [r5, #0]
}
 8001632:	bd38      	pop	{r3, r4, r5, pc}
 8001634:	20008158 	.word	0x20008158
 8001638:	20008163 	.word	0x20008163
 800163c:	2000814e 	.word	0x2000814e

08001640 <ind>:
void ind() { // indirect
 8001640:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 8001642:	4e10      	ldr	r6, [pc, #64]	; (8001684 <ind+0x44>)
 8001644:	8830      	ldrh	r0, [r6, #0]
 8001646:	f7ff fd91 	bl	800116c <read6502>
 800164a:	4604      	mov	r4, r0
 800164c:	8830      	ldrh	r0, [r6, #0]
 800164e:	3001      	adds	r0, #1
 8001650:	b280      	uxth	r0, r0
 8001652:	f7ff fd8b 	bl	800116c <read6502>
 8001656:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800165a:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fd85 	bl	800116c <read6502>
 8001662:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8001664:	1c60      	adds	r0, r4, #1
 8001666:	b2c0      	uxtb	r0, r0
 8001668:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800166c:	4320      	orrs	r0, r4
 800166e:	f7ff fd7d 	bl	800116c <read6502>
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <ind+0x48>)
 8001674:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8001678:	801d      	strh	r5, [r3, #0]
    pc += 2;
 800167a:	8833      	ldrh	r3, [r6, #0]
 800167c:	3302      	adds	r3, #2
 800167e:	8033      	strh	r3, [r6, #0]
}
 8001680:	bd70      	pop	{r4, r5, r6, pc}
 8001682:	bf00      	nop
 8001684:	20008158 	.word	0x20008158
 8001688:	2000814e 	.word	0x2000814e

0800168c <indx>:
void indx() { //  (indirect,X)
 800168c:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <indx+0x30>)
 8001690:	8818      	ldrh	r0, [r3, #0]
 8001692:	1c42      	adds	r2, r0, #1
 8001694:	801a      	strh	r2, [r3, #0]
 8001696:	f7ff fd69 	bl	800116c <read6502>
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <indx+0x34>)
 800169c:	781c      	ldrb	r4, [r3, #0]
 800169e:	4404      	add	r4, r0
 80016a0:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff fd62 	bl	800116c <read6502>
 80016a8:	3401      	adds	r4, #1
 80016aa:	4605      	mov	r5, r0
 80016ac:	b2e0      	uxtb	r0, r4
 80016ae:	f7ff fd5d 	bl	800116c <read6502>
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <indx+0x38>)
 80016b4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80016b8:	801d      	strh	r5, [r3, #0]
}
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
 80016bc:	20008158 	.word	0x20008158
 80016c0:	20008162 	.word	0x20008162
 80016c4:	2000814e 	.word	0x2000814e

080016c8 <indy>:
void indy() { //  (indirect),Y
 80016c8:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <indy+0x30>)
 80016cc:	8818      	ldrh	r0, [r3, #0]
 80016ce:	1c42      	adds	r2, r0, #1
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	f7ff fd4b 	bl	800116c <read6502>
 80016d6:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fd47 	bl	800116c <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 80016de:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80016e0:	4605      	mov	r5, r0
 80016e2:	b2e0      	uxtb	r0, r4
 80016e4:	f7ff fd42 	bl	800116c <read6502>
    ea += (uint16_t)y;
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80016ea:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 80016ee:	7818      	ldrb	r0, [r3, #0]
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <indy+0x38>)
 80016f2:	4405      	add	r5, r0
 80016f4:	801d      	strh	r5, [r3, #0]
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	20008158 	.word	0x20008158
 80016fc:	20008163 	.word	0x20008163
 8001700:	2000814e 	.word	0x2000814e

08001704 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <putvalue+0x18>)
 8001706:	b2c1      	uxtb	r1, r0
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b113      	cbz	r3, 8001712 <putvalue+0xe>
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <putvalue+0x1c>)
 800170e:	7019      	strb	r1, [r3, #0]
}
 8001710:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <putvalue+0x20>)
 8001714:	8818      	ldrh	r0, [r3, #0]
 8001716:	f7ff bc99 	b.w	800104c <write6502>
 800171a:	bf00      	nop
 800171c:	2000815f 	.word	0x2000815f
 8001720:	20008145 	.word	0x20008145
 8001724:	2000814e 	.word	0x2000814e

08001728 <adc>:
void adc() {
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 800172a:	f7ff fe4b 	bl	80013c4 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800172e:	4d24      	ldr	r5, [pc, #144]	; (80017c0 <adc+0x98>)
    value = getvalue();
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001732:	4c25      	ldr	r4, [pc, #148]	; (80017c8 <adc+0xa0>)
    value = getvalue();
 8001734:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001736:	782b      	ldrb	r3, [r5, #0]
 8001738:	7821      	ldrb	r1, [r4, #0]
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	440a      	add	r2, r1
 8001740:	4e22      	ldr	r6, [pc, #136]	; (80017cc <adc+0xa4>)
 8001742:	4402      	add	r2, r0
 8001744:	b292      	uxth	r2, r2
    carrycalc(result);
 8001746:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800174a:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800174c:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 800174e:	bf14      	ite	ne
 8001750:	f043 0301 	orrne.w	r3, r3, #1
 8001754:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001758:	b1c6      	cbz	r6, 800178c <adc+0x64>
 800175a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 800175e:	ea81 0602 	eor.w	r6, r1, r2
 8001762:	ea80 0702 	eor.w	r7, r0, r2
 8001766:	4630      	mov	r0, r6
 8001768:	4038      	ands	r0, r7
 800176a:	0607      	lsls	r7, r0, #24
 800176c:	bf4c      	ite	mi
 800176e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8001772:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8001776:	0616      	lsls	r6, r2, #24
 8001778:	bf4c      	ite	mi
 800177a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800177e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 8001782:	0718      	lsls	r0, r3, #28
 8001784:	d405      	bmi.n	8001792 <adc+0x6a>
 8001786:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 8001788:	7022      	strb	r2, [r4, #0]
}
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	e7e5      	b.n	800175e <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 8001792:	f001 000f 	and.w	r0, r1, #15
 8001796:	2809      	cmp	r0, #9
            a += 0x06;
 8001798:	bf84      	itt	hi
 800179a:	3106      	addhi	r1, #6
 800179c:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 800179e:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80017a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80017a4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80017a8:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80017aa:	4909      	ldr	r1, [pc, #36]	; (80017d0 <adc+0xa8>)
        clearcarry();
 80017ac:	702b      	strb	r3, [r5, #0]
            setcarry();
 80017ae:	bf84      	itt	hi
 80017b0:	f043 0301 	orrhi.w	r3, r3, #1
 80017b4:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80017b6:	680b      	ldr	r3, [r1, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e7e4      	b.n	8001788 <adc+0x60>
 80017be:	bf00      	nop
 80017c0:	2000814c 	.word	0x2000814c
 80017c4:	20008160 	.word	0x20008160
 80017c8:	20008145 	.word	0x20008145
 80017cc:	2000815c 	.word	0x2000815c
 80017d0:	20008148 	.word	0x20008148

080017d4 <op_and>:
void op_and() {
 80017d4:	b508      	push	{r3, lr}
    value = getvalue();
 80017d6:	f7ff fdf5 	bl	80013c4 <getvalue>
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <op_and+0x40>)
    result = (uint16_t)a & value;
 80017dc:	490e      	ldr	r1, [pc, #56]	; (8001818 <op_and+0x44>)
    value = getvalue();
 80017de:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 80017e0:	780b      	ldrb	r3, [r1, #0]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <op_and+0x48>)
 80017e4:	4018      	ands	r0, r3
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <op_and+0x4c>)
 80017e8:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 80017ea:	7813      	ldrb	r3, [r2, #0]
 80017ec:	b148      	cbz	r0, 8001802 <op_and+0x2e>
 80017ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80017f2:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 80017f6:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 80017f8:	d107      	bne.n	800180a <op_and+0x36>
 80017fa:	7813      	ldrb	r3, [r2, #0]
 80017fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001800:	e005      	b.n	800180e <op_and+0x3a>
    zerocalc(result);
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8001808:	e7f7      	b.n	80017fa <op_and+0x26>
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8001810:	7008      	strb	r0, [r1, #0]
}
 8001812:	bd08      	pop	{r3, pc}
 8001814:	20008160 	.word	0x20008160
 8001818:	20008145 	.word	0x20008145
 800181c:	2000814c 	.word	0x2000814c
 8001820:	2000815c 	.word	0x2000815c

08001824 <asl>:
void asl() {
 8001824:	b508      	push	{r3, lr}
    value = getvalue();
 8001826:	f7ff fdcd 	bl	80013c4 <getvalue>
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <asl+0x48>)
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <asl+0x4c>)
 800182e:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <asl+0x50>)
 8001832:	0040      	lsls	r0, r0, #1
 8001834:	b280      	uxth	r0, r0
 8001836:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8001838:	7813      	ldrb	r3, [r2, #0]
 800183a:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 800183e:	bf14      	ite	ne
 8001840:	f043 0301 	orrne.w	r3, r3, #1
 8001844:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001848:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 800184c:	bf14      	ite	ne
 800184e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8001852:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8001856:	0601      	lsls	r1, r0, #24
 8001858:	bf4c      	ite	mi
 800185a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800185e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001862:	7013      	strb	r3, [r2, #0]
}
 8001864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001868:	f7ff bf4c 	b.w	8001704 <putvalue>
 800186c:	20008160 	.word	0x20008160
 8001870:	2000814c 	.word	0x2000814c
 8001874:	2000815c 	.word	0x2000815c

08001878 <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <bcc+0x30>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	07db      	lsls	r3, r3, #31
 800187e:	d412      	bmi.n	80018a6 <bcc+0x2e>
        oldpc = pc;
 8001880:	490a      	ldr	r1, [pc, #40]	; (80018ac <bcc+0x34>)
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <bcc+0x38>)
 8001884:	880a      	ldrh	r2, [r1, #0]
 8001886:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <bcc+0x3c>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001892:	4053      	eors	r3, r2
 8001894:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001898:	d001      	beq.n	800189e <bcc+0x26>
 800189a:	f7ff bda7 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <bcc+0x40>)
 80018a0:	6813      	ldr	r3, [r2, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	4770      	bx	lr
 80018a8:	2000814c 	.word	0x2000814c
 80018ac:	20008158 	.word	0x20008158
 80018b0:	20008154 	.word	0x20008154
 80018b4:	2000815a 	.word	0x2000815a
 80018b8:	20008148 	.word	0x20008148

080018bc <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <bcs+0x30>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	07db      	lsls	r3, r3, #31
 80018c2:	d512      	bpl.n	80018ea <bcs+0x2e>
        oldpc = pc;
 80018c4:	490a      	ldr	r1, [pc, #40]	; (80018f0 <bcs+0x34>)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <bcs+0x38>)
 80018c8:	880a      	ldrh	r2, [r1, #0]
 80018ca:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <bcs+0x3c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80018d6:	4053      	eors	r3, r2
 80018d8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80018dc:	d001      	beq.n	80018e2 <bcs+0x26>
 80018de:	f7ff bd85 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <bcs+0x40>)
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	4770      	bx	lr
 80018ec:	2000814c 	.word	0x2000814c
 80018f0:	20008158 	.word	0x20008158
 80018f4:	20008154 	.word	0x20008154
 80018f8:	2000815a 	.word	0x2000815a
 80018fc:	20008148 	.word	0x20008148

08001900 <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <beq+0x30>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	079b      	lsls	r3, r3, #30
 8001906:	d512      	bpl.n	800192e <beq+0x2e>
        oldpc = pc;
 8001908:	490a      	ldr	r1, [pc, #40]	; (8001934 <beq+0x34>)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <beq+0x38>)
 800190c:	880a      	ldrh	r2, [r1, #0]
 800190e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <beq+0x3c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	4413      	add	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800191a:	4053      	eors	r3, r2
 800191c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001920:	d001      	beq.n	8001926 <beq+0x26>
 8001922:	f7ff bd63 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <beq+0x40>)
 8001928:	6813      	ldr	r3, [r2, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	6013      	str	r3, [r2, #0]
}
 800192e:	4770      	bx	lr
 8001930:	2000814c 	.word	0x2000814c
 8001934:	20008158 	.word	0x20008158
 8001938:	20008154 	.word	0x20008154
 800193c:	2000815a 	.word	0x2000815a
 8001940:	20008148 	.word	0x20008148

08001944 <op_bit>:
void op_bit() {
 8001944:	b508      	push	{r3, lr}
    value = getvalue();
 8001946:	f7ff fd3d 	bl	80013c4 <getvalue>
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <op_bit+0x34>)
    result = (uint16_t)a & value;
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <op_bit+0x38>)
    value = getvalue();
 800194e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <op_bit+0x3c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4003      	ands	r3, r0
 8001956:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <op_bit+0x40>)
 800195a:	b14b      	cbz	r3, 8001970 <op_bit+0x2c>
 800195c:	7813      	ldrb	r3, [r2, #0]
 800195e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8001962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001966:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800196a:	4303      	orrs	r3, r0
 800196c:	7013      	strb	r3, [r2, #0]
}
 800196e:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001970:	7813      	ldrb	r3, [r2, #0]
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	e7f4      	b.n	8001962 <op_bit+0x1e>
 8001978:	20008160 	.word	0x20008160
 800197c:	2000815c 	.word	0x2000815c
 8001980:	20008145 	.word	0x20008145
 8001984:	2000814c 	.word	0x2000814c

08001988 <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <bmi+0x34>)
 800198a:	f993 3000 	ldrsb.w	r3, [r3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	da12      	bge.n	80019b8 <bmi+0x30>
        oldpc = pc;
 8001992:	490b      	ldr	r1, [pc, #44]	; (80019c0 <bmi+0x38>)
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <bmi+0x3c>)
 8001996:	880a      	ldrh	r2, [r1, #0]
 8001998:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <bmi+0x40>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80019a4:	4053      	eors	r3, r2
 80019a6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80019aa:	d001      	beq.n	80019b0 <bmi+0x28>
 80019ac:	f7ff bd1e 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <bmi+0x44>)
 80019b2:	6813      	ldr	r3, [r2, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000814c 	.word	0x2000814c
 80019c0:	20008158 	.word	0x20008158
 80019c4:	20008154 	.word	0x20008154
 80019c8:	2000815a 	.word	0x2000815a
 80019cc:	20008148 	.word	0x20008148

080019d0 <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <bne+0x30>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	079b      	lsls	r3, r3, #30
 80019d6:	d412      	bmi.n	80019fe <bne+0x2e>
        oldpc = pc;
 80019d8:	490a      	ldr	r1, [pc, #40]	; (8001a04 <bne+0x34>)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <bne+0x38>)
 80019dc:	880a      	ldrh	r2, [r1, #0]
 80019de:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <bne+0x3c>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80019ea:	4053      	eors	r3, r2
 80019ec:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80019f0:	d001      	beq.n	80019f6 <bne+0x26>
 80019f2:	f7ff bcfb 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <bne+0x40>)
 80019f8:	6813      	ldr	r3, [r2, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	4770      	bx	lr
 8001a00:	2000814c 	.word	0x2000814c
 8001a04:	20008158 	.word	0x20008158
 8001a08:	20008154 	.word	0x20008154
 8001a0c:	2000815a 	.word	0x2000815a
 8001a10:	20008148 	.word	0x20008148

08001a14 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <bpl+0x34>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db12      	blt.n	8001a44 <bpl+0x30>
        oldpc = pc;
 8001a1e:	490b      	ldr	r1, [pc, #44]	; (8001a4c <bpl+0x38>)
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <bpl+0x3c>)
 8001a22:	880a      	ldrh	r2, [r1, #0]
 8001a24:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <bpl+0x40>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001a30:	4053      	eors	r3, r2
 8001a32:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001a36:	d001      	beq.n	8001a3c <bpl+0x28>
 8001a38:	f7ff bcd8 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <bpl+0x44>)
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000814c 	.word	0x2000814c
 8001a4c:	20008158 	.word	0x20008158
 8001a50:	20008154 	.word	0x20008154
 8001a54:	2000815a 	.word	0x2000815a
 8001a58:	20008148 	.word	0x20008148

08001a5c <brk>:
void brk() {
 8001a5c:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8001a5e:	4d0f      	ldr	r5, [pc, #60]	; (8001a9c <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001a60:	4c0f      	ldr	r4, [pc, #60]	; (8001aa0 <brk+0x44>)
    pc++;
 8001a62:	8828      	ldrh	r0, [r5, #0]
 8001a64:	3001      	adds	r0, #1
 8001a66:	b280      	uxth	r0, r0
 8001a68:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8001a6a:	f7ff fccf 	bl	800140c <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001a6e:	7820      	ldrb	r0, [r4, #0]
 8001a70:	f040 0010 	orr.w	r0, r0, #16
 8001a74:	f7ff fce2 	bl	800143c <push8>
    setinterrupt(); // set interrupt flag
 8001a78:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001a7a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001a84:	f7ff fb72 	bl	800116c <read6502>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a8e:	f7ff fb6d 	bl	800116c <read6502>
 8001a92:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8001a96:	802c      	strh	r4, [r5, #0]
}
 8001a98:	bd38      	pop	{r3, r4, r5, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20008158 	.word	0x20008158
 8001aa0:	2000814c 	.word	0x2000814c

08001aa4 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <bvc+0x30>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	065b      	lsls	r3, r3, #25
 8001aaa:	d412      	bmi.n	8001ad2 <bvc+0x2e>
        oldpc = pc;
 8001aac:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <bvc+0x34>)
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <bvc+0x38>)
 8001ab0:	880a      	ldrh	r2, [r1, #0]
 8001ab2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <bvc+0x3c>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001abe:	4053      	eors	r3, r2
 8001ac0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001ac4:	d001      	beq.n	8001aca <bvc+0x26>
 8001ac6:	f7ff bc91 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <bvc+0x40>)
 8001acc:	6813      	ldr	r3, [r2, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	4770      	bx	lr
 8001ad4:	2000814c 	.word	0x2000814c
 8001ad8:	20008158 	.word	0x20008158
 8001adc:	20008154 	.word	0x20008154
 8001ae0:	2000815a 	.word	0x2000815a
 8001ae4:	20008148 	.word	0x20008148

08001ae8 <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <bvs+0x30>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	065b      	lsls	r3, r3, #25
 8001aee:	d512      	bpl.n	8001b16 <bvs+0x2e>
        oldpc = pc;
 8001af0:	490a      	ldr	r1, [pc, #40]	; (8001b1c <bvs+0x34>)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <bvs+0x38>)
 8001af4:	880a      	ldrh	r2, [r1, #0]
 8001af6:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <bvs+0x3c>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001b02:	4053      	eors	r3, r2
 8001b04:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001b08:	d001      	beq.n	8001b0e <bvs+0x26>
 8001b0a:	f7ff bc6f 	b.w	80013ec <bcc.part.0>
            else clockticks6502++;
 8001b0e:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <bvs+0x40>)
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	6013      	str	r3, [r2, #0]
}
 8001b16:	4770      	bx	lr
 8001b18:	2000814c 	.word	0x2000814c
 8001b1c:	20008158 	.word	0x20008158
 8001b20:	20008154 	.word	0x20008154
 8001b24:	2000815a 	.word	0x2000815a
 8001b28:	20008148 	.word	0x20008148

08001b2c <clc>:
    clearcarry();
 8001b2c:	4a02      	ldr	r2, [pc, #8]	; (8001b38 <clc+0xc>)
 8001b2e:	7813      	ldrb	r3, [r2, #0]
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	7013      	strb	r3, [r2, #0]
}
 8001b36:	4770      	bx	lr
 8001b38:	2000814c 	.word	0x2000814c

08001b3c <cld>:
    cleardecimal();
 8001b3c:	4a02      	ldr	r2, [pc, #8]	; (8001b48 <cld+0xc>)
 8001b3e:	7813      	ldrb	r3, [r2, #0]
 8001b40:	f023 0308 	bic.w	r3, r3, #8
 8001b44:	7013      	strb	r3, [r2, #0]
}
 8001b46:	4770      	bx	lr
 8001b48:	2000814c 	.word	0x2000814c

08001b4c <cli>:
    clearinterrupt();
 8001b4c:	4a02      	ldr	r2, [pc, #8]	; (8001b58 <cli+0xc>)
 8001b4e:	7813      	ldrb	r3, [r2, #0]
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	7013      	strb	r3, [r2, #0]
}
 8001b56:	4770      	bx	lr
 8001b58:	2000814c 	.word	0x2000814c

08001b5c <clv>:
    clearoverflow();
 8001b5c:	4a02      	ldr	r2, [pc, #8]	; (8001b68 <clv+0xc>)
 8001b5e:	7813      	ldrb	r3, [r2, #0]
 8001b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b64:	7013      	strb	r3, [r2, #0]
}
 8001b66:	4770      	bx	lr
 8001b68:	2000814c 	.word	0x2000814c

08001b6c <cmp>:
void cmp() {
 8001b6c:	b508      	push	{r3, lr}
    value = getvalue();
 8001b6e:	f7ff fc29 	bl	80013c4 <getvalue>
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <cmp+0x4c>)
    result = (uint16_t)a - value;
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <cmp+0x50>)
    value = getvalue();
 8001b76:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <cmp+0x54>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	1a19      	subs	r1, r3, r0
 8001b7e:	b289      	uxth	r1, r1
 8001b80:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8001b82:	b2c0      	uxtb	r0, r0
 8001b84:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <cmp+0x58>)
 8001b86:	4283      	cmp	r3, r0
 8001b88:	7813      	ldrb	r3, [r2, #0]
 8001b8a:	d307      	bcc.n	8001b9c <cmp+0x30>
 8001b8c:	f043 0001 	orr.w	r0, r3, #1
 8001b90:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001b92:	d007      	beq.n	8001ba4 <cmp+0x38>
        else clearzero();
 8001b94:	7813      	ldrb	r3, [r2, #0]
 8001b96:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001b9a:	e005      	b.n	8001ba8 <cmp+0x3c>
        else clearcarry();
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001ba2:	e7f7      	b.n	8001b94 <cmp+0x28>
 8001ba4:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001ba8:	0609      	lsls	r1, r1, #24
 8001baa:	bf4c      	ite	mi
 8001bac:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001bb0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001bb4:	7013      	strb	r3, [r2, #0]
}
 8001bb6:	bd08      	pop	{r3, pc}
 8001bb8:	20008160 	.word	0x20008160
 8001bbc:	2000815c 	.word	0x2000815c
 8001bc0:	20008145 	.word	0x20008145
 8001bc4:	2000814c 	.word	0x2000814c

08001bc8 <cpx>:
void cpx() {
 8001bc8:	b508      	push	{r3, lr}
    value = getvalue();
 8001bca:	f7ff fbfb 	bl	80013c4 <getvalue>
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <cpx+0x4c>)
    result = (uint16_t)x - value;
 8001bd0:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <cpx+0x50>)
    value = getvalue();
 8001bd2:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <cpx+0x54>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	1a19      	subs	r1, r3, r0
 8001bda:	b289      	uxth	r1, r1
 8001bdc:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8001bde:	b2c0      	uxtb	r0, r0
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <cpx+0x58>)
 8001be2:	4283      	cmp	r3, r0
 8001be4:	7813      	ldrb	r3, [r2, #0]
 8001be6:	d307      	bcc.n	8001bf8 <cpx+0x30>
 8001be8:	f043 0001 	orr.w	r0, r3, #1
 8001bec:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001bee:	d007      	beq.n	8001c00 <cpx+0x38>
        else clearzero();
 8001bf0:	7813      	ldrb	r3, [r2, #0]
 8001bf2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001bf6:	e005      	b.n	8001c04 <cpx+0x3c>
        else clearcarry();
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001bfe:	e7f7      	b.n	8001bf0 <cpx+0x28>
 8001c00:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001c04:	0609      	lsls	r1, r1, #24
 8001c06:	bf4c      	ite	mi
 8001c08:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001c0c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001c10:	7013      	strb	r3, [r2, #0]
}
 8001c12:	bd08      	pop	{r3, pc}
 8001c14:	20008160 	.word	0x20008160
 8001c18:	2000815c 	.word	0x2000815c
 8001c1c:	20008162 	.word	0x20008162
 8001c20:	2000814c 	.word	0x2000814c

08001c24 <cpy>:
void cpy() {
 8001c24:	b508      	push	{r3, lr}
    value = getvalue();
 8001c26:	f7ff fbcd 	bl	80013c4 <getvalue>
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <cpy+0x4c>)
    result = (uint16_t)y - value;
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <cpy+0x50>)
    value = getvalue();
 8001c2e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <cpy+0x54>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	1a19      	subs	r1, r3, r0
 8001c36:	b289      	uxth	r1, r1
 8001c38:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 8001c3a:	b2c0      	uxtb	r0, r0
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <cpy+0x58>)
 8001c3e:	4283      	cmp	r3, r0
 8001c40:	7813      	ldrb	r3, [r2, #0]
 8001c42:	d307      	bcc.n	8001c54 <cpy+0x30>
 8001c44:	f043 0001 	orr.w	r0, r3, #1
 8001c48:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8001c4a:	d007      	beq.n	8001c5c <cpy+0x38>
        else clearzero();
 8001c4c:	7813      	ldrb	r3, [r2, #0]
 8001c4e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001c52:	e005      	b.n	8001c60 <cpy+0x3c>
        else clearcarry();
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8001c5a:	e7f7      	b.n	8001c4c <cpy+0x28>
 8001c5c:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001c60:	0609      	lsls	r1, r1, #24
 8001c62:	bf4c      	ite	mi
 8001c64:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001c68:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001c6c:	7013      	strb	r3, [r2, #0]
}
 8001c6e:	bd08      	pop	{r3, pc}
 8001c70:	20008160 	.word	0x20008160
 8001c74:	2000815c 	.word	0x2000815c
 8001c78:	20008163 	.word	0x20008163
 8001c7c:	2000814c 	.word	0x2000814c

08001c80 <dec>:
void dec() {
 8001c80:	b508      	push	{r3, lr}
    value = getvalue();
 8001c82:	f7ff fb9f 	bl	80013c4 <getvalue>
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <dec+0x3c>)
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <dec+0x40>)
 8001c8a:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <dec+0x44>)
 8001c8e:	3801      	subs	r0, #1
 8001c90:	b280      	uxth	r0, r0
 8001c92:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8001c94:	b2c3      	uxtb	r3, r0
 8001c96:	b16b      	cbz	r3, 8001cb4 <dec+0x34>
 8001c98:	7813      	ldrb	r3, [r2, #0]
 8001c9a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001c9e:	0601      	lsls	r1, r0, #24
 8001ca0:	bf4c      	ite	mi
 8001ca2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001ca6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001caa:	7013      	strb	r3, [r2, #0]
}
 8001cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001cb0:	f7ff bd28 	b.w	8001704 <putvalue>
    zerocalc(result);
 8001cb4:	7813      	ldrb	r3, [r2, #0]
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	e7f0      	b.n	8001c9e <dec+0x1e>
 8001cbc:	20008160 	.word	0x20008160
 8001cc0:	2000814c 	.word	0x2000814c
 8001cc4:	2000815c 	.word	0x2000815c

08001cc8 <dex>:
    x--;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <dex+0x2c>)
    zerocalc(x);
 8001cca:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <dex+0x30>)
    x--;
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001cd4:	780b      	ldrb	r3, [r1, #0]
 8001cd6:	b132      	cbz	r2, 8001ce6 <dex+0x1e>
 8001cd8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001cdc:	0612      	lsls	r2, r2, #24
 8001cde:	700b      	strb	r3, [r1, #0]
 8001ce0:	d504      	bpl.n	8001cec <dex+0x24>
 8001ce2:	f7ff bb8b 	b.w	80013fc <dex.part.0>
    zerocalc(x);
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	e7f7      	b.n	8001cdc <dex+0x14>
    signcalc(x);
 8001cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf0:	700b      	strb	r3, [r1, #0]
}
 8001cf2:	4770      	bx	lr
 8001cf4:	20008162 	.word	0x20008162
 8001cf8:	2000814c 	.word	0x2000814c

08001cfc <dey>:

void dey() {
    y--;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <dey+0x2c>)
   
    zerocalc(y);
 8001cfe:	490b      	ldr	r1, [pc, #44]	; (8001d2c <dey+0x30>)
    y--;
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	3a01      	subs	r2, #1
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001d08:	780b      	ldrb	r3, [r1, #0]
 8001d0a:	b132      	cbz	r2, 8001d1a <dey+0x1e>
 8001d0c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001d10:	0612      	lsls	r2, r2, #24
 8001d12:	700b      	strb	r3, [r1, #0]
 8001d14:	d504      	bpl.n	8001d20 <dey+0x24>
 8001d16:	f7ff bb71 	b.w	80013fc <dex.part.0>
    zerocalc(y);
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	e7f7      	b.n	8001d10 <dey+0x14>
    signcalc(y);
 8001d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d24:	700b      	strb	r3, [r1, #0]
}
 8001d26:	4770      	bx	lr
 8001d28:	20008163 	.word	0x20008163
 8001d2c:	2000814c 	.word	0x2000814c

08001d30 <eor>:

void eor() {
 8001d30:	b508      	push	{r3, lr}
    value = getvalue();
 8001d32:	f7ff fb47 	bl	80013c4 <getvalue>
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <eor+0x3c>)
    result = (uint16_t)a ^ value;
 8001d38:	490d      	ldr	r1, [pc, #52]	; (8001d70 <eor+0x40>)
    value = getvalue();
 8001d3a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8001d3c:	780b      	ldrb	r3, [r1, #0]
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <eor+0x44>)
 8001d40:	4058      	eors	r0, r3
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <eor+0x48>)
 8001d44:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001d46:	b2c3      	uxtb	r3, r0
 8001d48:	b163      	cbz	r3, 8001d64 <eor+0x34>
 8001d4a:	7813      	ldrb	r3, [r2, #0]
 8001d4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001d50:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d54:	bf14      	ite	ne
 8001d56:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001d5a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001d5e:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001d60:	7008      	strb	r0, [r1, #0]
}
 8001d62:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001d64:	7813      	ldrb	r3, [r2, #0]
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	e7f1      	b.n	8001d50 <eor+0x20>
 8001d6c:	20008160 	.word	0x20008160
 8001d70:	20008145 	.word	0x20008145
 8001d74:	2000814c 	.word	0x2000814c
 8001d78:	2000815c 	.word	0x2000815c

08001d7c <inc>:

void inc() {
 8001d7c:	b508      	push	{r3, lr}
    value = getvalue();
 8001d7e:	f7ff fb21 	bl	80013c4 <getvalue>
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <inc+0x3c>)
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <inc+0x40>)
 8001d86:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <inc+0x44>)
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	b280      	uxth	r0, r0
 8001d8e:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001d90:	b2c3      	uxtb	r3, r0
 8001d92:	b16b      	cbz	r3, 8001db0 <inc+0x34>
 8001d94:	7813      	ldrb	r3, [r2, #0]
 8001d96:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001d9a:	0601      	lsls	r1, r0, #24
 8001d9c:	bf4c      	ite	mi
 8001d9e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001da2:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001da6:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001dac:	f7ff bcaa 	b.w	8001704 <putvalue>
    zerocalc(result);
 8001db0:	7813      	ldrb	r3, [r2, #0]
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	e7f0      	b.n	8001d9a <inc+0x1e>
 8001db8:	20008160 	.word	0x20008160
 8001dbc:	2000814c 	.word	0x2000814c
 8001dc0:	2000815c 	.word	0x2000815c

08001dc4 <inx>:

void inx() {
    x++;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <inx+0x2c>)
   
    zerocalc(x);
 8001dc6:	490b      	ldr	r1, [pc, #44]	; (8001df4 <inx+0x30>)
    x++;
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	3201      	adds	r2, #1
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001dd0:	780b      	ldrb	r3, [r1, #0]
 8001dd2:	b132      	cbz	r2, 8001de2 <inx+0x1e>
 8001dd4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001dd8:	0612      	lsls	r2, r2, #24
 8001dda:	700b      	strb	r3, [r1, #0]
 8001ddc:	d504      	bpl.n	8001de8 <inx+0x24>
 8001dde:	f7ff bb0d 	b.w	80013fc <dex.part.0>
    zerocalc(x);
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	e7f7      	b.n	8001dd8 <inx+0x14>
    signcalc(x);
 8001de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dec:	700b      	strb	r3, [r1, #0]
}
 8001dee:	4770      	bx	lr
 8001df0:	20008162 	.word	0x20008162
 8001df4:	2000814c 	.word	0x2000814c

08001df8 <iny>:

void iny() {
    y++;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <iny+0x2c>)
   
    zerocalc(y);
 8001dfa:	490b      	ldr	r1, [pc, #44]	; (8001e28 <iny+0x30>)
    y++;
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	3201      	adds	r2, #1
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001e04:	780b      	ldrb	r3, [r1, #0]
 8001e06:	b132      	cbz	r2, 8001e16 <iny+0x1e>
 8001e08:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001e0c:	0612      	lsls	r2, r2, #24
 8001e0e:	700b      	strb	r3, [r1, #0]
 8001e10:	d504      	bpl.n	8001e1c <iny+0x24>
 8001e12:	f7ff baf3 	b.w	80013fc <dex.part.0>
    zerocalc(y);
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	e7f7      	b.n	8001e0c <iny+0x14>
    signcalc(y);
 8001e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e20:	700b      	strb	r3, [r1, #0]
}
 8001e22:	4770      	bx	lr
 8001e24:	20008163 	.word	0x20008163
 8001e28:	2000814c 	.word	0x2000814c

08001e2c <jmp>:

void jmp() {
    pc = ea;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <jmp+0xc>)
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <jmp+0x10>)
 8001e32:	801a      	strh	r2, [r3, #0]
}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000814e 	.word	0x2000814e
 8001e3c:	20008158 	.word	0x20008158

08001e40 <jsr>:

void jsr() {
 8001e40:	b510      	push	{r4, lr}
    push16(pc - 1);
 8001e42:	4c05      	ldr	r4, [pc, #20]	; (8001e58 <jsr+0x18>)
 8001e44:	8820      	ldrh	r0, [r4, #0]
 8001e46:	3801      	subs	r0, #1
 8001e48:	b280      	uxth	r0, r0
 8001e4a:	f7ff fadf 	bl	800140c <push16>
    pc = ea;
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <jsr+0x1c>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	8023      	strh	r3, [r4, #0]
}
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	bf00      	nop
 8001e58:	20008158 	.word	0x20008158
 8001e5c:	2000814e 	.word	0x2000814e

08001e60 <lda>:

void lda() {
 8001e60:	b508      	push	{r3, lr}
    value = getvalue();
 8001e62:	f7ff faaf 	bl	80013c4 <getvalue>
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <lda+0x3c>)
    value = getvalue();
 8001e6a:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001e6c:	b2c3      	uxtb	r3, r0
 8001e6e:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <lda+0x40>)
 8001e72:	b14b      	cbz	r3, 8001e88 <lda+0x28>
 8001e74:	7813      	ldrb	r3, [r2, #0]
 8001e76:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001e7a:	0601      	lsls	r1, r0, #24
 8001e7c:	7013      	strb	r3, [r2, #0]
 8001e7e:	d507      	bpl.n	8001e90 <lda+0x30>
}
 8001e80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e84:	f7ff baba 	b.w	80013fc <dex.part.0>
    zerocalc(a);
 8001e88:	7813      	ldrb	r3, [r2, #0]
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	e7f4      	b.n	8001e7a <lda+0x1a>
    signcalc(a);
 8001e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e94:	7013      	strb	r3, [r2, #0]
}
 8001e96:	bd08      	pop	{r3, pc}
 8001e98:	20008160 	.word	0x20008160
 8001e9c:	20008145 	.word	0x20008145
 8001ea0:	2000814c 	.word	0x2000814c

08001ea4 <ldx>:

void ldx() {
 8001ea4:	b508      	push	{r3, lr}
    value = getvalue();
 8001ea6:	f7ff fa8d 	bl	80013c4 <getvalue>
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <ldx+0x3c>)
    value = getvalue();
 8001eae:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 8001eb0:	b2c3      	uxtb	r3, r0
 8001eb2:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <ldx+0x40>)
 8001eb6:	b14b      	cbz	r3, 8001ecc <ldx+0x28>
 8001eb8:	7813      	ldrb	r3, [r2, #0]
 8001eba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001ebe:	0601      	lsls	r1, r0, #24
 8001ec0:	7013      	strb	r3, [r2, #0]
 8001ec2:	d507      	bpl.n	8001ed4 <ldx+0x30>
}
 8001ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ec8:	f7ff ba98 	b.w	80013fc <dex.part.0>
    zerocalc(x);
 8001ecc:	7813      	ldrb	r3, [r2, #0]
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	e7f4      	b.n	8001ebe <ldx+0x1a>
    signcalc(x);
 8001ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed8:	7013      	strb	r3, [r2, #0]
}
 8001eda:	bd08      	pop	{r3, pc}
 8001edc:	20008160 	.word	0x20008160
 8001ee0:	20008162 	.word	0x20008162
 8001ee4:	2000814c 	.word	0x2000814c

08001ee8 <ldy>:

void ldy() {
 8001ee8:	b508      	push	{r3, lr}
    value = getvalue();
 8001eea:	f7ff fa6b 	bl	80013c4 <getvalue>
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <ldy+0x3c>)
    value = getvalue();
 8001ef2:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 8001ef4:	b2c3      	uxtb	r3, r0
 8001ef6:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 8001ef8:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <ldy+0x40>)
 8001efa:	b14b      	cbz	r3, 8001f10 <ldy+0x28>
 8001efc:	7813      	ldrb	r3, [r2, #0]
 8001efe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001f02:	0601      	lsls	r1, r0, #24
 8001f04:	7013      	strb	r3, [r2, #0]
 8001f06:	d507      	bpl.n	8001f18 <ldy+0x30>
}
 8001f08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001f0c:	f7ff ba76 	b.w	80013fc <dex.part.0>
    zerocalc(y);
 8001f10:	7813      	ldrb	r3, [r2, #0]
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	e7f4      	b.n	8001f02 <ldy+0x1a>
    signcalc(y);
 8001f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1c:	7013      	strb	r3, [r2, #0]
}
 8001f1e:	bd08      	pop	{r3, pc}
 8001f20:	20008160 	.word	0x20008160
 8001f24:	20008163 	.word	0x20008163
 8001f28:	2000814c 	.word	0x2000814c

08001f2c <lsr>:

void lsr() {
 8001f2c:	b508      	push	{r3, lr}
    value = getvalue();
 8001f2e:	f7ff fa49 	bl	80013c4 <getvalue>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 8001f36:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 8001f3a:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <lsr+0x50>)
 8001f3e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001f42:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 8001f46:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 8001f48:	7813      	ldrb	r3, [r2, #0]
 8001f4a:	bf14      	ite	ne
 8001f4c:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 8001f50:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001f54:	b161      	cbz	r1, 8001f70 <lsr+0x44>
 8001f56:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001f5a:	0601      	lsls	r1, r0, #24
 8001f5c:	bf4c      	ite	mi
 8001f5e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001f62:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001f66:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001f68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001f6c:	f7ff bbca 	b.w	8001704 <putvalue>
    zerocalc(result);
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	e7f1      	b.n	8001f5a <lsr+0x2e>
 8001f76:	bf00      	nop
 8001f78:	20008160 	.word	0x20008160
 8001f7c:	2000815c 	.word	0x2000815c
 8001f80:	2000814c 	.word	0x2000814c

08001f84 <ora>:

void nop() {
}

void ora() {
 8001f84:	b508      	push	{r3, lr}
    value = getvalue();
 8001f86:	f7ff fa1d 	bl	80013c4 <getvalue>
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <ora+0x3c>)
    result = (uint16_t)a | value;
 8001f8c:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <ora+0x40>)
    value = getvalue();
 8001f8e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 8001f90:	780b      	ldrb	r3, [r1, #0]
 8001f92:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <ora+0x44>)
 8001f94:	4318      	orrs	r0, r3
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <ora+0x48>)
 8001f98:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001f9a:	b2c3      	uxtb	r3, r0
 8001f9c:	b163      	cbz	r3, 8001fb8 <ora+0x34>
 8001f9e:	7813      	ldrb	r3, [r2, #0]
 8001fa0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001fa4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fa8:	bf14      	ite	ne
 8001faa:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001fae:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001fb2:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001fb4:	7008      	strb	r0, [r1, #0]
}
 8001fb6:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001fb8:	7813      	ldrb	r3, [r2, #0]
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	e7f1      	b.n	8001fa4 <ora+0x20>
 8001fc0:	20008160 	.word	0x20008160
 8001fc4:	20008145 	.word	0x20008145
 8001fc8:	2000814c 	.word	0x2000814c
 8001fcc:	2000815c 	.word	0x2000815c

08001fd0 <pha>:

void pha() {
    push8(a);
 8001fd0:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <pha+0x8>)
 8001fd2:	7818      	ldrb	r0, [r3, #0]
 8001fd4:	f7ff ba32 	b.w	800143c <push8>
 8001fd8:	20008145 	.word	0x20008145

08001fdc <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <php+0xc>)
 8001fde:	7818      	ldrb	r0, [r3, #0]
 8001fe0:	f040 0010 	orr.w	r0, r0, #16
 8001fe4:	f7ff ba2a 	b.w	800143c <push8>
 8001fe8:	2000814c 	.word	0x2000814c

08001fec <pla>:
}

void pla() {
 8001fec:	b508      	push	{r3, lr}
    a = pull8();
 8001fee:	f7ff fa4b 	bl	8001488 <pull8>
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <pla+0x30>)
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <pla+0x34>)
 8001ff6:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 8001ff8:	7813      	ldrb	r3, [r2, #0]
 8001ffa:	b140      	cbz	r0, 800200e <pla+0x22>
 8001ffc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8002000:	0601      	lsls	r1, r0, #24
 8002002:	7013      	strb	r3, [r2, #0]
 8002004:	d506      	bpl.n	8002014 <pla+0x28>
}
 8002006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800200a:	f7ff b9f7 	b.w	80013fc <dex.part.0>
    zerocalc(a);
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	e7f5      	b.n	8002000 <pla+0x14>
    signcalc(a);
 8002014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002018:	7013      	strb	r3, [r2, #0]
}
 800201a:	bd08      	pop	{r3, pc}
 800201c:	20008145 	.word	0x20008145
 8002020:	2000814c 	.word	0x2000814c

08002024 <plp>:

void plp() {
 8002024:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 8002026:	f7ff fa2f 	bl	8001488 <pull8>
 800202a:	4b02      	ldr	r3, [pc, #8]	; (8002034 <plp+0x10>)
 800202c:	f040 0020 	orr.w	r0, r0, #32
 8002030:	7018      	strb	r0, [r3, #0]
}
 8002032:	bd08      	pop	{r3, pc}
 8002034:	2000814c 	.word	0x2000814c

08002038 <rol>:

void rol() {
 8002038:	b508      	push	{r3, lr}
    value = getvalue();
 800203a:	f7ff f9c3 	bl	80013c4 <getvalue>
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002040:	4912      	ldr	r1, [pc, #72]	; (800208c <rol+0x54>)
    value = getvalue();
 8002042:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002044:	780b      	ldrb	r3, [r1, #0]
 8002046:	f003 0201 	and.w	r2, r3, #1
 800204a:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <rol+0x58>)
 8002050:	b280      	uxth	r0, r0
   
    carrycalc(result);
 8002052:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002056:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 8002058:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 800205a:	bf14      	ite	ne
 800205c:	f043 0301 	orrne.w	r3, r3, #1
 8002060:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002064:	b162      	cbz	r2, 8002080 <rol+0x48>
 8002066:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800206a:	0602      	lsls	r2, r0, #24
 800206c:	bf4c      	ite	mi
 800206e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8002072:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8002076:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 8002078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 800207c:	f7ff bb42 	b.w	8001704 <putvalue>
    zerocalc(result);
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	e7f1      	b.n	800206a <rol+0x32>
 8002086:	bf00      	nop
 8002088:	20008160 	.word	0x20008160
 800208c:	2000814c 	.word	0x2000814c
 8002090:	2000815c 	.word	0x2000815c

08002094 <ror>:

void ror() {
 8002094:	b510      	push	{r4, lr}
    value = getvalue();
 8002096:	f7ff f995 	bl	80013c4 <getvalue>
 800209a:	4601      	mov	r1, r0
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800209e:	4c12      	ldr	r4, [pc, #72]	; (80020e8 <ror+0x54>)
    value = getvalue();
 80020a0:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80020a2:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 80020a4:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80020a6:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <ror+0x58>)
    if (value & 1) setcarry();
 80020b2:	bf48      	it	mi
 80020b4:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80020b8:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 80020ba:	b2c2      	uxtb	r2, r0
        else clearcarry();
 80020bc:	bf58      	it	pl
 80020be:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80020c2:	b162      	cbz	r2, 80020de <ror+0x4a>
 80020c4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80020c8:	0602      	lsls	r2, r0, #24
 80020ca:	bf4c      	ite	mi
 80020cc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80020d0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80020d4:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 80020d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 80020da:	f7ff bb13 	b.w	8001704 <putvalue>
    zerocalc(result);
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	e7f1      	b.n	80020c8 <ror+0x34>
 80020e4:	20008160 	.word	0x20008160
 80020e8:	2000814c 	.word	0x2000814c
 80020ec:	2000815c 	.word	0x2000815c

080020f0 <rti>:

void rti() {
 80020f0:	b508      	push	{r3, lr}
    cpustatus = pull8();
 80020f2:	f7ff f9c9 	bl	8001488 <pull8>
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <rti+0x18>)
 80020f8:	7018      	strb	r0, [r3, #0]
    value = pull16();
 80020fa:	f7ff f9ab 	bl	8001454 <pull16>
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <rti+0x1c>)
 8002100:	8018      	strh	r0, [r3, #0]
    pc = value;
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <rti+0x20>)
 8002104:	8018      	strh	r0, [r3, #0]
}
 8002106:	bd08      	pop	{r3, pc}
 8002108:	2000814c 	.word	0x2000814c
 800210c:	20008160 	.word	0x20008160
 8002110:	20008158 	.word	0x20008158

08002114 <rts>:

void rts() {
 8002114:	b508      	push	{r3, lr}
    value = pull16();
 8002116:	f7ff f99d 	bl	8001454 <pull16>
 800211a:	4b03      	ldr	r3, [pc, #12]	; (8002128 <rts+0x14>)
 800211c:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 800211e:	4b03      	ldr	r3, [pc, #12]	; (800212c <rts+0x18>)
 8002120:	3001      	adds	r0, #1
 8002122:	8018      	strh	r0, [r3, #0]
}
 8002124:	bd08      	pop	{r3, pc}
 8002126:	bf00      	nop
 8002128:	20008160 	.word	0x20008160
 800212c:	20008158 	.word	0x20008158

08002130 <sbc>:

void sbc() {
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 8002132:	f7ff f947 	bl	80013c4 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002136:	4d27      	ldr	r5, [pc, #156]	; (80021d4 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <sbc+0xa8>)
 800213a:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 800213e:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002140:	4c26      	ldr	r4, [pc, #152]	; (80021dc <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 8002142:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002144:	782b      	ldrb	r3, [r5, #0]
 8002146:	7821      	ldrb	r1, [r4, #0]
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	440a      	add	r2, r1
 800214e:	4e24      	ldr	r6, [pc, #144]	; (80021e0 <sbc+0xb0>)
 8002150:	4402      	add	r2, r0
 8002152:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8002154:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002158:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800215a:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 800215c:	bf14      	ite	ne
 800215e:	f043 0301 	orrne.w	r3, r3, #1
 8002162:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002166:	b1c6      	cbz	r6, 800219a <sbc+0x6a>
 8002168:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 800216c:	ea81 0602 	eor.w	r6, r1, r2
 8002170:	ea80 0702 	eor.w	r7, r0, r2
 8002174:	4630      	mov	r0, r6
 8002176:	4038      	ands	r0, r7
 8002178:	0607      	lsls	r7, r0, #24
 800217a:	bf4c      	ite	mi
 800217c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8002180:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8002184:	0616      	lsls	r6, r2, #24
 8002186:	bf4c      	ite	mi
 8002188:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800218c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 8002190:	0718      	lsls	r0, r3, #28
 8002192:	d405      	bmi.n	80021a0 <sbc+0x70>
 8002194:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 8002196:	7022      	strb	r2, [r4, #0]
}
 8002198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	e7e5      	b.n	800216c <sbc+0x3c>
        a -= 0x66;
 80021a0:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 80021a4:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 80021a6:	f000 000f 	and.w	r0, r0, #15
 80021aa:	2809      	cmp	r0, #9
            a += 0x06;
 80021ac:	bf8a      	itet	hi
 80021ae:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 80021b0:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 80021b2:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80021b4:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80021b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80021ba:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80021be:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80021c0:	4908      	ldr	r1, [pc, #32]	; (80021e4 <sbc+0xb4>)
        clearcarry();
 80021c2:	702b      	strb	r3, [r5, #0]
            setcarry();
 80021c4:	bf84      	itt	hi
 80021c6:	f043 0301 	orrhi.w	r3, r3, #1
 80021ca:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80021cc:	680b      	ldr	r3, [r1, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	600b      	str	r3, [r1, #0]
 80021d2:	e7e0      	b.n	8002196 <sbc+0x66>
 80021d4:	2000814c 	.word	0x2000814c
 80021d8:	20008160 	.word	0x20008160
 80021dc:	20008145 	.word	0x20008145
 80021e0:	2000815c 	.word	0x2000815c
 80021e4:	20008148 	.word	0x20008148

080021e8 <sec>:

void sec() {
    setcarry();
 80021e8:	4a02      	ldr	r2, [pc, #8]	; (80021f4 <sec+0xc>)
 80021ea:	7813      	ldrb	r3, [r2, #0]
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	7013      	strb	r3, [r2, #0]
}
 80021f2:	4770      	bx	lr
 80021f4:	2000814c 	.word	0x2000814c

080021f8 <sed>:

void sed() {
    setdecimal();
 80021f8:	4a02      	ldr	r2, [pc, #8]	; (8002204 <sed+0xc>)
 80021fa:	7813      	ldrb	r3, [r2, #0]
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	7013      	strb	r3, [r2, #0]
}
 8002202:	4770      	bx	lr
 8002204:	2000814c 	.word	0x2000814c

08002208 <sei>:

void sei() {
    setinterrupt();
 8002208:	4a02      	ldr	r2, [pc, #8]	; (8002214 <sei+0xc>)
 800220a:	7813      	ldrb	r3, [r2, #0]
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	7013      	strb	r3, [r2, #0]
}
 8002212:	4770      	bx	lr
 8002214:	2000814c 	.word	0x2000814c

08002218 <sta>:

void sta() {
    putvalue(a);
 8002218:	4b01      	ldr	r3, [pc, #4]	; (8002220 <sta+0x8>)
 800221a:	7818      	ldrb	r0, [r3, #0]
 800221c:	f7ff ba72 	b.w	8001704 <putvalue>
 8002220:	20008145 	.word	0x20008145

08002224 <stx>:
}

void stx() {
    putvalue(x);
 8002224:	4b01      	ldr	r3, [pc, #4]	; (800222c <stx+0x8>)
 8002226:	7818      	ldrb	r0, [r3, #0]
 8002228:	f7ff ba6c 	b.w	8001704 <putvalue>
 800222c:	20008162 	.word	0x20008162

08002230 <sty>:
}

void sty() {
    putvalue(y);
 8002230:	4b01      	ldr	r3, [pc, #4]	; (8002238 <sty+0x8>)
 8002232:	7818      	ldrb	r0, [r3, #0]
 8002234:	f7ff ba66 	b.w	8001704 <putvalue>
 8002238:	20008163 	.word	0x20008163

0800223c <tax>:
}

void tax() {
    x = a;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <tax+0x2c>)
   
    zerocalc(x);
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <tax+0x30>)
    x = a;
 8002240:	7819      	ldrb	r1, [r3, #0]
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <tax+0x34>)
 8002244:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 8002246:	7813      	ldrb	r3, [r2, #0]
 8002248:	b131      	cbz	r1, 8002258 <tax+0x1c>
 800224a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800224e:	0609      	lsls	r1, r1, #24
 8002250:	7013      	strb	r3, [r2, #0]
 8002252:	d504      	bpl.n	800225e <tax+0x22>
 8002254:	f7ff b8d2 	b.w	80013fc <dex.part.0>
    zerocalc(x);
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	e7f7      	b.n	800224e <tax+0x12>
    signcalc(x);
 800225e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002262:	7013      	strb	r3, [r2, #0]
}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20008145 	.word	0x20008145
 800226c:	2000814c 	.word	0x2000814c
 8002270:	20008162 	.word	0x20008162

08002274 <tay>:

void tay() {
    y = a;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <tay+0x2c>)
   
    zerocalc(y);
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <tay+0x30>)
    y = a;
 8002278:	7819      	ldrb	r1, [r3, #0]
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <tay+0x34>)
 800227c:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 800227e:	7813      	ldrb	r3, [r2, #0]
 8002280:	b131      	cbz	r1, 8002290 <tay+0x1c>
 8002282:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8002286:	0609      	lsls	r1, r1, #24
 8002288:	7013      	strb	r3, [r2, #0]
 800228a:	d504      	bpl.n	8002296 <tay+0x22>
 800228c:	f7ff b8b6 	b.w	80013fc <dex.part.0>
    zerocalc(y);
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	e7f7      	b.n	8002286 <tay+0x12>
    signcalc(y);
 8002296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800229a:	7013      	strb	r3, [r2, #0]
}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20008145 	.word	0x20008145
 80022a4:	2000814c 	.word	0x2000814c
 80022a8:	20008163 	.word	0x20008163

080022ac <tsx>:

void tsx() {
    x = sp;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <tsx+0x2c>)
   
    zerocalc(x);
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <tsx+0x30>)
    x = sp;
 80022b0:	7819      	ldrb	r1, [r3, #0]
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <tsx+0x34>)
 80022b4:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80022b6:	7813      	ldrb	r3, [r2, #0]
 80022b8:	b131      	cbz	r1, 80022c8 <tsx+0x1c>
 80022ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80022be:	0609      	lsls	r1, r1, #24
 80022c0:	7013      	strb	r3, [r2, #0]
 80022c2:	d504      	bpl.n	80022ce <tsx+0x22>
 80022c4:	f7ff b89a 	b.w	80013fc <dex.part.0>
    zerocalc(x);
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	e7f7      	b.n	80022be <tsx+0x12>
    signcalc(x);
 80022ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d2:	7013      	strb	r3, [r2, #0]
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000815e 	.word	0x2000815e
 80022dc:	2000814c 	.word	0x2000814c
 80022e0:	20008162 	.word	0x20008162

080022e4 <txa>:

void txa() {
    a = x;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <txa+0x2c>)
   
    zerocalc(a);
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <txa+0x30>)
    a = x;
 80022e8:	7819      	ldrb	r1, [r3, #0]
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <txa+0x34>)
 80022ec:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80022ee:	7813      	ldrb	r3, [r2, #0]
 80022f0:	b131      	cbz	r1, 8002300 <txa+0x1c>
 80022f2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80022f6:	0609      	lsls	r1, r1, #24
 80022f8:	7013      	strb	r3, [r2, #0]
 80022fa:	d504      	bpl.n	8002306 <txa+0x22>
 80022fc:	f7ff b87e 	b.w	80013fc <dex.part.0>
    zerocalc(a);
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	e7f7      	b.n	80022f6 <txa+0x12>
    signcalc(a);
 8002306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230a:	7013      	strb	r3, [r2, #0]
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20008162 	.word	0x20008162
 8002314:	2000814c 	.word	0x2000814c
 8002318:	20008145 	.word	0x20008145

0800231c <txs>:

void txs() {
    sp = x;
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <txs+0xc>)
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <txs+0x10>)
 8002322:	701a      	strb	r2, [r3, #0]
}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20008162 	.word	0x20008162
 800232c:	2000815e 	.word	0x2000815e

08002330 <tya>:

void tya() {
    a = y;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <tya+0x2c>)
   
    zerocalc(a);
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <tya+0x30>)
    a = y;
 8002334:	7819      	ldrb	r1, [r3, #0]
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <tya+0x34>)
 8002338:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 800233a:	7813      	ldrb	r3, [r2, #0]
 800233c:	b131      	cbz	r1, 800234c <tya+0x1c>
 800233e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8002342:	0609      	lsls	r1, r1, #24
 8002344:	7013      	strb	r3, [r2, #0]
 8002346:	d504      	bpl.n	8002352 <tya+0x22>
 8002348:	f7ff b858 	b.w	80013fc <dex.part.0>
    zerocalc(a);
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	e7f7      	b.n	8002342 <tya+0x12>
    signcalc(a);
 8002352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002356:	7013      	strb	r3, [r2, #0]
}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20008163 	.word	0x20008163
 8002360:	2000814c 	.word	0x2000814c
 8002364:	20008145 	.word	0x20008145

08002368 <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 800236c:	4e01      	ldr	r6, [pc, #4]	; (8002374 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 800236e:	4d02      	ldr	r5, [pc, #8]	; (8002378 <exec6502+0x10>)
  while (tickcount--) {
 8002370:	b924      	cbnz	r4, 800237c <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	20008158 	.word	0x20008158
 8002378:	2000815f 	.word	0x2000815f
    opcode = read6502(pc++);
 800237c:	8830      	ldrh	r0, [r6, #0]
 800237e:	1c43      	adds	r3, r0, #1
 8002380:	8033      	strh	r3, [r6, #0]
 8002382:	f7fe fef3 	bl	800116c <read6502>
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <exec6502+0x38>)
    opcode = read6502(pc++);
 800238a:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 800238c:	7813      	ldrb	r3, [r2, #0]
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	702b      	strb	r3, [r5, #0]
 8002398:	e004      	b.n	80023a4 <exec6502+0x3c>
 800239a:	bf00      	nop
 800239c:	20008156 	.word	0x20008156
 80023a0:	2000814c 	.word	0x2000814c
		switch (opcode) {
 80023a4:	28fe      	cmp	r0, #254	; 0xfe
 80023a6:	f200 8103 	bhi.w	80025b0 <exec6502+0x248>
 80023aa:	e8df f010 	tbh	[pc, r0, lsl #1]
 80023ae:	00ff      	.short	0x00ff
 80023b0:	01010107 	.word	0x01010107
 80023b4:	01010101 	.word	0x01010101
 80023b8:	0111010c 	.word	0x0111010c
 80023bc:	01160101 	.word	0x01160101
 80023c0:	011e0119 	.word	0x011e0119
 80023c4:	01010101 	.word	0x01010101
 80023c8:	01280123 	.word	0x01280123
 80023cc:	012d0101 	.word	0x012d0101
 80023d0:	01010132 	.word	0x01010132
 80023d4:	01010101 	.word	0x01010101
 80023d8:	013c0137 	.word	0x013c0137
 80023dc:	01410101 	.word	0x01410101
 80023e0:	01010144 	.word	0x01010144
 80023e4:	01010101 	.word	0x01010101
 80023e8:	014e0149 	.word	0x014e0149
 80023ec:	01530101 	.word	0x01530101
 80023f0:	01010158 	.word	0x01010158
 80023f4:	015d0101 	.word	0x015d0101
 80023f8:	01670162 	.word	0x01670162
 80023fc:	016c0101 	.word	0x016c0101
 8002400:	0174016f 	.word	0x0174016f
 8002404:	01790101 	.word	0x01790101
 8002408:	0183017e 	.word	0x0183017e
 800240c:	01880101 	.word	0x01880101
 8002410:	0101018d 	.word	0x0101018d
 8002414:	01010101 	.word	0x01010101
 8002418:	01970192 	.word	0x01970192
 800241c:	019c0101 	.word	0x019c0101
 8002420:	0101019f 	.word	0x0101019f
 8002424:	01010101 	.word	0x01010101
 8002428:	01a901a4 	.word	0x01a901a4
 800242c:	01ae0101 	.word	0x01ae0101
 8002430:	010101b1 	.word	0x010101b1
 8002434:	01010101 	.word	0x01010101
 8002438:	01bb01b6 	.word	0x01bb01b6
 800243c:	01c00101 	.word	0x01c00101
 8002440:	01c801c3 	.word	0x01c801c3
 8002444:	01cd0101 	.word	0x01cd0101
 8002448:	01d701d2 	.word	0x01d701d2
 800244c:	01dc0101 	.word	0x01dc0101
 8002450:	010101e1 	.word	0x010101e1
 8002454:	01010101 	.word	0x01010101
 8002458:	01eb01e6 	.word	0x01eb01e6
 800245c:	01f00101 	.word	0x01f00101
 8002460:	010101f3 	.word	0x010101f3
 8002464:	01010101 	.word	0x01010101
 8002468:	01fd01f8 	.word	0x01fd01f8
 800246c:	02020101 	.word	0x02020101
 8002470:	01010205 	.word	0x01010205
 8002474:	01010101 	.word	0x01010101
 8002478:	020f020a 	.word	0x020f020a
 800247c:	02140101 	.word	0x02140101
 8002480:	021c0217 	.word	0x021c0217
 8002484:	02210101 	.word	0x02210101
 8002488:	022b0226 	.word	0x022b0226
 800248c:	02300101 	.word	0x02300101
 8002490:	01010235 	.word	0x01010235
 8002494:	01010101 	.word	0x01010101
 8002498:	023f023a 	.word	0x023f023a
 800249c:	02440101 	.word	0x02440101
 80024a0:	01010247 	.word	0x01010247
 80024a4:	01010101 	.word	0x01010101
 80024a8:	0251024c 	.word	0x0251024c
 80024ac:	01010101 	.word	0x01010101
 80024b0:	01010256 	.word	0x01010256
 80024b4:	025b0101 	.word	0x025b0101
 80024b8:	02650260 	.word	0x02650260
 80024bc:	026a0101 	.word	0x026a0101
 80024c0:	026d0101 	.word	0x026d0101
 80024c4:	02700101 	.word	0x02700101
 80024c8:	027a0275 	.word	0x027a0275
 80024cc:	027f0101 	.word	0x027f0101
 80024d0:	01010284 	.word	0x01010284
 80024d4:	02890101 	.word	0x02890101
 80024d8:	0293028e 	.word	0x0293028e
 80024dc:	02980101 	.word	0x02980101
 80024e0:	02a3029b 	.word	0x02a3029b
 80024e4:	01010101 	.word	0x01010101
 80024e8:	010102a6 	.word	0x010102a6
 80024ec:	02ab0101 	.word	0x02ab0101
 80024f0:	02b502b0 	.word	0x02b502b0
 80024f4:	02ba0101 	.word	0x02ba0101
 80024f8:	02c402bf 	.word	0x02c402bf
 80024fc:	02c90101 	.word	0x02c90101
 8002500:	02d102cc 	.word	0x02d102cc
 8002504:	02d40101 	.word	0x02d40101
 8002508:	02de02d9 	.word	0x02de02d9
 800250c:	02e30101 	.word	0x02e30101
 8002510:	010102e8 	.word	0x010102e8
 8002514:	02ed0101 	.word	0x02ed0101
 8002518:	02f702f2 	.word	0x02f702f2
 800251c:	02fc0101 	.word	0x02fc0101
 8002520:	030402ff 	.word	0x030402ff
 8002524:	03070101 	.word	0x03070101
 8002528:	0311030c 	.word	0x0311030c
 800252c:	03160101 	.word	0x03160101
 8002530:	0101031b 	.word	0x0101031b
 8002534:	03200101 	.word	0x03200101
 8002538:	032a0325 	.word	0x032a0325
 800253c:	032f0101 	.word	0x032f0101
 8002540:	03370332 	.word	0x03370332
 8002544:	033a0101 	.word	0x033a0101
 8002548:	0344033f 	.word	0x0344033f
 800254c:	03490101 	.word	0x03490101
 8002550:	0101034e 	.word	0x0101034e
 8002554:	01010101 	.word	0x01010101
 8002558:	03580353 	.word	0x03580353
 800255c:	035d0101 	.word	0x035d0101
 8002560:	01010360 	.word	0x01010360
 8002564:	01010101 	.word	0x01010101
 8002568:	036a0365 	.word	0x036a0365
 800256c:	036f0101 	.word	0x036f0101
 8002570:	01010374 	.word	0x01010374
 8002574:	03790101 	.word	0x03790101
 8002578:	0383037e 	.word	0x0383037e
 800257c:	03880101 	.word	0x03880101
 8002580:	0101038b 	.word	0x0101038b
 8002584:	0390038b 	.word	0x0390038b
 8002588:	039a0395 	.word	0x039a0395
 800258c:	039f0101 	.word	0x039f0101
 8002590:	010103a4 	.word	0x010103a4
 8002594:	01010101 	.word	0x01010101
 8002598:	03ae03a9 	.word	0x03ae03a9
 800259c:	03b30101 	.word	0x03b30101
 80025a0:	010103b6 	.word	0x010103b6
 80025a4:	01010101 	.word	0x01010101
 80025a8:	03c003bb 	.word	0x03c003bb
			brk();
 80025ac:	f7ff fa56 	bl	8001a5c <brk>
      instructions++;
 80025b0:	4acf      	ldr	r2, [pc, #828]	; (80028f0 <exec6502+0x588>)
 80025b2:	3c01      	subs	r4, #1
 80025b4:	6813      	ldr	r3, [r2, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e6d9      	b.n	8002370 <exec6502+0x8>
			indx();
 80025bc:	f7ff f866 	bl	800168c <indx>
			ora();
 80025c0:	f7ff fce0 	bl	8001f84 <ora>
			break;
 80025c4:	e7f4      	b.n	80025b0 <exec6502+0x248>
			zp();
 80025c6:	f7fe ffa1 	bl	800150c <zp>
			ora();
 80025ca:	f7ff fcdb 	bl	8001f84 <ora>
			break;
 80025ce:	e7ef      	b.n	80025b0 <exec6502+0x248>
			zp();
 80025d0:	f7fe ff9c 	bl	800150c <zp>
			asl();
 80025d4:	f7ff f926 	bl	8001824 <asl>
			break;
 80025d8:	e7ea      	b.n	80025b0 <exec6502+0x248>
			php();
 80025da:	f7ff fcff 	bl	8001fdc <php>
			break;
 80025de:	e7e7      	b.n	80025b0 <exec6502+0x248>
			imm();
 80025e0:	f7fe ff88 	bl	80014f4 <imm>
			ora();
 80025e4:	f7ff fcce 	bl	8001f84 <ora>
			break;
 80025e8:	e7e2      	b.n	80025b0 <exec6502+0x248>
  useaccum = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	702b      	strb	r3, [r5, #0]
			asl();
 80025ee:	f7ff f919 	bl	8001824 <asl>
			break;
 80025f2:	e7dd      	b.n	80025b0 <exec6502+0x248>
			abso();
 80025f4:	f7fe ffd4 	bl	80015a0 <abso>
			ora();
 80025f8:	f7ff fcc4 	bl	8001f84 <ora>
			break;
 80025fc:	e7d8      	b.n	80025b0 <exec6502+0x248>
			abso();
 80025fe:	f7fe ffcf 	bl	80015a0 <abso>
			asl();
 8002602:	f7ff f90f 	bl	8001824 <asl>
			break;
 8002606:	e7d3      	b.n	80025b0 <exec6502+0x248>
			rel();
 8002608:	f7fe ffb6 	bl	8001578 <rel>
			bpl();
 800260c:	f7ff fa02 	bl	8001a14 <bpl>
			break;
 8002610:	e7ce      	b.n	80025b0 <exec6502+0x248>
			indy();
 8002612:	f7ff f859 	bl	80016c8 <indy>
			ora();
 8002616:	f7ff fcb5 	bl	8001f84 <ora>
			break;
 800261a:	e7c9      	b.n	80025b0 <exec6502+0x248>
			zpx();
 800261c:	f7fe ff84 	bl	8001528 <zpx>
			ora();
 8002620:	f7ff fcb0 	bl	8001f84 <ora>
			break;
 8002624:	e7c4      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002626:	f7fe ff7f 	bl	8001528 <zpx>
			asl();
 800262a:	f7ff f8fb 	bl	8001824 <asl>
			break;
 800262e:	e7bf      	b.n	80025b0 <exec6502+0x248>
			clc();
 8002630:	f7ff fa7c 	bl	8001b2c <clc>
			break;
 8002634:	e7bc      	b.n	80025b0 <exec6502+0x248>
			absy();
 8002636:	f7fe ffe7 	bl	8001608 <absy>
			ora();
 800263a:	f7ff fca3 	bl	8001f84 <ora>
			break;
 800263e:	e7b7      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002640:	f7fe ffc6 	bl	80015d0 <absx>
			ora();
 8002644:	f7ff fc9e 	bl	8001f84 <ora>
			break;
 8002648:	e7b2      	b.n	80025b0 <exec6502+0x248>
			absx();
 800264a:	f7fe ffc1 	bl	80015d0 <absx>
			asl();
 800264e:	f7ff f8e9 	bl	8001824 <asl>
			break;
 8002652:	e7ad      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002654:	f7fe ffa4 	bl	80015a0 <abso>
			jsr();
 8002658:	f7ff fbf2 	bl	8001e40 <jsr>
			break;
 800265c:	e7a8      	b.n	80025b0 <exec6502+0x248>
			indx();
 800265e:	f7ff f815 	bl	800168c <indx>
			op_and();
 8002662:	f7ff f8b7 	bl	80017d4 <op_and>
			break;
 8002666:	e7a3      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002668:	f7fe ff50 	bl	800150c <zp>
			op_bit();
 800266c:	f7ff f96a 	bl	8001944 <op_bit>
			break;
 8002670:	e79e      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002672:	f7fe ff4b 	bl	800150c <zp>
			op_and();
 8002676:	f7ff f8ad 	bl	80017d4 <op_and>
			break;
 800267a:	e799      	b.n	80025b0 <exec6502+0x248>
			zp();
 800267c:	f7fe ff46 	bl	800150c <zp>
			rol();
 8002680:	f7ff fcda 	bl	8002038 <rol>
			break;
 8002684:	e794      	b.n	80025b0 <exec6502+0x248>
			plp();
 8002686:	f7ff fccd 	bl	8002024 <plp>
			break;
 800268a:	e791      	b.n	80025b0 <exec6502+0x248>
			imm();
 800268c:	f7fe ff32 	bl	80014f4 <imm>
			op_and();
 8002690:	f7ff f8a0 	bl	80017d4 <op_and>
			break;
 8002694:	e78c      	b.n	80025b0 <exec6502+0x248>
  useaccum = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	702b      	strb	r3, [r5, #0]
			rol();
 800269a:	f7ff fccd 	bl	8002038 <rol>
			break;
 800269e:	e787      	b.n	80025b0 <exec6502+0x248>
			abso();
 80026a0:	f7fe ff7e 	bl	80015a0 <abso>
			op_bit();
 80026a4:	f7ff f94e 	bl	8001944 <op_bit>
			break;
 80026a8:	e782      	b.n	80025b0 <exec6502+0x248>
			abso();
 80026aa:	f7fe ff79 	bl	80015a0 <abso>
			op_and();
 80026ae:	f7ff f891 	bl	80017d4 <op_and>
			break;
 80026b2:	e77d      	b.n	80025b0 <exec6502+0x248>
			abso();
 80026b4:	f7fe ff74 	bl	80015a0 <abso>
			rol();
 80026b8:	f7ff fcbe 	bl	8002038 <rol>
			break;
 80026bc:	e778      	b.n	80025b0 <exec6502+0x248>
			rel();
 80026be:	f7fe ff5b 	bl	8001578 <rel>
			bmi();
 80026c2:	f7ff f961 	bl	8001988 <bmi>
			break;
 80026c6:	e773      	b.n	80025b0 <exec6502+0x248>
			indy();
 80026c8:	f7fe fffe 	bl	80016c8 <indy>
			op_and();
 80026cc:	f7ff f882 	bl	80017d4 <op_and>
			break;
 80026d0:	e76e      	b.n	80025b0 <exec6502+0x248>
			zpx();
 80026d2:	f7fe ff29 	bl	8001528 <zpx>
			op_and();
 80026d6:	f7ff f87d 	bl	80017d4 <op_and>
			break;
 80026da:	e769      	b.n	80025b0 <exec6502+0x248>
			zpx();
 80026dc:	f7fe ff24 	bl	8001528 <zpx>
			rol();
 80026e0:	f7ff fcaa 	bl	8002038 <rol>
			break;
 80026e4:	e764      	b.n	80025b0 <exec6502+0x248>
			sec();
 80026e6:	f7ff fd7f 	bl	80021e8 <sec>
			break;
 80026ea:	e761      	b.n	80025b0 <exec6502+0x248>
			absy();
 80026ec:	f7fe ff8c 	bl	8001608 <absy>
			op_and();
 80026f0:	f7ff f870 	bl	80017d4 <op_and>
			break;
 80026f4:	e75c      	b.n	80025b0 <exec6502+0x248>
			absx();
 80026f6:	f7fe ff6b 	bl	80015d0 <absx>
			op_and();
 80026fa:	f7ff f86b 	bl	80017d4 <op_and>
			break;
 80026fe:	e757      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002700:	f7fe ff66 	bl	80015d0 <absx>
			rol();
 8002704:	f7ff fc98 	bl	8002038 <rol>
			break;
 8002708:	e752      	b.n	80025b0 <exec6502+0x248>
			rti();
 800270a:	f7ff fcf1 	bl	80020f0 <rti>
			break;
 800270e:	e74f      	b.n	80025b0 <exec6502+0x248>
			indx();
 8002710:	f7fe ffbc 	bl	800168c <indx>
			eor();
 8002714:	f7ff fb0c 	bl	8001d30 <eor>
			break;
 8002718:	e74a      	b.n	80025b0 <exec6502+0x248>
			zp();
 800271a:	f7fe fef7 	bl	800150c <zp>
			eor();
 800271e:	f7ff fb07 	bl	8001d30 <eor>
			break;
 8002722:	e745      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002724:	f7fe fef2 	bl	800150c <zp>
			lsr();
 8002728:	f7ff fc00 	bl	8001f2c <lsr>
			break;
 800272c:	e740      	b.n	80025b0 <exec6502+0x248>
			pha();
 800272e:	f7ff fc4f 	bl	8001fd0 <pha>
			break;
 8002732:	e73d      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002734:	f7fe fede 	bl	80014f4 <imm>
			eor();
 8002738:	f7ff fafa 	bl	8001d30 <eor>
			break;
 800273c:	e738      	b.n	80025b0 <exec6502+0x248>
  useaccum = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	702b      	strb	r3, [r5, #0]
			lsr();
 8002742:	f7ff fbf3 	bl	8001f2c <lsr>
			break;
 8002746:	e733      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002748:	f7fe ff2a 	bl	80015a0 <abso>
			jmp();
 800274c:	f7ff fb6e 	bl	8001e2c <jmp>
			break;
 8002750:	e72e      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002752:	f7fe ff25 	bl	80015a0 <abso>
			eor();
 8002756:	f7ff faeb 	bl	8001d30 <eor>
			break;
 800275a:	e729      	b.n	80025b0 <exec6502+0x248>
			abso();
 800275c:	f7fe ff20 	bl	80015a0 <abso>
			lsr();
 8002760:	f7ff fbe4 	bl	8001f2c <lsr>
			break;
 8002764:	e724      	b.n	80025b0 <exec6502+0x248>
			rel();
 8002766:	f7fe ff07 	bl	8001578 <rel>
			bvc();
 800276a:	f7ff f99b 	bl	8001aa4 <bvc>
			break;
 800276e:	e71f      	b.n	80025b0 <exec6502+0x248>
			indy();
 8002770:	f7fe ffaa 	bl	80016c8 <indy>
			eor();
 8002774:	f7ff fadc 	bl	8001d30 <eor>
			break;
 8002778:	e71a      	b.n	80025b0 <exec6502+0x248>
			zpx();
 800277a:	f7fe fed5 	bl	8001528 <zpx>
			eor();
 800277e:	f7ff fad7 	bl	8001d30 <eor>
			break;
 8002782:	e715      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002784:	f7fe fed0 	bl	8001528 <zpx>
			lsr();
 8002788:	f7ff fbd0 	bl	8001f2c <lsr>
			break;
 800278c:	e710      	b.n	80025b0 <exec6502+0x248>
			cli();
 800278e:	f7ff f9dd 	bl	8001b4c <cli>
			break;
 8002792:	e70d      	b.n	80025b0 <exec6502+0x248>
			absy();
 8002794:	f7fe ff38 	bl	8001608 <absy>
			eor();
 8002798:	f7ff faca 	bl	8001d30 <eor>
			break;
 800279c:	e708      	b.n	80025b0 <exec6502+0x248>
			absx();
 800279e:	f7fe ff17 	bl	80015d0 <absx>
			eor();
 80027a2:	f7ff fac5 	bl	8001d30 <eor>
			break;
 80027a6:	e703      	b.n	80025b0 <exec6502+0x248>
			absx();
 80027a8:	f7fe ff12 	bl	80015d0 <absx>
			lsr();
 80027ac:	f7ff fbbe 	bl	8001f2c <lsr>
			break;
 80027b0:	e6fe      	b.n	80025b0 <exec6502+0x248>
			rts();
 80027b2:	f7ff fcaf 	bl	8002114 <rts>
			break;
 80027b6:	e6fb      	b.n	80025b0 <exec6502+0x248>
			indx();
 80027b8:	f7fe ff68 	bl	800168c <indx>
			adc();
 80027bc:	f7fe ffb4 	bl	8001728 <adc>
			break;
 80027c0:	e6f6      	b.n	80025b0 <exec6502+0x248>
			zp();
 80027c2:	f7fe fea3 	bl	800150c <zp>
			adc();
 80027c6:	f7fe ffaf 	bl	8001728 <adc>
			break;
 80027ca:	e6f1      	b.n	80025b0 <exec6502+0x248>
			zp();
 80027cc:	f7fe fe9e 	bl	800150c <zp>
			ror();
 80027d0:	f7ff fc60 	bl	8002094 <ror>
			break;
 80027d4:	e6ec      	b.n	80025b0 <exec6502+0x248>
			pla();
 80027d6:	f7ff fc09 	bl	8001fec <pla>
			break;
 80027da:	e6e9      	b.n	80025b0 <exec6502+0x248>
			imm();
 80027dc:	f7fe fe8a 	bl	80014f4 <imm>
			adc();
 80027e0:	f7fe ffa2 	bl	8001728 <adc>
			break;
 80027e4:	e6e4      	b.n	80025b0 <exec6502+0x248>
  useaccum = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	702b      	strb	r3, [r5, #0]
			ror();
 80027ea:	f7ff fc53 	bl	8002094 <ror>
			break;
 80027ee:	e6df      	b.n	80025b0 <exec6502+0x248>
			ind();
 80027f0:	f7fe ff26 	bl	8001640 <ind>
			jmp();
 80027f4:	f7ff fb1a 	bl	8001e2c <jmp>
			break;
 80027f8:	e6da      	b.n	80025b0 <exec6502+0x248>
			abso();
 80027fa:	f7fe fed1 	bl	80015a0 <abso>
			adc();
 80027fe:	f7fe ff93 	bl	8001728 <adc>
			break;
 8002802:	e6d5      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002804:	f7fe fecc 	bl	80015a0 <abso>
			ror();
 8002808:	f7ff fc44 	bl	8002094 <ror>
			break;
 800280c:	e6d0      	b.n	80025b0 <exec6502+0x248>
			rel();
 800280e:	f7fe feb3 	bl	8001578 <rel>
			bvs();
 8002812:	f7ff f969 	bl	8001ae8 <bvs>
			break;
 8002816:	e6cb      	b.n	80025b0 <exec6502+0x248>
			indy();
 8002818:	f7fe ff56 	bl	80016c8 <indy>
			adc();
 800281c:	f7fe ff84 	bl	8001728 <adc>
			break;
 8002820:	e6c6      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002822:	f7fe fe81 	bl	8001528 <zpx>
			adc();
 8002826:	f7fe ff7f 	bl	8001728 <adc>
			break;
 800282a:	e6c1      	b.n	80025b0 <exec6502+0x248>
			zpx();
 800282c:	f7fe fe7c 	bl	8001528 <zpx>
			ror();
 8002830:	f7ff fc30 	bl	8002094 <ror>
			break;
 8002834:	e6bc      	b.n	80025b0 <exec6502+0x248>
			sei();
 8002836:	f7ff fce7 	bl	8002208 <sei>
			break;
 800283a:	e6b9      	b.n	80025b0 <exec6502+0x248>
			absy();
 800283c:	f7fe fee4 	bl	8001608 <absy>
			adc();
 8002840:	f7fe ff72 	bl	8001728 <adc>
			break;
 8002844:	e6b4      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002846:	f7fe fec3 	bl	80015d0 <absx>
			adc();
 800284a:	f7fe ff6d 	bl	8001728 <adc>
			break;
 800284e:	e6af      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002850:	f7fe febe 	bl	80015d0 <absx>
			ror();
 8002854:	f7ff fc1e 	bl	8002094 <ror>
			break;
 8002858:	e6aa      	b.n	80025b0 <exec6502+0x248>
			indx();
 800285a:	f7fe ff17 	bl	800168c <indx>
			sta();
 800285e:	f7ff fcdb 	bl	8002218 <sta>
			break;
 8002862:	e6a5      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002864:	f7fe fe52 	bl	800150c <zp>
			sty();
 8002868:	f7ff fce2 	bl	8002230 <sty>
			break;
 800286c:	e6a0      	b.n	80025b0 <exec6502+0x248>
			zp();
 800286e:	f7fe fe4d 	bl	800150c <zp>
			sta();
 8002872:	f7ff fcd1 	bl	8002218 <sta>
			break;
 8002876:	e69b      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002878:	f7fe fe48 	bl	800150c <zp>
			stx();
 800287c:	f7ff fcd2 	bl	8002224 <stx>
			break;
 8002880:	e696      	b.n	80025b0 <exec6502+0x248>
			dey();
 8002882:	f7ff fa3b 	bl	8001cfc <dey>
			break;
 8002886:	e693      	b.n	80025b0 <exec6502+0x248>
			txa();
 8002888:	f7ff fd2c 	bl	80022e4 <txa>
			break;
 800288c:	e690      	b.n	80025b0 <exec6502+0x248>
			abso();
 800288e:	f7fe fe87 	bl	80015a0 <abso>
			sty();
 8002892:	f7ff fccd 	bl	8002230 <sty>
			break;
 8002896:	e68b      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002898:	f7fe fe82 	bl	80015a0 <abso>
			sta();
 800289c:	f7ff fcbc 	bl	8002218 <sta>
			break;
 80028a0:	e686      	b.n	80025b0 <exec6502+0x248>
			abso();
 80028a2:	f7fe fe7d 	bl	80015a0 <abso>
			stx();
 80028a6:	f7ff fcbd 	bl	8002224 <stx>
			break;
 80028aa:	e681      	b.n	80025b0 <exec6502+0x248>
			rel();
 80028ac:	f7fe fe64 	bl	8001578 <rel>
			bcc();
 80028b0:	f7fe ffe2 	bl	8001878 <bcc>
			break;
 80028b4:	e67c      	b.n	80025b0 <exec6502+0x248>
			indy();
 80028b6:	f7fe ff07 	bl	80016c8 <indy>
			sta();
 80028ba:	f7ff fcad 	bl	8002218 <sta>
			break;
 80028be:	e677      	b.n	80025b0 <exec6502+0x248>
			zpx();
 80028c0:	f7fe fe32 	bl	8001528 <zpx>
			sty();
 80028c4:	f7ff fcb4 	bl	8002230 <sty>
			break;
 80028c8:	e672      	b.n	80025b0 <exec6502+0x248>
			zpx();
 80028ca:	f7fe fe2d 	bl	8001528 <zpx>
			sta();
 80028ce:	f7ff fca3 	bl	8002218 <sta>
			break;
 80028d2:	e66d      	b.n	80025b0 <exec6502+0x248>
			zpy();
 80028d4:	f7fe fe3c 	bl	8001550 <zpy>
			stx();
 80028d8:	f7ff fca4 	bl	8002224 <stx>
			break;
 80028dc:	e668      	b.n	80025b0 <exec6502+0x248>
			tya();
 80028de:	f7ff fd27 	bl	8002330 <tya>
			break;
 80028e2:	e665      	b.n	80025b0 <exec6502+0x248>
			absy();
 80028e4:	f7fe fe90 	bl	8001608 <absy>
			sta();
 80028e8:	f7ff fc96 	bl	8002218 <sta>
			break;
 80028ec:	e660      	b.n	80025b0 <exec6502+0x248>
 80028ee:	bf00      	nop
 80028f0:	20008150 	.word	0x20008150
			txs();
 80028f4:	f7ff fd12 	bl	800231c <txs>
			break;
 80028f8:	e65a      	b.n	80025b0 <exec6502+0x248>
			absx();
 80028fa:	f7fe fe69 	bl	80015d0 <absx>
			sta();
 80028fe:	f7ff fc8b 	bl	8002218 <sta>
			break;
 8002902:	e655      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002904:	f7fe fdf6 	bl	80014f4 <imm>
			ldy();
 8002908:	f7ff faee 	bl	8001ee8 <ldy>
			break;
 800290c:	e650      	b.n	80025b0 <exec6502+0x248>
			indx();
 800290e:	f7fe febd 	bl	800168c <indx>
			lda();
 8002912:	f7ff faa5 	bl	8001e60 <lda>
			break;
 8002916:	e64b      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002918:	f7fe fdec 	bl	80014f4 <imm>
			ldx();
 800291c:	f7ff fac2 	bl	8001ea4 <ldx>
			break;
 8002920:	e646      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002922:	f7fe fdf3 	bl	800150c <zp>
			ldy();
 8002926:	f7ff fadf 	bl	8001ee8 <ldy>
			break;
 800292a:	e641      	b.n	80025b0 <exec6502+0x248>
			zp();
 800292c:	f7fe fdee 	bl	800150c <zp>
			lda();
 8002930:	f7ff fa96 	bl	8001e60 <lda>
			break;
 8002934:	e63c      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002936:	f7fe fde9 	bl	800150c <zp>
			ldx();
 800293a:	f7ff fab3 	bl	8001ea4 <ldx>
			break;
 800293e:	e637      	b.n	80025b0 <exec6502+0x248>
			tay();
 8002940:	f7ff fc98 	bl	8002274 <tay>
			break;
 8002944:	e634      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002946:	f7fe fdd5 	bl	80014f4 <imm>
			lda();
 800294a:	f7ff fa89 	bl	8001e60 <lda>
			break;
 800294e:	e62f      	b.n	80025b0 <exec6502+0x248>
			tax();
 8002950:	f7ff fc74 	bl	800223c <tax>
			break;
 8002954:	e62c      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002956:	f7fe fe23 	bl	80015a0 <abso>
			ldy();
 800295a:	f7ff fac5 	bl	8001ee8 <ldy>
			break;
 800295e:	e627      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002960:	f7fe fe1e 	bl	80015a0 <abso>
			lda();
 8002964:	f7ff fa7c 	bl	8001e60 <lda>
			break;
 8002968:	e622      	b.n	80025b0 <exec6502+0x248>
			abso();
 800296a:	f7fe fe19 	bl	80015a0 <abso>
			ldx();
 800296e:	f7ff fa99 	bl	8001ea4 <ldx>
			break;
 8002972:	e61d      	b.n	80025b0 <exec6502+0x248>
			rel();
 8002974:	f7fe fe00 	bl	8001578 <rel>
			bcs();
 8002978:	f7fe ffa0 	bl	80018bc <bcs>
			break;
 800297c:	e618      	b.n	80025b0 <exec6502+0x248>
			indy();
 800297e:	f7fe fea3 	bl	80016c8 <indy>
			lda();
 8002982:	f7ff fa6d 	bl	8001e60 <lda>
			break;
 8002986:	e613      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002988:	f7fe fdce 	bl	8001528 <zpx>
			ldy();
 800298c:	f7ff faac 	bl	8001ee8 <ldy>
			break;
 8002990:	e60e      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002992:	f7fe fdc9 	bl	8001528 <zpx>
			lda();
 8002996:	f7ff fa63 	bl	8001e60 <lda>
			break;
 800299a:	e609      	b.n	80025b0 <exec6502+0x248>
			zpy();
 800299c:	f7fe fdd8 	bl	8001550 <zpy>
			ldx();
 80029a0:	f7ff fa80 	bl	8001ea4 <ldx>
			break;
 80029a4:	e604      	b.n	80025b0 <exec6502+0x248>
			clv();
 80029a6:	f7ff f8d9 	bl	8001b5c <clv>
			break;
 80029aa:	e601      	b.n	80025b0 <exec6502+0x248>
			absy();
 80029ac:	f7fe fe2c 	bl	8001608 <absy>
			lda();
 80029b0:	f7ff fa56 	bl	8001e60 <lda>
			break;
 80029b4:	e5fc      	b.n	80025b0 <exec6502+0x248>
			tsx();
 80029b6:	f7ff fc79 	bl	80022ac <tsx>
			break;
 80029ba:	e5f9      	b.n	80025b0 <exec6502+0x248>
			absx();
 80029bc:	f7fe fe08 	bl	80015d0 <absx>
			ldy();
 80029c0:	f7ff fa92 	bl	8001ee8 <ldy>
			break;
 80029c4:	e5f4      	b.n	80025b0 <exec6502+0x248>
			absx();
 80029c6:	f7fe fe03 	bl	80015d0 <absx>
			lda();
 80029ca:	f7ff fa49 	bl	8001e60 <lda>
			break;
 80029ce:	e5ef      	b.n	80025b0 <exec6502+0x248>
			absy();
 80029d0:	f7fe fe1a 	bl	8001608 <absy>
			ldx();
 80029d4:	f7ff fa66 	bl	8001ea4 <ldx>
			break;
 80029d8:	e5ea      	b.n	80025b0 <exec6502+0x248>
			imm();
 80029da:	f7fe fd8b 	bl	80014f4 <imm>
			cpy();
 80029de:	f7ff f921 	bl	8001c24 <cpy>
			break;
 80029e2:	e5e5      	b.n	80025b0 <exec6502+0x248>
			indx();
 80029e4:	f7fe fe52 	bl	800168c <indx>
			cmp();
 80029e8:	f7ff f8c0 	bl	8001b6c <cmp>
			break;
 80029ec:	e5e0      	b.n	80025b0 <exec6502+0x248>
			zp();
 80029ee:	f7fe fd8d 	bl	800150c <zp>
			cpy();
 80029f2:	f7ff f917 	bl	8001c24 <cpy>
			break;
 80029f6:	e5db      	b.n	80025b0 <exec6502+0x248>
			zp();
 80029f8:	f7fe fd88 	bl	800150c <zp>
			cmp();
 80029fc:	f7ff f8b6 	bl	8001b6c <cmp>
			break;
 8002a00:	e5d6      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002a02:	f7fe fd83 	bl	800150c <zp>
			dec();
 8002a06:	f7ff f93b 	bl	8001c80 <dec>
			break;
 8002a0a:	e5d1      	b.n	80025b0 <exec6502+0x248>
			iny();
 8002a0c:	f7ff f9f4 	bl	8001df8 <iny>
			break;
 8002a10:	e5ce      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002a12:	f7fe fd6f 	bl	80014f4 <imm>
			cmp();
 8002a16:	f7ff f8a9 	bl	8001b6c <cmp>
			break;
 8002a1a:	e5c9      	b.n	80025b0 <exec6502+0x248>
			dex();
 8002a1c:	f7ff f954 	bl	8001cc8 <dex>
			break;
 8002a20:	e5c6      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002a22:	f7fe fdbd 	bl	80015a0 <abso>
			cpy();
 8002a26:	f7ff f8fd 	bl	8001c24 <cpy>
			break;
 8002a2a:	e5c1      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002a2c:	f7fe fdb8 	bl	80015a0 <abso>
			cmp();
 8002a30:	f7ff f89c 	bl	8001b6c <cmp>
			break;
 8002a34:	e5bc      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002a36:	f7fe fdb3 	bl	80015a0 <abso>
			dec();
 8002a3a:	f7ff f921 	bl	8001c80 <dec>
			break;
 8002a3e:	e5b7      	b.n	80025b0 <exec6502+0x248>
			rel();
 8002a40:	f7fe fd9a 	bl	8001578 <rel>
			bne();
 8002a44:	f7fe ffc4 	bl	80019d0 <bne>
			break;
 8002a48:	e5b2      	b.n	80025b0 <exec6502+0x248>
			indy();
 8002a4a:	f7fe fe3d 	bl	80016c8 <indy>
			cmp();
 8002a4e:	f7ff f88d 	bl	8001b6c <cmp>
			break;
 8002a52:	e5ad      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002a54:	f7fe fd68 	bl	8001528 <zpx>
			cmp();
 8002a58:	f7ff f888 	bl	8001b6c <cmp>
			break;
 8002a5c:	e5a8      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002a5e:	f7fe fd63 	bl	8001528 <zpx>
			dec();
 8002a62:	f7ff f90d 	bl	8001c80 <dec>
			break;
 8002a66:	e5a3      	b.n	80025b0 <exec6502+0x248>
			cld();
 8002a68:	f7ff f868 	bl	8001b3c <cld>
			break;
 8002a6c:	e5a0      	b.n	80025b0 <exec6502+0x248>
			absy();
 8002a6e:	f7fe fdcb 	bl	8001608 <absy>
			cmp();
 8002a72:	f7ff f87b 	bl	8001b6c <cmp>
			break;
 8002a76:	e59b      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002a78:	f7fe fdaa 	bl	80015d0 <absx>
			cmp();
 8002a7c:	f7ff f876 	bl	8001b6c <cmp>
			break;
 8002a80:	e596      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002a82:	f7fe fda5 	bl	80015d0 <absx>
			dec();
 8002a86:	f7ff f8fb 	bl	8001c80 <dec>
			break;
 8002a8a:	e591      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002a8c:	f7fe fd32 	bl	80014f4 <imm>
			cpx();
 8002a90:	f7ff f89a 	bl	8001bc8 <cpx>
			break;
 8002a94:	e58c      	b.n	80025b0 <exec6502+0x248>
			indx();
 8002a96:	f7fe fdf9 	bl	800168c <indx>
			sbc();
 8002a9a:	f7ff fb49 	bl	8002130 <sbc>
			break;
 8002a9e:	e587      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002aa0:	f7fe fd34 	bl	800150c <zp>
			cpx();
 8002aa4:	f7ff f890 	bl	8001bc8 <cpx>
			break;
 8002aa8:	e582      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002aaa:	f7fe fd2f 	bl	800150c <zp>
			sbc();
 8002aae:	f7ff fb3f 	bl	8002130 <sbc>
			break;
 8002ab2:	e57d      	b.n	80025b0 <exec6502+0x248>
			zp();
 8002ab4:	f7fe fd2a 	bl	800150c <zp>
			inc();
 8002ab8:	f7ff f960 	bl	8001d7c <inc>
			break;
 8002abc:	e578      	b.n	80025b0 <exec6502+0x248>
			inx();
 8002abe:	f7ff f981 	bl	8001dc4 <inx>
			break;
 8002ac2:	e575      	b.n	80025b0 <exec6502+0x248>
			imm();
 8002ac4:	f7fe fd16 	bl	80014f4 <imm>
			sbc();
 8002ac8:	f7ff fb32 	bl	8002130 <sbc>
			break;
 8002acc:	e570      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002ace:	f7fe fd67 	bl	80015a0 <abso>
			cpx();
 8002ad2:	f7ff f879 	bl	8001bc8 <cpx>
			break;
 8002ad6:	e56b      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002ad8:	f7fe fd62 	bl	80015a0 <abso>
			sbc();
 8002adc:	f7ff fb28 	bl	8002130 <sbc>
			break;
 8002ae0:	e566      	b.n	80025b0 <exec6502+0x248>
			abso();
 8002ae2:	f7fe fd5d 	bl	80015a0 <abso>
			inc();
 8002ae6:	f7ff f949 	bl	8001d7c <inc>
			break;
 8002aea:	e561      	b.n	80025b0 <exec6502+0x248>
			rel();
 8002aec:	f7fe fd44 	bl	8001578 <rel>
			beq();
 8002af0:	f7fe ff06 	bl	8001900 <beq>
			break;
 8002af4:	e55c      	b.n	80025b0 <exec6502+0x248>
			indy();
 8002af6:	f7fe fde7 	bl	80016c8 <indy>
			sbc();
 8002afa:	f7ff fb19 	bl	8002130 <sbc>
			break;
 8002afe:	e557      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002b00:	f7fe fd12 	bl	8001528 <zpx>
			sbc();
 8002b04:	f7ff fb14 	bl	8002130 <sbc>
			break;
 8002b08:	e552      	b.n	80025b0 <exec6502+0x248>
			zpx();
 8002b0a:	f7fe fd0d 	bl	8001528 <zpx>
			inc();
 8002b0e:	f7ff f935 	bl	8001d7c <inc>
			break;
 8002b12:	e54d      	b.n	80025b0 <exec6502+0x248>
			sed();
 8002b14:	f7ff fb70 	bl	80021f8 <sed>
			break;
 8002b18:	e54a      	b.n	80025b0 <exec6502+0x248>
			absy();
 8002b1a:	f7fe fd75 	bl	8001608 <absy>
			sbc();
 8002b1e:	f7ff fb07 	bl	8002130 <sbc>
			break;
 8002b22:	e545      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002b24:	f7fe fd54 	bl	80015d0 <absx>
			sbc();
 8002b28:	f7ff fb02 	bl	8002130 <sbc>
			break;
 8002b2c:	e540      	b.n	80025b0 <exec6502+0x248>
			absx();
 8002b2e:	f7fe fd4f 	bl	80015d0 <absx>
			inc();
 8002b32:	f7ff f923 	bl	8001d7c <inc>
			break;
 8002b36:	e53b      	b.n	80025b0 <exec6502+0x248>

08002b38 <getSCode>:
		.readyToRead = 0,
		.debug = 1
};

// convert byte into dec value
uint8_t getSCode(uint8_t *byte){
 8002b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b3c:	4607      	mov	r7, r0
	double output = 0;
	for(int i=0; i<8; i++){
 8002b3e:	2600      	movs	r6, #0
	double output = 0;
 8002b40:	2400      	movs	r4, #0
 8002b42:	2500      	movs	r5, #0
		if(byte[i]) output += pow(2, i);
 8002b44:	f04f 0800 	mov.w	r8, #0
 8002b48:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8002b4c:	5dbb      	ldrb	r3, [r7, r6]
 8002b4e:	b183      	cbz	r3, 8002b72 <getSCode+0x3a>
 8002b50:	4630      	mov	r0, r6
 8002b52:	f7fd fcc3 	bl	80004dc <__aeabi_i2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4640      	mov	r0, r8
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	f001 fc47 	bl	80043f0 <pow>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fb6b 	bl	8000244 <__adddf3>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
	for(int i=0; i<8; i++){
 8002b72:	3601      	adds	r6, #1
 8002b74:	2e08      	cmp	r6, #8
 8002b76:	d1e9      	bne.n	8002b4c <getSCode+0x14>
	}
	return (uint8_t)output;
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd ffc8 	bl	8000b10 <__aeabi_d2uiz>
}
 8002b80:	b2c0      	uxtb	r0, r0
 8002b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002b88 <isKbrdReady>:

uint8_t isKbrdReady(){
	return keyboard.readyToRead;
}
 8002b88:	4b01      	ldr	r3, [pc, #4]	; (8002b90 <isKbrdReady+0x8>)
 8002b8a:	7f58      	ldrb	r0, [r3, #29]
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000

08002b94 <getAscii>:

uint8_t getAscii(){
	// key read now, no longer new key to read
	keyboard.readyToRead = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <getAscii+0x1c>)
 8002b98:	7753      	strb	r3, [r2, #29]
	if(keyboard.ctrlStatus){
		return asciiMaps.ctrlMap[keyboard.sCodeBuffer[0]];
 8002b9a:	7ed1      	ldrb	r1, [r2, #27]
	if(keyboard.ctrlStatus){
 8002b9c:	7e52      	ldrb	r2, [r2, #25]
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <getAscii+0x20>)
 8002ba0:	b11a      	cbz	r2, 8002baa <getAscii+0x16>
		return asciiMaps.ctrlMap[keyboard.sCodeBuffer[0]];
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 8002ba8:	4770      	bx	lr
	}
	else{
		return asciiMaps.defMap[keyboard.sCodeBuffer[0]];
 8002baa:	5c58      	ldrb	r0, [r3, r1]
	}
}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	08006d63 	.word	0x08006d63

08002bb8 <toggleKeys>:

void toggleKeys(){
	// ctrl toggle
	if(keyboard.sCodeBuffer[0] == L_CTRL){
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <toggleKeys+0x1c>)
 8002bba:	7eda      	ldrb	r2, [r3, #27]
 8002bbc:	2a14      	cmp	r2, #20
 8002bbe:	d102      	bne.n	8002bc6 <toggleKeys+0xe>
		keyboard.ctrlStatus = 1;
 8002bc0:	2201      	movs	r2, #1
	} // ctrl released
	else if(keyboard.sCodeBuffer[0] == RELEASE && keyboard.sCodeBuffer[1] == L_CTRL){
		keyboard.ctrlStatus = 0;
 8002bc2:	765a      	strb	r2, [r3, #25]
	}
}
 8002bc4:	4770      	bx	lr
	else if(keyboard.sCodeBuffer[0] == RELEASE && keyboard.sCodeBuffer[1] == L_CTRL){
 8002bc6:	2af0      	cmp	r2, #240	; 0xf0
 8002bc8:	d1fc      	bne.n	8002bc4 <toggleKeys+0xc>
 8002bca:	7f1a      	ldrb	r2, [r3, #28]
 8002bcc:	2a14      	cmp	r2, #20
 8002bce:	d1f9      	bne.n	8002bc4 <toggleKeys+0xc>
		keyboard.ctrlStatus = 0;
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	e7f6      	b.n	8002bc2 <toggleKeys+0xa>
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <debug>:

void debug(){
 8002bd8:	b507      	push	{r0, r1, r2, lr}
	char outputS[4]; // 3 digits + null terminator
	sprintf(outputS, "%03u", keyboard.sCodeBuffer[0]);
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <debug+0x20>)
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <debug+0x24>)
 8002bde:	7eda      	ldrb	r2, [r3, #27]
 8002be0:	a801      	add	r0, sp, #4
 8002be2:	f000 ff8b 	bl	8003afc <siprintf>
	toggleKeys();
	writeTerminal("|");
 8002be6:	4806      	ldr	r0, [pc, #24]	; (8002c00 <debug+0x28>)
	toggleKeys();
 8002be8:	f7ff ffe6 	bl	8002bb8 <toggleKeys>
	writeTerminal("|");
 8002bec:	f7fe f9a0 	bl	8000f30 <writeTerminal>
}
 8002bf0:	b003      	add	sp, #12
 8002bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	08006d5c 	.word	0x08006d5c
 8002c00:	08006d61 	.word	0x08006d61

08002c04 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002c04:	b538      	push	{r3, r4, r5, lr}
	GPIO_PinState data_state = HAL_GPIO_ReadPin(keyboard.dataPort, keyboard.dataNumber);
 8002c06:	4c24      	ldr	r4, [pc, #144]	; (8002c98 <EXTI9_5_IRQHandler+0x94>)
 8002c08:	89a1      	ldrh	r1, [r4, #12]
 8002c0a:	68a0      	ldr	r0, [r4, #8]
 8002c0c:	f000 fad0 	bl	80031b0 <HAL_GPIO_ReadPin>
	// check if we are reading during this interrupt
	if(keyboard.reading){
 8002c10:	7be3      	ldrb	r3, [r4, #15]
	GPIO_PinState data_state = HAL_GPIO_ReadPin(keyboard.dataPort, keyboard.dataNumber);
 8002c12:	4605      	mov	r5, r0
	if(keyboard.reading){
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d039      	beq.n	8002c8c <EXTI9_5_IRQHandler+0x88>
		// do not allow external reading, new key being read.
		keyboard.readyToRead = 0;
 8002c18:	2300      	movs	r3, #0
		// check if end of string
		if(keyboard.count == 9) {
 8002c1a:	7ba2      	ldrb	r2, [r4, #14]
		keyboard.readyToRead = 0;
 8002c1c:	7763      	strb	r3, [r4, #29]
		if(keyboard.count == 9) {
 8002c1e:	2a09      	cmp	r2, #9
 8002c20:	d129      	bne.n	8002c76 <EXTI9_5_IRQHandler+0x72>
			// reset read values
			keyboard.count = 0;
 8002c22:	81e3      	strh	r3, [r4, #14]
			keyboard.reading = 0;
			// update the code buffer
			keyboard.sCodeBuffer[1] = keyboard.sCodeBuffer[0];
 8002c24:	7ee3      	ldrb	r3, [r4, #27]
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002c26:	f104 0010 	add.w	r0, r4, #16
			keyboard.sCodeBuffer[1] = keyboard.sCodeBuffer[0];
 8002c2a:	7723      	strb	r3, [r4, #28]
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002c2c:	f7ff ff84 	bl	8002b38 <getSCode>
			// check stop bit(should be high)
			if(data_state != GPIO_PIN_SET){
 8002c30:	2d01      	cmp	r5, #1
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002c32:	76e0      	strb	r0, [r4, #27]
			if(data_state != GPIO_PIN_SET){
 8002c34:	d018      	beq.n	8002c68 <EXTI9_5_IRQHandler+0x64>
				keyboard.sCodeBuffer[0] = 243;
 8002c36:	23f3      	movs	r3, #243	; 0xf3
			}
			else{
				// confirm odd parity
				if((keyboard.parity % 2) != 1){
					keyboard.sCodeBuffer[0] = 244;
 8002c38:	76e3      	strb	r3, [r4, #27]
				}
			}
			keyboard.parity = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	76a3      	strb	r3, [r4, #26]
			// check if the new key is readable
			// is in the list (lazy and) then check if it has an action (not 0)
			if(keyboard.sCodeBuffer[0] < 104 && getAscii() != 0){
 8002c3e:	7ee3      	ldrb	r3, [r4, #27]
 8002c40:	2b67      	cmp	r3, #103	; 0x67
 8002c42:	d816      	bhi.n	8002c72 <EXTI9_5_IRQHandler+0x6e>
 8002c44:	f7ff ffa6 	bl	8002b94 <getAscii>
 8002c48:	b198      	cbz	r0, 8002c72 <EXTI9_5_IRQHandler+0x6e>
				// then make sure the key has changed (not just held / let go)
				if(keyboard.sCodeBuffer[0] != (keyboard.sCodeBuffer[1])){
 8002c4a:	7ee2      	ldrb	r2, [r4, #27]
 8002c4c:	7f23      	ldrb	r3, [r4, #28]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d001      	beq.n	8002c56 <EXTI9_5_IRQHandler+0x52>
					keyboard.readyToRead = 1;
 8002c52:	2301      	movs	r3, #1
				}
			}
			else{
				// new scancode not readable!
				keyboard.readyToRead = 0;
 8002c54:	7763      	strb	r3, [r4, #29]
			}
			if(keyboard.debug) debug();
 8002c56:	7fa3      	ldrb	r3, [r4, #30]
 8002c58:	b10b      	cbz	r3, 8002c5e <EXTI9_5_IRQHandler+0x5a>
 8002c5a:	f7ff ffbd 	bl	8002bd8 <debug>
	else{
		// if not reading, check if the bit is a start bit (low) then start reading.
		if(data_state != GPIO_PIN_SET) keyboard.reading = 1;
	}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
}
 8002c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002c62:	2020      	movs	r0, #32
 8002c64:	f000 bab0 	b.w	80031c8 <HAL_GPIO_EXTI_IRQHandler>
				if((keyboard.parity % 2) != 1){
 8002c68:	7ea3      	ldrb	r3, [r4, #26]
 8002c6a:	07db      	lsls	r3, r3, #31
 8002c6c:	d4e5      	bmi.n	8002c3a <EXTI9_5_IRQHandler+0x36>
					keyboard.sCodeBuffer[0] = 244;
 8002c6e:	23f4      	movs	r3, #244	; 0xf4
 8002c70:	e7e2      	b.n	8002c38 <EXTI9_5_IRQHandler+0x34>
				keyboard.readyToRead = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e7ee      	b.n	8002c54 <EXTI9_5_IRQHandler+0x50>
			if(data_state == GPIO_PIN_SET) keyboard.scanCode[keyboard.count] = 1;
 8002c76:	2801      	cmp	r0, #1
 8002c78:	bf08      	it	eq
 8002c7a:	4603      	moveq	r3, r0
			keyboard.parity += keyboard.scanCode[keyboard.count];
 8002c7c:	7ea0      	ldrb	r0, [r4, #26]
 8002c7e:	18a1      	adds	r1, r4, r2
			if(data_state == GPIO_PIN_SET) keyboard.scanCode[keyboard.count] = 1;
 8002c80:	740b      	strb	r3, [r1, #16]
			keyboard.count++;
 8002c82:	3201      	adds	r2, #1
			keyboard.parity += keyboard.scanCode[keyboard.count];
 8002c84:	4403      	add	r3, r0
 8002c86:	76a3      	strb	r3, [r4, #26]
			keyboard.count++;
 8002c88:	73a2      	strb	r2, [r4, #14]
 8002c8a:	e7e8      	b.n	8002c5e <EXTI9_5_IRQHandler+0x5a>
		if(data_state != GPIO_PIN_SET) keyboard.reading = 1;
 8002c8c:	2801      	cmp	r0, #1
 8002c8e:	bf1c      	itt	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	73e3      	strbne	r3, [r4, #15]
 8002c94:	e7e3      	b.n	8002c5e <EXTI9_5_IRQHandler+0x5a>
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000

08002c9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_MspInit+0x3c>)
{
 8002c9e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	619a      	str	r2, [r3, #24]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	f002 0201 	and.w	r2, r2, #1
 8002cae:	9200      	str	r2, [sp, #0]
 8002cb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cb8:	61da      	str	r2, [r3, #28]
 8002cba:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cbc:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cc6:	6853      	ldr	r3, [r2, #4]
 8002cc8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd2:	b002      	add	sp, #8
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010000 	.word	0x40010000

08002ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	2100      	movs	r1, #0
 8002cea:	a802      	add	r0, sp, #8
 8002cec:	f000 fefe 	bl	8003aec <memset>
  if(huart->Instance==USART1)
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_UART_MspInit+0x70>)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d128      	bne.n	8002d4a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002cfc:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	4815      	ldr	r0, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d04:	619a      	str	r2, [r3, #24]
 8002d06:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d0e:	9200      	str	r2, [sp, #0]
 8002d10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	f042 0204 	orr.w	r2, r2, #4
 8002d18:	619a      	str	r2, [r3, #24]
 8002d1a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f000 f955 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d3a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d3e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d42:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f000 f94b 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d4a:	b006      	add	sp, #24
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	bf00      	nop
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40010800 	.word	0x40010800

08002d58 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d58:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002d5a:	b530      	push	{r4, r5, lr}
 8002d5c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d5e:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_SRAM_MspInit+0x54>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	b9fa      	cbnz	r2, 8002da6 <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d6e:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d70:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	615a      	str	r2, [r3, #20]
 8002d78:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d7a:	480e      	ldr	r0, [pc, #56]	; (8002db4 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d88:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d8e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d90:	f000 f926 	bl	8002fe0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d94:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d98:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_SRAM_MspInit+0x60>)
 8002d9a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da2:	f000 f91d 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002da6:	b007      	add	sp, #28
 8002da8:	bd30      	pop	{r4, r5, pc}
 8002daa:	bf00      	nop
 8002dac:	20008164 	.word	0x20008164
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40011800 	.word	0x40011800
 8002db8:	40011400 	.word	0x40011400

08002dbc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler>

08002dbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <HardFault_Handler>

08002dc0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <MemManage_Handler>

08002dc2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler>

08002dc4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler>

08002dc6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc6:	4770      	bx	lr

08002dc8 <DebugMon_Handler>:
 8002dc8:	4770      	bx	lr

08002dca <PendSV_Handler>:
 8002dca:	4770      	bx	lr

08002dcc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dcc:	f000 b87e 	b.w	8002ecc <HAL_IncTick>

08002dd0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <_sbrk+0x30>)
{
 8002dd2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002dd4:	6811      	ldr	r1, [r2, #0]
{
 8002dd6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002dd8:	b909      	cbnz	r1, 8002dde <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <_sbrk+0x34>)
 8002ddc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dde:	6810      	ldr	r0, [r2, #0]
 8002de0:	4909      	ldr	r1, [pc, #36]	; (8002e08 <_sbrk+0x38>)
 8002de2:	4c0a      	ldr	r4, [pc, #40]	; (8002e0c <_sbrk+0x3c>)
 8002de4:	4403      	add	r3, r0
 8002de6:	1b09      	subs	r1, r1, r4
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d906      	bls.n	8002dfa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002dec:	f000 fe54 	bl	8003a98 <__errno>
 8002df0:	230c      	movs	r3, #12
 8002df2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002df8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002dfa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002dfc:	e7fc      	b.n	8002df8 <_sbrk+0x28>
 8002dfe:	bf00      	nop
 8002e00:	20008168 	.word	0x20008168
 8002e04:	20008180 	.word	0x20008180
 8002e08:	20010000 	.word	0x20010000
 8002e0c:	00000400 	.word	0x00000400

08002e10 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e10:	4770      	bx	lr
	...

08002e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e14:	f7ff fffc 	bl	8002e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e18:	480b      	ldr	r0, [pc, #44]	; (8002e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e1a:	490c      	ldr	r1, [pc, #48]	; (8002e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e30:	4c09      	ldr	r4, [pc, #36]	; (8002e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f000 fe31 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e42:	f7fe f9fd 	bl	8001240 <main>
  bx lr
 8002e46:	4770      	bx	lr
  ldr r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e4c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002e50:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8002e54:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e58:	20008180 	.word	0x20008180

08002e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <ADC1_2_IRQHandler>
	...

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_InitTick+0x3c>)
{
 8002e64:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e66:	7818      	ldrb	r0, [r3, #0]
 8002e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HAL_InitTick+0x40>)
 8002e72:	6810      	ldr	r0, [r2, #0]
 8002e74:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e78:	f000 f89e 	bl	8002fb8 <HAL_SYSTICK_Config>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	b958      	cbnz	r0, 8002e98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e80:	2d0f      	cmp	r5, #15
 8002e82:	d809      	bhi.n	8002e98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e84:	4602      	mov	r2, r0
 8002e86:	4629      	mov	r1, r5
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f000 f854 	bl	8002f38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e90:	4620      	mov	r0, r4
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_InitTick+0x44>)
 8002e94:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e7fc      	b.n	8002e96 <HAL_InitTick+0x36>
 8002e9c:	20000024 	.word	0x20000024
 8002ea0:	20000020 	.word	0x20000020
 8002ea4:	20000028 	.word	0x20000028

08002ea8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea8:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_Init+0x20>)
{
 8002eaa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb0:	f043 0310 	orr.w	r3, r3, #16
 8002eb4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb6:	f000 f82d 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eba:	200f      	movs	r0, #15
 8002ebc:	f7ff ffd0 	bl	8002e60 <HAL_InitTick>
  HAL_MspInit();
 8002ec0:	f7ff feec 	bl	8002c9c <HAL_MspInit>
}
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	bd08      	pop	{r3, pc}
 8002ec8:	40022000 	.word	0x40022000

08002ecc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <HAL_IncTick+0x10>)
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <HAL_IncTick+0x14>)
 8002ed0:	6811      	ldr	r1, [r2, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	440b      	add	r3, r1
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000816c 	.word	0x2000816c
 8002ee0:	20000024 	.word	0x20000024

08002ee4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ee4:	4b01      	ldr	r3, [pc, #4]	; (8002eec <HAL_GetTick+0x8>)
 8002ee6:	6818      	ldr	r0, [r3, #0]
}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000816c 	.word	0x2000816c

08002ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff fff6 	bl	8002ee4 <HAL_GetTick>
 8002ef8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002efc:	bf1e      	ittt	ne
 8002efe:	4b04      	ldrne	r3, [pc, #16]	; (8002f10 <HAL_Delay+0x20>)
 8002f00:	781b      	ldrbne	r3, [r3, #0]
 8002f02:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f04:	f7ff ffee 	bl	8002ee4 <HAL_GetTick>
 8002f08:	1b43      	subs	r3, r0, r5
 8002f0a:	42a3      	cmp	r3, r4
 8002f0c:	d3fa      	bcc.n	8002f04 <HAL_Delay+0x14>
  {
  }
}
 8002f0e:	bd38      	pop	{r3, r4, r5, pc}
 8002f10:	20000024 	.word	0x20000024

08002f14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f16:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f22:	0412      	lsls	r2, r2, #16
 8002f24:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f30:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3a:	b530      	push	{r4, r5, lr}
 8002f3c:	68dc      	ldr	r4, [r3, #12]
 8002f3e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f42:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	bf28      	it	cs
 8002f4c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f54:	bf98      	it	ls
 8002f56:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5c:	bf88      	it	hi
 8002f5e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	ea21 0303 	bic.w	r3, r1, r3
 8002f64:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f66:	fa05 f404 	lsl.w	r4, r5, r4
 8002f6a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	bfac      	ite	ge
 8002f76:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	4a07      	ldrlt	r2, [pc, #28]	; (8002f98 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	bfab      	itete	ge
 8002f84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f88:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f92:	bd30      	pop	{r4, r5, pc}
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	e000ed14 	.word	0xe000ed14

08002f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	db08      	blt.n	8002fb2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	0942      	lsrs	r2, r0, #5
 8002fa4:	f000 001f 	and.w	r0, r0, #31
 8002fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <HAL_NVIC_EnableIRQ+0x18>)
 8002fae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb8:	3801      	subs	r0, #1
 8002fba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002fbe:	d20b      	bcs.n	8002fd8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	21f0      	movs	r1, #240	; 0xf0
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fce:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002fd8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fe4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002fe6:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fe8:	4f6a      	ldr	r7, [pc, #424]	; (8003194 <HAL_GPIO_Init+0x1b4>)
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fec:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800319c <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8002ff0:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80031a0 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff4:	680c      	ldr	r4, [r1, #0]
 8002ff6:	fa34 f506 	lsrs.w	r5, r4, r6
 8002ffa:	d102      	bne.n	8003002 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002ffc:	b003      	add	sp, #12
 8002ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003002:	f04f 0801 	mov.w	r8, #1
 8003006:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 800300e:	ea38 0404 	bics.w	r4, r8, r4
 8003012:	f040 8081 	bne.w	8003118 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8003016:	684c      	ldr	r4, [r1, #4]
 8003018:	2c03      	cmp	r4, #3
 800301a:	d807      	bhi.n	800302c <HAL_GPIO_Init+0x4c>
 800301c:	3c01      	subs	r4, #1
 800301e:	2c02      	cmp	r4, #2
 8003020:	f200 808c 	bhi.w	800313c <HAL_GPIO_Init+0x15c>
 8003024:	e8df f004 	tbb	[pc, r4]
 8003028:	a29d      	.short	0xa29d
 800302a:	a8          	.byte	0xa8
 800302b:	00          	.byte	0x00
 800302c:	2c12      	cmp	r4, #18
 800302e:	f000 80a0 	beq.w	8003172 <HAL_GPIO_Init+0x192>
 8003032:	d873      	bhi.n	800311c <HAL_GPIO_Init+0x13c>
 8003034:	2c11      	cmp	r4, #17
 8003036:	f000 8096 	beq.w	8003166 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800303a:	2dff      	cmp	r5, #255	; 0xff
 800303c:	bf98      	it	ls
 800303e:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003040:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003044:	bf88      	it	hi
 8003046:	f100 0a04 	addhi.w	sl, r0, #4
 800304a:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800304e:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003052:	bf88      	it	hi
 8003054:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003056:	fa09 fb04 	lsl.w	fp, r9, r4
 800305a:	ea28 080b 	bic.w	r8, r8, fp
 800305e:	fa02 f404 	lsl.w	r4, r2, r4
 8003062:	ea48 0404 	orr.w	r4, r8, r4
 8003066:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800306e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003072:	d051      	beq.n	8003118 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003074:	69bc      	ldr	r4, [r7, #24]
 8003076:	f026 0803 	bic.w	r8, r6, #3
 800307a:	f044 0401 	orr.w	r4, r4, #1
 800307e:	61bc      	str	r4, [r7, #24]
 8003080:	69bc      	ldr	r4, [r7, #24]
 8003082:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003086:	f004 0401 	and.w	r4, r4, #1
 800308a:	9401      	str	r4, [sp, #4]
 800308c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003090:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003094:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003096:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800309a:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800309e:	fa09 f90b 	lsl.w	r9, r9, fp
 80030a2:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030a6:	4c3f      	ldr	r4, [pc, #252]	; (80031a4 <HAL_GPIO_Init+0x1c4>)
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d069      	beq.n	8003180 <HAL_GPIO_Init+0x1a0>
 80030ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d067      	beq.n	8003184 <HAL_GPIO_Init+0x1a4>
 80030b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030b8:	42a0      	cmp	r0, r4
 80030ba:	d065      	beq.n	8003188 <HAL_GPIO_Init+0x1a8>
 80030bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030c0:	42a0      	cmp	r0, r4
 80030c2:	d063      	beq.n	800318c <HAL_GPIO_Init+0x1ac>
 80030c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d061      	beq.n	8003190 <HAL_GPIO_Init+0x1b0>
 80030cc:	4560      	cmp	r0, ip
 80030ce:	bf0c      	ite	eq
 80030d0:	2405      	moveq	r4, #5
 80030d2:	2406      	movne	r4, #6
 80030d4:	fa04 f40b 	lsl.w	r4, r4, fp
 80030d8:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80030dc:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80030e0:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030e2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80030e6:	bf14      	ite	ne
 80030e8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ea:	43ac      	biceq	r4, r5
 80030ec:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ee:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80030f4:	bf14      	ite	ne
 80030f6:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030f8:	43ac      	biceq	r4, r5
 80030fa:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80030fc:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030fe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003102:	bf14      	ite	ne
 8003104:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003106:	43ac      	biceq	r4, r5
 8003108:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800310a:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800310c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003110:	bf14      	ite	ne
 8003112:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003114:	43ac      	biceq	r4, r5
 8003116:	601c      	str	r4, [r3, #0]
	position++;
 8003118:	3601      	adds	r6, #1
 800311a:	e76b      	b.n	8002ff4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800311c:	4574      	cmp	r4, lr
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x15c>
 8003120:	d818      	bhi.n	8003154 <HAL_GPIO_Init+0x174>
 8003122:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80031a8 <HAL_GPIO_Init+0x1c8>
 8003126:	454c      	cmp	r4, r9
 8003128:	d008      	beq.n	800313c <HAL_GPIO_Init+0x15c>
 800312a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800312e:	454c      	cmp	r4, r9
 8003130:	d004      	beq.n	800313c <HAL_GPIO_Init+0x15c>
 8003132:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003136:	454c      	cmp	r4, r9
 8003138:	f47f af7f 	bne.w	800303a <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800313c:	688a      	ldr	r2, [r1, #8]
 800313e:	b1ea      	cbz	r2, 800317c <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003140:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003142:	bf08      	it	eq
 8003144:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003148:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800314c:	bf18      	it	ne
 800314e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8003152:	e772      	b.n	800303a <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8003154:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80031ac <HAL_GPIO_Init+0x1cc>
 8003158:	454c      	cmp	r4, r9
 800315a:	d0ef      	beq.n	800313c <HAL_GPIO_Init+0x15c>
 800315c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003160:	e7e9      	b.n	8003136 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003162:	68ca      	ldr	r2, [r1, #12]
          break;
 8003164:	e769      	b.n	800303a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003166:	68ca      	ldr	r2, [r1, #12]
 8003168:	3204      	adds	r2, #4
          break;
 800316a:	e766      	b.n	800303a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800316c:	68ca      	ldr	r2, [r1, #12]
 800316e:	3208      	adds	r2, #8
          break;
 8003170:	e763      	b.n	800303a <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003172:	68ca      	ldr	r2, [r1, #12]
 8003174:	320c      	adds	r2, #12
          break;
 8003176:	e760      	b.n	800303a <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8003178:	2200      	movs	r2, #0
 800317a:	e75e      	b.n	800303a <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800317c:	2204      	movs	r2, #4
 800317e:	e75c      	b.n	800303a <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003180:	2400      	movs	r4, #0
 8003182:	e7a7      	b.n	80030d4 <HAL_GPIO_Init+0xf4>
 8003184:	2401      	movs	r4, #1
 8003186:	e7a5      	b.n	80030d4 <HAL_GPIO_Init+0xf4>
 8003188:	2402      	movs	r4, #2
 800318a:	e7a3      	b.n	80030d4 <HAL_GPIO_Init+0xf4>
 800318c:	2403      	movs	r4, #3
 800318e:	e7a1      	b.n	80030d4 <HAL_GPIO_Init+0xf4>
 8003190:	2404      	movs	r4, #4
 8003192:	e79f      	b.n	80030d4 <HAL_GPIO_Init+0xf4>
 8003194:	40021000 	.word	0x40021000
 8003198:	40010400 	.word	0x40010400
 800319c:	40011c00 	.word	0x40011c00
 80031a0:	10220000 	.word	0x10220000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	10120000 	.word	0x10120000
 80031ac:	10310000 	.word	0x10310000

080031b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b0:	6883      	ldr	r3, [r0, #8]
 80031b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80031b4:	bf14      	ite	ne
 80031b6:	2001      	movne	r0, #1
 80031b8:	2000      	moveq	r0, #0
 80031ba:	4770      	bx	lr

080031bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031bc:	b10a      	cbz	r2, 80031c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031be:	6101      	str	r1, [r0, #16]
  }
}
 80031c0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031c2:	0409      	lsls	r1, r1, #16
 80031c4:	e7fb      	b.n	80031be <HAL_GPIO_WritePin+0x2>

080031c6 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031c6:	4770      	bx	lr

080031c8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80031ca:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031cc:	6951      	ldr	r1, [r2, #20]
 80031ce:	4201      	tst	r1, r0
 80031d0:	d002      	beq.n	80031d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031d2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031d4:	f7ff fff7 	bl	80031c6 <HAL_GPIO_EXTI_Callback>
}
 80031d8:	bd08      	pop	{r3, pc}
 80031da:	bf00      	nop
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	4605      	mov	r5, r0
 80031e6:	b338      	cbz	r0, 8003238 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e8:	6803      	ldr	r3, [r0, #0]
 80031ea:	07db      	lsls	r3, r3, #31
 80031ec:	d410      	bmi.n	8003210 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	079f      	lsls	r7, r3, #30
 80031f2:	d45e      	bmi.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	0719      	lsls	r1, r3, #28
 80031f8:	f100 8095 	bmi.w	8003326 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	075a      	lsls	r2, r3, #29
 8003200:	f100 80c1 	bmi.w	8003386 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	69e8      	ldr	r0, [r5, #28]
 8003206:	2800      	cmp	r0, #0
 8003208:	f040 812c 	bne.w	8003464 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800320c:	2000      	movs	r0, #0
 800320e:	e029      	b.n	8003264 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003210:	4c90      	ldr	r4, [pc, #576]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 8003212:	6863      	ldr	r3, [r4, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b04      	cmp	r3, #4
 800321a:	d007      	beq.n	800322c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d10a      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
 8003226:	6863      	ldr	r3, [r4, #4]
 8003228:	03de      	lsls	r6, r3, #15
 800322a:	d507      	bpl.n	800323c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	039c      	lsls	r4, r3, #14
 8003230:	d5dd      	bpl.n	80031ee <HAL_RCC_OscConfig+0xe>
 8003232:	686b      	ldr	r3, [r5, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1da      	bne.n	80031ee <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
 800323a:	e013      	b.n	8003264 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	686b      	ldr	r3, [r5, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d112      	bne.n	800326a <HAL_RCC_OscConfig+0x8a>
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800324c:	f7ff fe4a 	bl	8002ee4 <HAL_GetTick>
 8003250:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	0398      	lsls	r0, r3, #14
 8003256:	d4ca      	bmi.n	80031ee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7ff fe44 	bl	8002ee4 <HAL_GetTick>
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	2864      	cmp	r0, #100	; 0x64
 8003260:	d9f7      	bls.n	8003252 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003262:	2003      	movs	r0, #3
}
 8003264:	b002      	add	sp, #8
 8003266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326a:	b99b      	cbnz	r3, 8003294 <HAL_RCC_OscConfig+0xb4>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800327c:	f7ff fe32 	bl	8002ee4 <HAL_GetTick>
 8003280:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	0399      	lsls	r1, r3, #14
 8003286:	d5b2      	bpl.n	80031ee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff fe2c 	bl	8002ee4 <HAL_GetTick>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	2864      	cmp	r0, #100	; 0x64
 8003290:	d9f7      	bls.n	8003282 <HAL_RCC_OscConfig+0xa2>
 8003292:	e7e6      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	d103      	bne.n	80032a4 <HAL_RCC_OscConfig+0xc4>
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	e7cf      	b.n	8003244 <HAL_RCC_OscConfig+0x64>
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b0:	e7cb      	b.n	800324a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4c68      	ldr	r4, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	f013 0f0c 	tst.w	r3, #12
 80032ba:	d007      	beq.n	80032cc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d110      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
 80032c6:	6863      	ldr	r3, [r4, #4]
 80032c8:	03da      	lsls	r2, r3, #15
 80032ca:	d40d      	bmi.n	80032e8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	079b      	lsls	r3, r3, #30
 80032d0:	d502      	bpl.n	80032d8 <HAL_RCC_OscConfig+0xf8>
 80032d2:	692b      	ldr	r3, [r5, #16]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d1af      	bne.n	8003238 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	696a      	ldr	r2, [r5, #20]
 80032dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	e785      	b.n	80031f4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e8:	692a      	ldr	r2, [r5, #16]
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032ec:	b16a      	cbz	r2, 800330a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032f2:	f7ff fdf7 	bl	8002ee4 <HAL_GetTick>
 80032f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	079f      	lsls	r7, r3, #30
 80032fc:	d4ec      	bmi.n	80032d8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fe:	f7ff fdf1 	bl	8002ee4 <HAL_GetTick>
 8003302:	1b80      	subs	r0, r0, r6
 8003304:	2802      	cmp	r0, #2
 8003306:	d9f7      	bls.n	80032f8 <HAL_RCC_OscConfig+0x118>
 8003308:	e7ab      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800330a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800330c:	f7ff fdea 	bl	8002ee4 <HAL_GetTick>
 8003310:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	0798      	lsls	r0, r3, #30
 8003316:	f57f af6d 	bpl.w	80031f4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7ff fde3 	bl	8002ee4 <HAL_GetTick>
 800331e:	1b80      	subs	r0, r0, r6
 8003320:	2802      	cmp	r0, #2
 8003322:	d9f6      	bls.n	8003312 <HAL_RCC_OscConfig+0x132>
 8003324:	e79d      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003326:	69aa      	ldr	r2, [r5, #24]
 8003328:	4e4a      	ldr	r6, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800332c:	b1e2      	cbz	r2, 8003368 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800332e:	2201      	movs	r2, #1
 8003330:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003334:	f7ff fdd6 	bl	8002ee4 <HAL_GetTick>
 8003338:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800333c:	079b      	lsls	r3, r3, #30
 800333e:	d50d      	bpl.n	800335c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003340:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003344:	4b45      	ldr	r3, [pc, #276]	; (800345c <HAL_RCC_OscConfig+0x27c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
 800334c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800334e:	bf00      	nop
  }
  while (Delay --);
 8003350:	9b01      	ldr	r3, [sp, #4]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	9201      	str	r2, [sp, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_RCC_OscConfig+0x16e>
 800335a:	e74f      	b.n	80031fc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335c:	f7ff fdc2 	bl	8002ee4 <HAL_GetTick>
 8003360:	1b00      	subs	r0, r0, r4
 8003362:	2802      	cmp	r0, #2
 8003364:	d9e9      	bls.n	800333a <HAL_RCC_OscConfig+0x15a>
 8003366:	e77c      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003368:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800336c:	f7ff fdba 	bl	8002ee4 <HAL_GetTick>
 8003370:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003372:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003374:	079f      	lsls	r7, r3, #30
 8003376:	f57f af41 	bpl.w	80031fc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7ff fdb3 	bl	8002ee4 <HAL_GetTick>
 800337e:	1b00      	subs	r0, r0, r4
 8003380:	2802      	cmp	r0, #2
 8003382:	d9f6      	bls.n	8003372 <HAL_RCC_OscConfig+0x192>
 8003384:	e76d      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4c33      	ldr	r4, [pc, #204]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 8003388:	69e3      	ldr	r3, [r4, #28]
 800338a:	00d8      	lsls	r0, r3, #3
 800338c:	d424      	bmi.n	80033d8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800338e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	69e3      	ldr	r3, [r4, #28]
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	61e3      	str	r3, [r4, #28]
 8003398:	69e3      	ldr	r3, [r4, #28]
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4e2f      	ldr	r6, [pc, #188]	; (8003460 <HAL_RCC_OscConfig+0x280>)
 80033a4:	6833      	ldr	r3, [r6, #0]
 80033a6:	05d9      	lsls	r1, r3, #23
 80033a8:	d518      	bpl.n	80033dc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	68eb      	ldr	r3, [r5, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d126      	bne.n	80033fe <HAL_RCC_OscConfig+0x21e>
 80033b0:	6a23      	ldr	r3, [r4, #32]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80033b8:	f7ff fd94 	bl	8002ee4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80033c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	6a23      	ldr	r3, [r4, #32]
 80033c4:	079b      	lsls	r3, r3, #30
 80033c6:	d53f      	bpl.n	8003448 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	f43f af1b 	beq.w	8003204 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	69e3      	ldr	r3, [r4, #28]
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61e3      	str	r3, [r4, #28]
 80033d6:	e715      	b.n	8003204 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80033d8:	2700      	movs	r7, #0
 80033da:	e7e2      	b.n	80033a2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033dc:	6833      	ldr	r3, [r6, #0]
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80033e4:	f7ff fd7e 	bl	8002ee4 <HAL_GetTick>
 80033e8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	6833      	ldr	r3, [r6, #0]
 80033ec:	05da      	lsls	r2, r3, #23
 80033ee:	d4dc      	bmi.n	80033aa <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7ff fd78 	bl	8002ee4 <HAL_GetTick>
 80033f4:	eba0 0008 	sub.w	r0, r0, r8
 80033f8:	2864      	cmp	r0, #100	; 0x64
 80033fa:	d9f6      	bls.n	80033ea <HAL_RCC_OscConfig+0x20a>
 80033fc:	e731      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fe:	b9ab      	cbnz	r3, 800342c <HAL_RCC_OscConfig+0x24c>
 8003400:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6223      	str	r3, [r4, #32]
 800340c:	6a23      	ldr	r3, [r4, #32]
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003414:	f7ff fd66 	bl	8002ee4 <HAL_GetTick>
 8003418:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	6a23      	ldr	r3, [r4, #32]
 800341c:	0798      	lsls	r0, r3, #30
 800341e:	d5d3      	bpl.n	80033c8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7ff fd60 	bl	8002ee4 <HAL_GetTick>
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	4540      	cmp	r0, r8
 8003428:	d9f7      	bls.n	800341a <HAL_RCC_OscConfig+0x23a>
 800342a:	e71a      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	2b05      	cmp	r3, #5
 800342e:	6a23      	ldr	r3, [r4, #32]
 8003430:	d103      	bne.n	800343a <HAL_RCC_OscConfig+0x25a>
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6223      	str	r3, [r4, #32]
 8003438:	e7ba      	b.n	80033b0 <HAL_RCC_OscConfig+0x1d0>
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6223      	str	r3, [r4, #32]
 8003440:	6a23      	ldr	r3, [r4, #32]
 8003442:	f023 0304 	bic.w	r3, r3, #4
 8003446:	e7b6      	b.n	80033b6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7ff fd4c 	bl	8002ee4 <HAL_GetTick>
 800344c:	1b80      	subs	r0, r0, r6
 800344e:	4540      	cmp	r0, r8
 8003450:	d9b7      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1e2>
 8003452:	e706      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
 8003454:	40021000 	.word	0x40021000
 8003458:	42420000 	.word	0x42420000
 800345c:	20000020 	.word	0x20000020
 8003460:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003464:	4c2a      	ldr	r4, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x330>)
 8003466:	6863      	ldr	r3, [r4, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d03e      	beq.n	80034ee <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	2200      	movs	r2, #0
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_OscConfig+0x334>)
 8003474:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	d12c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800347a:	f7ff fd33 	bl	8002ee4 <HAL_GetTick>
 800347e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	0199      	lsls	r1, r3, #6
 8003484:	d420      	bmi.n	80034c8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003486:	6a2b      	ldr	r3, [r5, #32]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d105      	bne.n	800349a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	68a9      	ldr	r1, [r5, #8]
 8003492:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003496:	430a      	orrs	r2, r1
 8003498:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800349c:	6862      	ldr	r2, [r4, #4]
 800349e:	430b      	orrs	r3, r1
 80034a0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80034a4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80034a6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCC_OscConfig+0x334>)
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80034ae:	f7ff fd19 	bl	8002ee4 <HAL_GetTick>
 80034b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	019a      	lsls	r2, r3, #6
 80034b8:	f53f aea8 	bmi.w	800320c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7ff fd12 	bl	8002ee4 <HAL_GetTick>
 80034c0:	1b40      	subs	r0, r0, r5
 80034c2:	2802      	cmp	r0, #2
 80034c4:	d9f6      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2d4>
 80034c6:	e6cc      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7ff fd0c 	bl	8002ee4 <HAL_GetTick>
 80034cc:	1b80      	subs	r0, r0, r6
 80034ce:	2802      	cmp	r0, #2
 80034d0:	d9d6      	bls.n	8003480 <HAL_RCC_OscConfig+0x2a0>
 80034d2:	e6c6      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80034d4:	f7ff fd06 	bl	8002ee4 <HAL_GetTick>
 80034d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	f57f ae95 	bpl.w	800320c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7ff fcff 	bl	8002ee4 <HAL_GetTick>
 80034e6:	1b40      	subs	r0, r0, r5
 80034e8:	2802      	cmp	r0, #2
 80034ea:	d9f6      	bls.n	80034da <HAL_RCC_OscConfig+0x2fa>
 80034ec:	e6b9      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ee:	2801      	cmp	r0, #1
 80034f0:	f43f aeb8 	beq.w	8003264 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80034f4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	6a2a      	ldr	r2, [r5, #32]
 80034f8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80034fc:	4291      	cmp	r1, r2
 80034fe:	f47f ae9b 	bne.w	8003238 <HAL_RCC_OscConfig+0x58>
 8003502:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003504:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	4293      	cmp	r3, r2
 800350a:	f43f ae7f 	beq.w	800320c <HAL_RCC_OscConfig+0x2c>
 800350e:	e693      	b.n	8003238 <HAL_RCC_OscConfig+0x58>
 8003510:	40021000 	.word	0x40021000
 8003514:	42420000 	.word	0x42420000

08003518 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_RCC_GetSysClockFreq+0x38>)
 800351a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800351c:	f003 010c 	and.w	r1, r3, #12
 8003520:	2908      	cmp	r1, #8
 8003522:	d112      	bne.n	800354a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003524:	480b      	ldr	r0, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003526:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800352a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800352c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800352e:	d509      	bpl.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003530:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003534:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003538:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_RCC_GetSysClockFreq+0x44>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003542:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetSysClockFreq+0x48>)
 8003546:	4358      	muls	r0, r3
 8003548:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800354a:	4803      	ldr	r0, [pc, #12]	; (8003558 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	08006e4b 	.word	0x08006e4b
 8003558:	007a1200 	.word	0x007a1200
 800355c:	08006e5b 	.word	0x08006e5b
 8003560:	003d0900 	.word	0x003d0900

08003564 <HAL_RCC_ClockConfig>:
{
 8003564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003568:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800356a:	4604      	mov	r4, r0
 800356c:	b910      	cbnz	r0, 8003574 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800356e:	2001      	movs	r0, #1
}
 8003570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4a44      	ldr	r2, [pc, #272]	; (8003688 <HAL_RCC_ClockConfig+0x124>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	428b      	cmp	r3, r1
 800357e:	d328      	bcc.n	80035d2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	078e      	lsls	r6, r1, #30
 8003584:	d430      	bmi.n	80035e8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	07ca      	lsls	r2, r1, #31
 8003588:	d443      	bmi.n	8003612 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358a:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <HAL_RCC_ClockConfig+0x124>)
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	42ab      	cmp	r3, r5
 8003594:	d865      	bhi.n	8003662 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	4d3c      	ldr	r5, [pc, #240]	; (800368c <HAL_RCC_ClockConfig+0x128>)
 800359a:	f012 0f04 	tst.w	r2, #4
 800359e:	d16c      	bne.n	800367a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	0713      	lsls	r3, r2, #28
 80035a2:	d506      	bpl.n	80035b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035a4:	686b      	ldr	r3, [r5, #4]
 80035a6:	6922      	ldr	r2, [r4, #16]
 80035a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80035ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80035b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f7ff ffb1 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80035b6:	686b      	ldr	r3, [r5, #4]
 80035b8:	4a35      	ldr	r2, [pc, #212]	; (8003690 <HAL_RCC_ClockConfig+0x12c>)
 80035ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	40d8      	lsrs	r0, r3
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_ClockConfig+0x130>)
 80035c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_ClockConfig+0x134>)
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f7ff fc49 	bl	8002e60 <HAL_InitTick>
  return HAL_OK;
 80035ce:	2000      	movs	r0, #0
 80035d0:	e7ce      	b.n	8003570 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	430b      	orrs	r3, r1
 80035da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	428b      	cmp	r3, r1
 80035e4:	d1c3      	bne.n	800356e <HAL_RCC_ClockConfig+0xa>
 80035e6:	e7cb      	b.n	8003580 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <HAL_RCC_ClockConfig+0x128>)
 80035ea:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ee:	bf1e      	ittt	ne
 80035f0:	685a      	ldrne	r2, [r3, #4]
 80035f2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80035f6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fa:	bf42      	ittt	mi
 80035fc:	685a      	ldrmi	r2, [r3, #4]
 80035fe:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003602:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68a0      	ldr	r0, [r4, #8]
 8003608:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800360c:	4302      	orrs	r2, r0
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	e7b9      	b.n	8003586 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	4e1d      	ldr	r6, [pc, #116]	; (800368c <HAL_RCC_ClockConfig+0x128>)
 8003616:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003618:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	d11a      	bne.n	8003652 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	d0a5      	beq.n	800356e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003628:	f023 0303 	bic.w	r3, r3, #3
 800362c:	4313      	orrs	r3, r2
 800362e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003630:	f7ff fc58 	bl	8002ee4 <HAL_GetTick>
 8003634:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	6873      	ldr	r3, [r6, #4]
 8003638:	6862      	ldr	r2, [r4, #4]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003642:	d0a2      	beq.n	800358a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7ff fc4e 	bl	8002ee4 <HAL_GetTick>
 8003648:	1bc0      	subs	r0, r0, r7
 800364a:	4540      	cmp	r0, r8
 800364c:	d9f3      	bls.n	8003636 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800364e:	2003      	movs	r0, #3
 8003650:	e78e      	b.n	8003570 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003652:	2a02      	cmp	r2, #2
 8003654:	d102      	bne.n	800365c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800365a:	e7e1      	b.n	8003620 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	f013 0f02 	tst.w	r3, #2
 8003660:	e7de      	b.n	8003620 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f023 0307 	bic.w	r3, r3, #7
 8003668:	432b      	orrs	r3, r5
 800366a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	42ab      	cmp	r3, r5
 8003674:	f47f af7b 	bne.w	800356e <HAL_RCC_ClockConfig+0xa>
 8003678:	e78d      	b.n	8003596 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367a:	686b      	ldr	r3, [r5, #4]
 800367c:	68e1      	ldr	r1, [r4, #12]
 800367e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003682:	430b      	orrs	r3, r1
 8003684:	606b      	str	r3, [r5, #4]
 8003686:	e78b      	b.n	80035a0 <HAL_RCC_ClockConfig+0x3c>
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	08006e33 	.word	0x08006e33
 8003694:	20000020 	.word	0x20000020
 8003698:	20000028 	.word	0x20000028

0800369c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	4a03      	ldr	r2, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036aa:	6810      	ldr	r0, [r2, #0]
}
 80036ac:	40d8      	lsrs	r0, r3
 80036ae:	4770      	bx	lr
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08006e43 	.word	0x08006e43
 80036b8:	20000020 	.word	0x20000020

080036bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80036c6:	5cd3      	ldrb	r3, [r2, r3]
 80036c8:	4a03      	ldr	r2, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80036ca:	6810      	ldr	r0, [r2, #0]
}
 80036cc:	40d8      	lsrs	r0, r3
 80036ce:	4770      	bx	lr
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08006e43 	.word	0x08006e43
 80036d8:	20000020 	.word	0x20000020

080036dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	460e      	mov	r6, r1
 80036e0:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80036e2:	4604      	mov	r4, r0
 80036e4:	b348      	cbz	r0, 800373a <HAL_SRAM_Init+0x5e>
 80036e6:	6983      	ldr	r3, [r0, #24]
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ec:	d025      	beq.n	800373a <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80036ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80036f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036f6:	b91b      	cbnz	r3, 8003700 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80036f8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80036fc:	f7ff fb2c 	bl	8002d58 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003700:	f104 0108 	add.w	r1, r4, #8
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	f000 f959 	bl	80039bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800370a:	4631      	mov	r1, r6
 800370c:	68a2      	ldr	r2, [r4, #8]
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	f000 f986 	bl	8003a20 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003714:	4629      	mov	r1, r5
 8003716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003718:	68a2      	ldr	r2, [r4, #8]
 800371a:	6860      	ldr	r0, [r4, #4]
 800371c:	f000 f99e 	bl	8003a5c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8003724:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003726:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8003732:	2301      	movs	r3, #1
 8003734:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003738:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
 800373c:	e7fc      	b.n	8003738 <HAL_SRAM_Init+0x5c>
	...

08003740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003740:	b510      	push	{r4, lr}
 8003742:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	68c1      	ldr	r1, [r0, #12]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800374e:	430a      	orrs	r2, r1
 8003750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003752:	6882      	ldr	r2, [r0, #8]
 8003754:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003756:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003758:	4302      	orrs	r2, r0
 800375a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800375c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003760:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003764:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003766:	430a      	orrs	r2, r1
 8003768:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	69a1      	ldr	r1, [r4, #24]
 800376e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003772:	430a      	orrs	r2, r1
 8003774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <UART_SetConfig+0x70>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d115      	bne.n	80037a8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7ff ff9e 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	2319      	movs	r3, #25
 8003782:	4343      	muls	r3, r0
 8003784:	6862      	ldr	r2, [r4, #4]
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	fbb3 f3f2 	udiv	r3, r3, r2
 800378e:	2264      	movs	r2, #100	; 0x64
 8003790:	fbb3 f1f2 	udiv	r1, r3, r2
 8003794:	fb02 3311 	mls	r3, r2, r1, r3
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	3332      	adds	r3, #50	; 0x32
 800379c:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80037a4:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80037a6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7ff ff78 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 80037ac:	e7e8      	b.n	8003780 <UART_SetConfig+0x40>
 80037ae:	bf00      	nop
 80037b0:	40013800 	.word	0x40013800

080037b4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	4604      	mov	r4, r0
 80037b8:	460e      	mov	r6, r1
 80037ba:	4617      	mov	r7, r2
 80037bc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	ea36 0303 	bics.w	r3, r6, r3
 80037c6:	d101      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80037c8:	2000      	movs	r0, #0
 80037ca:	e028      	b.n	800381e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	1c6b      	adds	r3, r5, #1
 80037ce:	d0f7      	beq.n	80037c0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037d0:	b125      	cbz	r5, 80037dc <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80037d2:	f7ff fb87 	bl	8002ee4 <HAL_GetTick>
 80037d6:	1bc0      	subs	r0, r0, r7
 80037d8:	4285      	cmp	r5, r0
 80037da:	d2f0      	bcs.n	80037be <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037dc:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	f102 030c 	add.w	r3, r2, #12
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	320c      	adds	r2, #12
 80037ec:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d1f2      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	f101 0314 	add.w	r3, r1, #20
 80037fa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	f101 0014 	add.w	r0, r1, #20
 8003806:	e840 3200 	strex	r2, r3, [r0]
 800380a:	2a00      	cmp	r2, #0
 800380c:	d1f3      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800380e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003810:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8003812:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8003816:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800381a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003820 <HAL_UART_Init>:
{
 8003820:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003822:	4604      	mov	r4, r0
 8003824:	b348      	cbz	r0, 800387a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800382a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800382e:	b91b      	cbnz	r3, 8003838 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003830:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003834:	f7ff fa54 	bl	8002ce0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800383a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003840:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003842:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003848:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800384a:	f7ff ff79 	bl	8003740 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003860:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003868:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800386a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800386e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003876:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003878:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800387a:	2001      	movs	r0, #1
 800387c:	e7fc      	b.n	8003878 <HAL_UART_Init+0x58>

0800387e <HAL_UART_Transmit>:
{
 800387e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003882:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003884:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003888:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800388a:	2b20      	cmp	r3, #32
{
 800388c:	460e      	mov	r6, r1
 800388e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003890:	d13c      	bne.n	800390c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8003892:	2900      	cmp	r1, #0
 8003894:	d03c      	beq.n	8003910 <HAL_UART_Transmit+0x92>
 8003896:	2a00      	cmp	r2, #0
 8003898:	d03a      	beq.n	8003910 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800389a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	2500      	movs	r5, #0
 800389e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80038a4:	f7ff fb1e 	bl	8002ee4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80038aa:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80038b0:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80038b2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	d103      	bne.n	80038be <HAL_UART_Transmit+0x40>
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	b90b      	cbnz	r3, 80038be <HAL_UART_Transmit+0x40>
 80038ba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80038bc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80038be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	b953      	cbnz	r3, 80038da <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c4:	464b      	mov	r3, r9
 80038c6:	4642      	mov	r2, r8
 80038c8:	2140      	movs	r1, #64	; 0x40
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7ff ff72 	bl	80037b4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80038d0:	b950      	cbnz	r0, 80038e8 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80038d2:	2320      	movs	r3, #32
 80038d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80038d8:	e007      	b.n	80038ea <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	464b      	mov	r3, r9
 80038dc:	4642      	mov	r2, r8
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ff67 	bl	80037b4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80038e6:	b110      	cbz	r0, 80038ee <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80038e8:	2003      	movs	r0, #3
}
 80038ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ee:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80038f0:	b94e      	cbnz	r6, 8003906 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80038fc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80038fe:	3901      	subs	r1, #1
 8003900:	b289      	uxth	r1, r1
 8003902:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003904:	e7db      	b.n	80038be <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003906:	f816 3b01 	ldrb.w	r3, [r6], #1
 800390a:	e7f6      	b.n	80038fa <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800390c:	2002      	movs	r0, #2
 800390e:	e7ec      	b.n	80038ea <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8003910:	2001      	movs	r0, #1
 8003912:	e7ea      	b.n	80038ea <HAL_UART_Transmit+0x6c>

08003914 <HAL_UART_Receive>:
{
 8003914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003918:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800391a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 800391e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003920:	2b20      	cmp	r3, #32
{
 8003922:	460e      	mov	r6, r1
 8003924:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003926:	d143      	bne.n	80039b0 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8003928:	2900      	cmp	r1, #0
 800392a:	d043      	beq.n	80039b4 <HAL_UART_Receive+0xa0>
 800392c:	2a00      	cmp	r2, #0
 800392e:	d041      	beq.n	80039b4 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003930:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003932:	2500      	movs	r5, #0
 8003934:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003936:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800393c:	f7ff fad2 	bl	8002ee4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003942:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8003948:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800394c:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	d103      	bne.n	800395a <HAL_UART_Receive+0x46>
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	b90b      	cbnz	r3, 800395a <HAL_UART_Receive+0x46>
 8003956:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003958:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 800395a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800395c:	b280      	uxth	r0, r0
 800395e:	b920      	cbnz	r0, 800396a <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8003960:	2320      	movs	r3, #32
 8003962:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	463b      	mov	r3, r7
 800396c:	4642      	mov	r2, r8
 800396e:	2120      	movs	r1, #32
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff ff1f 	bl	80037b4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003976:	b9f8      	cbnz	r0, 80039b8 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003978:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800397a:	b94e      	cbnz	r6, 8003990 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003986:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003988:	3b01      	subs	r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800398e:	e7e4      	b.n	800395a <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003990:	68a2      	ldr	r2, [r4, #8]
 8003992:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003996:	d002      	beq.n	800399e <HAL_UART_Receive+0x8a>
 8003998:	b932      	cbnz	r2, 80039a8 <HAL_UART_Receive+0x94>
 800399a:	6922      	ldr	r2, [r4, #16]
 800399c:	b922      	cbnz	r2, 80039a8 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	b2c9      	uxtb	r1, r1
 80039a2:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80039a6:	e7ee      	b.n	8003986 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80039ae:	e7f8      	b.n	80039a2 <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 80039b0:	2002      	movs	r0, #2
 80039b2:	e7d8      	b.n	8003966 <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 80039b4:	2001      	movs	r0, #1
 80039b6:	e7d6      	b.n	8003966 <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 80039b8:	2003      	movs	r0, #3
 80039ba:	e7d4      	b.n	8003966 <HAL_UART_Receive+0x52>

080039bc <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80039bc:	680a      	ldr	r2, [r1, #0]
{
 80039be:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80039c0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80039c4:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80039ce:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80039d0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	bf0c      	ite	eq
 80039d8:	2440      	moveq	r4, #64	; 0x40
 80039da:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80039dc:	4333      	orrs	r3, r6
 80039de:	68ce      	ldr	r6, [r1, #12]
 80039e0:	4333      	orrs	r3, r6
 80039e2:	690e      	ldr	r6, [r1, #16]
 80039e4:	4333      	orrs	r3, r6
 80039e6:	694e      	ldr	r6, [r1, #20]
 80039e8:	4333      	orrs	r3, r6
 80039ea:	69ce      	ldr	r6, [r1, #28]
 80039ec:	4333      	orrs	r3, r6
 80039ee:	6a0e      	ldr	r6, [r1, #32]
 80039f0:	4333      	orrs	r3, r6
 80039f2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80039f4:	4333      	orrs	r3, r6
 80039f6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80039f8:	4333      	orrs	r3, r6
 80039fa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80039fc:	4333      	orrs	r3, r6
 80039fe:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003a00:	4333      	orrs	r3, r6
 8003a02:	698e      	ldr	r6, [r1, #24]
 8003a04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a06:	4333      	orrs	r3, r6
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	4904      	ldr	r1, [pc, #16]	; (8003a1c <FSMC_NORSRAM_Init+0x60>)
 8003a0c:	4029      	ands	r1, r5
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	4323      	orrs	r3, r4
 8003a12:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8003a16:	2000      	movs	r0, #0
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
 8003a1a:	bf00      	nop
 8003a1c:	fff00080 	.word	0xfff00080

08003a20 <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003a20:	680b      	ldr	r3, [r1, #0]
{
 8003a22:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003a24:	698c      	ldr	r4, [r1, #24]
 8003a26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a2a:	4323      	orrs	r3, r4
 8003a2c:	684c      	ldr	r4, [r1, #4]
 8003a2e:	6850      	ldr	r0, [r2, #4]
 8003a30:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003a34:	688c      	ldr	r4, [r1, #8]
 8003a36:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003a3a:	68cc      	ldr	r4, [r1, #12]
 8003a3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003a40:	690c      	ldr	r4, [r1, #16]
 8003a42:	6949      	ldr	r1, [r1, #20]
 8003a44:	3c01      	subs	r4, #1
 8003a46:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003a4a:	3902      	subs	r1, #2
 8003a4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a50:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8003a54:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8003a56:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003a58:	6053      	str	r3, [r2, #4]
}
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8003a60:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003a62:	d114      	bne.n	8003a8e <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003a64:	698d      	ldr	r5, [r1, #24]
 8003a66:	680b      	ldr	r3, [r1, #0]
 8003a68:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003a6c:	432b      	orrs	r3, r5
 8003a6e:	684d      	ldr	r5, [r1, #4]
 8003a70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003a74:	688d      	ldr	r5, [r1, #8]
 8003a76:	68c9      	ldr	r1, [r1, #12]
 8003a78:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8003a82:	4021      	ands	r1, r4
 8003a84:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003a86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003a8e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003a92:	e7f8      	b.n	8003a86 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8003a94:	cff00000 	.word	0xcff00000

08003a98 <__errno>:
 8003a98:	4b01      	ldr	r3, [pc, #4]	; (8003aa0 <__errno+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000002c 	.word	0x2000002c

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4d0c      	ldr	r5, [pc, #48]	; (8003adc <__libc_init_array+0x38>)
 8003aaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	f001 fb7e 	bl	80051b4 <_init>
 8003ab8:	2600      	movs	r6, #0
 8003aba:	4d0a      	ldr	r5, [pc, #40]	; (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4c0a      	ldr	r4, [pc, #40]	; (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08006ec0 	.word	0x08006ec0
 8003ae0:	08006ec0 	.word	0x08006ec0
 8003ae4:	08006ec0 	.word	0x08006ec0
 8003ae8:	08006ec4 	.word	0x08006ec4

08003aec <memset>:
 8003aec:	4603      	mov	r3, r0
 8003aee:	4402      	add	r2, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <siprintf>:
 8003afc:	b40e      	push	{r1, r2, r3}
 8003afe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b02:	b500      	push	{lr}
 8003b04:	b09c      	sub	sp, #112	; 0x70
 8003b06:	ab1d      	add	r3, sp, #116	; 0x74
 8003b08:	9002      	str	r0, [sp, #8]
 8003b0a:	9006      	str	r0, [sp, #24]
 8003b0c:	9107      	str	r1, [sp, #28]
 8003b0e:	9104      	str	r1, [sp, #16]
 8003b10:	4808      	ldr	r0, [pc, #32]	; (8003b34 <siprintf+0x38>)
 8003b12:	4909      	ldr	r1, [pc, #36]	; (8003b38 <siprintf+0x3c>)
 8003b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b18:	9105      	str	r1, [sp, #20]
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	a902      	add	r1, sp, #8
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	f000 f868 	bl	8003bf4 <_svfiprintf_r>
 8003b24:	2200      	movs	r2, #0
 8003b26:	9b02      	ldr	r3, [sp, #8]
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	b01c      	add	sp, #112	; 0x70
 8003b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b30:	b003      	add	sp, #12
 8003b32:	4770      	bx	lr
 8003b34:	2000002c 	.word	0x2000002c
 8003b38:	ffff0208 	.word	0xffff0208

08003b3c <__ssputs_r>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	688e      	ldr	r6, [r1, #8]
 8003b42:	4682      	mov	sl, r0
 8003b44:	429e      	cmp	r6, r3
 8003b46:	460c      	mov	r4, r1
 8003b48:	4690      	mov	r8, r2
 8003b4a:	461f      	mov	r7, r3
 8003b4c:	d838      	bhi.n	8003bc0 <__ssputs_r+0x84>
 8003b4e:	898a      	ldrh	r2, [r1, #12]
 8003b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b54:	d032      	beq.n	8003bbc <__ssputs_r+0x80>
 8003b56:	6825      	ldr	r5, [r4, #0]
 8003b58:	6909      	ldr	r1, [r1, #16]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	eba5 0901 	sub.w	r9, r5, r1
 8003b60:	6965      	ldr	r5, [r4, #20]
 8003b62:	444b      	add	r3, r9
 8003b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b6c:	106d      	asrs	r5, r5, #1
 8003b6e:	429d      	cmp	r5, r3
 8003b70:	bf38      	it	cc
 8003b72:	461d      	movcc	r5, r3
 8003b74:	0553      	lsls	r3, r2, #21
 8003b76:	d531      	bpl.n	8003bdc <__ssputs_r+0xa0>
 8003b78:	4629      	mov	r1, r5
 8003b7a:	f000 fb6f 	bl	800425c <_malloc_r>
 8003b7e:	4606      	mov	r6, r0
 8003b80:	b950      	cbnz	r0, 8003b98 <__ssputs_r+0x5c>
 8003b82:	230c      	movs	r3, #12
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f8ca 3000 	str.w	r3, [sl]
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b98:	464a      	mov	r2, r9
 8003b9a:	6921      	ldr	r1, [r4, #16]
 8003b9c:	f000 face 	bl	800413c <memcpy>
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003baa:	81a3      	strh	r3, [r4, #12]
 8003bac:	6126      	str	r6, [r4, #16]
 8003bae:	444e      	add	r6, r9
 8003bb0:	6026      	str	r6, [r4, #0]
 8003bb2:	463e      	mov	r6, r7
 8003bb4:	6165      	str	r5, [r4, #20]
 8003bb6:	eba5 0509 	sub.w	r5, r5, r9
 8003bba:	60a5      	str	r5, [r4, #8]
 8003bbc:	42be      	cmp	r6, r7
 8003bbe:	d900      	bls.n	8003bc2 <__ssputs_r+0x86>
 8003bc0:	463e      	mov	r6, r7
 8003bc2:	4632      	mov	r2, r6
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	f000 fac6 	bl	8004158 <memmove>
 8003bcc:	68a3      	ldr	r3, [r4, #8]
 8003bce:	2000      	movs	r0, #0
 8003bd0:	1b9b      	subs	r3, r3, r6
 8003bd2:	60a3      	str	r3, [r4, #8]
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	4433      	add	r3, r6
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	e7db      	b.n	8003b94 <__ssputs_r+0x58>
 8003bdc:	462a      	mov	r2, r5
 8003bde:	f000 fbb1 	bl	8004344 <_realloc_r>
 8003be2:	4606      	mov	r6, r0
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d1e1      	bne.n	8003bac <__ssputs_r+0x70>
 8003be8:	4650      	mov	r0, sl
 8003bea:	6921      	ldr	r1, [r4, #16]
 8003bec:	f000 face 	bl	800418c <_free_r>
 8003bf0:	e7c7      	b.n	8003b82 <__ssputs_r+0x46>
	...

08003bf4 <_svfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	4698      	mov	r8, r3
 8003bfa:	898b      	ldrh	r3, [r1, #12]
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	460d      	mov	r5, r1
 8003c02:	4614      	mov	r4, r2
 8003c04:	b09d      	sub	sp, #116	; 0x74
 8003c06:	d50e      	bpl.n	8003c26 <_svfiprintf_r+0x32>
 8003c08:	690b      	ldr	r3, [r1, #16]
 8003c0a:	b963      	cbnz	r3, 8003c26 <_svfiprintf_r+0x32>
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	f000 fb25 	bl	800425c <_malloc_r>
 8003c12:	6028      	str	r0, [r5, #0]
 8003c14:	6128      	str	r0, [r5, #16]
 8003c16:	b920      	cbnz	r0, 8003c22 <_svfiprintf_r+0x2e>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	e0d1      	b.n	8003dc6 <_svfiprintf_r+0x1d2>
 8003c22:	2340      	movs	r3, #64	; 0x40
 8003c24:	616b      	str	r3, [r5, #20]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c30:	2330      	movs	r3, #48	; 0x30
 8003c32:	f04f 0901 	mov.w	r9, #1
 8003c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003de0 <_svfiprintf_r+0x1ec>
 8003c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c42:	4623      	mov	r3, r4
 8003c44:	469a      	mov	sl, r3
 8003c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c4a:	b10a      	cbz	r2, 8003c50 <_svfiprintf_r+0x5c>
 8003c4c:	2a25      	cmp	r2, #37	; 0x25
 8003c4e:	d1f9      	bne.n	8003c44 <_svfiprintf_r+0x50>
 8003c50:	ebba 0b04 	subs.w	fp, sl, r4
 8003c54:	d00b      	beq.n	8003c6e <_svfiprintf_r+0x7a>
 8003c56:	465b      	mov	r3, fp
 8003c58:	4622      	mov	r2, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f7ff ff6d 	bl	8003b3c <__ssputs_r>
 8003c62:	3001      	adds	r0, #1
 8003c64:	f000 80aa 	beq.w	8003dbc <_svfiprintf_r+0x1c8>
 8003c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c6a:	445a      	add	r2, fp
 8003c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a2 	beq.w	8003dbc <_svfiprintf_r+0x1c8>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c82:	f10a 0a01 	add.w	sl, sl, #1
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	9307      	str	r3, [sp, #28]
 8003c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c90:	4654      	mov	r4, sl
 8003c92:	2205      	movs	r2, #5
 8003c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c98:	4851      	ldr	r0, [pc, #324]	; (8003de0 <_svfiprintf_r+0x1ec>)
 8003c9a:	f000 fa41 	bl	8004120 <memchr>
 8003c9e:	9a04      	ldr	r2, [sp, #16]
 8003ca0:	b9d8      	cbnz	r0, 8003cda <_svfiprintf_r+0xe6>
 8003ca2:	06d0      	lsls	r0, r2, #27
 8003ca4:	bf44      	itt	mi
 8003ca6:	2320      	movmi	r3, #32
 8003ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cac:	0711      	lsls	r1, r2, #28
 8003cae:	bf44      	itt	mi
 8003cb0:	232b      	movmi	r3, #43	; 0x2b
 8003cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cba:	2b2a      	cmp	r3, #42	; 0x2a
 8003cbc:	d015      	beq.n	8003cea <_svfiprintf_r+0xf6>
 8003cbe:	4654      	mov	r4, sl
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f04f 0c0a 	mov.w	ip, #10
 8003cc6:	9a07      	ldr	r2, [sp, #28]
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cce:	3b30      	subs	r3, #48	; 0x30
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	d94e      	bls.n	8003d72 <_svfiprintf_r+0x17e>
 8003cd4:	b1b0      	cbz	r0, 8003d04 <_svfiprintf_r+0x110>
 8003cd6:	9207      	str	r2, [sp, #28]
 8003cd8:	e014      	b.n	8003d04 <_svfiprintf_r+0x110>
 8003cda:	eba0 0308 	sub.w	r3, r0, r8
 8003cde:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	46a2      	mov	sl, r4
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	e7d2      	b.n	8003c90 <_svfiprintf_r+0x9c>
 8003cea:	9b03      	ldr	r3, [sp, #12]
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	9103      	str	r1, [sp, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bfbb      	ittet	lt
 8003cf6:	425b      	neglt	r3, r3
 8003cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8003cfc:	9307      	strge	r3, [sp, #28]
 8003cfe:	9307      	strlt	r3, [sp, #28]
 8003d00:	bfb8      	it	lt
 8003d02:	9204      	strlt	r2, [sp, #16]
 8003d04:	7823      	ldrb	r3, [r4, #0]
 8003d06:	2b2e      	cmp	r3, #46	; 0x2e
 8003d08:	d10c      	bne.n	8003d24 <_svfiprintf_r+0x130>
 8003d0a:	7863      	ldrb	r3, [r4, #1]
 8003d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d0e:	d135      	bne.n	8003d7c <_svfiprintf_r+0x188>
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	3402      	adds	r4, #2
 8003d14:	1d1a      	adds	r2, r3, #4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	9203      	str	r2, [sp, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfb8      	it	lt
 8003d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d22:	9305      	str	r3, [sp, #20]
 8003d24:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003de4 <_svfiprintf_r+0x1f0>
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4650      	mov	r0, sl
 8003d2c:	7821      	ldrb	r1, [r4, #0]
 8003d2e:	f000 f9f7 	bl	8004120 <memchr>
 8003d32:	b140      	cbz	r0, 8003d46 <_svfiprintf_r+0x152>
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	eba0 000a 	sub.w	r0, r0, sl
 8003d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d3e:	9b04      	ldr	r3, [sp, #16]
 8003d40:	3401      	adds	r4, #1
 8003d42:	4303      	orrs	r3, r0
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	4826      	ldr	r0, [pc, #152]	; (8003de8 <_svfiprintf_r+0x1f4>)
 8003d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d52:	f000 f9e5 	bl	8004120 <memchr>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d038      	beq.n	8003dcc <_svfiprintf_r+0x1d8>
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <_svfiprintf_r+0x1f8>)
 8003d5c:	bb1b      	cbnz	r3, 8003da6 <_svfiprintf_r+0x1b2>
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	3307      	adds	r3, #7
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	3308      	adds	r3, #8
 8003d68:	9303      	str	r3, [sp, #12]
 8003d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6c:	4433      	add	r3, r6
 8003d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d70:	e767      	b.n	8003c42 <_svfiprintf_r+0x4e>
 8003d72:	460c      	mov	r4, r1
 8003d74:	2001      	movs	r0, #1
 8003d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7a:	e7a5      	b.n	8003cc8 <_svfiprintf_r+0xd4>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f04f 0c0a 	mov.w	ip, #10
 8003d82:	4619      	mov	r1, r3
 8003d84:	3401      	adds	r4, #1
 8003d86:	9305      	str	r3, [sp, #20]
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d8e:	3a30      	subs	r2, #48	; 0x30
 8003d90:	2a09      	cmp	r2, #9
 8003d92:	d903      	bls.n	8003d9c <_svfiprintf_r+0x1a8>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0c5      	beq.n	8003d24 <_svfiprintf_r+0x130>
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	e7c3      	b.n	8003d24 <_svfiprintf_r+0x130>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	2301      	movs	r3, #1
 8003da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da4:	e7f0      	b.n	8003d88 <_svfiprintf_r+0x194>
 8003da6:	ab03      	add	r3, sp, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4638      	mov	r0, r7
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <_svfiprintf_r+0x1fc>)
 8003db0:	a904      	add	r1, sp, #16
 8003db2:	f3af 8000 	nop.w
 8003db6:	1c42      	adds	r2, r0, #1
 8003db8:	4606      	mov	r6, r0
 8003dba:	d1d6      	bne.n	8003d6a <_svfiprintf_r+0x176>
 8003dbc:	89ab      	ldrh	r3, [r5, #12]
 8003dbe:	065b      	lsls	r3, r3, #25
 8003dc0:	f53f af2c 	bmi.w	8003c1c <_svfiprintf_r+0x28>
 8003dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dc6:	b01d      	add	sp, #116	; 0x74
 8003dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dcc:	ab03      	add	r3, sp, #12
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <_svfiprintf_r+0x1fc>)
 8003dd6:	a904      	add	r1, sp, #16
 8003dd8:	f000 f87c 	bl	8003ed4 <_printf_i>
 8003ddc:	e7eb      	b.n	8003db6 <_svfiprintf_r+0x1c2>
 8003dde:	bf00      	nop
 8003de0:	08006e5d 	.word	0x08006e5d
 8003de4:	08006e63 	.word	0x08006e63
 8003de8:	08006e67 	.word	0x08006e67
 8003dec:	00000000 	.word	0x00000000
 8003df0:	08003b3d 	.word	0x08003b3d

08003df4 <_printf_common>:
 8003df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	4616      	mov	r6, r2
 8003dfa:	4699      	mov	r9, r3
 8003dfc:	688a      	ldr	r2, [r1, #8]
 8003dfe:	690b      	ldr	r3, [r1, #16]
 8003e00:	4607      	mov	r7, r0
 8003e02:	4293      	cmp	r3, r2
 8003e04:	bfb8      	it	lt
 8003e06:	4613      	movlt	r3, r2
 8003e08:	6033      	str	r3, [r6, #0]
 8003e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e0e:	460c      	mov	r4, r1
 8003e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e14:	b10a      	cbz	r2, 8003e1a <_printf_common+0x26>
 8003e16:	3301      	adds	r3, #1
 8003e18:	6033      	str	r3, [r6, #0]
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	0699      	lsls	r1, r3, #26
 8003e1e:	bf42      	ittt	mi
 8003e20:	6833      	ldrmi	r3, [r6, #0]
 8003e22:	3302      	addmi	r3, #2
 8003e24:	6033      	strmi	r3, [r6, #0]
 8003e26:	6825      	ldr	r5, [r4, #0]
 8003e28:	f015 0506 	ands.w	r5, r5, #6
 8003e2c:	d106      	bne.n	8003e3c <_printf_common+0x48>
 8003e2e:	f104 0a19 	add.w	sl, r4, #25
 8003e32:	68e3      	ldr	r3, [r4, #12]
 8003e34:	6832      	ldr	r2, [r6, #0]
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	42ab      	cmp	r3, r5
 8003e3a:	dc28      	bgt.n	8003e8e <_printf_common+0x9a>
 8003e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e40:	1e13      	subs	r3, r2, #0
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	bf18      	it	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	0692      	lsls	r2, r2, #26
 8003e4a:	d42d      	bmi.n	8003ea8 <_printf_common+0xb4>
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e54:	47c0      	blx	r8
 8003e56:	3001      	adds	r0, #1
 8003e58:	d020      	beq.n	8003e9c <_printf_common+0xa8>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	68e5      	ldr	r5, [r4, #12]
 8003e5e:	f003 0306 	and.w	r3, r3, #6
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	bf18      	it	ne
 8003e66:	2500      	movne	r5, #0
 8003e68:	6832      	ldr	r2, [r6, #0]
 8003e6a:	f04f 0600 	mov.w	r6, #0
 8003e6e:	68a3      	ldr	r3, [r4, #8]
 8003e70:	bf08      	it	eq
 8003e72:	1aad      	subeq	r5, r5, r2
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	bf08      	it	eq
 8003e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	bfc4      	itt	gt
 8003e80:	1a9b      	subgt	r3, r3, r2
 8003e82:	18ed      	addgt	r5, r5, r3
 8003e84:	341a      	adds	r4, #26
 8003e86:	42b5      	cmp	r5, r6
 8003e88:	d11a      	bne.n	8003ec0 <_printf_common+0xcc>
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	e008      	b.n	8003ea0 <_printf_common+0xac>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4652      	mov	r2, sl
 8003e92:	4649      	mov	r1, r9
 8003e94:	4638      	mov	r0, r7
 8003e96:	47c0      	blx	r8
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d103      	bne.n	8003ea4 <_printf_common+0xb0>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	e7c4      	b.n	8003e32 <_printf_common+0x3e>
 8003ea8:	2030      	movs	r0, #48	; 0x30
 8003eaa:	18e1      	adds	r1, r4, r3
 8003eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eb6:	4422      	add	r2, r4
 8003eb8:	3302      	adds	r3, #2
 8003eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ebe:	e7c5      	b.n	8003e4c <_printf_common+0x58>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	47c0      	blx	r8
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d0e6      	beq.n	8003e9c <_printf_common+0xa8>
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7d9      	b.n	8003e86 <_printf_common+0x92>
	...

08003ed4 <_printf_i>:
 8003ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	7e0f      	ldrb	r7, [r1, #24]
 8003eda:	4691      	mov	r9, r2
 8003edc:	2f78      	cmp	r7, #120	; 0x78
 8003ede:	4680      	mov	r8, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	469a      	mov	sl, r3
 8003ee4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eea:	d807      	bhi.n	8003efc <_printf_i+0x28>
 8003eec:	2f62      	cmp	r7, #98	; 0x62
 8003eee:	d80a      	bhi.n	8003f06 <_printf_i+0x32>
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f000 80d9 	beq.w	80040a8 <_printf_i+0x1d4>
 8003ef6:	2f58      	cmp	r7, #88	; 0x58
 8003ef8:	f000 80a4 	beq.w	8004044 <_printf_i+0x170>
 8003efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f04:	e03a      	b.n	8003f7c <_printf_i+0xa8>
 8003f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f0a:	2b15      	cmp	r3, #21
 8003f0c:	d8f6      	bhi.n	8003efc <_printf_i+0x28>
 8003f0e:	a101      	add	r1, pc, #4	; (adr r1, 8003f14 <_printf_i+0x40>)
 8003f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f81 	.word	0x08003f81
 8003f1c:	08003efd 	.word	0x08003efd
 8003f20:	08003efd 	.word	0x08003efd
 8003f24:	08003efd 	.word	0x08003efd
 8003f28:	08003efd 	.word	0x08003efd
 8003f2c:	08003f81 	.word	0x08003f81
 8003f30:	08003efd 	.word	0x08003efd
 8003f34:	08003efd 	.word	0x08003efd
 8003f38:	08003efd 	.word	0x08003efd
 8003f3c:	08003efd 	.word	0x08003efd
 8003f40:	0800408f 	.word	0x0800408f
 8003f44:	08003fb1 	.word	0x08003fb1
 8003f48:	08004071 	.word	0x08004071
 8003f4c:	08003efd 	.word	0x08003efd
 8003f50:	08003efd 	.word	0x08003efd
 8003f54:	080040b1 	.word	0x080040b1
 8003f58:	08003efd 	.word	0x08003efd
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003efd 	.word	0x08003efd
 8003f64:	08003efd 	.word	0x08003efd
 8003f68:	08004079 	.word	0x08004079
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	602a      	str	r2, [r5, #0]
 8003f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0a4      	b.n	80040ca <_printf_i+0x1f6>
 8003f80:	6820      	ldr	r0, [r4, #0]
 8003f82:	6829      	ldr	r1, [r5, #0]
 8003f84:	0606      	lsls	r6, r0, #24
 8003f86:	f101 0304 	add.w	r3, r1, #4
 8003f8a:	d50a      	bpl.n	8003fa2 <_printf_i+0xce>
 8003f8c:	680e      	ldr	r6, [r1, #0]
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	2e00      	cmp	r6, #0
 8003f92:	da03      	bge.n	8003f9c <_printf_i+0xc8>
 8003f94:	232d      	movs	r3, #45	; 0x2d
 8003f96:	4276      	negs	r6, r6
 8003f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	485e      	ldr	r0, [pc, #376]	; (8004118 <_printf_i+0x244>)
 8003fa0:	e019      	b.n	8003fd6 <_printf_i+0x102>
 8003fa2:	680e      	ldr	r6, [r1, #0]
 8003fa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	bf18      	it	ne
 8003fac:	b236      	sxthne	r6, r6
 8003fae:	e7ef      	b.n	8003f90 <_printf_i+0xbc>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	6820      	ldr	r0, [r4, #0]
 8003fb4:	1d19      	adds	r1, r3, #4
 8003fb6:	6029      	str	r1, [r5, #0]
 8003fb8:	0601      	lsls	r1, r0, #24
 8003fba:	d501      	bpl.n	8003fc0 <_printf_i+0xec>
 8003fbc:	681e      	ldr	r6, [r3, #0]
 8003fbe:	e002      	b.n	8003fc6 <_printf_i+0xf2>
 8003fc0:	0646      	lsls	r6, r0, #25
 8003fc2:	d5fb      	bpl.n	8003fbc <_printf_i+0xe8>
 8003fc4:	881e      	ldrh	r6, [r3, #0]
 8003fc6:	2f6f      	cmp	r7, #111	; 0x6f
 8003fc8:	bf0c      	ite	eq
 8003fca:	2308      	moveq	r3, #8
 8003fcc:	230a      	movne	r3, #10
 8003fce:	4852      	ldr	r0, [pc, #328]	; (8004118 <_printf_i+0x244>)
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fd6:	6865      	ldr	r5, [r4, #4]
 8003fd8:	2d00      	cmp	r5, #0
 8003fda:	bfa8      	it	ge
 8003fdc:	6821      	ldrge	r1, [r4, #0]
 8003fde:	60a5      	str	r5, [r4, #8]
 8003fe0:	bfa4      	itt	ge
 8003fe2:	f021 0104 	bicge.w	r1, r1, #4
 8003fe6:	6021      	strge	r1, [r4, #0]
 8003fe8:	b90e      	cbnz	r6, 8003fee <_printf_i+0x11a>
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	d04d      	beq.n	800408a <_printf_i+0x1b6>
 8003fee:	4615      	mov	r5, r2
 8003ff0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ff4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ff8:	5dc7      	ldrb	r7, [r0, r7]
 8003ffa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ffe:	4637      	mov	r7, r6
 8004000:	42bb      	cmp	r3, r7
 8004002:	460e      	mov	r6, r1
 8004004:	d9f4      	bls.n	8003ff0 <_printf_i+0x11c>
 8004006:	2b08      	cmp	r3, #8
 8004008:	d10b      	bne.n	8004022 <_printf_i+0x14e>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	07de      	lsls	r6, r3, #31
 800400e:	d508      	bpl.n	8004022 <_printf_i+0x14e>
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	6861      	ldr	r1, [r4, #4]
 8004014:	4299      	cmp	r1, r3
 8004016:	bfde      	ittt	le
 8004018:	2330      	movle	r3, #48	; 0x30
 800401a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800401e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004022:	1b52      	subs	r2, r2, r5
 8004024:	6122      	str	r2, [r4, #16]
 8004026:	464b      	mov	r3, r9
 8004028:	4621      	mov	r1, r4
 800402a:	4640      	mov	r0, r8
 800402c:	f8cd a000 	str.w	sl, [sp]
 8004030:	aa03      	add	r2, sp, #12
 8004032:	f7ff fedf 	bl	8003df4 <_printf_common>
 8004036:	3001      	adds	r0, #1
 8004038:	d14c      	bne.n	80040d4 <_printf_i+0x200>
 800403a:	f04f 30ff 	mov.w	r0, #4294967295
 800403e:	b004      	add	sp, #16
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	4834      	ldr	r0, [pc, #208]	; (8004118 <_printf_i+0x244>)
 8004046:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800404a:	6829      	ldr	r1, [r5, #0]
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004052:	6029      	str	r1, [r5, #0]
 8004054:	061d      	lsls	r5, r3, #24
 8004056:	d514      	bpl.n	8004082 <_printf_i+0x1ae>
 8004058:	07df      	lsls	r7, r3, #31
 800405a:	bf44      	itt	mi
 800405c:	f043 0320 	orrmi.w	r3, r3, #32
 8004060:	6023      	strmi	r3, [r4, #0]
 8004062:	b91e      	cbnz	r6, 800406c <_printf_i+0x198>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	f023 0320 	bic.w	r3, r3, #32
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	2310      	movs	r3, #16
 800406e:	e7af      	b.n	8003fd0 <_printf_i+0xfc>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	2378      	movs	r3, #120	; 0x78
 800407a:	4828      	ldr	r0, [pc, #160]	; (800411c <_printf_i+0x248>)
 800407c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004080:	e7e3      	b.n	800404a <_printf_i+0x176>
 8004082:	0659      	lsls	r1, r3, #25
 8004084:	bf48      	it	mi
 8004086:	b2b6      	uxthmi	r6, r6
 8004088:	e7e6      	b.n	8004058 <_printf_i+0x184>
 800408a:	4615      	mov	r5, r2
 800408c:	e7bb      	b.n	8004006 <_printf_i+0x132>
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	6826      	ldr	r6, [r4, #0]
 8004092:	1d18      	adds	r0, r3, #4
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	6028      	str	r0, [r5, #0]
 8004098:	0635      	lsls	r5, r6, #24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0x1ce>
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <_printf_i+0x1d4>
 80040a2:	0670      	lsls	r0, r6, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0x1ca>
 80040a6:	8019      	strh	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	4615      	mov	r5, r2
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	e7ba      	b.n	8004026 <_printf_i+0x152>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	602a      	str	r2, [r5, #0]
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	4628      	mov	r0, r5
 80040be:	f000 f82f 	bl	8004120 <memchr>
 80040c2:	b108      	cbz	r0, 80040c8 <_printf_i+0x1f4>
 80040c4:	1b40      	subs	r0, r0, r5
 80040c6:	6060      	str	r0, [r4, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d2:	e7a8      	b.n	8004026 <_printf_i+0x152>
 80040d4:	462a      	mov	r2, r5
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	47d0      	blx	sl
 80040de:	3001      	adds	r0, #1
 80040e0:	d0ab      	beq.n	800403a <_printf_i+0x166>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	079b      	lsls	r3, r3, #30
 80040e6:	d413      	bmi.n	8004110 <_printf_i+0x23c>
 80040e8:	68e0      	ldr	r0, [r4, #12]
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	4298      	cmp	r0, r3
 80040ee:	bfb8      	it	lt
 80040f0:	4618      	movlt	r0, r3
 80040f2:	e7a4      	b.n	800403e <_printf_i+0x16a>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4632      	mov	r2, r6
 80040f8:	4649      	mov	r1, r9
 80040fa:	4640      	mov	r0, r8
 80040fc:	47d0      	blx	sl
 80040fe:	3001      	adds	r0, #1
 8004100:	d09b      	beq.n	800403a <_printf_i+0x166>
 8004102:	3501      	adds	r5, #1
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	9903      	ldr	r1, [sp, #12]
 8004108:	1a5b      	subs	r3, r3, r1
 800410a:	42ab      	cmp	r3, r5
 800410c:	dcf2      	bgt.n	80040f4 <_printf_i+0x220>
 800410e:	e7eb      	b.n	80040e8 <_printf_i+0x214>
 8004110:	2500      	movs	r5, #0
 8004112:	f104 0619 	add.w	r6, r4, #25
 8004116:	e7f5      	b.n	8004104 <_printf_i+0x230>
 8004118:	08006e6e 	.word	0x08006e6e
 800411c:	08006e7f 	.word	0x08006e7f

08004120 <memchr>:
 8004120:	4603      	mov	r3, r0
 8004122:	b510      	push	{r4, lr}
 8004124:	b2c9      	uxtb	r1, r1
 8004126:	4402      	add	r2, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	4618      	mov	r0, r3
 800412c:	d101      	bne.n	8004132 <memchr+0x12>
 800412e:	2000      	movs	r0, #0
 8004130:	e003      	b.n	800413a <memchr+0x1a>
 8004132:	7804      	ldrb	r4, [r0, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	428c      	cmp	r4, r1
 8004138:	d1f6      	bne.n	8004128 <memchr+0x8>
 800413a:	bd10      	pop	{r4, pc}

0800413c <memcpy>:
 800413c:	440a      	add	r2, r1
 800413e:	4291      	cmp	r1, r2
 8004140:	f100 33ff 	add.w	r3, r0, #4294967295
 8004144:	d100      	bne.n	8004148 <memcpy+0xc>
 8004146:	4770      	bx	lr
 8004148:	b510      	push	{r4, lr}
 800414a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414e:	4291      	cmp	r1, r2
 8004150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004154:	d1f9      	bne.n	800414a <memcpy+0xe>
 8004156:	bd10      	pop	{r4, pc}

08004158 <memmove>:
 8004158:	4288      	cmp	r0, r1
 800415a:	b510      	push	{r4, lr}
 800415c:	eb01 0402 	add.w	r4, r1, r2
 8004160:	d902      	bls.n	8004168 <memmove+0x10>
 8004162:	4284      	cmp	r4, r0
 8004164:	4623      	mov	r3, r4
 8004166:	d807      	bhi.n	8004178 <memmove+0x20>
 8004168:	1e43      	subs	r3, r0, #1
 800416a:	42a1      	cmp	r1, r4
 800416c:	d008      	beq.n	8004180 <memmove+0x28>
 800416e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004176:	e7f8      	b.n	800416a <memmove+0x12>
 8004178:	4601      	mov	r1, r0
 800417a:	4402      	add	r2, r0
 800417c:	428a      	cmp	r2, r1
 800417e:	d100      	bne.n	8004182 <memmove+0x2a>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800418a:	e7f7      	b.n	800417c <memmove+0x24>

0800418c <_free_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4605      	mov	r5, r0
 8004190:	2900      	cmp	r1, #0
 8004192:	d040      	beq.n	8004216 <_free_r+0x8a>
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f0c      	subs	r4, r1, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	18e4      	addlt	r4, r4, r3
 80041a0:	f000 f910 	bl	80043c4 <__malloc_lock>
 80041a4:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <_free_r+0x8c>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	b933      	cbnz	r3, 80041b8 <_free_r+0x2c>
 80041aa:	6063      	str	r3, [r4, #4]
 80041ac:	6014      	str	r4, [r2, #0]
 80041ae:	4628      	mov	r0, r5
 80041b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b4:	f000 b90c 	b.w	80043d0 <__malloc_unlock>
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	d908      	bls.n	80041ce <_free_r+0x42>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	1821      	adds	r1, r4, r0
 80041c0:	428b      	cmp	r3, r1
 80041c2:	bf01      	itttt	eq
 80041c4:	6819      	ldreq	r1, [r3, #0]
 80041c6:	685b      	ldreq	r3, [r3, #4]
 80041c8:	1809      	addeq	r1, r1, r0
 80041ca:	6021      	streq	r1, [r4, #0]
 80041cc:	e7ed      	b.n	80041aa <_free_r+0x1e>
 80041ce:	461a      	mov	r2, r3
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b10b      	cbz	r3, 80041d8 <_free_r+0x4c>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d9fa      	bls.n	80041ce <_free_r+0x42>
 80041d8:	6811      	ldr	r1, [r2, #0]
 80041da:	1850      	adds	r0, r2, r1
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d10b      	bne.n	80041f8 <_free_r+0x6c>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	4401      	add	r1, r0
 80041e4:	1850      	adds	r0, r2, r1
 80041e6:	4283      	cmp	r3, r0
 80041e8:	6011      	str	r1, [r2, #0]
 80041ea:	d1e0      	bne.n	80041ae <_free_r+0x22>
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4401      	add	r1, r0
 80041f2:	6011      	str	r1, [r2, #0]
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	e7da      	b.n	80041ae <_free_r+0x22>
 80041f8:	d902      	bls.n	8004200 <_free_r+0x74>
 80041fa:	230c      	movs	r3, #12
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	e7d6      	b.n	80041ae <_free_r+0x22>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	1821      	adds	r1, r4, r0
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1809      	addeq	r1, r1, r0
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	6063      	str	r3, [r4, #4]
 8004212:	6054      	str	r4, [r2, #4]
 8004214:	e7cb      	b.n	80041ae <_free_r+0x22>
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	20008170 	.word	0x20008170

0800421c <sbrk_aligned>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4e0e      	ldr	r6, [pc, #56]	; (8004258 <sbrk_aligned+0x3c>)
 8004220:	460c      	mov	r4, r1
 8004222:	6831      	ldr	r1, [r6, #0]
 8004224:	4605      	mov	r5, r0
 8004226:	b911      	cbnz	r1, 800422e <sbrk_aligned+0x12>
 8004228:	f000 f8bc 	bl	80043a4 <_sbrk_r>
 800422c:	6030      	str	r0, [r6, #0]
 800422e:	4621      	mov	r1, r4
 8004230:	4628      	mov	r0, r5
 8004232:	f000 f8b7 	bl	80043a4 <_sbrk_r>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d00a      	beq.n	8004250 <sbrk_aligned+0x34>
 800423a:	1cc4      	adds	r4, r0, #3
 800423c:	f024 0403 	bic.w	r4, r4, #3
 8004240:	42a0      	cmp	r0, r4
 8004242:	d007      	beq.n	8004254 <sbrk_aligned+0x38>
 8004244:	1a21      	subs	r1, r4, r0
 8004246:	4628      	mov	r0, r5
 8004248:	f000 f8ac 	bl	80043a4 <_sbrk_r>
 800424c:	3001      	adds	r0, #1
 800424e:	d101      	bne.n	8004254 <sbrk_aligned+0x38>
 8004250:	f04f 34ff 	mov.w	r4, #4294967295
 8004254:	4620      	mov	r0, r4
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	20008174 	.word	0x20008174

0800425c <_malloc_r>:
 800425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004260:	1ccd      	adds	r5, r1, #3
 8004262:	f025 0503 	bic.w	r5, r5, #3
 8004266:	3508      	adds	r5, #8
 8004268:	2d0c      	cmp	r5, #12
 800426a:	bf38      	it	cc
 800426c:	250c      	movcc	r5, #12
 800426e:	2d00      	cmp	r5, #0
 8004270:	4607      	mov	r7, r0
 8004272:	db01      	blt.n	8004278 <_malloc_r+0x1c>
 8004274:	42a9      	cmp	r1, r5
 8004276:	d905      	bls.n	8004284 <_malloc_r+0x28>
 8004278:	230c      	movs	r3, #12
 800427a:	2600      	movs	r6, #0
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4630      	mov	r0, r6
 8004280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004284:	4e2e      	ldr	r6, [pc, #184]	; (8004340 <_malloc_r+0xe4>)
 8004286:	f000 f89d 	bl	80043c4 <__malloc_lock>
 800428a:	6833      	ldr	r3, [r6, #0]
 800428c:	461c      	mov	r4, r3
 800428e:	bb34      	cbnz	r4, 80042de <_malloc_r+0x82>
 8004290:	4629      	mov	r1, r5
 8004292:	4638      	mov	r0, r7
 8004294:	f7ff ffc2 	bl	800421c <sbrk_aligned>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	4604      	mov	r4, r0
 800429c:	d14d      	bne.n	800433a <_malloc_r+0xde>
 800429e:	6834      	ldr	r4, [r6, #0]
 80042a0:	4626      	mov	r6, r4
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	d140      	bne.n	8004328 <_malloc_r+0xcc>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	4631      	mov	r1, r6
 80042aa:	4638      	mov	r0, r7
 80042ac:	eb04 0803 	add.w	r8, r4, r3
 80042b0:	f000 f878 	bl	80043a4 <_sbrk_r>
 80042b4:	4580      	cmp	r8, r0
 80042b6:	d13a      	bne.n	800432e <_malloc_r+0xd2>
 80042b8:	6821      	ldr	r1, [r4, #0]
 80042ba:	3503      	adds	r5, #3
 80042bc:	1a6d      	subs	r5, r5, r1
 80042be:	f025 0503 	bic.w	r5, r5, #3
 80042c2:	3508      	adds	r5, #8
 80042c4:	2d0c      	cmp	r5, #12
 80042c6:	bf38      	it	cc
 80042c8:	250c      	movcc	r5, #12
 80042ca:	4638      	mov	r0, r7
 80042cc:	4629      	mov	r1, r5
 80042ce:	f7ff ffa5 	bl	800421c <sbrk_aligned>
 80042d2:	3001      	adds	r0, #1
 80042d4:	d02b      	beq.n	800432e <_malloc_r+0xd2>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	442b      	add	r3, r5
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	e00e      	b.n	80042fc <_malloc_r+0xa0>
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	1b52      	subs	r2, r2, r5
 80042e2:	d41e      	bmi.n	8004322 <_malloc_r+0xc6>
 80042e4:	2a0b      	cmp	r2, #11
 80042e6:	d916      	bls.n	8004316 <_malloc_r+0xba>
 80042e8:	1961      	adds	r1, r4, r5
 80042ea:	42a3      	cmp	r3, r4
 80042ec:	6025      	str	r5, [r4, #0]
 80042ee:	bf18      	it	ne
 80042f0:	6059      	strne	r1, [r3, #4]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	bf08      	it	eq
 80042f6:	6031      	streq	r1, [r6, #0]
 80042f8:	5162      	str	r2, [r4, r5]
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	4638      	mov	r0, r7
 80042fe:	f104 060b 	add.w	r6, r4, #11
 8004302:	f000 f865 	bl	80043d0 <__malloc_unlock>
 8004306:	f026 0607 	bic.w	r6, r6, #7
 800430a:	1d23      	adds	r3, r4, #4
 800430c:	1af2      	subs	r2, r6, r3
 800430e:	d0b6      	beq.n	800427e <_malloc_r+0x22>
 8004310:	1b9b      	subs	r3, r3, r6
 8004312:	50a3      	str	r3, [r4, r2]
 8004314:	e7b3      	b.n	800427e <_malloc_r+0x22>
 8004316:	6862      	ldr	r2, [r4, #4]
 8004318:	42a3      	cmp	r3, r4
 800431a:	bf0c      	ite	eq
 800431c:	6032      	streq	r2, [r6, #0]
 800431e:	605a      	strne	r2, [r3, #4]
 8004320:	e7ec      	b.n	80042fc <_malloc_r+0xa0>
 8004322:	4623      	mov	r3, r4
 8004324:	6864      	ldr	r4, [r4, #4]
 8004326:	e7b2      	b.n	800428e <_malloc_r+0x32>
 8004328:	4634      	mov	r4, r6
 800432a:	6876      	ldr	r6, [r6, #4]
 800432c:	e7b9      	b.n	80042a2 <_malloc_r+0x46>
 800432e:	230c      	movs	r3, #12
 8004330:	4638      	mov	r0, r7
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	f000 f84c 	bl	80043d0 <__malloc_unlock>
 8004338:	e7a1      	b.n	800427e <_malloc_r+0x22>
 800433a:	6025      	str	r5, [r4, #0]
 800433c:	e7de      	b.n	80042fc <_malloc_r+0xa0>
 800433e:	bf00      	nop
 8004340:	20008170 	.word	0x20008170

08004344 <_realloc_r>:
 8004344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004348:	4680      	mov	r8, r0
 800434a:	4614      	mov	r4, r2
 800434c:	460e      	mov	r6, r1
 800434e:	b921      	cbnz	r1, 800435a <_realloc_r+0x16>
 8004350:	4611      	mov	r1, r2
 8004352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004356:	f7ff bf81 	b.w	800425c <_malloc_r>
 800435a:	b92a      	cbnz	r2, 8004368 <_realloc_r+0x24>
 800435c:	f7ff ff16 	bl	800418c <_free_r>
 8004360:	4625      	mov	r5, r4
 8004362:	4628      	mov	r0, r5
 8004364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004368:	f000 f838 	bl	80043dc <_malloc_usable_size_r>
 800436c:	4284      	cmp	r4, r0
 800436e:	4607      	mov	r7, r0
 8004370:	d802      	bhi.n	8004378 <_realloc_r+0x34>
 8004372:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004376:	d812      	bhi.n	800439e <_realloc_r+0x5a>
 8004378:	4621      	mov	r1, r4
 800437a:	4640      	mov	r0, r8
 800437c:	f7ff ff6e 	bl	800425c <_malloc_r>
 8004380:	4605      	mov	r5, r0
 8004382:	2800      	cmp	r0, #0
 8004384:	d0ed      	beq.n	8004362 <_realloc_r+0x1e>
 8004386:	42bc      	cmp	r4, r7
 8004388:	4622      	mov	r2, r4
 800438a:	4631      	mov	r1, r6
 800438c:	bf28      	it	cs
 800438e:	463a      	movcs	r2, r7
 8004390:	f7ff fed4 	bl	800413c <memcpy>
 8004394:	4631      	mov	r1, r6
 8004396:	4640      	mov	r0, r8
 8004398:	f7ff fef8 	bl	800418c <_free_r>
 800439c:	e7e1      	b.n	8004362 <_realloc_r+0x1e>
 800439e:	4635      	mov	r5, r6
 80043a0:	e7df      	b.n	8004362 <_realloc_r+0x1e>
	...

080043a4 <_sbrk_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	2300      	movs	r3, #0
 80043a8:	4d05      	ldr	r5, [pc, #20]	; (80043c0 <_sbrk_r+0x1c>)
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fe fd0e 	bl	8002dd0 <_sbrk>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_sbrk_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_sbrk_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	20008178 	.word	0x20008178

080043c4 <__malloc_lock>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__malloc_lock+0x8>)
 80043c6:	f000 b811 	b.w	80043ec <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	2000817c 	.word	0x2000817c

080043d0 <__malloc_unlock>:
 80043d0:	4801      	ldr	r0, [pc, #4]	; (80043d8 <__malloc_unlock+0x8>)
 80043d2:	f000 b80c 	b.w	80043ee <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	2000817c 	.word	0x2000817c

080043dc <_malloc_usable_size_r>:
 80043dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e0:	1f18      	subs	r0, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfbc      	itt	lt
 80043e6:	580b      	ldrlt	r3, [r1, r0]
 80043e8:	18c0      	addlt	r0, r0, r3
 80043ea:	4770      	bx	lr

080043ec <__retarget_lock_acquire_recursive>:
 80043ec:	4770      	bx	lr

080043ee <__retarget_lock_release_recursive>:
 80043ee:	4770      	bx	lr

080043f0 <pow>:
 80043f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043f4:	4614      	mov	r4, r2
 80043f6:	461d      	mov	r5, r3
 80043f8:	4680      	mov	r8, r0
 80043fa:	4689      	mov	r9, r1
 80043fc:	f000 f860 	bl	80044c0 <__ieee754_pow>
 8004400:	4622      	mov	r2, r4
 8004402:	4606      	mov	r6, r0
 8004404:	460f      	mov	r7, r1
 8004406:	462b      	mov	r3, r5
 8004408:	4620      	mov	r0, r4
 800440a:	4629      	mov	r1, r5
 800440c:	f7fc fb6a 	bl	8000ae4 <__aeabi_dcmpun>
 8004410:	bbc8      	cbnz	r0, 8004486 <pow+0x96>
 8004412:	2200      	movs	r2, #0
 8004414:	2300      	movs	r3, #0
 8004416:	4640      	mov	r0, r8
 8004418:	4649      	mov	r1, r9
 800441a:	f7fc fb31 	bl	8000a80 <__aeabi_dcmpeq>
 800441e:	b1b8      	cbz	r0, 8004450 <pow+0x60>
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fc fb2a 	bl	8000a80 <__aeabi_dcmpeq>
 800442c:	2800      	cmp	r0, #0
 800442e:	d141      	bne.n	80044b4 <pow+0xc4>
 8004430:	4620      	mov	r0, r4
 8004432:	4629      	mov	r1, r5
 8004434:	f000 fe39 	bl	80050aa <finite>
 8004438:	b328      	cbz	r0, 8004486 <pow+0x96>
 800443a:	2200      	movs	r2, #0
 800443c:	2300      	movs	r3, #0
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fc fb27 	bl	8000a94 <__aeabi_dcmplt>
 8004446:	b1f0      	cbz	r0, 8004486 <pow+0x96>
 8004448:	f7ff fb26 	bl	8003a98 <__errno>
 800444c:	2322      	movs	r3, #34	; 0x22
 800444e:	e019      	b.n	8004484 <pow+0x94>
 8004450:	4630      	mov	r0, r6
 8004452:	4639      	mov	r1, r7
 8004454:	f000 fe29 	bl	80050aa <finite>
 8004458:	b9c8      	cbnz	r0, 800448e <pow+0x9e>
 800445a:	4640      	mov	r0, r8
 800445c:	4649      	mov	r1, r9
 800445e:	f000 fe24 	bl	80050aa <finite>
 8004462:	b1a0      	cbz	r0, 800448e <pow+0x9e>
 8004464:	4620      	mov	r0, r4
 8004466:	4629      	mov	r1, r5
 8004468:	f000 fe1f 	bl	80050aa <finite>
 800446c:	b178      	cbz	r0, 800448e <pow+0x9e>
 800446e:	4632      	mov	r2, r6
 8004470:	463b      	mov	r3, r7
 8004472:	4630      	mov	r0, r6
 8004474:	4639      	mov	r1, r7
 8004476:	f7fc fb35 	bl	8000ae4 <__aeabi_dcmpun>
 800447a:	2800      	cmp	r0, #0
 800447c:	d0e4      	beq.n	8004448 <pow+0x58>
 800447e:	f7ff fb0b 	bl	8003a98 <__errno>
 8004482:	2321      	movs	r3, #33	; 0x21
 8004484:	6003      	str	r3, [r0, #0]
 8004486:	4630      	mov	r0, r6
 8004488:	4639      	mov	r1, r7
 800448a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448e:	2200      	movs	r2, #0
 8004490:	2300      	movs	r3, #0
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fc faf3 	bl	8000a80 <__aeabi_dcmpeq>
 800449a:	2800      	cmp	r0, #0
 800449c:	d0f3      	beq.n	8004486 <pow+0x96>
 800449e:	4640      	mov	r0, r8
 80044a0:	4649      	mov	r1, r9
 80044a2:	f000 fe02 	bl	80050aa <finite>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d0ed      	beq.n	8004486 <pow+0x96>
 80044aa:	4620      	mov	r0, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	f000 fdfc 	bl	80050aa <finite>
 80044b2:	e7c8      	b.n	8004446 <pow+0x56>
 80044b4:	2600      	movs	r6, #0
 80044b6:	4f01      	ldr	r7, [pc, #4]	; (80044bc <pow+0xcc>)
 80044b8:	e7e5      	b.n	8004486 <pow+0x96>
 80044ba:	bf00      	nop
 80044bc:	3ff00000 	.word	0x3ff00000

080044c0 <__ieee754_pow>:
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	b093      	sub	sp, #76	; 0x4c
 80044c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044ca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80044ce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80044d2:	4689      	mov	r9, r1
 80044d4:	ea56 0102 	orrs.w	r1, r6, r2
 80044d8:	4680      	mov	r8, r0
 80044da:	d111      	bne.n	8004500 <__ieee754_pow+0x40>
 80044dc:	1803      	adds	r3, r0, r0
 80044de:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80044e2:	4152      	adcs	r2, r2
 80044e4:	4299      	cmp	r1, r3
 80044e6:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <__ieee754_pow+0x230>)
 80044e8:	4193      	sbcs	r3, r2
 80044ea:	f080 84b9 	bcs.w	8004e60 <__ieee754_pow+0x9a0>
 80044ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044f2:	4640      	mov	r0, r8
 80044f4:	4649      	mov	r1, r9
 80044f6:	f7fb fea5 	bl	8000244 <__adddf3>
 80044fa:	4683      	mov	fp, r0
 80044fc:	468c      	mov	ip, r1
 80044fe:	e06f      	b.n	80045e0 <__ieee754_pow+0x120>
 8004500:	4b7c      	ldr	r3, [pc, #496]	; (80046f4 <__ieee754_pow+0x234>)
 8004502:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004506:	429c      	cmp	r4, r3
 8004508:	464d      	mov	r5, r9
 800450a:	4682      	mov	sl, r0
 800450c:	dc06      	bgt.n	800451c <__ieee754_pow+0x5c>
 800450e:	d101      	bne.n	8004514 <__ieee754_pow+0x54>
 8004510:	2800      	cmp	r0, #0
 8004512:	d1ec      	bne.n	80044ee <__ieee754_pow+0x2e>
 8004514:	429e      	cmp	r6, r3
 8004516:	dc01      	bgt.n	800451c <__ieee754_pow+0x5c>
 8004518:	d10f      	bne.n	800453a <__ieee754_pow+0x7a>
 800451a:	b172      	cbz	r2, 800453a <__ieee754_pow+0x7a>
 800451c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004520:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004524:	ea55 050a 	orrs.w	r5, r5, sl
 8004528:	d1e1      	bne.n	80044ee <__ieee754_pow+0x2e>
 800452a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800452e:	18db      	adds	r3, r3, r3
 8004530:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004534:	4152      	adcs	r2, r2
 8004536:	429d      	cmp	r5, r3
 8004538:	e7d5      	b.n	80044e6 <__ieee754_pow+0x26>
 800453a:	2d00      	cmp	r5, #0
 800453c:	da39      	bge.n	80045b2 <__ieee754_pow+0xf2>
 800453e:	4b6e      	ldr	r3, [pc, #440]	; (80046f8 <__ieee754_pow+0x238>)
 8004540:	429e      	cmp	r6, r3
 8004542:	dc52      	bgt.n	80045ea <__ieee754_pow+0x12a>
 8004544:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004548:	429e      	cmp	r6, r3
 800454a:	f340 849c 	ble.w	8004e86 <__ieee754_pow+0x9c6>
 800454e:	1533      	asrs	r3, r6, #20
 8004550:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004554:	2b14      	cmp	r3, #20
 8004556:	dd0f      	ble.n	8004578 <__ieee754_pow+0xb8>
 8004558:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800455c:	fa22 f103 	lsr.w	r1, r2, r3
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	4293      	cmp	r3, r2
 8004566:	f040 848e 	bne.w	8004e86 <__ieee754_pow+0x9c6>
 800456a:	f001 0101 	and.w	r1, r1, #1
 800456e:	f1c1 0302 	rsb	r3, r1, #2
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	b182      	cbz	r2, 8004598 <__ieee754_pow+0xd8>
 8004576:	e05d      	b.n	8004634 <__ieee754_pow+0x174>
 8004578:	2a00      	cmp	r2, #0
 800457a:	d159      	bne.n	8004630 <__ieee754_pow+0x170>
 800457c:	f1c3 0314 	rsb	r3, r3, #20
 8004580:	fa46 f103 	asr.w	r1, r6, r3
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	42b3      	cmp	r3, r6
 800458a:	f040 8479 	bne.w	8004e80 <__ieee754_pow+0x9c0>
 800458e:	f001 0101 	and.w	r1, r1, #1
 8004592:	f1c1 0302 	rsb	r3, r1, #2
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4b58      	ldr	r3, [pc, #352]	; (80046fc <__ieee754_pow+0x23c>)
 800459a:	429e      	cmp	r6, r3
 800459c:	d132      	bne.n	8004604 <__ieee754_pow+0x144>
 800459e:	2f00      	cmp	r7, #0
 80045a0:	f280 846a 	bge.w	8004e78 <__ieee754_pow+0x9b8>
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	2000      	movs	r0, #0
 80045aa:	4954      	ldr	r1, [pc, #336]	; (80046fc <__ieee754_pow+0x23c>)
 80045ac:	f7fc f92a 	bl	8000804 <__aeabi_ddiv>
 80045b0:	e7a3      	b.n	80044fa <__ieee754_pow+0x3a>
 80045b2:	2300      	movs	r3, #0
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2a00      	cmp	r2, #0
 80045b8:	d13c      	bne.n	8004634 <__ieee754_pow+0x174>
 80045ba:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <__ieee754_pow+0x234>)
 80045bc:	429e      	cmp	r6, r3
 80045be:	d1eb      	bne.n	8004598 <__ieee754_pow+0xd8>
 80045c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80045c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80045c8:	ea53 030a 	orrs.w	r3, r3, sl
 80045cc:	f000 8448 	beq.w	8004e60 <__ieee754_pow+0x9a0>
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <__ieee754_pow+0x240>)
 80045d2:	429c      	cmp	r4, r3
 80045d4:	dd0b      	ble.n	80045ee <__ieee754_pow+0x12e>
 80045d6:	2f00      	cmp	r7, #0
 80045d8:	f2c0 8448 	blt.w	8004e6c <__ieee754_pow+0x9ac>
 80045dc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80045e0:	4658      	mov	r0, fp
 80045e2:	4661      	mov	r1, ip
 80045e4:	b013      	add	sp, #76	; 0x4c
 80045e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ea:	2302      	movs	r3, #2
 80045ec:	e7e2      	b.n	80045b4 <__ieee754_pow+0xf4>
 80045ee:	2f00      	cmp	r7, #0
 80045f0:	f04f 0b00 	mov.w	fp, #0
 80045f4:	f04f 0c00 	mov.w	ip, #0
 80045f8:	daf2      	bge.n	80045e0 <__ieee754_pow+0x120>
 80045fa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80045fe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004602:	e7ed      	b.n	80045e0 <__ieee754_pow+0x120>
 8004604:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004608:	d106      	bne.n	8004618 <__ieee754_pow+0x158>
 800460a:	4642      	mov	r2, r8
 800460c:	464b      	mov	r3, r9
 800460e:	4640      	mov	r0, r8
 8004610:	4649      	mov	r1, r9
 8004612:	f7fb ffcd 	bl	80005b0 <__aeabi_dmul>
 8004616:	e770      	b.n	80044fa <__ieee754_pow+0x3a>
 8004618:	4b3a      	ldr	r3, [pc, #232]	; (8004704 <__ieee754_pow+0x244>)
 800461a:	429f      	cmp	r7, r3
 800461c:	d10a      	bne.n	8004634 <__ieee754_pow+0x174>
 800461e:	2d00      	cmp	r5, #0
 8004620:	db08      	blt.n	8004634 <__ieee754_pow+0x174>
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	b013      	add	sp, #76	; 0x4c
 8004628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	f000 bc5e 	b.w	8004eec <__ieee754_sqrt>
 8004630:	2300      	movs	r3, #0
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	4640      	mov	r0, r8
 8004636:	4649      	mov	r1, r9
 8004638:	f000 fd34 	bl	80050a4 <fabs>
 800463c:	4683      	mov	fp, r0
 800463e:	468c      	mov	ip, r1
 8004640:	f1ba 0f00 	cmp.w	sl, #0
 8004644:	d128      	bne.n	8004698 <__ieee754_pow+0x1d8>
 8004646:	b124      	cbz	r4, 8004652 <__ieee754_pow+0x192>
 8004648:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <__ieee754_pow+0x23c>)
 800464a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800464e:	429a      	cmp	r2, r3
 8004650:	d122      	bne.n	8004698 <__ieee754_pow+0x1d8>
 8004652:	2f00      	cmp	r7, #0
 8004654:	da07      	bge.n	8004666 <__ieee754_pow+0x1a6>
 8004656:	465a      	mov	r2, fp
 8004658:	4663      	mov	r3, ip
 800465a:	2000      	movs	r0, #0
 800465c:	4927      	ldr	r1, [pc, #156]	; (80046fc <__ieee754_pow+0x23c>)
 800465e:	f7fc f8d1 	bl	8000804 <__aeabi_ddiv>
 8004662:	4683      	mov	fp, r0
 8004664:	468c      	mov	ip, r1
 8004666:	2d00      	cmp	r5, #0
 8004668:	daba      	bge.n	80045e0 <__ieee754_pow+0x120>
 800466a:	9b00      	ldr	r3, [sp, #0]
 800466c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004670:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004674:	4323      	orrs	r3, r4
 8004676:	d108      	bne.n	800468a <__ieee754_pow+0x1ca>
 8004678:	465a      	mov	r2, fp
 800467a:	4663      	mov	r3, ip
 800467c:	4658      	mov	r0, fp
 800467e:	4661      	mov	r1, ip
 8004680:	f7fb fdde 	bl	8000240 <__aeabi_dsub>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	e790      	b.n	80045ac <__ieee754_pow+0xec>
 800468a:	9b00      	ldr	r3, [sp, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d1a7      	bne.n	80045e0 <__ieee754_pow+0x120>
 8004690:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004694:	469c      	mov	ip, r3
 8004696:	e7a3      	b.n	80045e0 <__ieee754_pow+0x120>
 8004698:	0feb      	lsrs	r3, r5, #31
 800469a:	3b01      	subs	r3, #1
 800469c:	930c      	str	r3, [sp, #48]	; 0x30
 800469e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046a0:	9b00      	ldr	r3, [sp, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d104      	bne.n	80046b0 <__ieee754_pow+0x1f0>
 80046a6:	4642      	mov	r2, r8
 80046a8:	464b      	mov	r3, r9
 80046aa:	4640      	mov	r0, r8
 80046ac:	4649      	mov	r1, r9
 80046ae:	e7e7      	b.n	8004680 <__ieee754_pow+0x1c0>
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <__ieee754_pow+0x248>)
 80046b2:	429e      	cmp	r6, r3
 80046b4:	f340 80f6 	ble.w	80048a4 <__ieee754_pow+0x3e4>
 80046b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80046bc:	429e      	cmp	r6, r3
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <__ieee754_pow+0x240>)
 80046c0:	dd09      	ble.n	80046d6 <__ieee754_pow+0x216>
 80046c2:	429c      	cmp	r4, r3
 80046c4:	dc0c      	bgt.n	80046e0 <__ieee754_pow+0x220>
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	da0c      	bge.n	80046e4 <__ieee754_pow+0x224>
 80046ca:	2000      	movs	r0, #0
 80046cc:	b013      	add	sp, #76	; 0x4c
 80046ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d2:	f000 bce2 	b.w	800509a <__math_oflow>
 80046d6:	429c      	cmp	r4, r3
 80046d8:	dbf5      	blt.n	80046c6 <__ieee754_pow+0x206>
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <__ieee754_pow+0x23c>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	dd15      	ble.n	800470c <__ieee754_pow+0x24c>
 80046e0:	2f00      	cmp	r7, #0
 80046e2:	dcf2      	bgt.n	80046ca <__ieee754_pow+0x20a>
 80046e4:	2000      	movs	r0, #0
 80046e6:	b013      	add	sp, #76	; 0x4c
 80046e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	f000 bcd0 	b.w	8005090 <__math_uflow>
 80046f0:	fff00000 	.word	0xfff00000
 80046f4:	7ff00000 	.word	0x7ff00000
 80046f8:	433fffff 	.word	0x433fffff
 80046fc:	3ff00000 	.word	0x3ff00000
 8004700:	3fefffff 	.word	0x3fefffff
 8004704:	3fe00000 	.word	0x3fe00000
 8004708:	41e00000 	.word	0x41e00000
 800470c:	4661      	mov	r1, ip
 800470e:	2200      	movs	r2, #0
 8004710:	4658      	mov	r0, fp
 8004712:	4b5f      	ldr	r3, [pc, #380]	; (8004890 <__ieee754_pow+0x3d0>)
 8004714:	f7fb fd94 	bl	8000240 <__aeabi_dsub>
 8004718:	a355      	add	r3, pc, #340	; (adr r3, 8004870 <__ieee754_pow+0x3b0>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	4604      	mov	r4, r0
 8004720:	460d      	mov	r5, r1
 8004722:	f7fb ff45 	bl	80005b0 <__aeabi_dmul>
 8004726:	a354      	add	r3, pc, #336	; (adr r3, 8004878 <__ieee754_pow+0x3b8>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	4606      	mov	r6, r0
 800472e:	460f      	mov	r7, r1
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb ff3c 	bl	80005b0 <__aeabi_dmul>
 8004738:	2200      	movs	r2, #0
 800473a:	4682      	mov	sl, r0
 800473c:	468b      	mov	fp, r1
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	4b54      	ldr	r3, [pc, #336]	; (8004894 <__ieee754_pow+0x3d4>)
 8004744:	f7fb ff34 	bl	80005b0 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	a14c      	add	r1, pc, #304	; (adr r1, 8004880 <__ieee754_pow+0x3c0>)
 800474e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004752:	f7fb fd75 	bl	8000240 <__aeabi_dsub>
 8004756:	4622      	mov	r2, r4
 8004758:	462b      	mov	r3, r5
 800475a:	f7fb ff29 	bl	80005b0 <__aeabi_dmul>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	2000      	movs	r0, #0
 8004764:	494c      	ldr	r1, [pc, #304]	; (8004898 <__ieee754_pow+0x3d8>)
 8004766:	f7fb fd6b 	bl	8000240 <__aeabi_dsub>
 800476a:	4622      	mov	r2, r4
 800476c:	462b      	mov	r3, r5
 800476e:	4680      	mov	r8, r0
 8004770:	4689      	mov	r9, r1
 8004772:	4620      	mov	r0, r4
 8004774:	4629      	mov	r1, r5
 8004776:	f7fb ff1b 	bl	80005b0 <__aeabi_dmul>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4640      	mov	r0, r8
 8004780:	4649      	mov	r1, r9
 8004782:	f7fb ff15 	bl	80005b0 <__aeabi_dmul>
 8004786:	a340      	add	r3, pc, #256	; (adr r3, 8004888 <__ieee754_pow+0x3c8>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fb ff10 	bl	80005b0 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4650      	mov	r0, sl
 8004796:	4659      	mov	r1, fp
 8004798:	f7fb fd52 	bl	8000240 <__aeabi_dsub>
 800479c:	f04f 0a00 	mov.w	sl, #0
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4604      	mov	r4, r0
 80047a6:	460d      	mov	r5, r1
 80047a8:	4630      	mov	r0, r6
 80047aa:	4639      	mov	r1, r7
 80047ac:	f7fb fd4a 	bl	8000244 <__adddf3>
 80047b0:	4632      	mov	r2, r6
 80047b2:	463b      	mov	r3, r7
 80047b4:	4650      	mov	r0, sl
 80047b6:	468b      	mov	fp, r1
 80047b8:	f7fb fd42 	bl	8000240 <__aeabi_dsub>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	f7fb fd3c 	bl	8000240 <__aeabi_dsub>
 80047c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047cc:	9b00      	ldr	r3, [sp, #0]
 80047ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f04f 0600 	mov.w	r6, #0
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	bf0c      	ite	eq
 80047de:	4b2f      	ldreq	r3, [pc, #188]	; (800489c <__ieee754_pow+0x3dc>)
 80047e0:	4b2b      	ldrne	r3, [pc, #172]	; (8004890 <__ieee754_pow+0x3d0>)
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
 80047e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ea:	e9cd 2300 	strd	r2, r3, [sp]
 80047ee:	4632      	mov	r2, r6
 80047f0:	463b      	mov	r3, r7
 80047f2:	f7fb fd25 	bl	8000240 <__aeabi_dsub>
 80047f6:	4652      	mov	r2, sl
 80047f8:	465b      	mov	r3, fp
 80047fa:	f7fb fed9 	bl	80005b0 <__aeabi_dmul>
 80047fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004802:	4680      	mov	r8, r0
 8004804:	4689      	mov	r9, r1
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fb fed1 	bl	80005b0 <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4640      	mov	r0, r8
 8004814:	4649      	mov	r1, r9
 8004816:	f7fb fd15 	bl	8000244 <__adddf3>
 800481a:	4632      	mov	r2, r6
 800481c:	463b      	mov	r3, r7
 800481e:	4680      	mov	r8, r0
 8004820:	4689      	mov	r9, r1
 8004822:	4650      	mov	r0, sl
 8004824:	4659      	mov	r1, fp
 8004826:	f7fb fec3 	bl	80005b0 <__aeabi_dmul>
 800482a:	4604      	mov	r4, r0
 800482c:	460d      	mov	r5, r1
 800482e:	460b      	mov	r3, r1
 8004830:	4602      	mov	r2, r0
 8004832:	4649      	mov	r1, r9
 8004834:	4640      	mov	r0, r8
 8004836:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800483a:	f7fb fd03 	bl	8000244 <__adddf3>
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <__ieee754_pow+0x3e0>)
 8004840:	4682      	mov	sl, r0
 8004842:	4299      	cmp	r1, r3
 8004844:	460f      	mov	r7, r1
 8004846:	460e      	mov	r6, r1
 8004848:	f340 82e5 	ble.w	8004e16 <__ieee754_pow+0x956>
 800484c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004850:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004854:	4303      	orrs	r3, r0
 8004856:	f000 81df 	beq.w	8004c18 <__ieee754_pow+0x758>
 800485a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	f7fc f917 	bl	8000a94 <__aeabi_dcmplt>
 8004866:	3800      	subs	r0, #0
 8004868:	bf18      	it	ne
 800486a:	2001      	movne	r0, #1
 800486c:	e72e      	b.n	80046cc <__ieee754_pow+0x20c>
 800486e:	bf00      	nop
 8004870:	60000000 	.word	0x60000000
 8004874:	3ff71547 	.word	0x3ff71547
 8004878:	f85ddf44 	.word	0xf85ddf44
 800487c:	3e54ae0b 	.word	0x3e54ae0b
 8004880:	55555555 	.word	0x55555555
 8004884:	3fd55555 	.word	0x3fd55555
 8004888:	652b82fe 	.word	0x652b82fe
 800488c:	3ff71547 	.word	0x3ff71547
 8004890:	3ff00000 	.word	0x3ff00000
 8004894:	3fd00000 	.word	0x3fd00000
 8004898:	3fe00000 	.word	0x3fe00000
 800489c:	bff00000 	.word	0xbff00000
 80048a0:	408fffff 	.word	0x408fffff
 80048a4:	4bd2      	ldr	r3, [pc, #840]	; (8004bf0 <__ieee754_pow+0x730>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	402b      	ands	r3, r5
 80048aa:	b943      	cbnz	r3, 80048be <__ieee754_pow+0x3fe>
 80048ac:	4658      	mov	r0, fp
 80048ae:	4661      	mov	r1, ip
 80048b0:	4bd0      	ldr	r3, [pc, #832]	; (8004bf4 <__ieee754_pow+0x734>)
 80048b2:	f7fb fe7d 	bl	80005b0 <__aeabi_dmul>
 80048b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80048ba:	4683      	mov	fp, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	1523      	asrs	r3, r4, #20
 80048c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80048c4:	4413      	add	r3, r2
 80048c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048c8:	4bcb      	ldr	r3, [pc, #812]	; (8004bf8 <__ieee754_pow+0x738>)
 80048ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80048d2:	429c      	cmp	r4, r3
 80048d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80048d8:	dd08      	ble.n	80048ec <__ieee754_pow+0x42c>
 80048da:	4bc8      	ldr	r3, [pc, #800]	; (8004bfc <__ieee754_pow+0x73c>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	f340 8199 	ble.w	8004c14 <__ieee754_pow+0x754>
 80048e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048e4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80048e8:	3301      	adds	r3, #1
 80048ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ec:	2600      	movs	r6, #0
 80048ee:	00f3      	lsls	r3, r6, #3
 80048f0:	930d      	str	r3, [sp, #52]	; 0x34
 80048f2:	4bc3      	ldr	r3, [pc, #780]	; (8004c00 <__ieee754_pow+0x740>)
 80048f4:	4658      	mov	r0, fp
 80048f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048fe:	4629      	mov	r1, r5
 8004900:	461a      	mov	r2, r3
 8004902:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004906:	4623      	mov	r3, r4
 8004908:	f7fb fc9a 	bl	8000240 <__aeabi_dsub>
 800490c:	46da      	mov	sl, fp
 800490e:	462b      	mov	r3, r5
 8004910:	4652      	mov	r2, sl
 8004912:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800491a:	f7fb fc93 	bl	8000244 <__adddf3>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	2000      	movs	r0, #0
 8004924:	49b7      	ldr	r1, [pc, #732]	; (8004c04 <__ieee754_pow+0x744>)
 8004926:	f7fb ff6d 	bl	8000804 <__aeabi_ddiv>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004932:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004936:	f7fb fe3b 	bl	80005b0 <__aeabi_dmul>
 800493a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800493e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004942:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004946:	2300      	movs	r3, #0
 8004948:	2200      	movs	r2, #0
 800494a:	46ab      	mov	fp, r5
 800494c:	106d      	asrs	r5, r5, #1
 800494e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004958:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800495c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004960:	4640      	mov	r0, r8
 8004962:	4649      	mov	r1, r9
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	f7fb fe22 	bl	80005b0 <__aeabi_dmul>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004974:	f7fb fc64 	bl	8000240 <__aeabi_dsub>
 8004978:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800497c:	4606      	mov	r6, r0
 800497e:	460f      	mov	r7, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb fc5c 	bl	8000240 <__aeabi_dsub>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4650      	mov	r0, sl
 800498e:	4659      	mov	r1, fp
 8004990:	f7fb fc56 	bl	8000240 <__aeabi_dsub>
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	f7fb fe0a 	bl	80005b0 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4630      	mov	r0, r6
 80049a2:	4639      	mov	r1, r7
 80049a4:	f7fb fc4c 	bl	8000240 <__aeabi_dsub>
 80049a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049ac:	f7fb fe00 	bl	80005b0 <__aeabi_dmul>
 80049b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	f7fb fdf8 	bl	80005b0 <__aeabi_dmul>
 80049c0:	a379      	add	r3, pc, #484	; (adr r3, 8004ba8 <__ieee754_pow+0x6e8>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	f7fb fdf1 	bl	80005b0 <__aeabi_dmul>
 80049ce:	a378      	add	r3, pc, #480	; (adr r3, 8004bb0 <__ieee754_pow+0x6f0>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc36 	bl	8000244 <__adddf3>
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	f7fb fde8 	bl	80005b0 <__aeabi_dmul>
 80049e0:	a375      	add	r3, pc, #468	; (adr r3, 8004bb8 <__ieee754_pow+0x6f8>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fc2d 	bl	8000244 <__adddf3>
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f7fb fddf 	bl	80005b0 <__aeabi_dmul>
 80049f2:	a373      	add	r3, pc, #460	; (adr r3, 8004bc0 <__ieee754_pow+0x700>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f7fb fc24 	bl	8000244 <__adddf3>
 80049fc:	4622      	mov	r2, r4
 80049fe:	462b      	mov	r3, r5
 8004a00:	f7fb fdd6 	bl	80005b0 <__aeabi_dmul>
 8004a04:	a370      	add	r3, pc, #448	; (adr r3, 8004bc8 <__ieee754_pow+0x708>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fc1b 	bl	8000244 <__adddf3>
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	f7fb fdcd 	bl	80005b0 <__aeabi_dmul>
 8004a16:	a36e      	add	r3, pc, #440	; (adr r3, 8004bd0 <__ieee754_pow+0x710>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f7fb fc12 	bl	8000244 <__adddf3>
 8004a20:	4622      	mov	r2, r4
 8004a22:	4606      	mov	r6, r0
 8004a24:	460f      	mov	r7, r1
 8004a26:	462b      	mov	r3, r5
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fdc0 	bl	80005b0 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4630      	mov	r0, r6
 8004a36:	4639      	mov	r1, r7
 8004a38:	f7fb fdba 	bl	80005b0 <__aeabi_dmul>
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	460d      	mov	r5, r1
 8004a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	f7fb fbfc 	bl	8000244 <__adddf3>
 8004a4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a50:	f7fb fdae 	bl	80005b0 <__aeabi_dmul>
 8004a54:	4622      	mov	r2, r4
 8004a56:	462b      	mov	r3, r5
 8004a58:	f7fb fbf4 	bl	8000244 <__adddf3>
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	4606      	mov	r6, r0
 8004a60:	460f      	mov	r7, r1
 8004a62:	464b      	mov	r3, r9
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fb fda2 	bl	80005b0 <__aeabi_dmul>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4b66      	ldr	r3, [pc, #408]	; (8004c08 <__ieee754_pow+0x748>)
 8004a70:	4682      	mov	sl, r0
 8004a72:	468b      	mov	fp, r1
 8004a74:	f7fb fbe6 	bl	8000244 <__adddf3>
 8004a78:	4632      	mov	r2, r6
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	f7fb fbe2 	bl	8000244 <__adddf3>
 8004a80:	2400      	movs	r4, #0
 8004a82:	460d      	mov	r5, r1
 8004a84:	4622      	mov	r2, r4
 8004a86:	460b      	mov	r3, r1
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fb fd90 	bl	80005b0 <__aeabi_dmul>
 8004a90:	2200      	movs	r2, #0
 8004a92:	4680      	mov	r8, r0
 8004a94:	4689      	mov	r9, r1
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <__ieee754_pow+0x748>)
 8004a9c:	f7fb fbd0 	bl	8000240 <__aeabi_dsub>
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	465b      	mov	r3, fp
 8004aa4:	f7fb fbcc 	bl	8000240 <__aeabi_dsub>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4630      	mov	r0, r6
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f7fb fbc6 	bl	8000240 <__aeabi_dsub>
 8004ab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ab8:	f7fb fd7a 	bl	80005b0 <__aeabi_dmul>
 8004abc:	4622      	mov	r2, r4
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460f      	mov	r7, r1
 8004ac2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	f7fb fd72 	bl	80005b0 <__aeabi_dmul>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f7fb fbb6 	bl	8000244 <__adddf3>
 8004ad8:	2400      	movs	r4, #0
 8004ada:	4606      	mov	r6, r0
 8004adc:	460f      	mov	r7, r1
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	f7fb fbad 	bl	8000244 <__adddf3>
 8004aea:	a33b      	add	r3, pc, #236	; (adr r3, 8004bd8 <__ieee754_pow+0x718>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	4620      	mov	r0, r4
 8004af2:	460d      	mov	r5, r1
 8004af4:	f7fb fd5c 	bl	80005b0 <__aeabi_dmul>
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fb9c 	bl	8000240 <__aeabi_dsub>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	4639      	mov	r1, r7
 8004b10:	f7fb fb96 	bl	8000240 <__aeabi_dsub>
 8004b14:	a332      	add	r3, pc, #200	; (adr r3, 8004be0 <__ieee754_pow+0x720>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fd49 	bl	80005b0 <__aeabi_dmul>
 8004b1e:	a332      	add	r3, pc, #200	; (adr r3, 8004be8 <__ieee754_pow+0x728>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	4606      	mov	r6, r0
 8004b26:	460f      	mov	r7, r1
 8004b28:	4620      	mov	r0, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f7fb fd40 	bl	80005b0 <__aeabi_dmul>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4630      	mov	r0, r6
 8004b36:	4639      	mov	r1, r7
 8004b38:	f7fb fb84 	bl	8000244 <__adddf3>
 8004b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b3e:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <__ieee754_pow+0x74c>)
 8004b40:	f04f 0a00 	mov.w	sl, #0
 8004b44:	4413      	add	r3, r2
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f7fb fb7b 	bl	8000244 <__adddf3>
 8004b4e:	4680      	mov	r8, r0
 8004b50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004b52:	4689      	mov	r9, r1
 8004b54:	f7fb fcc2 	bl	80004dc <__aeabi_i2d>
 8004b58:	4604      	mov	r4, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <__ieee754_pow+0x750>)
 8004b60:	4413      	add	r3, r2
 8004b62:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004b66:	4642      	mov	r2, r8
 8004b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	f7fb fb69 	bl	8000244 <__adddf3>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	f7fb fb65 	bl	8000244 <__adddf3>
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	f7fb fb61 	bl	8000244 <__adddf3>
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	4650      	mov	r0, sl
 8004b88:	468b      	mov	fp, r1
 8004b8a:	f7fb fb59 	bl	8000240 <__aeabi_dsub>
 8004b8e:	4632      	mov	r2, r6
 8004b90:	463b      	mov	r3, r7
 8004b92:	f7fb fb55 	bl	8000240 <__aeabi_dsub>
 8004b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b9a:	f7fb fb51 	bl	8000240 <__aeabi_dsub>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	e60d      	b.n	80047c4 <__ieee754_pow+0x304>
 8004ba8:	4a454eef 	.word	0x4a454eef
 8004bac:	3fca7e28 	.word	0x3fca7e28
 8004bb0:	93c9db65 	.word	0x93c9db65
 8004bb4:	3fcd864a 	.word	0x3fcd864a
 8004bb8:	a91d4101 	.word	0xa91d4101
 8004bbc:	3fd17460 	.word	0x3fd17460
 8004bc0:	518f264d 	.word	0x518f264d
 8004bc4:	3fd55555 	.word	0x3fd55555
 8004bc8:	db6fabff 	.word	0xdb6fabff
 8004bcc:	3fdb6db6 	.word	0x3fdb6db6
 8004bd0:	33333303 	.word	0x33333303
 8004bd4:	3fe33333 	.word	0x3fe33333
 8004bd8:	e0000000 	.word	0xe0000000
 8004bdc:	3feec709 	.word	0x3feec709
 8004be0:	dc3a03fd 	.word	0xdc3a03fd
 8004be4:	3feec709 	.word	0x3feec709
 8004be8:	145b01f5 	.word	0x145b01f5
 8004bec:	be3e2fe0 	.word	0xbe3e2fe0
 8004bf0:	7ff00000 	.word	0x7ff00000
 8004bf4:	43400000 	.word	0x43400000
 8004bf8:	0003988e 	.word	0x0003988e
 8004bfc:	000bb679 	.word	0x000bb679
 8004c00:	08006e90 	.word	0x08006e90
 8004c04:	3ff00000 	.word	0x3ff00000
 8004c08:	40080000 	.word	0x40080000
 8004c0c:	08006eb0 	.word	0x08006eb0
 8004c10:	08006ea0 	.word	0x08006ea0
 8004c14:	2601      	movs	r6, #1
 8004c16:	e66a      	b.n	80048ee <__ieee754_pow+0x42e>
 8004c18:	a39d      	add	r3, pc, #628	; (adr r3, 8004e90 <__ieee754_pow+0x9d0>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	4640      	mov	r0, r8
 8004c20:	4649      	mov	r1, r9
 8004c22:	f7fb fb0f 	bl	8000244 <__adddf3>
 8004c26:	4622      	mov	r2, r4
 8004c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	4650      	mov	r0, sl
 8004c30:	4639      	mov	r1, r7
 8004c32:	f7fb fb05 	bl	8000240 <__aeabi_dsub>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c3e:	f7fb ff47 	bl	8000ad0 <__aeabi_dcmpgt>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f47f ae09 	bne.w	800485a <__ieee754_pow+0x39a>
 8004c48:	4aa3      	ldr	r2, [pc, #652]	; (8004ed8 <__ieee754_pow+0xa18>)
 8004c4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f340 8101 	ble.w	8004e56 <__ieee754_pow+0x996>
 8004c54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c58:	2000      	movs	r0, #0
 8004c5a:	151b      	asrs	r3, r3, #20
 8004c5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c60:	fa4a f303 	asr.w	r3, sl, r3
 8004c64:	4433      	add	r3, r6
 8004c66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004c6a:	4f9c      	ldr	r7, [pc, #624]	; (8004edc <__ieee754_pow+0xa1c>)
 8004c6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004c70:	4117      	asrs	r7, r2
 8004c72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004c76:	ea23 0107 	bic.w	r1, r3, r7
 8004c7a:	f1c2 0214 	rsb	r2, r2, #20
 8004c7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004c82:	460b      	mov	r3, r1
 8004c84:	fa4a fa02 	asr.w	sl, sl, r2
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4620      	mov	r0, r4
 8004c90:	bfb8      	it	lt
 8004c92:	f1ca 0a00 	rsblt	sl, sl, #0
 8004c96:	f7fb fad3 	bl	8000240 <__aeabi_dsub>
 8004c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ca2:	2400      	movs	r4, #0
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f7fb facc 	bl	8000244 <__adddf3>
 8004cac:	a37a      	add	r3, pc, #488	; (adr r3, 8004e98 <__ieee754_pow+0x9d8>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	f7fb fc7b 	bl	80005b0 <__aeabi_dmul>
 8004cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460f      	mov	r7, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb fabb 	bl	8000240 <__aeabi_dsub>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4640      	mov	r0, r8
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	f7fb fab5 	bl	8000240 <__aeabi_dsub>
 8004cd6:	a372      	add	r3, pc, #456	; (adr r3, 8004ea0 <__ieee754_pow+0x9e0>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fc68 	bl	80005b0 <__aeabi_dmul>
 8004ce0:	a371      	add	r3, pc, #452	; (adr r3, 8004ea8 <__ieee754_pow+0x9e8>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	4680      	mov	r8, r0
 8004ce8:	4689      	mov	r9, r1
 8004cea:	4620      	mov	r0, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7fb fc5f 	bl	80005b0 <__aeabi_dmul>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	f7fb faa3 	bl	8000244 <__adddf3>
 8004cfe:	4604      	mov	r4, r0
 8004d00:	460d      	mov	r5, r1
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	f7fb fa9b 	bl	8000244 <__adddf3>
 8004d0e:	4632      	mov	r2, r6
 8004d10:	463b      	mov	r3, r7
 8004d12:	4680      	mov	r8, r0
 8004d14:	4689      	mov	r9, r1
 8004d16:	f7fb fa93 	bl	8000240 <__aeabi_dsub>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4620      	mov	r0, r4
 8004d20:	4629      	mov	r1, r5
 8004d22:	f7fb fa8d 	bl	8000240 <__aeabi_dsub>
 8004d26:	4642      	mov	r2, r8
 8004d28:	4606      	mov	r6, r0
 8004d2a:	460f      	mov	r7, r1
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4649      	mov	r1, r9
 8004d32:	f7fb fc3d 	bl	80005b0 <__aeabi_dmul>
 8004d36:	a35e      	add	r3, pc, #376	; (adr r3, 8004eb0 <__ieee754_pow+0x9f0>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	460d      	mov	r5, r1
 8004d40:	f7fb fc36 	bl	80005b0 <__aeabi_dmul>
 8004d44:	a35c      	add	r3, pc, #368	; (adr r3, 8004eb8 <__ieee754_pow+0x9f8>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fa79 	bl	8000240 <__aeabi_dsub>
 8004d4e:	4622      	mov	r2, r4
 8004d50:	462b      	mov	r3, r5
 8004d52:	f7fb fc2d 	bl	80005b0 <__aeabi_dmul>
 8004d56:	a35a      	add	r3, pc, #360	; (adr r3, 8004ec0 <__ieee754_pow+0xa00>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f7fb fa72 	bl	8000244 <__adddf3>
 8004d60:	4622      	mov	r2, r4
 8004d62:	462b      	mov	r3, r5
 8004d64:	f7fb fc24 	bl	80005b0 <__aeabi_dmul>
 8004d68:	a357      	add	r3, pc, #348	; (adr r3, 8004ec8 <__ieee754_pow+0xa08>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fa67 	bl	8000240 <__aeabi_dsub>
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	f7fb fc1b 	bl	80005b0 <__aeabi_dmul>
 8004d7a:	a355      	add	r3, pc, #340	; (adr r3, 8004ed0 <__ieee754_pow+0xa10>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fa60 	bl	8000244 <__adddf3>
 8004d84:	4622      	mov	r2, r4
 8004d86:	462b      	mov	r3, r5
 8004d88:	f7fb fc12 	bl	80005b0 <__aeabi_dmul>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4640      	mov	r0, r8
 8004d92:	4649      	mov	r1, r9
 8004d94:	f7fb fa54 	bl	8000240 <__aeabi_dsub>
 8004d98:	4604      	mov	r4, r0
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7fb fc04 	bl	80005b0 <__aeabi_dmul>
 8004da8:	2200      	movs	r2, #0
 8004daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004db2:	4620      	mov	r0, r4
 8004db4:	4629      	mov	r1, r5
 8004db6:	f7fb fa43 	bl	8000240 <__aeabi_dsub>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc2:	f7fb fd1f 	bl	8000804 <__aeabi_ddiv>
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	4604      	mov	r4, r0
 8004dca:	460d      	mov	r5, r1
 8004dcc:	463b      	mov	r3, r7
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	f7fb fbed 	bl	80005b0 <__aeabi_dmul>
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	463b      	mov	r3, r7
 8004dda:	f7fb fa33 	bl	8000244 <__adddf3>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb fa2b 	bl	8000240 <__aeabi_dsub>
 8004dea:	4642      	mov	r2, r8
 8004dec:	464b      	mov	r3, r9
 8004dee:	f7fb fa27 	bl	8000240 <__aeabi_dsub>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	2000      	movs	r0, #0
 8004df8:	4939      	ldr	r1, [pc, #228]	; (8004ee0 <__ieee754_pow+0xa20>)
 8004dfa:	f7fb fa21 	bl	8000240 <__aeabi_dsub>
 8004dfe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004e02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004e06:	da29      	bge.n	8004e5c <__ieee754_pow+0x99c>
 8004e08:	4652      	mov	r2, sl
 8004e0a:	f000 f955 	bl	80050b8 <scalbn>
 8004e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e12:	f7ff bbfe 	b.w	8004612 <__ieee754_pow+0x152>
 8004e16:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <__ieee754_pow+0xa24>)
 8004e18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004e1c:	429f      	cmp	r7, r3
 8004e1e:	f77f af13 	ble.w	8004c48 <__ieee754_pow+0x788>
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <__ieee754_pow+0xa28>)
 8004e24:	440b      	add	r3, r1
 8004e26:	4303      	orrs	r3, r0
 8004e28:	d009      	beq.n	8004e3e <__ieee754_pow+0x97e>
 8004e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2300      	movs	r3, #0
 8004e32:	f7fb fe2f 	bl	8000a94 <__aeabi_dcmplt>
 8004e36:	3800      	subs	r0, #0
 8004e38:	bf18      	it	ne
 8004e3a:	2001      	movne	r0, #1
 8004e3c:	e453      	b.n	80046e6 <__ieee754_pow+0x226>
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	f7fb f9fd 	bl	8000240 <__aeabi_dsub>
 8004e46:	4642      	mov	r2, r8
 8004e48:	464b      	mov	r3, r9
 8004e4a:	f7fb fe37 	bl	8000abc <__aeabi_dcmpge>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f43f aefa 	beq.w	8004c48 <__ieee754_pow+0x788>
 8004e54:	e7e9      	b.n	8004e2a <__ieee754_pow+0x96a>
 8004e56:	f04f 0a00 	mov.w	sl, #0
 8004e5a:	e720      	b.n	8004c9e <__ieee754_pow+0x7de>
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	e7d6      	b.n	8004e0e <__ieee754_pow+0x94e>
 8004e60:	f04f 0b00 	mov.w	fp, #0
 8004e64:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004ee0 <__ieee754_pow+0xa20>
 8004e68:	f7ff bbba 	b.w	80045e0 <__ieee754_pow+0x120>
 8004e6c:	f04f 0b00 	mov.w	fp, #0
 8004e70:	f04f 0c00 	mov.w	ip, #0
 8004e74:	f7ff bbb4 	b.w	80045e0 <__ieee754_pow+0x120>
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7ff bb3d 	b.w	80044fa <__ieee754_pow+0x3a>
 8004e80:	9200      	str	r2, [sp, #0]
 8004e82:	f7ff bb89 	b.w	8004598 <__ieee754_pow+0xd8>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f7ff bb73 	b.w	8004572 <__ieee754_pow+0xb2>
 8004e8c:	f3af 8000 	nop.w
 8004e90:	652b82fe 	.word	0x652b82fe
 8004e94:	3c971547 	.word	0x3c971547
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	3fe62e43 	.word	0x3fe62e43
 8004ea0:	fefa39ef 	.word	0xfefa39ef
 8004ea4:	3fe62e42 	.word	0x3fe62e42
 8004ea8:	0ca86c39 	.word	0x0ca86c39
 8004eac:	be205c61 	.word	0xbe205c61
 8004eb0:	72bea4d0 	.word	0x72bea4d0
 8004eb4:	3e663769 	.word	0x3e663769
 8004eb8:	c5d26bf1 	.word	0xc5d26bf1
 8004ebc:	3ebbbd41 	.word	0x3ebbbd41
 8004ec0:	af25de2c 	.word	0xaf25de2c
 8004ec4:	3f11566a 	.word	0x3f11566a
 8004ec8:	16bebd93 	.word	0x16bebd93
 8004ecc:	3f66c16c 	.word	0x3f66c16c
 8004ed0:	5555553e 	.word	0x5555553e
 8004ed4:	3fc55555 	.word	0x3fc55555
 8004ed8:	3fe00000 	.word	0x3fe00000
 8004edc:	000fffff 	.word	0x000fffff
 8004ee0:	3ff00000 	.word	0x3ff00000
 8004ee4:	4090cbff 	.word	0x4090cbff
 8004ee8:	3f6f3400 	.word	0x3f6f3400

08004eec <__ieee754_sqrt>:
 8004eec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005048 <__ieee754_sqrt+0x15c>
 8004ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef4:	ea3c 0c01 	bics.w	ip, ip, r1
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460d      	mov	r5, r1
 8004efc:	460c      	mov	r4, r1
 8004efe:	460a      	mov	r2, r1
 8004f00:	4607      	mov	r7, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	d10f      	bne.n	8004f26 <__ieee754_sqrt+0x3a>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	f7fb fb51 	bl	80005b0 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4630      	mov	r0, r6
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7fb f995 	bl	8000244 <__adddf3>
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	460d      	mov	r5, r1
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4629      	mov	r1, r5
 8004f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f26:	2900      	cmp	r1, #0
 8004f28:	dc0e      	bgt.n	8004f48 <__ieee754_sqrt+0x5c>
 8004f2a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004f2e:	ea5c 0707 	orrs.w	r7, ip, r7
 8004f32:	d0f4      	beq.n	8004f1e <__ieee754_sqrt+0x32>
 8004f34:	b141      	cbz	r1, 8004f48 <__ieee754_sqrt+0x5c>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	f7fb f981 	bl	8000240 <__aeabi_dsub>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	f7fb fc5f 	bl	8000804 <__aeabi_ddiv>
 8004f46:	e7e8      	b.n	8004f1a <__ieee754_sqrt+0x2e>
 8004f48:	1521      	asrs	r1, r4, #20
 8004f4a:	d075      	beq.n	8005038 <__ieee754_sqrt+0x14c>
 8004f4c:	07cc      	lsls	r4, r1, #31
 8004f4e:	f04f 0400 	mov.w	r4, #0
 8004f52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004f56:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004f5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f5e:	bf5e      	ittt	pl
 8004f60:	0fd9      	lsrpl	r1, r3, #31
 8004f62:	005b      	lslpl	r3, r3, #1
 8004f64:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004f68:	0fd9      	lsrs	r1, r3, #31
 8004f6a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004f6e:	2516      	movs	r5, #22
 8004f70:	4620      	mov	r0, r4
 8004f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f76:	107f      	asrs	r7, r7, #1
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	1846      	adds	r6, r0, r1
 8004f7c:	4296      	cmp	r6, r2
 8004f7e:	bfde      	ittt	le
 8004f80:	1b92      	suble	r2, r2, r6
 8004f82:	1870      	addle	r0, r6, r1
 8004f84:	1864      	addle	r4, r4, r1
 8004f86:	0052      	lsls	r2, r2, #1
 8004f88:	3d01      	subs	r5, #1
 8004f8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004f8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004f92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004f96:	d1f0      	bne.n	8004f7a <__ieee754_sqrt+0x8e>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f04f 0e20 	mov.w	lr, #32
 8004f9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004fa2:	4282      	cmp	r2, r0
 8004fa4:	eb06 0c05 	add.w	ip, r6, r5
 8004fa8:	dc02      	bgt.n	8004fb0 <__ieee754_sqrt+0xc4>
 8004faa:	d113      	bne.n	8004fd4 <__ieee754_sqrt+0xe8>
 8004fac:	459c      	cmp	ip, r3
 8004fae:	d811      	bhi.n	8004fd4 <__ieee754_sqrt+0xe8>
 8004fb0:	f1bc 0f00 	cmp.w	ip, #0
 8004fb4:	eb0c 0506 	add.w	r5, ip, r6
 8004fb8:	da43      	bge.n	8005042 <__ieee754_sqrt+0x156>
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	db41      	blt.n	8005042 <__ieee754_sqrt+0x156>
 8004fbe:	f100 0801 	add.w	r8, r0, #1
 8004fc2:	1a12      	subs	r2, r2, r0
 8004fc4:	4640      	mov	r0, r8
 8004fc6:	459c      	cmp	ip, r3
 8004fc8:	bf88      	it	hi
 8004fca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004fce:	eba3 030c 	sub.w	r3, r3, ip
 8004fd2:	4431      	add	r1, r6
 8004fd4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004fd8:	f1be 0e01 	subs.w	lr, lr, #1
 8004fdc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004fe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fe4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004fe8:	d1db      	bne.n	8004fa2 <__ieee754_sqrt+0xb6>
 8004fea:	4313      	orrs	r3, r2
 8004fec:	d006      	beq.n	8004ffc <__ieee754_sqrt+0x110>
 8004fee:	1c48      	adds	r0, r1, #1
 8004ff0:	bf0b      	itete	eq
 8004ff2:	4671      	moveq	r1, lr
 8004ff4:	3101      	addne	r1, #1
 8004ff6:	3401      	addeq	r4, #1
 8004ff8:	f021 0101 	bicne.w	r1, r1, #1
 8004ffc:	1063      	asrs	r3, r4, #1
 8004ffe:	0849      	lsrs	r1, r1, #1
 8005000:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005004:	07e2      	lsls	r2, r4, #31
 8005006:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800500a:	bf48      	it	mi
 800500c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005010:	460e      	mov	r6, r1
 8005012:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005016:	e782      	b.n	8004f1e <__ieee754_sqrt+0x32>
 8005018:	0ada      	lsrs	r2, r3, #11
 800501a:	3815      	subs	r0, #21
 800501c:	055b      	lsls	r3, r3, #21
 800501e:	2a00      	cmp	r2, #0
 8005020:	d0fa      	beq.n	8005018 <__ieee754_sqrt+0x12c>
 8005022:	02d5      	lsls	r5, r2, #11
 8005024:	d50a      	bpl.n	800503c <__ieee754_sqrt+0x150>
 8005026:	f1c1 0420 	rsb	r4, r1, #32
 800502a:	fa23 f404 	lsr.w	r4, r3, r4
 800502e:	1e4d      	subs	r5, r1, #1
 8005030:	408b      	lsls	r3, r1
 8005032:	4322      	orrs	r2, r4
 8005034:	1b41      	subs	r1, r0, r5
 8005036:	e789      	b.n	8004f4c <__ieee754_sqrt+0x60>
 8005038:	4608      	mov	r0, r1
 800503a:	e7f0      	b.n	800501e <__ieee754_sqrt+0x132>
 800503c:	0052      	lsls	r2, r2, #1
 800503e:	3101      	adds	r1, #1
 8005040:	e7ef      	b.n	8005022 <__ieee754_sqrt+0x136>
 8005042:	4680      	mov	r8, r0
 8005044:	e7bd      	b.n	8004fc2 <__ieee754_sqrt+0xd6>
 8005046:	bf00      	nop
 8005048:	7ff00000 	.word	0x7ff00000

0800504c <with_errno>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	4616      	mov	r6, r2
 8005054:	f7fe fd20 	bl	8003a98 <__errno>
 8005058:	4629      	mov	r1, r5
 800505a:	6006      	str	r6, [r0, #0]
 800505c:	4620      	mov	r0, r4
 800505e:	bd70      	pop	{r4, r5, r6, pc}

08005060 <xflow>:
 8005060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005062:	4615      	mov	r5, r2
 8005064:	461c      	mov	r4, r3
 8005066:	b180      	cbz	r0, 800508a <xflow+0x2a>
 8005068:	4610      	mov	r0, r2
 800506a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800506e:	e9cd 0100 	strd	r0, r1, [sp]
 8005072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005076:	4628      	mov	r0, r5
 8005078:	4621      	mov	r1, r4
 800507a:	f7fb fa99 	bl	80005b0 <__aeabi_dmul>
 800507e:	2222      	movs	r2, #34	; 0x22
 8005080:	b003      	add	sp, #12
 8005082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005086:	f7ff bfe1 	b.w	800504c <with_errno>
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	e7ee      	b.n	800506e <xflow+0xe>

08005090 <__math_uflow>:
 8005090:	2200      	movs	r2, #0
 8005092:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005096:	f7ff bfe3 	b.w	8005060 <xflow>

0800509a <__math_oflow>:
 800509a:	2200      	movs	r2, #0
 800509c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050a0:	f7ff bfde 	b.w	8005060 <xflow>

080050a4 <fabs>:
 80050a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80050a8:	4770      	bx	lr

080050aa <finite>:
 80050aa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80050ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80050b2:	0fc0      	lsrs	r0, r0, #31
 80050b4:	4770      	bx	lr
	...

080050b8 <scalbn>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80050be:	4604      	mov	r4, r0
 80050c0:	460d      	mov	r5, r1
 80050c2:	4617      	mov	r7, r2
 80050c4:	460b      	mov	r3, r1
 80050c6:	b996      	cbnz	r6, 80050ee <scalbn+0x36>
 80050c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050cc:	4303      	orrs	r3, r0
 80050ce:	d039      	beq.n	8005144 <scalbn+0x8c>
 80050d0:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <scalbn+0xe8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	f7fb fa6c 	bl	80005b0 <__aeabi_dmul>
 80050d8:	4b32      	ldr	r3, [pc, #200]	; (80051a4 <scalbn+0xec>)
 80050da:	4604      	mov	r4, r0
 80050dc:	429f      	cmp	r7, r3
 80050de:	460d      	mov	r5, r1
 80050e0:	da0f      	bge.n	8005102 <scalbn+0x4a>
 80050e2:	a32b      	add	r3, pc, #172	; (adr r3, 8005190 <scalbn+0xd8>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f7fb fa62 	bl	80005b0 <__aeabi_dmul>
 80050ec:	e006      	b.n	80050fc <scalbn+0x44>
 80050ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050f2:	4296      	cmp	r6, r2
 80050f4:	d10a      	bne.n	800510c <scalbn+0x54>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f7fb f8a4 	bl	8000244 <__adddf3>
 80050fc:	4604      	mov	r4, r0
 80050fe:	460d      	mov	r5, r1
 8005100:	e020      	b.n	8005144 <scalbn+0x8c>
 8005102:	460b      	mov	r3, r1
 8005104:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005108:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800510c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005110:	19b9      	adds	r1, r7, r6
 8005112:	4291      	cmp	r1, r2
 8005114:	dd0e      	ble.n	8005134 <scalbn+0x7c>
 8005116:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800511a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800511e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005122:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005126:	4820      	ldr	r0, [pc, #128]	; (80051a8 <scalbn+0xf0>)
 8005128:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800512c:	a31a      	add	r3, pc, #104	; (adr r3, 8005198 <scalbn+0xe0>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	e7d9      	b.n	80050e8 <scalbn+0x30>
 8005134:	2900      	cmp	r1, #0
 8005136:	dd08      	ble.n	800514a <scalbn+0x92>
 8005138:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800513c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005140:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
 8005148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800514e:	da12      	bge.n	8005176 <scalbn+0xbe>
 8005150:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005154:	429f      	cmp	r7, r3
 8005156:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800515a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800515e:	dcdc      	bgt.n	800511a <scalbn+0x62>
 8005160:	a30b      	add	r3, pc, #44	; (adr r3, 8005190 <scalbn+0xd8>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800516a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800516e:	480f      	ldr	r0, [pc, #60]	; (80051ac <scalbn+0xf4>)
 8005170:	f041 011f 	orr.w	r1, r1, #31
 8005174:	e7b8      	b.n	80050e8 <scalbn+0x30>
 8005176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800517a:	3136      	adds	r1, #54	; 0x36
 800517c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005180:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	2200      	movs	r2, #0
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <scalbn+0xf8>)
 800518c:	e7ac      	b.n	80050e8 <scalbn+0x30>
 800518e:	bf00      	nop
 8005190:	c2f8f359 	.word	0xc2f8f359
 8005194:	01a56e1f 	.word	0x01a56e1f
 8005198:	8800759c 	.word	0x8800759c
 800519c:	7e37e43c 	.word	0x7e37e43c
 80051a0:	43500000 	.word	0x43500000
 80051a4:	ffff3cb0 	.word	0xffff3cb0
 80051a8:	8800759c 	.word	0x8800759c
 80051ac:	c2f8f359 	.word	0xc2f8f359
 80051b0:	3c900000 	.word	0x3c900000

080051b4 <_init>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr

080051c0 <_fini>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	bf00      	nop
 80051c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c6:	bc08      	pop	{r3}
 80051c8:	469e      	mov	lr, r3
 80051ca:	4770      	bx	lr
