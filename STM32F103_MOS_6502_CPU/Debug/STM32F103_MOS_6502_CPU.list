
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb8  080047f8  080047f8  000147f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b0  080064b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080064b0  080064b0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064b0  080064b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080064b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080dc  20000090  08006548  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000816c  08006548  0002816c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118d4  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002437  00000000  00000000  0003198d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000082b3  00000000  00000000  00033dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0003c078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e09  00000000  00000000  0003dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2e6  00000000  00000000  00057b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094905  00000000  00000000  00066e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fb734  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f88  00000000  00000000  000fb784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000090 	.word	0x20000090
 8000204:	00000000 	.word	0x00000000
 8000208:	080047dc 	.word	0x080047dc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000094 	.word	0x20000094
 8000224:	080047dc 	.word	0x080047dc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <Delay>:
	LCD_CURSOR_X = 0;
	// Draw the new cursor
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
}

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b50:	b082      	sub	sp, #8
 8000b52:	9001      	str	r0, [sp, #4]
 8000b54:	9b01      	ldr	r3, [sp, #4]
 8000b56:	b90b      	cbnz	r3, 8000b5c <Delay+0xc>
 8000b58:	b002      	add	sp, #8
 8000b5a:	4770      	bx	lr
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	e7f7      	b.n	8000b54 <Delay+0x4>

08000b64 <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000b64:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b66:	4d0a      	ldr	r5, [pc, #40]	; (8000b90 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	f002 fab2 	bl	80030d8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff ffeb 	bl	8000b50 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	2102      	movs	r1, #2
 8000b80:	f002 faaa 	bl	80030d8 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000b84:	4620      	mov	r0, r4
}
 8000b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 8000b8a:	f7ff bfe1 	b.w	8000b50 <Delay>
 8000b8e:	bf00      	nop
 8000b90:	40011800 	.word	0x40011800
 8000b94:	0002bffc 	.word	0x0002bffc

08000b98 <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b98:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b9c:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2081      	movs	r0, #129	; 0x81
 8000ba6:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ba8:	24ed      	movs	r4, #237	; 0xed
 8000baa:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bac:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <LCD_REG_Config+0x188>)
 8000bae:	f04f 0c03 	mov.w	ip, #3
 8000bb2:	8019      	strh	r1, [r3, #0]
 8000bb4:	8018      	strh	r0, [r3, #0]
 8000bb6:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bb8:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bba:	2464      	movs	r4, #100	; 0x64
 8000bbc:	801c      	strh	r4, [r3, #0]
 8000bbe:	2412      	movs	r4, #18
 8000bc0:	f8a3 c000 	strh.w	ip, [r3]
 8000bc4:	801c      	strh	r4, [r3, #0]
 8000bc6:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bc8:	20e8      	movs	r0, #232	; 0xe8
 8000bca:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bcc:	2085      	movs	r0, #133	; 0x85
 8000bce:	f04f 0810 	mov.w	r8, #16
 8000bd2:	8018      	strh	r0, [r3, #0]
 8000bd4:	2078      	movs	r0, #120	; 0x78
 8000bd6:	f8a3 8000 	strh.w	r8, [r3]
 8000bda:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bdc:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bde:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000be2:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000be4:	202c      	movs	r0, #44	; 0x2c
 8000be6:	f8a3 e000 	strh.w	lr, [r3]
 8000bea:	8018      	strh	r0, [r3, #0]
 8000bec:	2034      	movs	r0, #52	; 0x34
 8000bee:	8019      	strh	r1, [r3, #0]
 8000bf0:	8018      	strh	r0, [r3, #0]
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bf6:	20f7      	movs	r0, #247	; 0xf7
 8000bf8:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bfe:	20ea      	movs	r0, #234	; 0xea
 8000c00:	8010      	strh	r0, [r2, #0]
 8000c02:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c04:	8019      	strh	r1, [r3, #0]
 8000c06:	f04f 091b 	mov.w	r9, #27
 8000c0a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c0c:	8010      	strh	r0, [r2, #0]
 8000c0e:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c10:	8019      	strh	r1, [r3, #0]
 8000c12:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c16:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c18:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c1a:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c1c:	8018      	strh	r0, [r3, #0]
 8000c1e:	20a2      	movs	r0, #162	; 0xa2
 8000c20:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c22:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c24:	2435      	movs	r4, #53	; 0x35
 8000c26:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c28:	24c1      	movs	r4, #193	; 0xc1
 8000c2a:	25c5      	movs	r5, #197	; 0xc5
 8000c2c:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c2e:	2411      	movs	r4, #17
 8000c30:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c32:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c34:	2545      	movs	r5, #69	; 0x45
 8000c36:	801d      	strh	r5, [r3, #0]
 8000c38:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c3a:	25c7      	movs	r5, #199	; 0xc7
 8000c3c:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c3e:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c40:	20f2      	movs	r0, #242	; 0xf2
 8000c42:	2626      	movs	r6, #38	; 0x26
 8000c44:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c46:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c48:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c4a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c4c:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c4e:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c50:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c52:	200f      	movs	r0, #15
 8000c54:	8018      	strh	r0, [r3, #0]
 8000c56:	801e      	strh	r6, [r3, #0]
 8000c58:	2624      	movs	r6, #36	; 0x24
 8000c5a:	801e      	strh	r6, [r3, #0]
 8000c5c:	260b      	movs	r6, #11
 8000c5e:	801e      	strh	r6, [r3, #0]
 8000c60:	260e      	movs	r6, #14
 8000c62:	f04f 0a54 	mov.w	sl, #84	; 0x54
 8000c66:	801e      	strh	r6, [r3, #0]
 8000c68:	2609      	movs	r6, #9
 8000c6a:	801e      	strh	r6, [r3, #0]
 8000c6c:	f8a3 a000 	strh.w	sl, [r3]
 8000c70:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000c74:	f8a3 a000 	strh.w	sl, [r3]
 8000c78:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000c7c:	f8a3 a000 	strh.w	sl, [r3]
 8000c80:	f04f 0a0c 	mov.w	sl, #12
 8000c84:	f8a3 a000 	strh.w	sl, [r3]
 8000c88:	f04f 0a17 	mov.w	sl, #23
 8000c8c:	f8a3 a000 	strh.w	sl, [r3]
 8000c90:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c92:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c96:	2607      	movs	r6, #7
 8000c98:	8018      	strh	r0, [r3, #0]
 8000c9a:	801e      	strh	r6, [r3, #0]
 8000c9c:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c9e:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ca2:	f04f 0a19 	mov.w	sl, #25
 8000ca6:	8019      	strh	r1, [r3, #0]
 8000ca8:	f8a3 a000 	strh.w	sl, [r3]
 8000cac:	f8a3 9000 	strh.w	r9, [r3]
 8000cb0:	f04f 0904 	mov.w	r9, #4
 8000cb4:	f8a3 9000 	strh.w	r9, [r3]
 8000cb8:	f8a3 8000 	strh.w	r8, [r3]
 8000cbc:	801e      	strh	r6, [r3, #0]
 8000cbe:	f04f 0847 	mov.w	r8, #71	; 0x47
 8000cc2:	262a      	movs	r6, #42	; 0x2a
 8000cc4:	801e      	strh	r6, [r3, #0]
 8000cc6:	f8a3 8000 	strh.w	r8, [r3]
 8000cca:	f8a3 e000 	strh.w	lr, [r3]
 8000cce:	f8a3 c000 	strh.w	ip, [r3]
 8000cd2:	f04f 0c06 	mov.w	ip, #6
 8000cd6:	f8a3 c000 	strh.w	ip, [r3]
 8000cda:	f8a3 c000 	strh.w	ip, [r3]
 8000cde:	801f      	strh	r7, [r3, #0]
 8000ce0:	2738      	movs	r7, #56	; 0x38
 8000ce2:	801f      	strh	r7, [r3, #0]
 8000ce4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ce6:	2036      	movs	r0, #54	; 0x36
 8000ce8:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cea:	2068      	movs	r0, #104	; 0x68
 8000cec:	8018      	strh	r0, [r3, #0]
 8000cee:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cf0:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cf2:	8019      	strh	r1, [r3, #0]
 8000cf4:	8019      	strh	r1, [r3, #0]
 8000cf6:	8019      	strh	r1, [r3, #0]
 8000cf8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cfa:	202b      	movs	r0, #43	; 0x2b
 8000cfc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cfe:	8019      	strh	r1, [r3, #0]
 8000d00:	8019      	strh	r1, [r3, #0]
 8000d02:	213f      	movs	r1, #63	; 0x3f
 8000d04:	801d      	strh	r5, [r3, #0]
 8000d06:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d08:	213a      	movs	r1, #58	; 0x3a
 8000d0a:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d0c:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d10:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d12:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 8000d14:	f7ff ff1c 	bl	8000b50 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d18:	2329      	movs	r3, #41	; 0x29
 8000d1a:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d20:	60020000 	.word	0x60020000
 8000d24:	0002bffc 	.word	0x0002bffc

08000d28 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000d28:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d2a:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000d2e:	242a      	movs	r4, #42	; 0x2a
 8000d30:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d32:	4c0f      	ldr	r4, [pc, #60]	; (8000d70 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000d34:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d36:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000d38:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d3a:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d3c:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d42:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d44:	3d01      	subs	r5, #1
 8000d46:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d4a:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d4c:	8025      	strh	r5, [r4, #0]
 8000d4e:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d50:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8000d52:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d54:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 8000d56:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d58:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d5a:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d5c:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d5e:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d60:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d62:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d66:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d68:	8022      	strh	r2, [r4, #0]
 8000d6a:	8021      	strh	r1, [r4, #0]
	
}
 8000d6c:	bd70      	pop	{r4, r5, r6, pc}
 8000d6e:	bf00      	nop
 8000d70:	60020000 	.word	0x60020000

08000d74 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d74:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d78:	222c      	movs	r2, #44	; 0x2c
 8000d7a:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000d7c:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000d80:	4283      	cmp	r3, r0
 8000d82:	d100      	bne.n	8000d86 <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 8000d84:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d86:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000d88:	3301      	adds	r3, #1
 8000d8a:	e7f9      	b.n	8000d80 <LCD_FillColor+0xc>
 8000d8c:	60020000 	.word	0x60020000

08000d90 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4614      	mov	r4, r2
 8000d94:	461d      	mov	r5, r3
 8000d96:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000d9a:	f7ff ffc5 	bl	8000d28 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000d9e:	4631      	mov	r1, r6
 8000da0:	fb05 f004 	mul.w	r0, r5, r4
	
}
 8000da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000da8:	f7ff bfe4 	b.w	8000d74 <LCD_FillColor>

08000dac <LCD_INIT>:
{
 8000dac:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <LCD_INIT+0x2c>)
 8000db6:	f002 f98f 	bl	80030d8 <HAL_GPIO_WritePin>
	LCD_Rst();
 8000dba:	f7ff fed3 	bl	8000b64 <LCD_Rst>
	LCD_REG_Config();
 8000dbe:	f7ff feeb 	bl	8000b98 <LCD_REG_Config>
	LCD_Clear (0, 0, 320, 240, BACKGROUND);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	23f0      	movs	r3, #240	; 0xf0
 8000dc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dca:	4608      	mov	r0, r1
 8000dcc:	9100      	str	r1, [sp, #0]
 8000dce:	f7ff ffdf 	bl	8000d90 <LCD_Clear>
}
 8000dd2:	b003      	add	sp, #12
 8000dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd8:	40011400 	.word	0x40011400

08000ddc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar;
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000dde:	230a      	movs	r3, #10
{
 8000de0:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000de2:	2208      	movs	r2, #8
 8000de4:	f7ff ffa0 	bl	8000d28 <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000de8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000dec:	222c      	movs	r2, #44	; 0x2c
 8000dee:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000df0:	230a      	movs	r3, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000df2:	f44f 65fd 	mov.w	r5, #2024	; 0x7e8
 8000df6:	490c      	ldr	r1, [pc, #48]	; (8000e28 <LCD_DrawChar+0x4c>)
 8000df8:	fb03 1104 	mla	r1, r3, r4, r1
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LCD_DrawChar+0x50>)
	{
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 8000dfe:	2208      	movs	r2, #8
 8000e00:	f811 0b01 	ldrb.w	r0, [r1], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 8000e04:	f010 0601 	ands.w	r6, r0, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e08:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e0c:	bf14      	ite	ne
 8000e0e:	8025      	strhne	r5, [r4, #0]
 8000e10:	8026      	strheq	r6, [r4, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e12:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x07e8 ); // Matrix Green
			
			else
				LCD_Write_Data (  0x0000 );								
			
			ucTemp >>= 1;		
 8000e16:	ea4f 0050 	mov.w	r0, r0, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e1a:	d1f3      	bne.n	8000e04 <LCD_DrawChar+0x28>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000e22:	d1ec      	bne.n	8000dfe <LCD_DrawChar+0x22>
			
		}
		
	}
	
}
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
 8000e26:	bf00      	nop
 8000e28:	080047f8 	.word	0x080047f8
 8000e2c:	60020000 	.word	0x60020000

08000e30 <LCD_CursorForward>:
	LCD_CURSOR_X %= 40;
 8000e30:	2228      	movs	r2, #40	; 0x28
	++LCD_CURSOR_X;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <LCD_CursorForward+0x28>)
 8000e34:	7818      	ldrb	r0, [r3, #0]
 8000e36:	3001      	adds	r0, #1
	LCD_CURSOR_X %= 40;
 8000e38:	b2c0      	uxtb	r0, r0
 8000e3a:	fbb0 f1f2 	udiv	r1, r0, r2
 8000e3e:	fb02 0011 	mls	r0, r2, r1, r0
 8000e42:	b2c0      	uxtb	r0, r0
 8000e44:	7018      	strb	r0, [r3, #0]
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LCD_CursorForward+0x2c>)
 8000e48:	22db      	movs	r2, #219	; 0xdb
 8000e4a:	7819      	ldrb	r1, [r3, #0]
 8000e4c:	00c0      	lsls	r0, r0, #3
 8000e4e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	f7ff bfc2 	b.w	8000ddc <LCD_DrawChar>
 8000e58:	200000ac 	.word	0x200000ac
 8000e5c:	200000ad 	.word	0x200000ad

08000e60 <LCD_CursorNewline>:
void LCD_CursorNewline ( void ) {
 8000e60:	b513      	push	{r0, r1, r4, lr}
	if (++LCD_CURSOR_Y > 24) {
 8000e62:	4c0f      	ldr	r4, [pc, #60]	; (8000ea0 <LCD_CursorNewline+0x40>)
 8000e64:	7823      	ldrb	r3, [r4, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b18      	cmp	r3, #24
 8000e6c:	d80d      	bhi.n	8000e8a <LCD_CursorNewline+0x2a>
 8000e6e:	7023      	strb	r3, [r4, #0]
	LCD_CURSOR_X = 0;
 8000e70:	2000      	movs	r0, #0
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e72:	22db      	movs	r2, #219	; 0xdb
 8000e74:	7821      	ldrb	r1, [r4, #0]
	LCD_CURSOR_X = 0;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <LCD_CursorNewline+0x44>)
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000e7c:	0049      	lsls	r1, r1, #1
	LCD_CURSOR_X = 0;
 8000e7e:	7018      	strb	r0, [r3, #0]
}
 8000e80:	b002      	add	sp, #8
 8000e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e86:	f7ff bfa9 	b.w	8000ddc <LCD_DrawChar>
		LCD_CURSOR_Y = 0;
 8000e8a:	2100      	movs	r1, #0
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000e8c:	23f0      	movs	r3, #240	; 0xf0
 8000e8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e92:	4608      	mov	r0, r1
 8000e94:	9100      	str	r1, [sp, #0]
		LCD_CURSOR_Y = 0;
 8000e96:	7021      	strb	r1, [r4, #0]
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000e98:	f7ff ff7a 	bl	8000d90 <LCD_Clear>
 8000e9c:	e7e8      	b.n	8000e70 <LCD_CursorNewline+0x10>
 8000e9e:	bf00      	nop
 8000ea0:	200000ad 	.word	0x200000ad
 8000ea4:	200000ac 	.word	0x200000ac

08000ea8 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4604      	mov	r4, r0
 8000eac:	460d      	mov	r5, r1
 8000eae:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8000eb0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000eb4:	b902      	cbnz	r2, 8000eb8 <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000eb8:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
			usP += HEIGHT_EN_CHAR;
 8000ebc:	bf82      	ittt	hi
 8000ebe:	350a      	addhi	r5, #10
 8000ec0:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 8000ec2:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000ec4:	2de6      	cmp	r5, #230	; 0xe6
			usP = LCD_DispWindow_Start_PAGE;
 8000ec6:	bf84      	itt	hi
 8000ec8:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 8000eca:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 8000ecc:	4629      	mov	r1, r5
 8000ece:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 8000ed0:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 8000ed2:	f7ff ff83 	bl	8000ddc <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	e7ea      	b.n	8000eb0 <LCD_DrawString+0x8>
	...

08000edc <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000ee0:	f7ff f9a2 	bl	8000228 <strlen>
 8000ee4:	4d0e      	ldr	r5, [pc, #56]	; (8000f20 <writelineTerminal+0x44>)
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	b282      	uxth	r2, r0
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	4628      	mov	r0, r5
 8000ef0:	f002 fc53 	bl	800379a <HAL_UART_Transmit>
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4628      	mov	r0, r5
 8000efc:	4909      	ldr	r1, [pc, #36]	; (8000f24 <writelineTerminal+0x48>)
 8000efe:	f002 fc4c 	bl	800379a <HAL_UART_Transmit>

  // LCD
  LCD_DrawString(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, buffer);
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <writelineTerminal+0x4c>)
 8000f04:	4622      	mov	r2, r4
 8000f06:	7819      	ldrb	r1, [r3, #0]
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <writelineTerminal+0x50>)
 8000f0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f0e:	7818      	ldrb	r0, [r3, #0]
 8000f10:	0049      	lsls	r1, r1, #1
 8000f12:	00c0      	lsls	r0, r0, #3
 8000f14:	f7ff ffc8 	bl	8000ea8 <LCD_DrawString>
  LCD_CursorNewline();
}
 8000f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CursorNewline();
 8000f1c:	f7ff bfa0 	b.w	8000e60 <LCD_CursorNewline>
 8000f20:	200080f8 	.word	0x200080f8
 8000f24:	080051f8 	.word	0x080051f8
 8000f28:	200000ad 	.word	0x200000ad
 8000f2c:	200000ac 	.word	0x200000ac

08000f30 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f34:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f36:	f7ff f977 	bl	8000228 <strlen>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f3a:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	b282      	uxth	r2, r0
 8000f42:	4621      	mov	r1, r4
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <writeTerminal+0x50>)
 8000f46:	f002 fc28 	bl	800379a <HAL_UART_Transmit>
  uint8_t tempX = LCD_CURSOR_X;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <writeTerminal+0x54>)
 8000f4c:	f893 8000 	ldrb.w	r8, [r3]
  uint8_t tempY = LCD_CURSOR_Y;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <writeTerminal+0x58>)
 8000f52:	781d      	ldrb	r5, [r3, #0]
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff f967 	bl	8000228 <strlen>
 8000f5a:	b2f7      	uxtb	r7, r6
 8000f5c:	42b8      	cmp	r0, r7
 8000f5e:	f106 0601 	add.w	r6, r6, #1
 8000f62:	d809      	bhi.n	8000f78 <writeTerminal+0x48>
    LCD_CursorForward();
  }
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000f64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000f68:	4622      	mov	r2, r4
 8000f6a:	0069      	lsls	r1, r5, #1
 8000f6c:	ea4f 00c8 	mov.w	r0, r8, lsl #3
}
 8000f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000f74:	f7ff bf98 	b.w	8000ea8 <LCD_DrawString>
    LCD_CursorForward();
 8000f78:	f7ff ff5a 	bl	8000e30 <LCD_CursorForward>
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f7c:	e7ea      	b.n	8000f54 <writeTerminal+0x24>
 8000f7e:	bf00      	nop
 8000f80:	200080f8 	.word	0x200080f8
 8000f84:	200000ac 	.word	0x200000ac
 8000f88:	200000ad 	.word	0x200000ad

08000f8c <writeTerminalChar>:

/**
 * Write char to UART & LCD without line ending (STM32)
 */
void writeTerminalChar(char *buffer) {
 8000f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4601      	mov	r1, r0
void writeTerminalChar(char *buffer) {
 8000f92:	4605      	mov	r5, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <writeTerminalChar+0x3c>)
 8000f9a:	f002 fbfe 	bl	800379a <HAL_UART_Transmit>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <writeTerminalChar+0x40>)
 8000fa0:	781e      	ldrb	r6, [r3, #0]
  uint8_t tempY = LCD_CURSOR_Y;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <writeTerminalChar+0x44>)
 8000fa4:	781c      	ldrb	r4, [r3, #0]
  char tempChar[2] = {0x00};
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tempChar[0] = buffer[0];
 8000fac:	782b      	ldrb	r3, [r5, #0]
  tempChar[1] = '\0';
  LCD_CursorForward();
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000fae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  tempChar[0] = buffer[0];
 8000fb2:	f88d 3004 	strb.w	r3, [sp, #4]
  LCD_CursorForward();
 8000fb6:	f7ff ff3b 	bl	8000e30 <LCD_CursorForward>
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000fba:	aa01      	add	r2, sp, #4
 8000fbc:	0061      	lsls	r1, r4, #1
 8000fbe:	00f0      	lsls	r0, r6, #3
 8000fc0:	f7ff ff72 	bl	8000ea8 <LCD_DrawString>
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	200080f8 	.word	0x200080f8
 8000fcc:	200000ac 	.word	0x200000ac
 8000fd0:	200000ad 	.word	0x200000ad

08000fd4 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 8000fd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (value == 13) {
 8000fd6:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 8000fd8:	f88d 000f 	strb.w	r0, [sp, #15]
  if (value == 13) {
 8000fdc:	d128      	bne.n	8001030 <handleOutput+0x5c>
    // UART Newline
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
    // LCD Newline
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8000fde:	2400      	movs	r4, #0
 8000fe0:	4d16      	ldr	r5, [pc, #88]	; (800103c <handleOutput+0x68>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4915      	ldr	r1, [pc, #84]	; (8001040 <handleOutput+0x6c>)
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <handleOutput+0x70>)
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8000fec:	4e16      	ldr	r6, [pc, #88]	; (8001048 <handleOutput+0x74>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000fee:	f002 fbd4 	bl	800379a <HAL_UART_Transmit>
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8000ff2:	7829      	ldrb	r1, [r5, #0]
 8000ff4:	7830      	ldrb	r0, [r6, #0]
 8000ff6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	9400      	str	r4, [sp, #0]
 8001000:	0049      	lsls	r1, r1, #1
 8001002:	00c0      	lsls	r0, r0, #3
 8001004:	f7ff fec4 	bl	8000d90 <LCD_Clear>
    if (++LCD_CURSOR_Y > 23) {
 8001008:	782b      	ldrb	r3, [r5, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b17      	cmp	r3, #23
 8001010:	d804      	bhi.n	800101c <handleOutput+0x48>
 8001012:	702b      	strb	r3, [r5, #0]
		  LCD_CURSOR_Y = 0;
		  // Clear the screen
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
	  }
	  LCD_CURSOR_X = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	7033      	strb	r3, [r6, #0]
  }
  else {
    writeTerminalChar((char *)&value);
  }
}
 8001018:	b004      	add	sp, #16
 800101a:	bd70      	pop	{r4, r5, r6, pc}
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800101c:	23f0      	movs	r3, #240	; 0xf0
 800101e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001022:	4621      	mov	r1, r4
 8001024:	4620      	mov	r0, r4
 8001026:	9400      	str	r4, [sp, #0]
		  LCD_CURSOR_Y = 0;
 8001028:	702c      	strb	r4, [r5, #0]
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 800102a:	f7ff feb1 	bl	8000d90 <LCD_Clear>
 800102e:	e7f1      	b.n	8001014 <handleOutput+0x40>
    writeTerminalChar((char *)&value);
 8001030:	f10d 000f 	add.w	r0, sp, #15
 8001034:	f7ff ffaa 	bl	8000f8c <writeTerminalChar>
}
 8001038:	e7ee      	b.n	8001018 <handleOutput+0x44>
 800103a:	bf00      	nop
 800103c:	200000ad 	.word	0x200000ad
 8001040:	080051f8 	.word	0x080051f8
 8001044:	200080f8 	.word	0x200080f8
 8001048:	200000ac 	.word	0x200000ac

0800104c <write6502>:
  if (address < RAM_SIZE) {
 800104c:	0403      	lsls	r3, r0, #16
 800104e:	d402      	bmi.n	8001056 <write6502+0xa>
    RAM[address] = value;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <write6502+0x20>)
 8001052:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 8001054:	4770      	bx	lr
 8001056:	f24d 0312 	movw	r3, #53266	; 0xd012
 800105a:	4298      	cmp	r0, r3
 800105c:	d105      	bne.n	800106a <write6502+0x1e>
    pia.display_register = value;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <write6502+0x24>)
    handleOutput(value);
 8001060:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 8001064:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 8001066:	f7ff bfb5 	b.w	8000fd4 <handleOutput>
}
 800106a:	4770      	bx	lr
 800106c:	200000ae 	.word	0x200000ae
 8001070:	20008141 	.word	0x20008141

08001074 <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 8001074:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 8001076:	4c18      	ldr	r4, [pc, #96]	; (80010d8 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 8001078:	4d18      	ldr	r5, [pc, #96]	; (80010dc <initApple1+0x68>)
    HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f001 fed3 	bl	8002e28 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff ff2a 	bl	8000edc <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <initApple1+0x68>)
 800108a:	f000 f835 	bl	80010f8 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 800108e:	782b      	ldrb	r3, [r5, #0]
 8001090:	2b20      	cmp	r3, #32
 8001092:	d1f2      	bne.n	800107a <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 8001094:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 8001098:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 800109a:	f7ff ff49 	bl	8000f30 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 800109e:	f000 f9e1 	bl	8001464 <reset6502>
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <initApple1+0x70>)
 80010a4:	f7ff ff1a 	bl	8000edc <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <initApple1+0x74>)
 80010aa:	f7ff ff41 	bl	8000f30 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 80010ae:	4621      	mov	r1, r4
 80010b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <initApple1+0x78>)
 80010b6:	f002 fca7 	bl	8003a08 <memset>
  }
  writelineTerminal(" Complete");
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <initApple1+0x70>)
 80010bc:	f7ff ff0e 	bl	8000edc <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <initApple1+0x7c>)
 80010c2:	f7ff ff35 	bl	8000f30 <writeTerminal>
  pia.keyboard_register = 0x00;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 80010ca:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 80010cc:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 80010ce:	709c      	strb	r4, [r3, #2]
}
 80010d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 80010d4:	f7ff bf02 	b.w	8000edc <writelineTerminal>
 80010d8:	080051fb 	.word	0x080051fb
 80010dc:	20008140 	.word	0x20008140
 80010e0:	08005219 	.word	0x08005219
 80010e4:	0800522d 	.word	0x0800522d
 80010e8:	08005237 	.word	0x08005237
 80010ec:	200000ae 	.word	0x200000ae
 80010f0:	0800524b 	.word	0x0800524b
 80010f4:	20008141 	.word	0x20008141

080010f8 <handleInput>:
void handleInput(char *buffer) {
 80010f8:	b510      	push	{r4, lr}
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80010fa:	4601      	mov	r1, r0
void handleInput(char *buffer) {
 80010fc:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 80010fe:	230a      	movs	r3, #10
 8001100:	2201      	movs	r2, #1
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <handleInput+0x68>)
 8001104:	f002 fb94 	bl	8003830 <HAL_UART_Receive>
  if(isKbrdReady()){
 8001108:	f001 fd20 	bl	8002b4c <isKbrdReady>
 800110c:	b110      	cbz	r0, 8001114 <handleInput+0x1c>
	  buffer[0] = getAscii();
 800110e:	f001 fd23 	bl	8002b58 <getAscii>
 8001112:	7020      	strb	r0, [r4, #0]
  buffer[0] &= 0x7F; // Mask out MSB
 8001114:	7823      	ldrb	r3, [r4, #0]
 8001116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800111a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800111e:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 8001120:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8001122:	d802      	bhi.n	800112a <handleInput+0x32>
    buffer[0] -= 0x20;
 8001124:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 8001126:	7023      	strb	r3, [r4, #0]
}
 8001128:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 800112a:	2b0a      	cmp	r3, #10
 800112c:	d101      	bne.n	8001132 <handleInput+0x3a>
    buffer[0] = '\r';
 800112e:	230d      	movs	r3, #13
 8001130:	e7f9      	b.n	8001126 <handleInput+0x2e>
  else if (buffer[0] == '\b') {
 8001132:	2b08      	cmp	r3, #8
 8001134:	d101      	bne.n	800113a <handleInput+0x42>
    buffer[0] = 0x5F;
 8001136:	235f      	movs	r3, #95	; 0x5f
 8001138:	e7f5      	b.n	8001126 <handleInput+0x2e>
  else if (buffer[0] == 0x7F) {
 800113a:	2b7f      	cmp	r3, #127	; 0x7f
 800113c:	d0fb      	beq.n	8001136 <handleInput+0x3e>
  else if (buffer[0] == 0x03) {
 800113e:	2b03      	cmp	r3, #3
 8001140:	d1f2      	bne.n	8001128 <handleInput+0x30>
    writelineTerminal("[Ctrl + C] Resetting in 5 seconds...");
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <handleInput+0x6c>)
 8001144:	f7ff feca 	bl	8000edc <writelineTerminal>
    HAL_Delay(5000);
 8001148:	f241 3088 	movw	r0, #5000	; 0x1388
 800114c:	f001 fe6c 	bl	8002e28 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 8001150:	2220      	movs	r2, #32
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <handleInput+0x70>)
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 800115a:	f7ff bf8b 	b.w	8001074 <initApple1>
 800115e:	bf00      	nop
 8001160:	200080f8 	.word	0x200080f8
 8001164:	0800525f 	.word	0x0800525f
 8001168:	20008140 	.word	0x20008140

0800116c <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 800116c:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 800116e:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 8001170:	d402      	bmi.n	8001178 <read6502+0xc>
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 8001174:	5c18      	ldrb	r0, [r3, r0]
 8001176:	e005      	b.n	8001184 <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 8001178:	f24d 0310 	movw	r3, #53264	; 0xd010
 800117c:	4298      	cmp	r0, r3
 800117e:	d102      	bne.n	8001186 <read6502+0x1a>
    return pia.keyboard_register;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <read6502+0x64>)
 8001182:	7818      	ldrb	r0, [r3, #0]
}
 8001184:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 8001186:	f24d 0311 	movw	r3, #53265	; 0xd011
 800118a:	4298      	cmp	r0, r3
 800118c:	d10f      	bne.n	80011ae <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 800118e:	4c11      	ldr	r4, [pc, #68]	; (80011d4 <read6502+0x68>)
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ffb1 	bl	80010f8 <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 8001196:	7823      	ldrb	r3, [r4, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <read6502+0x64>)
 800119a:	f063 017f 	orn	r1, r3, #127	; 0x7f
 800119e:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 80011a0:	b90b      	cbnz	r3, 80011a6 <read6502+0x3a>
      return 0x00;
 80011a2:	2000      	movs	r0, #0
 80011a4:	e7ee      	b.n	8001184 <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 80011a6:	2300      	movs	r3, #0
      return 0x80;
 80011a8:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 80011aa:	7023      	strb	r3, [r4, #0]
      return 0x80;
 80011ac:	e7ea      	b.n	8001184 <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 80011ae:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b8:	d202      	bcs.n	80011c0 <read6502+0x54>
      return BASIC[BASIC_addr];
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <read6502+0x6c>)
 80011bc:	5cd0      	ldrb	r0, [r2, r3]
 80011be:	e7e1      	b.n	8001184 <read6502+0x18>
  if (address >= 0xF000) {
 80011c0:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80011c4:	d3ed      	bcc.n	80011a2 <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <read6502+0x70>)
 80011c8:	b2c0      	uxtb	r0, r0
 80011ca:	e7d3      	b.n	8001174 <read6502+0x8>
 80011cc:	200000ae 	.word	0x200000ae
 80011d0:	20008141 	.word	0x20008141
 80011d4:	20008140 	.word	0x20008140
 80011d8:	08005284 	.word	0x08005284
 80011dc:	08006284 	.word	0x08006284

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e4:	2214      	movs	r2, #20
 80011e6:	2100      	movs	r1, #0
 80011e8:	a808      	add	r0, sp, #32
 80011ea:	f002 fc0d 	bl	8003a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ee:	2214      	movs	r2, #20
 80011f0:	2100      	movs	r1, #0
 80011f2:	a801      	add	r0, sp, #4
 80011f4:	f002 fc08 	bl	8003a08 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fe:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001200:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001210:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f001 ff73 	bl	80030fc <HAL_RCC_OscConfig>
 8001216:	b108      	cbz	r0, 800121c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121a:	e7fe      	b.n	800121a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122c:	4621      	mov	r1, r4
 800122e:	a801      	add	r0, sp, #4
 8001230:	f002 f926 	bl	8003480 <HAL_RCC_ClockConfig>
 8001234:	b108      	cbz	r0, 800123a <SystemClock_Config+0x5a>
 8001236:	b672      	cpsid	i
  while (1)
 8001238:	e7fe      	b.n	8001238 <SystemClock_Config+0x58>
}
 800123a:	b010      	add	sp, #64	; 0x40
 800123c:	bd10      	pop	{r4, pc}
	...

08001240 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	2510      	movs	r5, #16
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001246:	f001 fdcb 	bl	8002de0 <HAL_Init>
  SystemClock_Config();
 800124a:	f7ff ffc9 	bl	80011e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	462a      	mov	r2, r5
 8001250:	2100      	movs	r1, #0
 8001252:	a805      	add	r0, sp, #20
 8001254:	f002 fbd8 	bl	8003a08 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <main+0x12c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001262:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	432a      	orrs	r2, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	402a      	ands	r2, r5
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001278:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800127a:	483d      	ldr	r0, [pc, #244]	; (8001370 <main+0x130>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001280:	619a      	str	r2, [r3, #24]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001288:	9202      	str	r2, [sp, #8]
 800128a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	f002 0220 	and.w	r2, r2, #32
 800129a:	9203      	str	r2, [sp, #12]
 800129c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	f042 0204 	orr.w	r2, r2, #4
 80012a4:	619a      	str	r2, [r3, #24]
 80012a6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	9304      	str	r3, [sp, #16]
 80012b0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80012b2:	f001 ff11 	bl	80030d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	482e      	ldr	r0, [pc, #184]	; (8001374 <main+0x134>)
 80012bc:	f001 ff0c 	bl	80030d8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <main+0x130>)
 80012c2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	e9cd 6805 	strd	r6, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f001 fe16 	bl	8002efc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80012d0:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80012d2:	4828      	ldr	r0, [pc, #160]	; (8001374 <main+0x134>)
 80012d4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	e9cd 3805 	strd	r3, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80012de:	f001 fe0d 	bl	8002efc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80012e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80012e6:	4824      	ldr	r0, [pc, #144]	; (8001378 <main+0x138>)
  huart1.Init.BaudRate = 115200;
 80012e8:	4a24      	ldr	r2, [pc, #144]	; (800137c <main+0x13c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80012ee:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f2:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f4:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fa:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012fc:	f002 fa1e 	bl	800373c <HAL_UART_Init>
 8001300:	4602      	mov	r2, r0
 8001302:	b108      	cbz	r0, 8001308 <main+0xc8>
 8001304:	b672      	cpsid	i
  while (1)
 8001306:	e7fe      	b.n	8001306 <main+0xc6>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001308:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800130c:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800130e:	481c      	ldr	r0, [pc, #112]	; (8001380 <main+0x140>)
  Timing.DataSetupTime = 255;
 8001310:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001312:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001314:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001318:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 800131c:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 800131e:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 8001322:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 8001326:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001328:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800132a:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800132e:	e9c0 5205 	strd	r5, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001332:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001336:	e9c0 2609 	strd	r2, r6, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800133a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800133e:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 8001342:	9509      	str	r5, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8001344:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001346:	f002 f957 	bl	80035f8 <HAL_SRAM_Init>
 800134a:	b108      	cbz	r0, 8001350 <main+0x110>
 800134c:	b672      	cpsid	i
  while (1)
 800134e:	e7fe      	b.n	800134e <main+0x10e>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <main+0x144>)
 8001352:	69d3      	ldr	r3, [r2, #28]
 8001354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001358:	61d3      	str	r3, [r2, #28]
  LCD_INIT(); // Initialize LCD
 800135a:	f7ff fd27 	bl	8000dac <LCD_INIT>
  initApple1(); // Initialize Apple I
 800135e:	f7ff fe89 	bl	8001074 <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 8001362:	f242 7010 	movw	r0, #10000	; 0x2710
 8001366:	f000 ffe1 	bl	800232c <exec6502>
  while (1)
 800136a:	e7fa      	b.n	8001362 <main+0x122>
 800136c:	40021000 	.word	0x40021000
 8001370:	40011400 	.word	0x40011400
 8001374:	40011800 	.word	0x40011800
 8001378:	200080f8 	.word	0x200080f8
 800137c:	40013800 	.word	0x40013800
 8001380:	200080b0 	.word	0x200080b0
 8001384:	40010000 	.word	0x40010000

08001388 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 8001388:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <getvalue+0x1c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b113      	cbz	r3, 8001396 <getvalue+0xe>
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <getvalue+0x20>)
 8001392:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 8001394:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <getvalue+0x24>)
 8001398:	8818      	ldrh	r0, [r3, #0]
 800139a:	f7ff fee7 	bl	800116c <read6502>
 800139e:	b280      	uxth	r0, r0
 80013a0:	e7f8      	b.n	8001394 <getvalue+0xc>
 80013a2:	bf00      	nop
 80013a4:	2000815f 	.word	0x2000815f
 80013a8:	20008145 	.word	0x20008145
 80013ac:	2000814e 	.word	0x2000814e

080013b0 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80013b0:	4a02      	ldr	r2, [pc, #8]	; (80013bc <bcc.part.0+0xc>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	3302      	adds	r3, #2
 80013b6:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20008148 	.word	0x20008148

080013c0 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 80013c0:	4a02      	ldr	r2, [pc, #8]	; (80013cc <dex.part.0+0xc>)
 80013c2:	7813      	ldrb	r3, [r2, #0]
 80013c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c8:	7013      	strb	r3, [r2, #0]
}
 80013ca:	4770      	bx	lr
 80013cc:	2000814c 	.word	0x2000814c

080013d0 <push16>:
void push16(uint16_t pushval) {
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 80013d4:	4c09      	ldr	r4, [pc, #36]	; (80013fc <push16+0x2c>)
 80013d6:	0a29      	lsrs	r1, r5, #8
 80013d8:	7820      	ldrb	r0, [r4, #0]
 80013da:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80013de:	f7ff fe35 	bl	800104c <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 80013e2:	7823      	ldrb	r3, [r4, #0]
 80013e4:	b2e9      	uxtb	r1, r5
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80013ee:	f7ff fe2d 	bl	800104c <write6502>
    sp -= 2;
 80013f2:	7823      	ldrb	r3, [r4, #0]
 80013f4:	3b02      	subs	r3, #2
 80013f6:	7023      	strb	r3, [r4, #0]
}
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
 80013fa:	bf00      	nop
 80013fc:	2000815e 	.word	0x2000815e

08001400 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <push8+0x14>)
void push8(uint8_t pushval) {
 8001402:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8001404:	7813      	ldrb	r3, [r2, #0]
 8001406:	1e58      	subs	r0, r3, #1
 8001408:	7010      	strb	r0, [r2, #0]
 800140a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800140e:	f7ff be1d 	b.w	800104c <write6502>
 8001412:	bf00      	nop
 8001414:	2000815e 	.word	0x2000815e

08001418 <pull16>:
uint16_t pull16() {
 8001418:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 800141a:	4d0b      	ldr	r5, [pc, #44]	; (8001448 <pull16+0x30>)
 800141c:	7828      	ldrb	r0, [r5, #0]
 800141e:	3001      	adds	r0, #1
 8001420:	b2c0      	uxtb	r0, r0
 8001422:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001426:	f7ff fea1 	bl	800116c <read6502>
 800142a:	4604      	mov	r4, r0
 800142c:	7828      	ldrb	r0, [r5, #0]
 800142e:	3002      	adds	r0, #2
 8001430:	b2c0      	uxtb	r0, r0
 8001432:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001436:	f7ff fe99 	bl	800116c <read6502>
    sp += 2;
 800143a:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 800143c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8001440:	3302      	adds	r3, #2
 8001442:	702b      	strb	r3, [r5, #0]
}
 8001444:	b280      	uxth	r0, r0
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	2000815e 	.word	0x2000815e

0800144c <pull8>:
    return (read6502(BASE_STACK + ++sp));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <pull8+0x14>)
 800144e:	7818      	ldrb	r0, [r3, #0]
 8001450:	3001      	adds	r0, #1
 8001452:	b2c0      	uxtb	r0, r0
 8001454:	7018      	strb	r0, [r3, #0]
 8001456:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800145a:	f7ff be87 	b.w	800116c <read6502>
 800145e:	bf00      	nop
 8001460:	2000815e 	.word	0x2000815e

08001464 <reset6502>:
void reset6502() {
 8001464:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 8001466:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 800146a:	f7ff fe7f 	bl	800116c <read6502>
 800146e:	4604      	mov	r4, r0
 8001470:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8001474:	f7ff fe7a 	bl	800116c <read6502>
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <reset6502+0x3c>)
 800147a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800147e:	801c      	strh	r4, [r3, #0]
    a = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <reset6502+0x40>)
 8001484:	7013      	strb	r3, [r2, #0]
    x = 0;
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <reset6502+0x44>)
 8001488:	7013      	strb	r3, [r2, #0]
    y = 0;
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <reset6502+0x48>)
 800148c:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 800148e:	22fd      	movs	r2, #253	; 0xfd
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <reset6502+0x4c>)
 8001492:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <reset6502+0x50>)
 8001496:	7813      	ldrb	r3, [r2, #0]
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	7013      	strb	r3, [r2, #0]
}
 800149e:	bd10      	pop	{r4, pc}
 80014a0:	20008158 	.word	0x20008158
 80014a4:	20008145 	.word	0x20008145
 80014a8:	20008162 	.word	0x20008162
 80014ac:	20008163 	.word	0x20008163
 80014b0:	2000815e 	.word	0x2000815e
 80014b4:	2000814c 	.word	0x2000814c

080014b8 <imm>:
    ea = pc++;
 80014b8:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <imm+0x10>)
 80014ba:	8813      	ldrh	r3, [r2, #0]
 80014bc:	1c59      	adds	r1, r3, #1
 80014be:	8011      	strh	r1, [r2, #0]
 80014c0:	4a02      	ldr	r2, [pc, #8]	; (80014cc <imm+0x14>)
 80014c2:	8013      	strh	r3, [r2, #0]
}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20008158 	.word	0x20008158
 80014cc:	2000814e 	.word	0x2000814e

080014d0 <zp>:
void zp() { // zero-page
 80014d0:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <zp+0x14>)
 80014d4:	8818      	ldrh	r0, [r3, #0]
 80014d6:	1c42      	adds	r2, r0, #1
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	f7ff fe47 	bl	800116c <read6502>
 80014de:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <zp+0x18>)
 80014e0:	8018      	strh	r0, [r3, #0]
}
 80014e2:	bd08      	pop	{r3, pc}
 80014e4:	20008158 	.word	0x20008158
 80014e8:	2000814e 	.word	0x2000814e

080014ec <zpx>:
void zpx() { // zero-page,X
 80014ec:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <zpx+0x1c>)
 80014f0:	8818      	ldrh	r0, [r3, #0]
 80014f2:	1c42      	adds	r2, r0, #1
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	f7ff fe39 	bl	800116c <read6502>
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <zpx+0x20>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4418      	add	r0, r3
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <zpx+0x24>)
 8001502:	b2c0      	uxtb	r0, r0
 8001504:	8018      	strh	r0, [r3, #0]
}
 8001506:	bd08      	pop	{r3, pc}
 8001508:	20008158 	.word	0x20008158
 800150c:	20008162 	.word	0x20008162
 8001510:	2000814e 	.word	0x2000814e

08001514 <zpy>:
void zpy() { // zero-page,Y
 8001514:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <zpy+0x1c>)
 8001518:	8818      	ldrh	r0, [r3, #0]
 800151a:	1c42      	adds	r2, r0, #1
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	f7ff fe25 	bl	800116c <read6502>
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <zpy+0x20>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4418      	add	r0, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <zpy+0x24>)
 800152a:	b2c0      	uxtb	r0, r0
 800152c:	8018      	strh	r0, [r3, #0]
}
 800152e:	bd08      	pop	{r3, pc}
 8001530:	20008158 	.word	0x20008158
 8001534:	20008163 	.word	0x20008163
 8001538:	2000814e 	.word	0x2000814e

0800153c <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 800153c:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <rel+0x20>)
 8001540:	8818      	ldrh	r0, [r3, #0]
 8001542:	1c42      	adds	r2, r0, #1
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	f7ff fe11 	bl	800116c <read6502>
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <rel+0x24>)
 800154c:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 800154e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001552:	bf18      	it	ne
 8001554:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8001558:	8013      	strh	r3, [r2, #0]
}
 800155a:	bd08      	pop	{r3, pc}
 800155c:	20008158 	.word	0x20008158
 8001560:	2000815a 	.word	0x2000815a

08001564 <abso>:
void abso() { // absolute
 8001564:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 8001566:	4d09      	ldr	r5, [pc, #36]	; (800158c <abso+0x28>)
 8001568:	8828      	ldrh	r0, [r5, #0]
 800156a:	f7ff fdff 	bl	800116c <read6502>
 800156e:	4604      	mov	r4, r0
 8001570:	8828      	ldrh	r0, [r5, #0]
 8001572:	3001      	adds	r0, #1
 8001574:	b280      	uxth	r0, r0
 8001576:	f7ff fdf9 	bl	800116c <read6502>
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <abso+0x2c>)
 800157c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8001580:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8001582:	882b      	ldrh	r3, [r5, #0]
 8001584:	3302      	adds	r3, #2
 8001586:	802b      	strh	r3, [r5, #0]
}
 8001588:	bd38      	pop	{r3, r4, r5, pc}
 800158a:	bf00      	nop
 800158c:	20008158 	.word	0x20008158
 8001590:	2000814e 	.word	0x2000814e

08001594 <absx>:
void absx() { // absolute,X
 8001594:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8001596:	4d0a      	ldr	r5, [pc, #40]	; (80015c0 <absx+0x2c>)
 8001598:	8828      	ldrh	r0, [r5, #0]
 800159a:	f7ff fde7 	bl	800116c <read6502>
 800159e:	4604      	mov	r4, r0
 80015a0:	8828      	ldrh	r0, [r5, #0]
 80015a2:	3001      	adds	r0, #1
 80015a4:	b280      	uxth	r0, r0
 80015a6:	f7ff fde1 	bl	800116c <read6502>
    ea += (uint16_t)x;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80015ac:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 80015b0:	7818      	ldrb	r0, [r3, #0]
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <absx+0x34>)
 80015b4:	4404      	add	r4, r0
 80015b6:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80015b8:	882b      	ldrh	r3, [r5, #0]
 80015ba:	3302      	adds	r3, #2
 80015bc:	802b      	strh	r3, [r5, #0]
}
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	20008158 	.word	0x20008158
 80015c4:	20008162 	.word	0x20008162
 80015c8:	2000814e 	.word	0x2000814e

080015cc <absy>:
void absy() { // absolute,Y
 80015cc:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80015ce:	4d0a      	ldr	r5, [pc, #40]	; (80015f8 <absy+0x2c>)
 80015d0:	8828      	ldrh	r0, [r5, #0]
 80015d2:	f7ff fdcb 	bl	800116c <read6502>
 80015d6:	4604      	mov	r4, r0
 80015d8:	8828      	ldrh	r0, [r5, #0]
 80015da:	3001      	adds	r0, #1
 80015dc:	b280      	uxth	r0, r0
 80015de:	f7ff fdc5 	bl	800116c <read6502>
    ea += (uint16_t)y;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80015e4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 80015e8:	7818      	ldrb	r0, [r3, #0]
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <absy+0x34>)
 80015ec:	4404      	add	r4, r0
 80015ee:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80015f0:	882b      	ldrh	r3, [r5, #0]
 80015f2:	3302      	adds	r3, #2
 80015f4:	802b      	strh	r3, [r5, #0]
}
 80015f6:	bd38      	pop	{r3, r4, r5, pc}
 80015f8:	20008158 	.word	0x20008158
 80015fc:	20008163 	.word	0x20008163
 8001600:	2000814e 	.word	0x2000814e

08001604 <ind>:
void ind() { // indirect
 8001604:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 8001606:	4e10      	ldr	r6, [pc, #64]	; (8001648 <ind+0x44>)
 8001608:	8830      	ldrh	r0, [r6, #0]
 800160a:	f7ff fdaf 	bl	800116c <read6502>
 800160e:	4604      	mov	r4, r0
 8001610:	8830      	ldrh	r0, [r6, #0]
 8001612:	3001      	adds	r0, #1
 8001614:	b280      	uxth	r0, r0
 8001616:	f7ff fda9 	bl	800116c <read6502>
 800161a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800161e:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fda3 	bl	800116c <read6502>
 8001626:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8001628:	1c60      	adds	r0, r4, #1
 800162a:	b2c0      	uxtb	r0, r0
 800162c:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8001630:	4320      	orrs	r0, r4
 8001632:	f7ff fd9b 	bl	800116c <read6502>
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <ind+0x48>)
 8001638:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 800163c:	801d      	strh	r5, [r3, #0]
    pc += 2;
 800163e:	8833      	ldrh	r3, [r6, #0]
 8001640:	3302      	adds	r3, #2
 8001642:	8033      	strh	r3, [r6, #0]
}
 8001644:	bd70      	pop	{r4, r5, r6, pc}
 8001646:	bf00      	nop
 8001648:	20008158 	.word	0x20008158
 800164c:	2000814e 	.word	0x2000814e

08001650 <indx>:
void indx() { //  (indirect,X)
 8001650:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <indx+0x30>)
 8001654:	8818      	ldrh	r0, [r3, #0]
 8001656:	1c42      	adds	r2, r0, #1
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	f7ff fd87 	bl	800116c <read6502>
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <indx+0x34>)
 8001660:	781c      	ldrb	r4, [r3, #0]
 8001662:	4404      	add	r4, r0
 8001664:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fd80 	bl	800116c <read6502>
 800166c:	3401      	adds	r4, #1
 800166e:	4605      	mov	r5, r0
 8001670:	b2e0      	uxtb	r0, r4
 8001672:	f7ff fd7b 	bl	800116c <read6502>
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <indx+0x38>)
 8001678:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 800167c:	801d      	strh	r5, [r3, #0]
}
 800167e:	bd38      	pop	{r3, r4, r5, pc}
 8001680:	20008158 	.word	0x20008158
 8001684:	20008162 	.word	0x20008162
 8001688:	2000814e 	.word	0x2000814e

0800168c <indy>:
void indy() { //  (indirect),Y
 800168c:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <indy+0x30>)
 8001690:	8818      	ldrh	r0, [r3, #0]
 8001692:	1c42      	adds	r2, r0, #1
 8001694:	801a      	strh	r2, [r3, #0]
 8001696:	f7ff fd69 	bl	800116c <read6502>
 800169a:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fd65 	bl	800116c <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 80016a2:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80016a4:	4605      	mov	r5, r0
 80016a6:	b2e0      	uxtb	r0, r4
 80016a8:	f7ff fd60 	bl	800116c <read6502>
    ea += (uint16_t)y;
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80016ae:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 80016b2:	7818      	ldrb	r0, [r3, #0]
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <indy+0x38>)
 80016b6:	4405      	add	r5, r0
 80016b8:	801d      	strh	r5, [r3, #0]
}
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
 80016bc:	20008158 	.word	0x20008158
 80016c0:	20008163 	.word	0x20008163
 80016c4:	2000814e 	.word	0x2000814e

080016c8 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <putvalue+0x18>)
 80016ca:	b2c1      	uxtb	r1, r0
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b113      	cbz	r3, 80016d6 <putvalue+0xe>
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <putvalue+0x1c>)
 80016d2:	7019      	strb	r1, [r3, #0]
}
 80016d4:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <putvalue+0x20>)
 80016d8:	8818      	ldrh	r0, [r3, #0]
 80016da:	f7ff bcb7 	b.w	800104c <write6502>
 80016de:	bf00      	nop
 80016e0:	2000815f 	.word	0x2000815f
 80016e4:	20008145 	.word	0x20008145
 80016e8:	2000814e 	.word	0x2000814e

080016ec <adc>:
void adc() {
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 80016ee:	f7ff fe4b 	bl	8001388 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80016f2:	4d24      	ldr	r5, [pc, #144]	; (8001784 <adc+0x98>)
    value = getvalue();
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80016f6:	4c25      	ldr	r4, [pc, #148]	; (800178c <adc+0xa0>)
    value = getvalue();
 80016f8:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80016fa:	782b      	ldrb	r3, [r5, #0]
 80016fc:	7821      	ldrb	r1, [r4, #0]
 80016fe:	f003 0201 	and.w	r2, r3, #1
 8001702:	440a      	add	r2, r1
 8001704:	4e22      	ldr	r6, [pc, #136]	; (8001790 <adc+0xa4>)
 8001706:	4402      	add	r2, r0
 8001708:	b292      	uxth	r2, r2
    carrycalc(result);
 800170a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800170e:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8001710:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8001712:	bf14      	ite	ne
 8001714:	f043 0301 	orrne.w	r3, r3, #1
 8001718:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800171c:	b1c6      	cbz	r6, 8001750 <adc+0x64>
 800171e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8001722:	ea81 0602 	eor.w	r6, r1, r2
 8001726:	ea80 0702 	eor.w	r7, r0, r2
 800172a:	4630      	mov	r0, r6
 800172c:	4038      	ands	r0, r7
 800172e:	0607      	lsls	r7, r0, #24
 8001730:	bf4c      	ite	mi
 8001732:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8001736:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 800173a:	0616      	lsls	r6, r2, #24
 800173c:	bf4c      	ite	mi
 800173e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001742:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 8001746:	0718      	lsls	r0, r3, #28
 8001748:	d405      	bmi.n	8001756 <adc+0x6a>
 800174a:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 800174c:	7022      	strb	r2, [r4, #0]
}
 800174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	e7e5      	b.n	8001722 <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 8001756:	f001 000f 	and.w	r0, r1, #15
 800175a:	2809      	cmp	r0, #9
            a += 0x06;
 800175c:	bf84      	itt	hi
 800175e:	3106      	addhi	r1, #6
 8001760:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8001762:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 8001764:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8001768:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800176c:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 800176e:	4909      	ldr	r1, [pc, #36]	; (8001794 <adc+0xa8>)
        clearcarry();
 8001770:	702b      	strb	r3, [r5, #0]
            setcarry();
 8001772:	bf84      	itt	hi
 8001774:	f043 0301 	orrhi.w	r3, r3, #1
 8001778:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 800177a:	680b      	ldr	r3, [r1, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e7e4      	b.n	800174c <adc+0x60>
 8001782:	bf00      	nop
 8001784:	2000814c 	.word	0x2000814c
 8001788:	20008160 	.word	0x20008160
 800178c:	20008145 	.word	0x20008145
 8001790:	2000815c 	.word	0x2000815c
 8001794:	20008148 	.word	0x20008148

08001798 <op_and>:
void op_and() {
 8001798:	b508      	push	{r3, lr}
    value = getvalue();
 800179a:	f7ff fdf5 	bl	8001388 <getvalue>
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <op_and+0x40>)
    result = (uint16_t)a & value;
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <op_and+0x44>)
    value = getvalue();
 80017a2:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 80017a4:	780b      	ldrb	r3, [r1, #0]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <op_and+0x48>)
 80017a8:	4018      	ands	r0, r3
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <op_and+0x4c>)
 80017ac:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 80017ae:	7813      	ldrb	r3, [r2, #0]
 80017b0:	b148      	cbz	r0, 80017c6 <op_and+0x2e>
 80017b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80017b6:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 80017ba:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 80017bc:	d107      	bne.n	80017ce <op_and+0x36>
 80017be:	7813      	ldrb	r3, [r2, #0]
 80017c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c4:	e005      	b.n	80017d2 <op_and+0x3a>
    zerocalc(result);
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 80017cc:	e7f7      	b.n	80017be <op_and+0x26>
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 80017d4:	7008      	strb	r0, [r1, #0]
}
 80017d6:	bd08      	pop	{r3, pc}
 80017d8:	20008160 	.word	0x20008160
 80017dc:	20008145 	.word	0x20008145
 80017e0:	2000814c 	.word	0x2000814c
 80017e4:	2000815c 	.word	0x2000815c

080017e8 <asl>:
void asl() {
 80017e8:	b508      	push	{r3, lr}
    value = getvalue();
 80017ea:	f7ff fdcd 	bl	8001388 <getvalue>
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <asl+0x48>)
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <asl+0x4c>)
 80017f2:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <asl+0x50>)
 80017f6:	0040      	lsls	r0, r0, #1
 80017f8:	b280      	uxth	r0, r0
 80017fa:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 80017fc:	7813      	ldrb	r3, [r2, #0]
 80017fe:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8001802:	bf14      	ite	ne
 8001804:	f043 0301 	orrne.w	r3, r3, #1
 8001808:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800180c:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 8001810:	bf14      	ite	ne
 8001812:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8001816:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 800181a:	0601      	lsls	r1, r0, #24
 800181c:	bf4c      	ite	mi
 800181e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001822:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001826:	7013      	strb	r3, [r2, #0]
}
 8001828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 800182c:	f7ff bf4c 	b.w	80016c8 <putvalue>
 8001830:	20008160 	.word	0x20008160
 8001834:	2000814c 	.word	0x2000814c
 8001838:	2000815c 	.word	0x2000815c

0800183c <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <bcc+0x30>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	07db      	lsls	r3, r3, #31
 8001842:	d412      	bmi.n	800186a <bcc+0x2e>
        oldpc = pc;
 8001844:	490a      	ldr	r1, [pc, #40]	; (8001870 <bcc+0x34>)
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <bcc+0x38>)
 8001848:	880a      	ldrh	r2, [r1, #0]
 800184a:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <bcc+0x3c>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001856:	4053      	eors	r3, r2
 8001858:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800185c:	d001      	beq.n	8001862 <bcc+0x26>
 800185e:	f7ff bda7 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 8001862:	4a06      	ldr	r2, [pc, #24]	; (800187c <bcc+0x40>)
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	4770      	bx	lr
 800186c:	2000814c 	.word	0x2000814c
 8001870:	20008158 	.word	0x20008158
 8001874:	20008154 	.word	0x20008154
 8001878:	2000815a 	.word	0x2000815a
 800187c:	20008148 	.word	0x20008148

08001880 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <bcs+0x30>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	07db      	lsls	r3, r3, #31
 8001886:	d512      	bpl.n	80018ae <bcs+0x2e>
        oldpc = pc;
 8001888:	490a      	ldr	r1, [pc, #40]	; (80018b4 <bcs+0x34>)
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <bcs+0x38>)
 800188c:	880a      	ldrh	r2, [r1, #0]
 800188e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <bcs+0x3c>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800189a:	4053      	eors	r3, r2
 800189c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80018a0:	d001      	beq.n	80018a6 <bcs+0x26>
 80018a2:	f7ff bd85 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 80018a6:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <bcs+0x40>)
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	4770      	bx	lr
 80018b0:	2000814c 	.word	0x2000814c
 80018b4:	20008158 	.word	0x20008158
 80018b8:	20008154 	.word	0x20008154
 80018bc:	2000815a 	.word	0x2000815a
 80018c0:	20008148 	.word	0x20008148

080018c4 <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <beq+0x30>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	079b      	lsls	r3, r3, #30
 80018ca:	d512      	bpl.n	80018f2 <beq+0x2e>
        oldpc = pc;
 80018cc:	490a      	ldr	r1, [pc, #40]	; (80018f8 <beq+0x34>)
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <beq+0x38>)
 80018d0:	880a      	ldrh	r2, [r1, #0]
 80018d2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <beq+0x3c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80018de:	4053      	eors	r3, r2
 80018e0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80018e4:	d001      	beq.n	80018ea <beq+0x26>
 80018e6:	f7ff bd63 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 80018ea:	4a06      	ldr	r2, [pc, #24]	; (8001904 <beq+0x40>)
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	6013      	str	r3, [r2, #0]
}
 80018f2:	4770      	bx	lr
 80018f4:	2000814c 	.word	0x2000814c
 80018f8:	20008158 	.word	0x20008158
 80018fc:	20008154 	.word	0x20008154
 8001900:	2000815a 	.word	0x2000815a
 8001904:	20008148 	.word	0x20008148

08001908 <op_bit>:
void op_bit() {
 8001908:	b508      	push	{r3, lr}
    value = getvalue();
 800190a:	f7ff fd3d 	bl	8001388 <getvalue>
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <op_bit+0x34>)
    result = (uint16_t)a & value;
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <op_bit+0x38>)
    value = getvalue();
 8001912:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <op_bit+0x3c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4003      	ands	r3, r0
 800191a:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <op_bit+0x40>)
 800191e:	b14b      	cbz	r3, 8001934 <op_bit+0x2c>
 8001920:	7813      	ldrb	r3, [r2, #0]
 8001922:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8001926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800192a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800192e:	4303      	orrs	r3, r0
 8001930:	7013      	strb	r3, [r2, #0]
}
 8001932:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001934:	7813      	ldrb	r3, [r2, #0]
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	e7f4      	b.n	8001926 <op_bit+0x1e>
 800193c:	20008160 	.word	0x20008160
 8001940:	2000815c 	.word	0x2000815c
 8001944:	20008145 	.word	0x20008145
 8001948:	2000814c 	.word	0x2000814c

0800194c <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <bmi+0x34>)
 800194e:	f993 3000 	ldrsb.w	r3, [r3]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da12      	bge.n	800197c <bmi+0x30>
        oldpc = pc;
 8001956:	490b      	ldr	r1, [pc, #44]	; (8001984 <bmi+0x38>)
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <bmi+0x3c>)
 800195a:	880a      	ldrh	r2, [r1, #0]
 800195c:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <bmi+0x40>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001968:	4053      	eors	r3, r2
 800196a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800196e:	d001      	beq.n	8001974 <bmi+0x28>
 8001970:	f7ff bd1e 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <bmi+0x44>)
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000814c 	.word	0x2000814c
 8001984:	20008158 	.word	0x20008158
 8001988:	20008154 	.word	0x20008154
 800198c:	2000815a 	.word	0x2000815a
 8001990:	20008148 	.word	0x20008148

08001994 <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <bne+0x30>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	079b      	lsls	r3, r3, #30
 800199a:	d412      	bmi.n	80019c2 <bne+0x2e>
        oldpc = pc;
 800199c:	490a      	ldr	r1, [pc, #40]	; (80019c8 <bne+0x34>)
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <bne+0x38>)
 80019a0:	880a      	ldrh	r2, [r1, #0]
 80019a2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <bne+0x3c>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80019ae:	4053      	eors	r3, r2
 80019b0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80019b4:	d001      	beq.n	80019ba <bne+0x26>
 80019b6:	f7ff bcfb 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 80019ba:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <bne+0x40>)
 80019bc:	6813      	ldr	r3, [r2, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	4770      	bx	lr
 80019c4:	2000814c 	.word	0x2000814c
 80019c8:	20008158 	.word	0x20008158
 80019cc:	20008154 	.word	0x20008154
 80019d0:	2000815a 	.word	0x2000815a
 80019d4:	20008148 	.word	0x20008148

080019d8 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <bpl+0x34>)
 80019da:	f993 3000 	ldrsb.w	r3, [r3]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db12      	blt.n	8001a08 <bpl+0x30>
        oldpc = pc;
 80019e2:	490b      	ldr	r1, [pc, #44]	; (8001a10 <bpl+0x38>)
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <bpl+0x3c>)
 80019e6:	880a      	ldrh	r2, [r1, #0]
 80019e8:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <bpl+0x40>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80019f4:	4053      	eors	r3, r2
 80019f6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80019fa:	d001      	beq.n	8001a00 <bpl+0x28>
 80019fc:	f7ff bcd8 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <bpl+0x44>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2000814c 	.word	0x2000814c
 8001a10:	20008158 	.word	0x20008158
 8001a14:	20008154 	.word	0x20008154
 8001a18:	2000815a 	.word	0x2000815a
 8001a1c:	20008148 	.word	0x20008148

08001a20 <brk>:
void brk() {
 8001a20:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8001a22:	4d0f      	ldr	r5, [pc, #60]	; (8001a60 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001a24:	4c0f      	ldr	r4, [pc, #60]	; (8001a64 <brk+0x44>)
    pc++;
 8001a26:	8828      	ldrh	r0, [r5, #0]
 8001a28:	3001      	adds	r0, #1
 8001a2a:	b280      	uxth	r0, r0
 8001a2c:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8001a2e:	f7ff fccf 	bl	80013d0 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001a32:	7820      	ldrb	r0, [r4, #0]
 8001a34:	f040 0010 	orr.w	r0, r0, #16
 8001a38:	f7ff fce2 	bl	8001400 <push8>
    setinterrupt(); // set interrupt flag
 8001a3c:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001a3e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001a48:	f7ff fb90 	bl	800116c <read6502>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a52:	f7ff fb8b 	bl	800116c <read6502>
 8001a56:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8001a5a:	802c      	strh	r4, [r5, #0]
}
 8001a5c:	bd38      	pop	{r3, r4, r5, pc}
 8001a5e:	bf00      	nop
 8001a60:	20008158 	.word	0x20008158
 8001a64:	2000814c 	.word	0x2000814c

08001a68 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <bvc+0x30>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	065b      	lsls	r3, r3, #25
 8001a6e:	d412      	bmi.n	8001a96 <bvc+0x2e>
        oldpc = pc;
 8001a70:	490a      	ldr	r1, [pc, #40]	; (8001a9c <bvc+0x34>)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <bvc+0x38>)
 8001a74:	880a      	ldrh	r2, [r1, #0]
 8001a76:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <bvc+0x3c>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001a82:	4053      	eors	r3, r2
 8001a84:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001a88:	d001      	beq.n	8001a8e <bvc+0x26>
 8001a8a:	f7ff bc91 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <bvc+0x40>)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	6013      	str	r3, [r2, #0]
}
 8001a96:	4770      	bx	lr
 8001a98:	2000814c 	.word	0x2000814c
 8001a9c:	20008158 	.word	0x20008158
 8001aa0:	20008154 	.word	0x20008154
 8001aa4:	2000815a 	.word	0x2000815a
 8001aa8:	20008148 	.word	0x20008148

08001aac <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <bvs+0x30>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	065b      	lsls	r3, r3, #25
 8001ab2:	d512      	bpl.n	8001ada <bvs+0x2e>
        oldpc = pc;
 8001ab4:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <bvs+0x34>)
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <bvs+0x38>)
 8001ab8:	880a      	ldrh	r2, [r1, #0]
 8001aba:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <bvs+0x3c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001ac6:	4053      	eors	r3, r2
 8001ac8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001acc:	d001      	beq.n	8001ad2 <bvs+0x26>
 8001ace:	f7ff bc6f 	b.w	80013b0 <bcc.part.0>
            else clockticks6502++;
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <bvs+0x40>)
 8001ad4:	6813      	ldr	r3, [r2, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	6013      	str	r3, [r2, #0]
}
 8001ada:	4770      	bx	lr
 8001adc:	2000814c 	.word	0x2000814c
 8001ae0:	20008158 	.word	0x20008158
 8001ae4:	20008154 	.word	0x20008154
 8001ae8:	2000815a 	.word	0x2000815a
 8001aec:	20008148 	.word	0x20008148

08001af0 <clc>:
    clearcarry();
 8001af0:	4a02      	ldr	r2, [pc, #8]	; (8001afc <clc+0xc>)
 8001af2:	7813      	ldrb	r3, [r2, #0]
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	7013      	strb	r3, [r2, #0]
}
 8001afa:	4770      	bx	lr
 8001afc:	2000814c 	.word	0x2000814c

08001b00 <cld>:
    cleardecimal();
 8001b00:	4a02      	ldr	r2, [pc, #8]	; (8001b0c <cld+0xc>)
 8001b02:	7813      	ldrb	r3, [r2, #0]
 8001b04:	f023 0308 	bic.w	r3, r3, #8
 8001b08:	7013      	strb	r3, [r2, #0]
}
 8001b0a:	4770      	bx	lr
 8001b0c:	2000814c 	.word	0x2000814c

08001b10 <cli>:
    clearinterrupt();
 8001b10:	4a02      	ldr	r2, [pc, #8]	; (8001b1c <cli+0xc>)
 8001b12:	7813      	ldrb	r3, [r2, #0]
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	7013      	strb	r3, [r2, #0]
}
 8001b1a:	4770      	bx	lr
 8001b1c:	2000814c 	.word	0x2000814c

08001b20 <clv>:
    clearoverflow();
 8001b20:	4a02      	ldr	r2, [pc, #8]	; (8001b2c <clv+0xc>)
 8001b22:	7813      	ldrb	r3, [r2, #0]
 8001b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b28:	7013      	strb	r3, [r2, #0]
}
 8001b2a:	4770      	bx	lr
 8001b2c:	2000814c 	.word	0x2000814c

08001b30 <cmp>:
void cmp() {
 8001b30:	b508      	push	{r3, lr}
    value = getvalue();
 8001b32:	f7ff fc29 	bl	8001388 <getvalue>
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <cmp+0x4c>)
    result = (uint16_t)a - value;
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <cmp+0x50>)
    value = getvalue();
 8001b3a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <cmp+0x54>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	1a19      	subs	r1, r3, r0
 8001b42:	b289      	uxth	r1, r1
 8001b44:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8001b46:	b2c0      	uxtb	r0, r0
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <cmp+0x58>)
 8001b4a:	4283      	cmp	r3, r0
 8001b4c:	7813      	ldrb	r3, [r2, #0]
 8001b4e:	d307      	bcc.n	8001b60 <cmp+0x30>
 8001b50:	f043 0001 	orr.w	r0, r3, #1
 8001b54:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001b56:	d007      	beq.n	8001b68 <cmp+0x38>
        else clearzero();
 8001b58:	7813      	ldrb	r3, [r2, #0]
 8001b5a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001b5e:	e005      	b.n	8001b6c <cmp+0x3c>
        else clearcarry();
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001b66:	e7f7      	b.n	8001b58 <cmp+0x28>
 8001b68:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001b6c:	0609      	lsls	r1, r1, #24
 8001b6e:	bf4c      	ite	mi
 8001b70:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001b74:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001b78:	7013      	strb	r3, [r2, #0]
}
 8001b7a:	bd08      	pop	{r3, pc}
 8001b7c:	20008160 	.word	0x20008160
 8001b80:	2000815c 	.word	0x2000815c
 8001b84:	20008145 	.word	0x20008145
 8001b88:	2000814c 	.word	0x2000814c

08001b8c <cpx>:
void cpx() {
 8001b8c:	b508      	push	{r3, lr}
    value = getvalue();
 8001b8e:	f7ff fbfb 	bl	8001388 <getvalue>
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <cpx+0x4c>)
    result = (uint16_t)x - value;
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <cpx+0x50>)
    value = getvalue();
 8001b96:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <cpx+0x54>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	1a19      	subs	r1, r3, r0
 8001b9e:	b289      	uxth	r1, r1
 8001ba0:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8001ba2:	b2c0      	uxtb	r0, r0
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <cpx+0x58>)
 8001ba6:	4283      	cmp	r3, r0
 8001ba8:	7813      	ldrb	r3, [r2, #0]
 8001baa:	d307      	bcc.n	8001bbc <cpx+0x30>
 8001bac:	f043 0001 	orr.w	r0, r3, #1
 8001bb0:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001bb2:	d007      	beq.n	8001bc4 <cpx+0x38>
        else clearzero();
 8001bb4:	7813      	ldrb	r3, [r2, #0]
 8001bb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001bba:	e005      	b.n	8001bc8 <cpx+0x3c>
        else clearcarry();
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001bc2:	e7f7      	b.n	8001bb4 <cpx+0x28>
 8001bc4:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001bc8:	0609      	lsls	r1, r1, #24
 8001bca:	bf4c      	ite	mi
 8001bcc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001bd0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001bd4:	7013      	strb	r3, [r2, #0]
}
 8001bd6:	bd08      	pop	{r3, pc}
 8001bd8:	20008160 	.word	0x20008160
 8001bdc:	2000815c 	.word	0x2000815c
 8001be0:	20008162 	.word	0x20008162
 8001be4:	2000814c 	.word	0x2000814c

08001be8 <cpy>:
void cpy() {
 8001be8:	b508      	push	{r3, lr}
    value = getvalue();
 8001bea:	f7ff fbcd 	bl	8001388 <getvalue>
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <cpy+0x4c>)
    result = (uint16_t)y - value;
 8001bf0:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <cpy+0x50>)
    value = getvalue();
 8001bf2:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <cpy+0x54>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	1a19      	subs	r1, r3, r0
 8001bfa:	b289      	uxth	r1, r1
 8001bfc:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 8001bfe:	b2c0      	uxtb	r0, r0
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <cpy+0x58>)
 8001c02:	4283      	cmp	r3, r0
 8001c04:	7813      	ldrb	r3, [r2, #0]
 8001c06:	d307      	bcc.n	8001c18 <cpy+0x30>
 8001c08:	f043 0001 	orr.w	r0, r3, #1
 8001c0c:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8001c0e:	d007      	beq.n	8001c20 <cpy+0x38>
        else clearzero();
 8001c10:	7813      	ldrb	r3, [r2, #0]
 8001c12:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001c16:	e005      	b.n	8001c24 <cpy+0x3c>
        else clearcarry();
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8001c1e:	e7f7      	b.n	8001c10 <cpy+0x28>
 8001c20:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001c24:	0609      	lsls	r1, r1, #24
 8001c26:	bf4c      	ite	mi
 8001c28:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001c2c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001c30:	7013      	strb	r3, [r2, #0]
}
 8001c32:	bd08      	pop	{r3, pc}
 8001c34:	20008160 	.word	0x20008160
 8001c38:	2000815c 	.word	0x2000815c
 8001c3c:	20008163 	.word	0x20008163
 8001c40:	2000814c 	.word	0x2000814c

08001c44 <dec>:
void dec() {
 8001c44:	b508      	push	{r3, lr}
    value = getvalue();
 8001c46:	f7ff fb9f 	bl	8001388 <getvalue>
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <dec+0x3c>)
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <dec+0x40>)
 8001c4e:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <dec+0x44>)
 8001c52:	3801      	subs	r0, #1
 8001c54:	b280      	uxth	r0, r0
 8001c56:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8001c58:	b2c3      	uxtb	r3, r0
 8001c5a:	b16b      	cbz	r3, 8001c78 <dec+0x34>
 8001c5c:	7813      	ldrb	r3, [r2, #0]
 8001c5e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001c62:	0601      	lsls	r1, r0, #24
 8001c64:	bf4c      	ite	mi
 8001c66:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001c6a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001c6e:	7013      	strb	r3, [r2, #0]
}
 8001c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001c74:	f7ff bd28 	b.w	80016c8 <putvalue>
    zerocalc(result);
 8001c78:	7813      	ldrb	r3, [r2, #0]
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	e7f0      	b.n	8001c62 <dec+0x1e>
 8001c80:	20008160 	.word	0x20008160
 8001c84:	2000814c 	.word	0x2000814c
 8001c88:	2000815c 	.word	0x2000815c

08001c8c <dex>:
    x--;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <dex+0x2c>)
    zerocalc(x);
 8001c8e:	490b      	ldr	r1, [pc, #44]	; (8001cbc <dex+0x30>)
    x--;
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	3a01      	subs	r2, #1
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001c98:	780b      	ldrb	r3, [r1, #0]
 8001c9a:	b132      	cbz	r2, 8001caa <dex+0x1e>
 8001c9c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001ca0:	0612      	lsls	r2, r2, #24
 8001ca2:	700b      	strb	r3, [r1, #0]
 8001ca4:	d504      	bpl.n	8001cb0 <dex+0x24>
 8001ca6:	f7ff bb8b 	b.w	80013c0 <dex.part.0>
    zerocalc(x);
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	e7f7      	b.n	8001ca0 <dex+0x14>
    signcalc(x);
 8001cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb4:	700b      	strb	r3, [r1, #0]
}
 8001cb6:	4770      	bx	lr
 8001cb8:	20008162 	.word	0x20008162
 8001cbc:	2000814c 	.word	0x2000814c

08001cc0 <dey>:

void dey() {
    y--;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <dey+0x2c>)
   
    zerocalc(y);
 8001cc2:	490b      	ldr	r1, [pc, #44]	; (8001cf0 <dey+0x30>)
    y--;
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	3a01      	subs	r2, #1
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001ccc:	780b      	ldrb	r3, [r1, #0]
 8001cce:	b132      	cbz	r2, 8001cde <dey+0x1e>
 8001cd0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001cd4:	0612      	lsls	r2, r2, #24
 8001cd6:	700b      	strb	r3, [r1, #0]
 8001cd8:	d504      	bpl.n	8001ce4 <dey+0x24>
 8001cda:	f7ff bb71 	b.w	80013c0 <dex.part.0>
    zerocalc(y);
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	e7f7      	b.n	8001cd4 <dey+0x14>
    signcalc(y);
 8001ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce8:	700b      	strb	r3, [r1, #0]
}
 8001cea:	4770      	bx	lr
 8001cec:	20008163 	.word	0x20008163
 8001cf0:	2000814c 	.word	0x2000814c

08001cf4 <eor>:

void eor() {
 8001cf4:	b508      	push	{r3, lr}
    value = getvalue();
 8001cf6:	f7ff fb47 	bl	8001388 <getvalue>
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 8001cfc:	490d      	ldr	r1, [pc, #52]	; (8001d34 <eor+0x40>)
    value = getvalue();
 8001cfe:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8001d00:	780b      	ldrb	r3, [r1, #0]
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <eor+0x44>)
 8001d04:	4058      	eors	r0, r3
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <eor+0x48>)
 8001d08:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001d0a:	b2c3      	uxtb	r3, r0
 8001d0c:	b163      	cbz	r3, 8001d28 <eor+0x34>
 8001d0e:	7813      	ldrb	r3, [r2, #0]
 8001d10:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001d14:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d18:	bf14      	ite	ne
 8001d1a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001d1e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001d22:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001d24:	7008      	strb	r0, [r1, #0]
}
 8001d26:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001d28:	7813      	ldrb	r3, [r2, #0]
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	e7f1      	b.n	8001d14 <eor+0x20>
 8001d30:	20008160 	.word	0x20008160
 8001d34:	20008145 	.word	0x20008145
 8001d38:	2000814c 	.word	0x2000814c
 8001d3c:	2000815c 	.word	0x2000815c

08001d40 <inc>:

void inc() {
 8001d40:	b508      	push	{r3, lr}
    value = getvalue();
 8001d42:	f7ff fb21 	bl	8001388 <getvalue>
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <inc+0x3c>)
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <inc+0x40>)
 8001d4a:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <inc+0x44>)
 8001d4e:	3001      	adds	r0, #1
 8001d50:	b280      	uxth	r0, r0
 8001d52:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001d54:	b2c3      	uxtb	r3, r0
 8001d56:	b16b      	cbz	r3, 8001d74 <inc+0x34>
 8001d58:	7813      	ldrb	r3, [r2, #0]
 8001d5a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001d5e:	0601      	lsls	r1, r0, #24
 8001d60:	bf4c      	ite	mi
 8001d62:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001d66:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001d6a:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001d6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001d70:	f7ff bcaa 	b.w	80016c8 <putvalue>
    zerocalc(result);
 8001d74:	7813      	ldrb	r3, [r2, #0]
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	e7f0      	b.n	8001d5e <inc+0x1e>
 8001d7c:	20008160 	.word	0x20008160
 8001d80:	2000814c 	.word	0x2000814c
 8001d84:	2000815c 	.word	0x2000815c

08001d88 <inx>:

void inx() {
    x++;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <inx+0x2c>)
   
    zerocalc(x);
 8001d8a:	490b      	ldr	r1, [pc, #44]	; (8001db8 <inx+0x30>)
    x++;
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	3201      	adds	r2, #1
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001d94:	780b      	ldrb	r3, [r1, #0]
 8001d96:	b132      	cbz	r2, 8001da6 <inx+0x1e>
 8001d98:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001d9c:	0612      	lsls	r2, r2, #24
 8001d9e:	700b      	strb	r3, [r1, #0]
 8001da0:	d504      	bpl.n	8001dac <inx+0x24>
 8001da2:	f7ff bb0d 	b.w	80013c0 <dex.part.0>
    zerocalc(x);
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	e7f7      	b.n	8001d9c <inx+0x14>
    signcalc(x);
 8001dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db0:	700b      	strb	r3, [r1, #0]
}
 8001db2:	4770      	bx	lr
 8001db4:	20008162 	.word	0x20008162
 8001db8:	2000814c 	.word	0x2000814c

08001dbc <iny>:

void iny() {
    y++;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <iny+0x2c>)
   
    zerocalc(y);
 8001dbe:	490b      	ldr	r1, [pc, #44]	; (8001dec <iny+0x30>)
    y++;
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001dc8:	780b      	ldrb	r3, [r1, #0]
 8001dca:	b132      	cbz	r2, 8001dda <iny+0x1e>
 8001dcc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001dd0:	0612      	lsls	r2, r2, #24
 8001dd2:	700b      	strb	r3, [r1, #0]
 8001dd4:	d504      	bpl.n	8001de0 <iny+0x24>
 8001dd6:	f7ff baf3 	b.w	80013c0 <dex.part.0>
    zerocalc(y);
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	e7f7      	b.n	8001dd0 <iny+0x14>
    signcalc(y);
 8001de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de4:	700b      	strb	r3, [r1, #0]
}
 8001de6:	4770      	bx	lr
 8001de8:	20008163 	.word	0x20008163
 8001dec:	2000814c 	.word	0x2000814c

08001df0 <jmp>:

void jmp() {
    pc = ea;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <jmp+0xc>)
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <jmp+0x10>)
 8001df6:	801a      	strh	r2, [r3, #0]
}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000814e 	.word	0x2000814e
 8001e00:	20008158 	.word	0x20008158

08001e04 <jsr>:

void jsr() {
 8001e04:	b510      	push	{r4, lr}
    push16(pc - 1);
 8001e06:	4c05      	ldr	r4, [pc, #20]	; (8001e1c <jsr+0x18>)
 8001e08:	8820      	ldrh	r0, [r4, #0]
 8001e0a:	3801      	subs	r0, #1
 8001e0c:	b280      	uxth	r0, r0
 8001e0e:	f7ff fadf 	bl	80013d0 <push16>
    pc = ea;
 8001e12:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <jsr+0x1c>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	8023      	strh	r3, [r4, #0]
}
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20008158 	.word	0x20008158
 8001e20:	2000814e 	.word	0x2000814e

08001e24 <lda>:

void lda() {
 8001e24:	b508      	push	{r3, lr}
    value = getvalue();
 8001e26:	f7ff faaf 	bl	8001388 <getvalue>
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <lda+0x3c>)
    value = getvalue();
 8001e2e:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001e30:	b2c3      	uxtb	r3, r0
 8001e32:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <lda+0x40>)
 8001e36:	b14b      	cbz	r3, 8001e4c <lda+0x28>
 8001e38:	7813      	ldrb	r3, [r2, #0]
 8001e3a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001e3e:	0601      	lsls	r1, r0, #24
 8001e40:	7013      	strb	r3, [r2, #0]
 8001e42:	d507      	bpl.n	8001e54 <lda+0x30>
}
 8001e44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e48:	f7ff baba 	b.w	80013c0 <dex.part.0>
    zerocalc(a);
 8001e4c:	7813      	ldrb	r3, [r2, #0]
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	e7f4      	b.n	8001e3e <lda+0x1a>
    signcalc(a);
 8001e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e58:	7013      	strb	r3, [r2, #0]
}
 8001e5a:	bd08      	pop	{r3, pc}
 8001e5c:	20008160 	.word	0x20008160
 8001e60:	20008145 	.word	0x20008145
 8001e64:	2000814c 	.word	0x2000814c

08001e68 <ldx>:

void ldx() {
 8001e68:	b508      	push	{r3, lr}
    value = getvalue();
 8001e6a:	f7ff fa8d 	bl	8001388 <getvalue>
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <ldx+0x3c>)
    value = getvalue();
 8001e72:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 8001e74:	b2c3      	uxtb	r3, r0
 8001e76:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <ldx+0x40>)
 8001e7a:	b14b      	cbz	r3, 8001e90 <ldx+0x28>
 8001e7c:	7813      	ldrb	r3, [r2, #0]
 8001e7e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001e82:	0601      	lsls	r1, r0, #24
 8001e84:	7013      	strb	r3, [r2, #0]
 8001e86:	d507      	bpl.n	8001e98 <ldx+0x30>
}
 8001e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e8c:	f7ff ba98 	b.w	80013c0 <dex.part.0>
    zerocalc(x);
 8001e90:	7813      	ldrb	r3, [r2, #0]
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	e7f4      	b.n	8001e82 <ldx+0x1a>
    signcalc(x);
 8001e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9c:	7013      	strb	r3, [r2, #0]
}
 8001e9e:	bd08      	pop	{r3, pc}
 8001ea0:	20008160 	.word	0x20008160
 8001ea4:	20008162 	.word	0x20008162
 8001ea8:	2000814c 	.word	0x2000814c

08001eac <ldy>:

void ldy() {
 8001eac:	b508      	push	{r3, lr}
    value = getvalue();
 8001eae:	f7ff fa6b 	bl	8001388 <getvalue>
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <ldy+0x3c>)
    value = getvalue();
 8001eb6:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 8001eb8:	b2c3      	uxtb	r3, r0
 8001eba:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <ldy+0x40>)
 8001ebe:	b14b      	cbz	r3, 8001ed4 <ldy+0x28>
 8001ec0:	7813      	ldrb	r3, [r2, #0]
 8001ec2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001ec6:	0601      	lsls	r1, r0, #24
 8001ec8:	7013      	strb	r3, [r2, #0]
 8001eca:	d507      	bpl.n	8001edc <ldy+0x30>
}
 8001ecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ed0:	f7ff ba76 	b.w	80013c0 <dex.part.0>
    zerocalc(y);
 8001ed4:	7813      	ldrb	r3, [r2, #0]
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	e7f4      	b.n	8001ec6 <ldy+0x1a>
    signcalc(y);
 8001edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee0:	7013      	strb	r3, [r2, #0]
}
 8001ee2:	bd08      	pop	{r3, pc}
 8001ee4:	20008160 	.word	0x20008160
 8001ee8:	20008163 	.word	0x20008163
 8001eec:	2000814c 	.word	0x2000814c

08001ef0 <lsr>:

void lsr() {
 8001ef0:	b508      	push	{r3, lr}
    value = getvalue();
 8001ef2:	f7ff fa49 	bl	8001388 <getvalue>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 8001efa:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 8001efe:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <lsr+0x50>)
 8001f02:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001f06:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 8001f0a:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 8001f0c:	7813      	ldrb	r3, [r2, #0]
 8001f0e:	bf14      	ite	ne
 8001f10:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 8001f14:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001f18:	b161      	cbz	r1, 8001f34 <lsr+0x44>
 8001f1a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001f1e:	0601      	lsls	r1, r0, #24
 8001f20:	bf4c      	ite	mi
 8001f22:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001f26:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001f2a:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001f30:	f7ff bbca 	b.w	80016c8 <putvalue>
    zerocalc(result);
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	e7f1      	b.n	8001f1e <lsr+0x2e>
 8001f3a:	bf00      	nop
 8001f3c:	20008160 	.word	0x20008160
 8001f40:	2000815c 	.word	0x2000815c
 8001f44:	2000814c 	.word	0x2000814c

08001f48 <ora>:

void nop() {
}

void ora() {
 8001f48:	b508      	push	{r3, lr}
    value = getvalue();
 8001f4a:	f7ff fa1d 	bl	8001388 <getvalue>
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <ora+0x3c>)
    result = (uint16_t)a | value;
 8001f50:	490d      	ldr	r1, [pc, #52]	; (8001f88 <ora+0x40>)
    value = getvalue();
 8001f52:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 8001f54:	780b      	ldrb	r3, [r1, #0]
 8001f56:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <ora+0x44>)
 8001f58:	4318      	orrs	r0, r3
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <ora+0x48>)
 8001f5c:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001f5e:	b2c3      	uxtb	r3, r0
 8001f60:	b163      	cbz	r3, 8001f7c <ora+0x34>
 8001f62:	7813      	ldrb	r3, [r2, #0]
 8001f64:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001f68:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f6c:	bf14      	ite	ne
 8001f6e:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001f72:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001f76:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001f78:	7008      	strb	r0, [r1, #0]
}
 8001f7a:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001f7c:	7813      	ldrb	r3, [r2, #0]
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	e7f1      	b.n	8001f68 <ora+0x20>
 8001f84:	20008160 	.word	0x20008160
 8001f88:	20008145 	.word	0x20008145
 8001f8c:	2000814c 	.word	0x2000814c
 8001f90:	2000815c 	.word	0x2000815c

08001f94 <pha>:

void pha() {
    push8(a);
 8001f94:	4b01      	ldr	r3, [pc, #4]	; (8001f9c <pha+0x8>)
 8001f96:	7818      	ldrb	r0, [r3, #0]
 8001f98:	f7ff ba32 	b.w	8001400 <push8>
 8001f9c:	20008145 	.word	0x20008145

08001fa0 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <php+0xc>)
 8001fa2:	7818      	ldrb	r0, [r3, #0]
 8001fa4:	f040 0010 	orr.w	r0, r0, #16
 8001fa8:	f7ff ba2a 	b.w	8001400 <push8>
 8001fac:	2000814c 	.word	0x2000814c

08001fb0 <pla>:
}

void pla() {
 8001fb0:	b508      	push	{r3, lr}
    a = pull8();
 8001fb2:	f7ff fa4b 	bl	800144c <pull8>
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <pla+0x30>)
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <pla+0x34>)
 8001fba:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 8001fbc:	7813      	ldrb	r3, [r2, #0]
 8001fbe:	b140      	cbz	r0, 8001fd2 <pla+0x22>
 8001fc0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001fc4:	0601      	lsls	r1, r0, #24
 8001fc6:	7013      	strb	r3, [r2, #0]
 8001fc8:	d506      	bpl.n	8001fd8 <pla+0x28>
}
 8001fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001fce:	f7ff b9f7 	b.w	80013c0 <dex.part.0>
    zerocalc(a);
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	e7f5      	b.n	8001fc4 <pla+0x14>
    signcalc(a);
 8001fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fdc:	7013      	strb	r3, [r2, #0]
}
 8001fde:	bd08      	pop	{r3, pc}
 8001fe0:	20008145 	.word	0x20008145
 8001fe4:	2000814c 	.word	0x2000814c

08001fe8 <plp>:

void plp() {
 8001fe8:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 8001fea:	f7ff fa2f 	bl	800144c <pull8>
 8001fee:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <plp+0x10>)
 8001ff0:	f040 0020 	orr.w	r0, r0, #32
 8001ff4:	7018      	strb	r0, [r3, #0]
}
 8001ff6:	bd08      	pop	{r3, pc}
 8001ff8:	2000814c 	.word	0x2000814c

08001ffc <rol>:

void rol() {
 8001ffc:	b508      	push	{r3, lr}
    value = getvalue();
 8001ffe:	f7ff f9c3 	bl	8001388 <getvalue>
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002004:	4912      	ldr	r1, [pc, #72]	; (8002050 <rol+0x54>)
    value = getvalue();
 8002006:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002008:	780b      	ldrb	r3, [r1, #0]
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <rol+0x58>)
 8002014:	b280      	uxth	r0, r0
   
    carrycalc(result);
 8002016:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 800201a:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 800201c:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 800201e:	bf14      	ite	ne
 8002020:	f043 0301 	orrne.w	r3, r3, #1
 8002024:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002028:	b162      	cbz	r2, 8002044 <rol+0x48>
 800202a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800202e:	0602      	lsls	r2, r0, #24
 8002030:	bf4c      	ite	mi
 8002032:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8002036:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800203a:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 800203c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8002040:	f7ff bb42 	b.w	80016c8 <putvalue>
    zerocalc(result);
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	e7f1      	b.n	800202e <rol+0x32>
 800204a:	bf00      	nop
 800204c:	20008160 	.word	0x20008160
 8002050:	2000814c 	.word	0x2000814c
 8002054:	2000815c 	.word	0x2000815c

08002058 <ror>:

void ror() {
 8002058:	b510      	push	{r4, lr}
    value = getvalue();
 800205a:	f7ff f995 	bl	8001388 <getvalue>
 800205e:	4601      	mov	r1, r0
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8002062:	4c12      	ldr	r4, [pc, #72]	; (80020ac <ror+0x54>)
    value = getvalue();
 8002064:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8002066:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 8002068:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800206a:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <ror+0x58>)
    if (value & 1) setcarry();
 8002076:	bf48      	it	mi
 8002078:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800207c:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 800207e:	b2c2      	uxtb	r2, r0
        else clearcarry();
 8002080:	bf58      	it	pl
 8002082:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002086:	b162      	cbz	r2, 80020a2 <ror+0x4a>
 8002088:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800208c:	0602      	lsls	r2, r0, #24
 800208e:	bf4c      	ite	mi
 8002090:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8002094:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8002098:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 800209a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 800209e:	f7ff bb13 	b.w	80016c8 <putvalue>
    zerocalc(result);
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	e7f1      	b.n	800208c <ror+0x34>
 80020a8:	20008160 	.word	0x20008160
 80020ac:	2000814c 	.word	0x2000814c
 80020b0:	2000815c 	.word	0x2000815c

080020b4 <rti>:

void rti() {
 80020b4:	b508      	push	{r3, lr}
    cpustatus = pull8();
 80020b6:	f7ff f9c9 	bl	800144c <pull8>
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <rti+0x18>)
 80020bc:	7018      	strb	r0, [r3, #0]
    value = pull16();
 80020be:	f7ff f9ab 	bl	8001418 <pull16>
 80020c2:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <rti+0x1c>)
 80020c4:	8018      	strh	r0, [r3, #0]
    pc = value;
 80020c6:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <rti+0x20>)
 80020c8:	8018      	strh	r0, [r3, #0]
}
 80020ca:	bd08      	pop	{r3, pc}
 80020cc:	2000814c 	.word	0x2000814c
 80020d0:	20008160 	.word	0x20008160
 80020d4:	20008158 	.word	0x20008158

080020d8 <rts>:

void rts() {
 80020d8:	b508      	push	{r3, lr}
    value = pull16();
 80020da:	f7ff f99d 	bl	8001418 <pull16>
 80020de:	4b03      	ldr	r3, [pc, #12]	; (80020ec <rts+0x14>)
 80020e0:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 80020e2:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <rts+0x18>)
 80020e4:	3001      	adds	r0, #1
 80020e6:	8018      	strh	r0, [r3, #0]
}
 80020e8:	bd08      	pop	{r3, pc}
 80020ea:	bf00      	nop
 80020ec:	20008160 	.word	0x20008160
 80020f0:	20008158 	.word	0x20008158

080020f4 <sbc>:

void sbc() {
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 80020f6:	f7ff f947 	bl	8001388 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80020fa:	4d27      	ldr	r5, [pc, #156]	; (8002198 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <sbc+0xa8>)
 80020fe:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8002102:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002104:	4c26      	ldr	r4, [pc, #152]	; (80021a0 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 8002106:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002108:	782b      	ldrb	r3, [r5, #0]
 800210a:	7821      	ldrb	r1, [r4, #0]
 800210c:	f003 0201 	and.w	r2, r3, #1
 8002110:	440a      	add	r2, r1
 8002112:	4e24      	ldr	r6, [pc, #144]	; (80021a4 <sbc+0xb0>)
 8002114:	4402      	add	r2, r0
 8002116:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8002118:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800211c:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800211e:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8002120:	bf14      	ite	ne
 8002122:	f043 0301 	orrne.w	r3, r3, #1
 8002126:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800212a:	b1c6      	cbz	r6, 800215e <sbc+0x6a>
 800212c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8002130:	ea81 0602 	eor.w	r6, r1, r2
 8002134:	ea80 0702 	eor.w	r7, r0, r2
 8002138:	4630      	mov	r0, r6
 800213a:	4038      	ands	r0, r7
 800213c:	0607      	lsls	r7, r0, #24
 800213e:	bf4c      	ite	mi
 8002140:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8002144:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8002148:	0616      	lsls	r6, r2, #24
 800214a:	bf4c      	ite	mi
 800214c:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8002150:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 8002154:	0718      	lsls	r0, r3, #28
 8002156:	d405      	bmi.n	8002164 <sbc+0x70>
 8002158:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 800215a:	7022      	strb	r2, [r4, #0]
}
 800215c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	e7e5      	b.n	8002130 <sbc+0x3c>
        a -= 0x66;
 8002164:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 8002168:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 800216a:	f000 000f 	and.w	r0, r0, #15
 800216e:	2809      	cmp	r0, #9
            a += 0x06;
 8002170:	bf8a      	itet	hi
 8002172:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 8002174:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 8002176:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8002178:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 800217a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 800217e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8002182:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8002184:	4908      	ldr	r1, [pc, #32]	; (80021a8 <sbc+0xb4>)
        clearcarry();
 8002186:	702b      	strb	r3, [r5, #0]
            setcarry();
 8002188:	bf84      	itt	hi
 800218a:	f043 0301 	orrhi.w	r3, r3, #1
 800218e:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8002190:	680b      	ldr	r3, [r1, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	600b      	str	r3, [r1, #0]
 8002196:	e7e0      	b.n	800215a <sbc+0x66>
 8002198:	2000814c 	.word	0x2000814c
 800219c:	20008160 	.word	0x20008160
 80021a0:	20008145 	.word	0x20008145
 80021a4:	2000815c 	.word	0x2000815c
 80021a8:	20008148 	.word	0x20008148

080021ac <sec>:

void sec() {
    setcarry();
 80021ac:	4a02      	ldr	r2, [pc, #8]	; (80021b8 <sec+0xc>)
 80021ae:	7813      	ldrb	r3, [r2, #0]
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	7013      	strb	r3, [r2, #0]
}
 80021b6:	4770      	bx	lr
 80021b8:	2000814c 	.word	0x2000814c

080021bc <sed>:

void sed() {
    setdecimal();
 80021bc:	4a02      	ldr	r2, [pc, #8]	; (80021c8 <sed+0xc>)
 80021be:	7813      	ldrb	r3, [r2, #0]
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	7013      	strb	r3, [r2, #0]
}
 80021c6:	4770      	bx	lr
 80021c8:	2000814c 	.word	0x2000814c

080021cc <sei>:

void sei() {
    setinterrupt();
 80021cc:	4a02      	ldr	r2, [pc, #8]	; (80021d8 <sei+0xc>)
 80021ce:	7813      	ldrb	r3, [r2, #0]
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	7013      	strb	r3, [r2, #0]
}
 80021d6:	4770      	bx	lr
 80021d8:	2000814c 	.word	0x2000814c

080021dc <sta>:

void sta() {
    putvalue(a);
 80021dc:	4b01      	ldr	r3, [pc, #4]	; (80021e4 <sta+0x8>)
 80021de:	7818      	ldrb	r0, [r3, #0]
 80021e0:	f7ff ba72 	b.w	80016c8 <putvalue>
 80021e4:	20008145 	.word	0x20008145

080021e8 <stx>:
}

void stx() {
    putvalue(x);
 80021e8:	4b01      	ldr	r3, [pc, #4]	; (80021f0 <stx+0x8>)
 80021ea:	7818      	ldrb	r0, [r3, #0]
 80021ec:	f7ff ba6c 	b.w	80016c8 <putvalue>
 80021f0:	20008162 	.word	0x20008162

080021f4 <sty>:
}

void sty() {
    putvalue(y);
 80021f4:	4b01      	ldr	r3, [pc, #4]	; (80021fc <sty+0x8>)
 80021f6:	7818      	ldrb	r0, [r3, #0]
 80021f8:	f7ff ba66 	b.w	80016c8 <putvalue>
 80021fc:	20008163 	.word	0x20008163

08002200 <tax>:
}

void tax() {
    x = a;
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <tax+0x2c>)
   
    zerocalc(x);
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <tax+0x30>)
    x = a;
 8002204:	7819      	ldrb	r1, [r3, #0]
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <tax+0x34>)
 8002208:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800220a:	7813      	ldrb	r3, [r2, #0]
 800220c:	b131      	cbz	r1, 800221c <tax+0x1c>
 800220e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8002212:	0609      	lsls	r1, r1, #24
 8002214:	7013      	strb	r3, [r2, #0]
 8002216:	d504      	bpl.n	8002222 <tax+0x22>
 8002218:	f7ff b8d2 	b.w	80013c0 <dex.part.0>
    zerocalc(x);
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	e7f7      	b.n	8002212 <tax+0x12>
    signcalc(x);
 8002222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002226:	7013      	strb	r3, [r2, #0]
}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20008145 	.word	0x20008145
 8002230:	2000814c 	.word	0x2000814c
 8002234:	20008162 	.word	0x20008162

08002238 <tay>:

void tay() {
    y = a;
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <tay+0x2c>)
   
    zerocalc(y);
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <tay+0x30>)
    y = a;
 800223c:	7819      	ldrb	r1, [r3, #0]
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <tay+0x34>)
 8002240:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 8002242:	7813      	ldrb	r3, [r2, #0]
 8002244:	b131      	cbz	r1, 8002254 <tay+0x1c>
 8002246:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 800224a:	0609      	lsls	r1, r1, #24
 800224c:	7013      	strb	r3, [r2, #0]
 800224e:	d504      	bpl.n	800225a <tay+0x22>
 8002250:	f7ff b8b6 	b.w	80013c0 <dex.part.0>
    zerocalc(y);
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	e7f7      	b.n	800224a <tay+0x12>
    signcalc(y);
 800225a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225e:	7013      	strb	r3, [r2, #0]
}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20008145 	.word	0x20008145
 8002268:	2000814c 	.word	0x2000814c
 800226c:	20008163 	.word	0x20008163

08002270 <tsx>:

void tsx() {
    x = sp;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <tsx+0x2c>)
   
    zerocalc(x);
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <tsx+0x30>)
    x = sp;
 8002274:	7819      	ldrb	r1, [r3, #0]
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <tsx+0x34>)
 8002278:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800227a:	7813      	ldrb	r3, [r2, #0]
 800227c:	b131      	cbz	r1, 800228c <tsx+0x1c>
 800227e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8002282:	0609      	lsls	r1, r1, #24
 8002284:	7013      	strb	r3, [r2, #0]
 8002286:	d504      	bpl.n	8002292 <tsx+0x22>
 8002288:	f7ff b89a 	b.w	80013c0 <dex.part.0>
    zerocalc(x);
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	e7f7      	b.n	8002282 <tsx+0x12>
    signcalc(x);
 8002292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002296:	7013      	strb	r3, [r2, #0]
}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2000815e 	.word	0x2000815e
 80022a0:	2000814c 	.word	0x2000814c
 80022a4:	20008162 	.word	0x20008162

080022a8 <txa>:

void txa() {
    a = x;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <txa+0x2c>)
   
    zerocalc(a);
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <txa+0x30>)
    a = x;
 80022ac:	7819      	ldrb	r1, [r3, #0]
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <txa+0x34>)
 80022b0:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80022b2:	7813      	ldrb	r3, [r2, #0]
 80022b4:	b131      	cbz	r1, 80022c4 <txa+0x1c>
 80022b6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80022ba:	0609      	lsls	r1, r1, #24
 80022bc:	7013      	strb	r3, [r2, #0]
 80022be:	d504      	bpl.n	80022ca <txa+0x22>
 80022c0:	f7ff b87e 	b.w	80013c0 <dex.part.0>
    zerocalc(a);
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	e7f7      	b.n	80022ba <txa+0x12>
    signcalc(a);
 80022ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ce:	7013      	strb	r3, [r2, #0]
}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20008162 	.word	0x20008162
 80022d8:	2000814c 	.word	0x2000814c
 80022dc:	20008145 	.word	0x20008145

080022e0 <txs>:

void txs() {
    sp = x;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <txs+0xc>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <txs+0x10>)
 80022e6:	701a      	strb	r2, [r3, #0]
}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20008162 	.word	0x20008162
 80022f0:	2000815e 	.word	0x2000815e

080022f4 <tya>:

void tya() {
    a = y;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <tya+0x2c>)
   
    zerocalc(a);
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <tya+0x30>)
    a = y;
 80022f8:	7819      	ldrb	r1, [r3, #0]
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <tya+0x34>)
 80022fc:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80022fe:	7813      	ldrb	r3, [r2, #0]
 8002300:	b131      	cbz	r1, 8002310 <tya+0x1c>
 8002302:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8002306:	0609      	lsls	r1, r1, #24
 8002308:	7013      	strb	r3, [r2, #0]
 800230a:	d504      	bpl.n	8002316 <tya+0x22>
 800230c:	f7ff b858 	b.w	80013c0 <dex.part.0>
    zerocalc(a);
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	e7f7      	b.n	8002306 <tya+0x12>
    signcalc(a);
 8002316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800231a:	7013      	strb	r3, [r2, #0]
}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20008163 	.word	0x20008163
 8002324:	2000814c 	.word	0x2000814c
 8002328:	20008145 	.word	0x20008145

0800232c <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 8002330:	4e01      	ldr	r6, [pc, #4]	; (8002338 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 8002332:	4d02      	ldr	r5, [pc, #8]	; (800233c <exec6502+0x10>)
  while (tickcount--) {
 8002334:	b924      	cbnz	r4, 8002340 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	20008158 	.word	0x20008158
 800233c:	2000815f 	.word	0x2000815f
    opcode = read6502(pc++);
 8002340:	8830      	ldrh	r0, [r6, #0]
 8002342:	1c43      	adds	r3, r0, #1
 8002344:	8033      	strh	r3, [r6, #0]
 8002346:	f7fe ff11 	bl	800116c <read6502>
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 800234c:	4a05      	ldr	r2, [pc, #20]	; (8002364 <exec6502+0x38>)
    opcode = read6502(pc++);
 800234e:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8002350:	7813      	ldrb	r3, [r2, #0]
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	702b      	strb	r3, [r5, #0]
 800235c:	e004      	b.n	8002368 <exec6502+0x3c>
 800235e:	bf00      	nop
 8002360:	20008156 	.word	0x20008156
 8002364:	2000814c 	.word	0x2000814c
		switch (opcode) {
 8002368:	28fe      	cmp	r0, #254	; 0xfe
 800236a:	f200 8103 	bhi.w	8002574 <exec6502+0x248>
 800236e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002372:	00ff      	.short	0x00ff
 8002374:	01010107 	.word	0x01010107
 8002378:	01010101 	.word	0x01010101
 800237c:	0111010c 	.word	0x0111010c
 8002380:	01160101 	.word	0x01160101
 8002384:	011e0119 	.word	0x011e0119
 8002388:	01010101 	.word	0x01010101
 800238c:	01280123 	.word	0x01280123
 8002390:	012d0101 	.word	0x012d0101
 8002394:	01010132 	.word	0x01010132
 8002398:	01010101 	.word	0x01010101
 800239c:	013c0137 	.word	0x013c0137
 80023a0:	01410101 	.word	0x01410101
 80023a4:	01010144 	.word	0x01010144
 80023a8:	01010101 	.word	0x01010101
 80023ac:	014e0149 	.word	0x014e0149
 80023b0:	01530101 	.word	0x01530101
 80023b4:	01010158 	.word	0x01010158
 80023b8:	015d0101 	.word	0x015d0101
 80023bc:	01670162 	.word	0x01670162
 80023c0:	016c0101 	.word	0x016c0101
 80023c4:	0174016f 	.word	0x0174016f
 80023c8:	01790101 	.word	0x01790101
 80023cc:	0183017e 	.word	0x0183017e
 80023d0:	01880101 	.word	0x01880101
 80023d4:	0101018d 	.word	0x0101018d
 80023d8:	01010101 	.word	0x01010101
 80023dc:	01970192 	.word	0x01970192
 80023e0:	019c0101 	.word	0x019c0101
 80023e4:	0101019f 	.word	0x0101019f
 80023e8:	01010101 	.word	0x01010101
 80023ec:	01a901a4 	.word	0x01a901a4
 80023f0:	01ae0101 	.word	0x01ae0101
 80023f4:	010101b1 	.word	0x010101b1
 80023f8:	01010101 	.word	0x01010101
 80023fc:	01bb01b6 	.word	0x01bb01b6
 8002400:	01c00101 	.word	0x01c00101
 8002404:	01c801c3 	.word	0x01c801c3
 8002408:	01cd0101 	.word	0x01cd0101
 800240c:	01d701d2 	.word	0x01d701d2
 8002410:	01dc0101 	.word	0x01dc0101
 8002414:	010101e1 	.word	0x010101e1
 8002418:	01010101 	.word	0x01010101
 800241c:	01eb01e6 	.word	0x01eb01e6
 8002420:	01f00101 	.word	0x01f00101
 8002424:	010101f3 	.word	0x010101f3
 8002428:	01010101 	.word	0x01010101
 800242c:	01fd01f8 	.word	0x01fd01f8
 8002430:	02020101 	.word	0x02020101
 8002434:	01010205 	.word	0x01010205
 8002438:	01010101 	.word	0x01010101
 800243c:	020f020a 	.word	0x020f020a
 8002440:	02140101 	.word	0x02140101
 8002444:	021c0217 	.word	0x021c0217
 8002448:	02210101 	.word	0x02210101
 800244c:	022b0226 	.word	0x022b0226
 8002450:	02300101 	.word	0x02300101
 8002454:	01010235 	.word	0x01010235
 8002458:	01010101 	.word	0x01010101
 800245c:	023f023a 	.word	0x023f023a
 8002460:	02440101 	.word	0x02440101
 8002464:	01010247 	.word	0x01010247
 8002468:	01010101 	.word	0x01010101
 800246c:	0251024c 	.word	0x0251024c
 8002470:	01010101 	.word	0x01010101
 8002474:	01010256 	.word	0x01010256
 8002478:	025b0101 	.word	0x025b0101
 800247c:	02650260 	.word	0x02650260
 8002480:	026a0101 	.word	0x026a0101
 8002484:	026d0101 	.word	0x026d0101
 8002488:	02700101 	.word	0x02700101
 800248c:	027a0275 	.word	0x027a0275
 8002490:	027f0101 	.word	0x027f0101
 8002494:	01010284 	.word	0x01010284
 8002498:	02890101 	.word	0x02890101
 800249c:	0293028e 	.word	0x0293028e
 80024a0:	02980101 	.word	0x02980101
 80024a4:	02a3029b 	.word	0x02a3029b
 80024a8:	01010101 	.word	0x01010101
 80024ac:	010102a6 	.word	0x010102a6
 80024b0:	02ab0101 	.word	0x02ab0101
 80024b4:	02b502b0 	.word	0x02b502b0
 80024b8:	02ba0101 	.word	0x02ba0101
 80024bc:	02c402bf 	.word	0x02c402bf
 80024c0:	02c90101 	.word	0x02c90101
 80024c4:	02d102cc 	.word	0x02d102cc
 80024c8:	02d40101 	.word	0x02d40101
 80024cc:	02de02d9 	.word	0x02de02d9
 80024d0:	02e30101 	.word	0x02e30101
 80024d4:	010102e8 	.word	0x010102e8
 80024d8:	02ed0101 	.word	0x02ed0101
 80024dc:	02f702f2 	.word	0x02f702f2
 80024e0:	02fc0101 	.word	0x02fc0101
 80024e4:	030402ff 	.word	0x030402ff
 80024e8:	03070101 	.word	0x03070101
 80024ec:	0311030c 	.word	0x0311030c
 80024f0:	03160101 	.word	0x03160101
 80024f4:	0101031b 	.word	0x0101031b
 80024f8:	03200101 	.word	0x03200101
 80024fc:	032a0325 	.word	0x032a0325
 8002500:	032f0101 	.word	0x032f0101
 8002504:	03370332 	.word	0x03370332
 8002508:	033a0101 	.word	0x033a0101
 800250c:	0344033f 	.word	0x0344033f
 8002510:	03490101 	.word	0x03490101
 8002514:	0101034e 	.word	0x0101034e
 8002518:	01010101 	.word	0x01010101
 800251c:	03580353 	.word	0x03580353
 8002520:	035d0101 	.word	0x035d0101
 8002524:	01010360 	.word	0x01010360
 8002528:	01010101 	.word	0x01010101
 800252c:	036a0365 	.word	0x036a0365
 8002530:	036f0101 	.word	0x036f0101
 8002534:	01010374 	.word	0x01010374
 8002538:	03790101 	.word	0x03790101
 800253c:	0383037e 	.word	0x0383037e
 8002540:	03880101 	.word	0x03880101
 8002544:	0101038b 	.word	0x0101038b
 8002548:	0390038b 	.word	0x0390038b
 800254c:	039a0395 	.word	0x039a0395
 8002550:	039f0101 	.word	0x039f0101
 8002554:	010103a4 	.word	0x010103a4
 8002558:	01010101 	.word	0x01010101
 800255c:	03ae03a9 	.word	0x03ae03a9
 8002560:	03b30101 	.word	0x03b30101
 8002564:	010103b6 	.word	0x010103b6
 8002568:	01010101 	.word	0x01010101
 800256c:	03c003bb 	.word	0x03c003bb
			brk();
 8002570:	f7ff fa56 	bl	8001a20 <brk>
      instructions++;
 8002574:	4acf      	ldr	r2, [pc, #828]	; (80028b4 <exec6502+0x588>)
 8002576:	3c01      	subs	r4, #1
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e6d9      	b.n	8002334 <exec6502+0x8>
			indx();
 8002580:	f7ff f866 	bl	8001650 <indx>
			ora();
 8002584:	f7ff fce0 	bl	8001f48 <ora>
			break;
 8002588:	e7f4      	b.n	8002574 <exec6502+0x248>
			zp();
 800258a:	f7fe ffa1 	bl	80014d0 <zp>
			ora();
 800258e:	f7ff fcdb 	bl	8001f48 <ora>
			break;
 8002592:	e7ef      	b.n	8002574 <exec6502+0x248>
			zp();
 8002594:	f7fe ff9c 	bl	80014d0 <zp>
			asl();
 8002598:	f7ff f926 	bl	80017e8 <asl>
			break;
 800259c:	e7ea      	b.n	8002574 <exec6502+0x248>
			php();
 800259e:	f7ff fcff 	bl	8001fa0 <php>
			break;
 80025a2:	e7e7      	b.n	8002574 <exec6502+0x248>
			imm();
 80025a4:	f7fe ff88 	bl	80014b8 <imm>
			ora();
 80025a8:	f7ff fcce 	bl	8001f48 <ora>
			break;
 80025ac:	e7e2      	b.n	8002574 <exec6502+0x248>
  useaccum = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	702b      	strb	r3, [r5, #0]
			asl();
 80025b2:	f7ff f919 	bl	80017e8 <asl>
			break;
 80025b6:	e7dd      	b.n	8002574 <exec6502+0x248>
			abso();
 80025b8:	f7fe ffd4 	bl	8001564 <abso>
			ora();
 80025bc:	f7ff fcc4 	bl	8001f48 <ora>
			break;
 80025c0:	e7d8      	b.n	8002574 <exec6502+0x248>
			abso();
 80025c2:	f7fe ffcf 	bl	8001564 <abso>
			asl();
 80025c6:	f7ff f90f 	bl	80017e8 <asl>
			break;
 80025ca:	e7d3      	b.n	8002574 <exec6502+0x248>
			rel();
 80025cc:	f7fe ffb6 	bl	800153c <rel>
			bpl();
 80025d0:	f7ff fa02 	bl	80019d8 <bpl>
			break;
 80025d4:	e7ce      	b.n	8002574 <exec6502+0x248>
			indy();
 80025d6:	f7ff f859 	bl	800168c <indy>
			ora();
 80025da:	f7ff fcb5 	bl	8001f48 <ora>
			break;
 80025de:	e7c9      	b.n	8002574 <exec6502+0x248>
			zpx();
 80025e0:	f7fe ff84 	bl	80014ec <zpx>
			ora();
 80025e4:	f7ff fcb0 	bl	8001f48 <ora>
			break;
 80025e8:	e7c4      	b.n	8002574 <exec6502+0x248>
			zpx();
 80025ea:	f7fe ff7f 	bl	80014ec <zpx>
			asl();
 80025ee:	f7ff f8fb 	bl	80017e8 <asl>
			break;
 80025f2:	e7bf      	b.n	8002574 <exec6502+0x248>
			clc();
 80025f4:	f7ff fa7c 	bl	8001af0 <clc>
			break;
 80025f8:	e7bc      	b.n	8002574 <exec6502+0x248>
			absy();
 80025fa:	f7fe ffe7 	bl	80015cc <absy>
			ora();
 80025fe:	f7ff fca3 	bl	8001f48 <ora>
			break;
 8002602:	e7b7      	b.n	8002574 <exec6502+0x248>
			absx();
 8002604:	f7fe ffc6 	bl	8001594 <absx>
			ora();
 8002608:	f7ff fc9e 	bl	8001f48 <ora>
			break;
 800260c:	e7b2      	b.n	8002574 <exec6502+0x248>
			absx();
 800260e:	f7fe ffc1 	bl	8001594 <absx>
			asl();
 8002612:	f7ff f8e9 	bl	80017e8 <asl>
			break;
 8002616:	e7ad      	b.n	8002574 <exec6502+0x248>
			abso();
 8002618:	f7fe ffa4 	bl	8001564 <abso>
			jsr();
 800261c:	f7ff fbf2 	bl	8001e04 <jsr>
			break;
 8002620:	e7a8      	b.n	8002574 <exec6502+0x248>
			indx();
 8002622:	f7ff f815 	bl	8001650 <indx>
			op_and();
 8002626:	f7ff f8b7 	bl	8001798 <op_and>
			break;
 800262a:	e7a3      	b.n	8002574 <exec6502+0x248>
			zp();
 800262c:	f7fe ff50 	bl	80014d0 <zp>
			op_bit();
 8002630:	f7ff f96a 	bl	8001908 <op_bit>
			break;
 8002634:	e79e      	b.n	8002574 <exec6502+0x248>
			zp();
 8002636:	f7fe ff4b 	bl	80014d0 <zp>
			op_and();
 800263a:	f7ff f8ad 	bl	8001798 <op_and>
			break;
 800263e:	e799      	b.n	8002574 <exec6502+0x248>
			zp();
 8002640:	f7fe ff46 	bl	80014d0 <zp>
			rol();
 8002644:	f7ff fcda 	bl	8001ffc <rol>
			break;
 8002648:	e794      	b.n	8002574 <exec6502+0x248>
			plp();
 800264a:	f7ff fccd 	bl	8001fe8 <plp>
			break;
 800264e:	e791      	b.n	8002574 <exec6502+0x248>
			imm();
 8002650:	f7fe ff32 	bl	80014b8 <imm>
			op_and();
 8002654:	f7ff f8a0 	bl	8001798 <op_and>
			break;
 8002658:	e78c      	b.n	8002574 <exec6502+0x248>
  useaccum = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	702b      	strb	r3, [r5, #0]
			rol();
 800265e:	f7ff fccd 	bl	8001ffc <rol>
			break;
 8002662:	e787      	b.n	8002574 <exec6502+0x248>
			abso();
 8002664:	f7fe ff7e 	bl	8001564 <abso>
			op_bit();
 8002668:	f7ff f94e 	bl	8001908 <op_bit>
			break;
 800266c:	e782      	b.n	8002574 <exec6502+0x248>
			abso();
 800266e:	f7fe ff79 	bl	8001564 <abso>
			op_and();
 8002672:	f7ff f891 	bl	8001798 <op_and>
			break;
 8002676:	e77d      	b.n	8002574 <exec6502+0x248>
			abso();
 8002678:	f7fe ff74 	bl	8001564 <abso>
			rol();
 800267c:	f7ff fcbe 	bl	8001ffc <rol>
			break;
 8002680:	e778      	b.n	8002574 <exec6502+0x248>
			rel();
 8002682:	f7fe ff5b 	bl	800153c <rel>
			bmi();
 8002686:	f7ff f961 	bl	800194c <bmi>
			break;
 800268a:	e773      	b.n	8002574 <exec6502+0x248>
			indy();
 800268c:	f7fe fffe 	bl	800168c <indy>
			op_and();
 8002690:	f7ff f882 	bl	8001798 <op_and>
			break;
 8002694:	e76e      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002696:	f7fe ff29 	bl	80014ec <zpx>
			op_and();
 800269a:	f7ff f87d 	bl	8001798 <op_and>
			break;
 800269e:	e769      	b.n	8002574 <exec6502+0x248>
			zpx();
 80026a0:	f7fe ff24 	bl	80014ec <zpx>
			rol();
 80026a4:	f7ff fcaa 	bl	8001ffc <rol>
			break;
 80026a8:	e764      	b.n	8002574 <exec6502+0x248>
			sec();
 80026aa:	f7ff fd7f 	bl	80021ac <sec>
			break;
 80026ae:	e761      	b.n	8002574 <exec6502+0x248>
			absy();
 80026b0:	f7fe ff8c 	bl	80015cc <absy>
			op_and();
 80026b4:	f7ff f870 	bl	8001798 <op_and>
			break;
 80026b8:	e75c      	b.n	8002574 <exec6502+0x248>
			absx();
 80026ba:	f7fe ff6b 	bl	8001594 <absx>
			op_and();
 80026be:	f7ff f86b 	bl	8001798 <op_and>
			break;
 80026c2:	e757      	b.n	8002574 <exec6502+0x248>
			absx();
 80026c4:	f7fe ff66 	bl	8001594 <absx>
			rol();
 80026c8:	f7ff fc98 	bl	8001ffc <rol>
			break;
 80026cc:	e752      	b.n	8002574 <exec6502+0x248>
			rti();
 80026ce:	f7ff fcf1 	bl	80020b4 <rti>
			break;
 80026d2:	e74f      	b.n	8002574 <exec6502+0x248>
			indx();
 80026d4:	f7fe ffbc 	bl	8001650 <indx>
			eor();
 80026d8:	f7ff fb0c 	bl	8001cf4 <eor>
			break;
 80026dc:	e74a      	b.n	8002574 <exec6502+0x248>
			zp();
 80026de:	f7fe fef7 	bl	80014d0 <zp>
			eor();
 80026e2:	f7ff fb07 	bl	8001cf4 <eor>
			break;
 80026e6:	e745      	b.n	8002574 <exec6502+0x248>
			zp();
 80026e8:	f7fe fef2 	bl	80014d0 <zp>
			lsr();
 80026ec:	f7ff fc00 	bl	8001ef0 <lsr>
			break;
 80026f0:	e740      	b.n	8002574 <exec6502+0x248>
			pha();
 80026f2:	f7ff fc4f 	bl	8001f94 <pha>
			break;
 80026f6:	e73d      	b.n	8002574 <exec6502+0x248>
			imm();
 80026f8:	f7fe fede 	bl	80014b8 <imm>
			eor();
 80026fc:	f7ff fafa 	bl	8001cf4 <eor>
			break;
 8002700:	e738      	b.n	8002574 <exec6502+0x248>
  useaccum = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	702b      	strb	r3, [r5, #0]
			lsr();
 8002706:	f7ff fbf3 	bl	8001ef0 <lsr>
			break;
 800270a:	e733      	b.n	8002574 <exec6502+0x248>
			abso();
 800270c:	f7fe ff2a 	bl	8001564 <abso>
			jmp();
 8002710:	f7ff fb6e 	bl	8001df0 <jmp>
			break;
 8002714:	e72e      	b.n	8002574 <exec6502+0x248>
			abso();
 8002716:	f7fe ff25 	bl	8001564 <abso>
			eor();
 800271a:	f7ff faeb 	bl	8001cf4 <eor>
			break;
 800271e:	e729      	b.n	8002574 <exec6502+0x248>
			abso();
 8002720:	f7fe ff20 	bl	8001564 <abso>
			lsr();
 8002724:	f7ff fbe4 	bl	8001ef0 <lsr>
			break;
 8002728:	e724      	b.n	8002574 <exec6502+0x248>
			rel();
 800272a:	f7fe ff07 	bl	800153c <rel>
			bvc();
 800272e:	f7ff f99b 	bl	8001a68 <bvc>
			break;
 8002732:	e71f      	b.n	8002574 <exec6502+0x248>
			indy();
 8002734:	f7fe ffaa 	bl	800168c <indy>
			eor();
 8002738:	f7ff fadc 	bl	8001cf4 <eor>
			break;
 800273c:	e71a      	b.n	8002574 <exec6502+0x248>
			zpx();
 800273e:	f7fe fed5 	bl	80014ec <zpx>
			eor();
 8002742:	f7ff fad7 	bl	8001cf4 <eor>
			break;
 8002746:	e715      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002748:	f7fe fed0 	bl	80014ec <zpx>
			lsr();
 800274c:	f7ff fbd0 	bl	8001ef0 <lsr>
			break;
 8002750:	e710      	b.n	8002574 <exec6502+0x248>
			cli();
 8002752:	f7ff f9dd 	bl	8001b10 <cli>
			break;
 8002756:	e70d      	b.n	8002574 <exec6502+0x248>
			absy();
 8002758:	f7fe ff38 	bl	80015cc <absy>
			eor();
 800275c:	f7ff faca 	bl	8001cf4 <eor>
			break;
 8002760:	e708      	b.n	8002574 <exec6502+0x248>
			absx();
 8002762:	f7fe ff17 	bl	8001594 <absx>
			eor();
 8002766:	f7ff fac5 	bl	8001cf4 <eor>
			break;
 800276a:	e703      	b.n	8002574 <exec6502+0x248>
			absx();
 800276c:	f7fe ff12 	bl	8001594 <absx>
			lsr();
 8002770:	f7ff fbbe 	bl	8001ef0 <lsr>
			break;
 8002774:	e6fe      	b.n	8002574 <exec6502+0x248>
			rts();
 8002776:	f7ff fcaf 	bl	80020d8 <rts>
			break;
 800277a:	e6fb      	b.n	8002574 <exec6502+0x248>
			indx();
 800277c:	f7fe ff68 	bl	8001650 <indx>
			adc();
 8002780:	f7fe ffb4 	bl	80016ec <adc>
			break;
 8002784:	e6f6      	b.n	8002574 <exec6502+0x248>
			zp();
 8002786:	f7fe fea3 	bl	80014d0 <zp>
			adc();
 800278a:	f7fe ffaf 	bl	80016ec <adc>
			break;
 800278e:	e6f1      	b.n	8002574 <exec6502+0x248>
			zp();
 8002790:	f7fe fe9e 	bl	80014d0 <zp>
			ror();
 8002794:	f7ff fc60 	bl	8002058 <ror>
			break;
 8002798:	e6ec      	b.n	8002574 <exec6502+0x248>
			pla();
 800279a:	f7ff fc09 	bl	8001fb0 <pla>
			break;
 800279e:	e6e9      	b.n	8002574 <exec6502+0x248>
			imm();
 80027a0:	f7fe fe8a 	bl	80014b8 <imm>
			adc();
 80027a4:	f7fe ffa2 	bl	80016ec <adc>
			break;
 80027a8:	e6e4      	b.n	8002574 <exec6502+0x248>
  useaccum = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	702b      	strb	r3, [r5, #0]
			ror();
 80027ae:	f7ff fc53 	bl	8002058 <ror>
			break;
 80027b2:	e6df      	b.n	8002574 <exec6502+0x248>
			ind();
 80027b4:	f7fe ff26 	bl	8001604 <ind>
			jmp();
 80027b8:	f7ff fb1a 	bl	8001df0 <jmp>
			break;
 80027bc:	e6da      	b.n	8002574 <exec6502+0x248>
			abso();
 80027be:	f7fe fed1 	bl	8001564 <abso>
			adc();
 80027c2:	f7fe ff93 	bl	80016ec <adc>
			break;
 80027c6:	e6d5      	b.n	8002574 <exec6502+0x248>
			abso();
 80027c8:	f7fe fecc 	bl	8001564 <abso>
			ror();
 80027cc:	f7ff fc44 	bl	8002058 <ror>
			break;
 80027d0:	e6d0      	b.n	8002574 <exec6502+0x248>
			rel();
 80027d2:	f7fe feb3 	bl	800153c <rel>
			bvs();
 80027d6:	f7ff f969 	bl	8001aac <bvs>
			break;
 80027da:	e6cb      	b.n	8002574 <exec6502+0x248>
			indy();
 80027dc:	f7fe ff56 	bl	800168c <indy>
			adc();
 80027e0:	f7fe ff84 	bl	80016ec <adc>
			break;
 80027e4:	e6c6      	b.n	8002574 <exec6502+0x248>
			zpx();
 80027e6:	f7fe fe81 	bl	80014ec <zpx>
			adc();
 80027ea:	f7fe ff7f 	bl	80016ec <adc>
			break;
 80027ee:	e6c1      	b.n	8002574 <exec6502+0x248>
			zpx();
 80027f0:	f7fe fe7c 	bl	80014ec <zpx>
			ror();
 80027f4:	f7ff fc30 	bl	8002058 <ror>
			break;
 80027f8:	e6bc      	b.n	8002574 <exec6502+0x248>
			sei();
 80027fa:	f7ff fce7 	bl	80021cc <sei>
			break;
 80027fe:	e6b9      	b.n	8002574 <exec6502+0x248>
			absy();
 8002800:	f7fe fee4 	bl	80015cc <absy>
			adc();
 8002804:	f7fe ff72 	bl	80016ec <adc>
			break;
 8002808:	e6b4      	b.n	8002574 <exec6502+0x248>
			absx();
 800280a:	f7fe fec3 	bl	8001594 <absx>
			adc();
 800280e:	f7fe ff6d 	bl	80016ec <adc>
			break;
 8002812:	e6af      	b.n	8002574 <exec6502+0x248>
			absx();
 8002814:	f7fe febe 	bl	8001594 <absx>
			ror();
 8002818:	f7ff fc1e 	bl	8002058 <ror>
			break;
 800281c:	e6aa      	b.n	8002574 <exec6502+0x248>
			indx();
 800281e:	f7fe ff17 	bl	8001650 <indx>
			sta();
 8002822:	f7ff fcdb 	bl	80021dc <sta>
			break;
 8002826:	e6a5      	b.n	8002574 <exec6502+0x248>
			zp();
 8002828:	f7fe fe52 	bl	80014d0 <zp>
			sty();
 800282c:	f7ff fce2 	bl	80021f4 <sty>
			break;
 8002830:	e6a0      	b.n	8002574 <exec6502+0x248>
			zp();
 8002832:	f7fe fe4d 	bl	80014d0 <zp>
			sta();
 8002836:	f7ff fcd1 	bl	80021dc <sta>
			break;
 800283a:	e69b      	b.n	8002574 <exec6502+0x248>
			zp();
 800283c:	f7fe fe48 	bl	80014d0 <zp>
			stx();
 8002840:	f7ff fcd2 	bl	80021e8 <stx>
			break;
 8002844:	e696      	b.n	8002574 <exec6502+0x248>
			dey();
 8002846:	f7ff fa3b 	bl	8001cc0 <dey>
			break;
 800284a:	e693      	b.n	8002574 <exec6502+0x248>
			txa();
 800284c:	f7ff fd2c 	bl	80022a8 <txa>
			break;
 8002850:	e690      	b.n	8002574 <exec6502+0x248>
			abso();
 8002852:	f7fe fe87 	bl	8001564 <abso>
			sty();
 8002856:	f7ff fccd 	bl	80021f4 <sty>
			break;
 800285a:	e68b      	b.n	8002574 <exec6502+0x248>
			abso();
 800285c:	f7fe fe82 	bl	8001564 <abso>
			sta();
 8002860:	f7ff fcbc 	bl	80021dc <sta>
			break;
 8002864:	e686      	b.n	8002574 <exec6502+0x248>
			abso();
 8002866:	f7fe fe7d 	bl	8001564 <abso>
			stx();
 800286a:	f7ff fcbd 	bl	80021e8 <stx>
			break;
 800286e:	e681      	b.n	8002574 <exec6502+0x248>
			rel();
 8002870:	f7fe fe64 	bl	800153c <rel>
			bcc();
 8002874:	f7fe ffe2 	bl	800183c <bcc>
			break;
 8002878:	e67c      	b.n	8002574 <exec6502+0x248>
			indy();
 800287a:	f7fe ff07 	bl	800168c <indy>
			sta();
 800287e:	f7ff fcad 	bl	80021dc <sta>
			break;
 8002882:	e677      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002884:	f7fe fe32 	bl	80014ec <zpx>
			sty();
 8002888:	f7ff fcb4 	bl	80021f4 <sty>
			break;
 800288c:	e672      	b.n	8002574 <exec6502+0x248>
			zpx();
 800288e:	f7fe fe2d 	bl	80014ec <zpx>
			sta();
 8002892:	f7ff fca3 	bl	80021dc <sta>
			break;
 8002896:	e66d      	b.n	8002574 <exec6502+0x248>
			zpy();
 8002898:	f7fe fe3c 	bl	8001514 <zpy>
			stx();
 800289c:	f7ff fca4 	bl	80021e8 <stx>
			break;
 80028a0:	e668      	b.n	8002574 <exec6502+0x248>
			tya();
 80028a2:	f7ff fd27 	bl	80022f4 <tya>
			break;
 80028a6:	e665      	b.n	8002574 <exec6502+0x248>
			absy();
 80028a8:	f7fe fe90 	bl	80015cc <absy>
			sta();
 80028ac:	f7ff fc96 	bl	80021dc <sta>
			break;
 80028b0:	e660      	b.n	8002574 <exec6502+0x248>
 80028b2:	bf00      	nop
 80028b4:	20008150 	.word	0x20008150
			txs();
 80028b8:	f7ff fd12 	bl	80022e0 <txs>
			break;
 80028bc:	e65a      	b.n	8002574 <exec6502+0x248>
			absx();
 80028be:	f7fe fe69 	bl	8001594 <absx>
			sta();
 80028c2:	f7ff fc8b 	bl	80021dc <sta>
			break;
 80028c6:	e655      	b.n	8002574 <exec6502+0x248>
			imm();
 80028c8:	f7fe fdf6 	bl	80014b8 <imm>
			ldy();
 80028cc:	f7ff faee 	bl	8001eac <ldy>
			break;
 80028d0:	e650      	b.n	8002574 <exec6502+0x248>
			indx();
 80028d2:	f7fe febd 	bl	8001650 <indx>
			lda();
 80028d6:	f7ff faa5 	bl	8001e24 <lda>
			break;
 80028da:	e64b      	b.n	8002574 <exec6502+0x248>
			imm();
 80028dc:	f7fe fdec 	bl	80014b8 <imm>
			ldx();
 80028e0:	f7ff fac2 	bl	8001e68 <ldx>
			break;
 80028e4:	e646      	b.n	8002574 <exec6502+0x248>
			zp();
 80028e6:	f7fe fdf3 	bl	80014d0 <zp>
			ldy();
 80028ea:	f7ff fadf 	bl	8001eac <ldy>
			break;
 80028ee:	e641      	b.n	8002574 <exec6502+0x248>
			zp();
 80028f0:	f7fe fdee 	bl	80014d0 <zp>
			lda();
 80028f4:	f7ff fa96 	bl	8001e24 <lda>
			break;
 80028f8:	e63c      	b.n	8002574 <exec6502+0x248>
			zp();
 80028fa:	f7fe fde9 	bl	80014d0 <zp>
			ldx();
 80028fe:	f7ff fab3 	bl	8001e68 <ldx>
			break;
 8002902:	e637      	b.n	8002574 <exec6502+0x248>
			tay();
 8002904:	f7ff fc98 	bl	8002238 <tay>
			break;
 8002908:	e634      	b.n	8002574 <exec6502+0x248>
			imm();
 800290a:	f7fe fdd5 	bl	80014b8 <imm>
			lda();
 800290e:	f7ff fa89 	bl	8001e24 <lda>
			break;
 8002912:	e62f      	b.n	8002574 <exec6502+0x248>
			tax();
 8002914:	f7ff fc74 	bl	8002200 <tax>
			break;
 8002918:	e62c      	b.n	8002574 <exec6502+0x248>
			abso();
 800291a:	f7fe fe23 	bl	8001564 <abso>
			ldy();
 800291e:	f7ff fac5 	bl	8001eac <ldy>
			break;
 8002922:	e627      	b.n	8002574 <exec6502+0x248>
			abso();
 8002924:	f7fe fe1e 	bl	8001564 <abso>
			lda();
 8002928:	f7ff fa7c 	bl	8001e24 <lda>
			break;
 800292c:	e622      	b.n	8002574 <exec6502+0x248>
			abso();
 800292e:	f7fe fe19 	bl	8001564 <abso>
			ldx();
 8002932:	f7ff fa99 	bl	8001e68 <ldx>
			break;
 8002936:	e61d      	b.n	8002574 <exec6502+0x248>
			rel();
 8002938:	f7fe fe00 	bl	800153c <rel>
			bcs();
 800293c:	f7fe ffa0 	bl	8001880 <bcs>
			break;
 8002940:	e618      	b.n	8002574 <exec6502+0x248>
			indy();
 8002942:	f7fe fea3 	bl	800168c <indy>
			lda();
 8002946:	f7ff fa6d 	bl	8001e24 <lda>
			break;
 800294a:	e613      	b.n	8002574 <exec6502+0x248>
			zpx();
 800294c:	f7fe fdce 	bl	80014ec <zpx>
			ldy();
 8002950:	f7ff faac 	bl	8001eac <ldy>
			break;
 8002954:	e60e      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002956:	f7fe fdc9 	bl	80014ec <zpx>
			lda();
 800295a:	f7ff fa63 	bl	8001e24 <lda>
			break;
 800295e:	e609      	b.n	8002574 <exec6502+0x248>
			zpy();
 8002960:	f7fe fdd8 	bl	8001514 <zpy>
			ldx();
 8002964:	f7ff fa80 	bl	8001e68 <ldx>
			break;
 8002968:	e604      	b.n	8002574 <exec6502+0x248>
			clv();
 800296a:	f7ff f8d9 	bl	8001b20 <clv>
			break;
 800296e:	e601      	b.n	8002574 <exec6502+0x248>
			absy();
 8002970:	f7fe fe2c 	bl	80015cc <absy>
			lda();
 8002974:	f7ff fa56 	bl	8001e24 <lda>
			break;
 8002978:	e5fc      	b.n	8002574 <exec6502+0x248>
			tsx();
 800297a:	f7ff fc79 	bl	8002270 <tsx>
			break;
 800297e:	e5f9      	b.n	8002574 <exec6502+0x248>
			absx();
 8002980:	f7fe fe08 	bl	8001594 <absx>
			ldy();
 8002984:	f7ff fa92 	bl	8001eac <ldy>
			break;
 8002988:	e5f4      	b.n	8002574 <exec6502+0x248>
			absx();
 800298a:	f7fe fe03 	bl	8001594 <absx>
			lda();
 800298e:	f7ff fa49 	bl	8001e24 <lda>
			break;
 8002992:	e5ef      	b.n	8002574 <exec6502+0x248>
			absy();
 8002994:	f7fe fe1a 	bl	80015cc <absy>
			ldx();
 8002998:	f7ff fa66 	bl	8001e68 <ldx>
			break;
 800299c:	e5ea      	b.n	8002574 <exec6502+0x248>
			imm();
 800299e:	f7fe fd8b 	bl	80014b8 <imm>
			cpy();
 80029a2:	f7ff f921 	bl	8001be8 <cpy>
			break;
 80029a6:	e5e5      	b.n	8002574 <exec6502+0x248>
			indx();
 80029a8:	f7fe fe52 	bl	8001650 <indx>
			cmp();
 80029ac:	f7ff f8c0 	bl	8001b30 <cmp>
			break;
 80029b0:	e5e0      	b.n	8002574 <exec6502+0x248>
			zp();
 80029b2:	f7fe fd8d 	bl	80014d0 <zp>
			cpy();
 80029b6:	f7ff f917 	bl	8001be8 <cpy>
			break;
 80029ba:	e5db      	b.n	8002574 <exec6502+0x248>
			zp();
 80029bc:	f7fe fd88 	bl	80014d0 <zp>
			cmp();
 80029c0:	f7ff f8b6 	bl	8001b30 <cmp>
			break;
 80029c4:	e5d6      	b.n	8002574 <exec6502+0x248>
			zp();
 80029c6:	f7fe fd83 	bl	80014d0 <zp>
			dec();
 80029ca:	f7ff f93b 	bl	8001c44 <dec>
			break;
 80029ce:	e5d1      	b.n	8002574 <exec6502+0x248>
			iny();
 80029d0:	f7ff f9f4 	bl	8001dbc <iny>
			break;
 80029d4:	e5ce      	b.n	8002574 <exec6502+0x248>
			imm();
 80029d6:	f7fe fd6f 	bl	80014b8 <imm>
			cmp();
 80029da:	f7ff f8a9 	bl	8001b30 <cmp>
			break;
 80029de:	e5c9      	b.n	8002574 <exec6502+0x248>
			dex();
 80029e0:	f7ff f954 	bl	8001c8c <dex>
			break;
 80029e4:	e5c6      	b.n	8002574 <exec6502+0x248>
			abso();
 80029e6:	f7fe fdbd 	bl	8001564 <abso>
			cpy();
 80029ea:	f7ff f8fd 	bl	8001be8 <cpy>
			break;
 80029ee:	e5c1      	b.n	8002574 <exec6502+0x248>
			abso();
 80029f0:	f7fe fdb8 	bl	8001564 <abso>
			cmp();
 80029f4:	f7ff f89c 	bl	8001b30 <cmp>
			break;
 80029f8:	e5bc      	b.n	8002574 <exec6502+0x248>
			abso();
 80029fa:	f7fe fdb3 	bl	8001564 <abso>
			dec();
 80029fe:	f7ff f921 	bl	8001c44 <dec>
			break;
 8002a02:	e5b7      	b.n	8002574 <exec6502+0x248>
			rel();
 8002a04:	f7fe fd9a 	bl	800153c <rel>
			bne();
 8002a08:	f7fe ffc4 	bl	8001994 <bne>
			break;
 8002a0c:	e5b2      	b.n	8002574 <exec6502+0x248>
			indy();
 8002a0e:	f7fe fe3d 	bl	800168c <indy>
			cmp();
 8002a12:	f7ff f88d 	bl	8001b30 <cmp>
			break;
 8002a16:	e5ad      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002a18:	f7fe fd68 	bl	80014ec <zpx>
			cmp();
 8002a1c:	f7ff f888 	bl	8001b30 <cmp>
			break;
 8002a20:	e5a8      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002a22:	f7fe fd63 	bl	80014ec <zpx>
			dec();
 8002a26:	f7ff f90d 	bl	8001c44 <dec>
			break;
 8002a2a:	e5a3      	b.n	8002574 <exec6502+0x248>
			cld();
 8002a2c:	f7ff f868 	bl	8001b00 <cld>
			break;
 8002a30:	e5a0      	b.n	8002574 <exec6502+0x248>
			absy();
 8002a32:	f7fe fdcb 	bl	80015cc <absy>
			cmp();
 8002a36:	f7ff f87b 	bl	8001b30 <cmp>
			break;
 8002a3a:	e59b      	b.n	8002574 <exec6502+0x248>
			absx();
 8002a3c:	f7fe fdaa 	bl	8001594 <absx>
			cmp();
 8002a40:	f7ff f876 	bl	8001b30 <cmp>
			break;
 8002a44:	e596      	b.n	8002574 <exec6502+0x248>
			absx();
 8002a46:	f7fe fda5 	bl	8001594 <absx>
			dec();
 8002a4a:	f7ff f8fb 	bl	8001c44 <dec>
			break;
 8002a4e:	e591      	b.n	8002574 <exec6502+0x248>
			imm();
 8002a50:	f7fe fd32 	bl	80014b8 <imm>
			cpx();
 8002a54:	f7ff f89a 	bl	8001b8c <cpx>
			break;
 8002a58:	e58c      	b.n	8002574 <exec6502+0x248>
			indx();
 8002a5a:	f7fe fdf9 	bl	8001650 <indx>
			sbc();
 8002a5e:	f7ff fb49 	bl	80020f4 <sbc>
			break;
 8002a62:	e587      	b.n	8002574 <exec6502+0x248>
			zp();
 8002a64:	f7fe fd34 	bl	80014d0 <zp>
			cpx();
 8002a68:	f7ff f890 	bl	8001b8c <cpx>
			break;
 8002a6c:	e582      	b.n	8002574 <exec6502+0x248>
			zp();
 8002a6e:	f7fe fd2f 	bl	80014d0 <zp>
			sbc();
 8002a72:	f7ff fb3f 	bl	80020f4 <sbc>
			break;
 8002a76:	e57d      	b.n	8002574 <exec6502+0x248>
			zp();
 8002a78:	f7fe fd2a 	bl	80014d0 <zp>
			inc();
 8002a7c:	f7ff f960 	bl	8001d40 <inc>
			break;
 8002a80:	e578      	b.n	8002574 <exec6502+0x248>
			inx();
 8002a82:	f7ff f981 	bl	8001d88 <inx>
			break;
 8002a86:	e575      	b.n	8002574 <exec6502+0x248>
			imm();
 8002a88:	f7fe fd16 	bl	80014b8 <imm>
			sbc();
 8002a8c:	f7ff fb32 	bl	80020f4 <sbc>
			break;
 8002a90:	e570      	b.n	8002574 <exec6502+0x248>
			abso();
 8002a92:	f7fe fd67 	bl	8001564 <abso>
			cpx();
 8002a96:	f7ff f879 	bl	8001b8c <cpx>
			break;
 8002a9a:	e56b      	b.n	8002574 <exec6502+0x248>
			abso();
 8002a9c:	f7fe fd62 	bl	8001564 <abso>
			sbc();
 8002aa0:	f7ff fb28 	bl	80020f4 <sbc>
			break;
 8002aa4:	e566      	b.n	8002574 <exec6502+0x248>
			abso();
 8002aa6:	f7fe fd5d 	bl	8001564 <abso>
			inc();
 8002aaa:	f7ff f949 	bl	8001d40 <inc>
			break;
 8002aae:	e561      	b.n	8002574 <exec6502+0x248>
			rel();
 8002ab0:	f7fe fd44 	bl	800153c <rel>
			beq();
 8002ab4:	f7fe ff06 	bl	80018c4 <beq>
			break;
 8002ab8:	e55c      	b.n	8002574 <exec6502+0x248>
			indy();
 8002aba:	f7fe fde7 	bl	800168c <indy>
			sbc();
 8002abe:	f7ff fb19 	bl	80020f4 <sbc>
			break;
 8002ac2:	e557      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002ac4:	f7fe fd12 	bl	80014ec <zpx>
			sbc();
 8002ac8:	f7ff fb14 	bl	80020f4 <sbc>
			break;
 8002acc:	e552      	b.n	8002574 <exec6502+0x248>
			zpx();
 8002ace:	f7fe fd0d 	bl	80014ec <zpx>
			inc();
 8002ad2:	f7ff f935 	bl	8001d40 <inc>
			break;
 8002ad6:	e54d      	b.n	8002574 <exec6502+0x248>
			sed();
 8002ad8:	f7ff fb70 	bl	80021bc <sed>
			break;
 8002adc:	e54a      	b.n	8002574 <exec6502+0x248>
			absy();
 8002ade:	f7fe fd75 	bl	80015cc <absy>
			sbc();
 8002ae2:	f7ff fb07 	bl	80020f4 <sbc>
			break;
 8002ae6:	e545      	b.n	8002574 <exec6502+0x248>
			absx();
 8002ae8:	f7fe fd54 	bl	8001594 <absx>
			sbc();
 8002aec:	f7ff fb02 	bl	80020f4 <sbc>
			break;
 8002af0:	e540      	b.n	8002574 <exec6502+0x248>
			absx();
 8002af2:	f7fe fd4f 	bl	8001594 <absx>
			inc();
 8002af6:	f7ff f923 	bl	8001d40 <inc>
			break;
 8002afa:	e53b      	b.n	8002574 <exec6502+0x248>

08002afc <getSCode>:
		.parity = 0,
		.readyToRead = 0
};

// convert byte into dec value
uint8_t getSCode(uint8_t *byte){
 8002afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b00:	4607      	mov	r7, r0
	double output = 0;
	for(int i=0; i<8; i++){
 8002b02:	2600      	movs	r6, #0
	double output = 0;
 8002b04:	2400      	movs	r4, #0
 8002b06:	2500      	movs	r5, #0
		if(byte[i]) output += pow(2, i);
 8002b08:	f04f 0800 	mov.w	r8, #0
 8002b0c:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8002b10:	5dbb      	ldrb	r3, [r7, r6]
 8002b12:	b183      	cbz	r3, 8002b36 <getSCode+0x3a>
 8002b14:	4630      	mov	r0, r6
 8002b16:	f7fd fce1 	bl	80004dc <__aeabi_i2d>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4640      	mov	r0, r8
 8002b20:	4649      	mov	r1, r9
 8002b22:	f000 ff79 	bl	8003a18 <pow>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f7fd fb89 	bl	8000244 <__adddf3>
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
	for(int i=0; i<8; i++){
 8002b36:	3601      	adds	r6, #1
 8002b38:	2e08      	cmp	r6, #8
 8002b3a:	d1e9      	bne.n	8002b10 <getSCode+0x14>
	}
	return (uint8_t)output;
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	4629      	mov	r1, r5
 8002b40:	f7fd ffe6 	bl	8000b10 <__aeabi_d2uiz>
}
 8002b44:	b2c0      	uxtb	r0, r0
 8002b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002b4c <isKbrdReady>:

uint8_t isKbrdReady(){
	return keyboard.readyToRead;
}
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <isKbrdReady+0x8>)
 8002b4e:	7f58      	ldrb	r0, [r3, #29]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000000 	.word	0x20000000

08002b58 <getAscii>:

uint8_t getAscii(){
	// key read now, no longer new key to read
	keyboard.readyToRead = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <getAscii+0x1c>)
 8002b5c:	7753      	strb	r3, [r2, #29]
	if(keyboard.ctrlStatus){
		return asciiMaps.ctrlMap[keyboard.sCodeBuffer[0]];
 8002b5e:	7ed1      	ldrb	r1, [r2, #27]
	if(keyboard.ctrlStatus){
 8002b60:	7e52      	ldrb	r2, [r2, #25]
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <getAscii+0x20>)
 8002b64:	b11a      	cbz	r2, 8002b6e <getAscii+0x16>
		return asciiMaps.ctrlMap[keyboard.sCodeBuffer[0]];
 8002b66:	440b      	add	r3, r1
 8002b68:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 8002b6c:	4770      	bx	lr
	}
	else{
		return asciiMaps.defMap[keyboard.sCodeBuffer[0]];
 8002b6e:	5c58      	ldrb	r0, [r3, r1]
	}
}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000
 8002b78:	08006384 	.word	0x08006384

08002b7c <EXTI9_5_IRQHandler>:
		keyboard.ctrlStatus = 0;
	}
}

void EXTI9_5_IRQHandler(void)
{
 8002b7c:	b538      	push	{r3, r4, r5, lr}
	GPIO_PinState data_state = HAL_GPIO_ReadPin(keyboard.dataPort, keyboard.dataNumber);
 8002b7e:	4c24      	ldr	r4, [pc, #144]	; (8002c10 <EXTI9_5_IRQHandler+0x94>)
 8002b80:	89a1      	ldrh	r1, [r4, #12]
 8002b82:	68a0      	ldr	r0, [r4, #8]
 8002b84:	f000 faa2 	bl	80030cc <HAL_GPIO_ReadPin>
	// check if we are reading during this interrupt
	if(keyboard.reading){
 8002b88:	7be3      	ldrb	r3, [r4, #15]
	GPIO_PinState data_state = HAL_GPIO_ReadPin(keyboard.dataPort, keyboard.dataNumber);
 8002b8a:	4605      	mov	r5, r0
	if(keyboard.reading){
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d039      	beq.n	8002c04 <EXTI9_5_IRQHandler+0x88>
		// check if end of string
		if(keyboard.count == 9) {
 8002b90:	7ba3      	ldrb	r3, [r4, #14]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d126      	bne.n	8002be4 <EXTI9_5_IRQHandler+0x68>
			// reset read values
			keyboard.count = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	81e3      	strh	r3, [r4, #14]
			keyboard.reading = 0;
			// update the code buffer
			keyboard.sCodeBuffer[1] = keyboard.sCodeBuffer[0];
 8002b9a:	7ee3      	ldrb	r3, [r4, #27]
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002b9c:	f104 0010 	add.w	r0, r4, #16
			keyboard.sCodeBuffer[1] = keyboard.sCodeBuffer[0];
 8002ba0:	7723      	strb	r3, [r4, #28]
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002ba2:	f7ff ffab 	bl	8002afc <getSCode>
			// check stop bit(should be high)
			if(data_state != GPIO_PIN_SET){
 8002ba6:	2d01      	cmp	r5, #1
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002ba8:	76e0      	strb	r0, [r4, #27]
			if(data_state != GPIO_PIN_SET){
 8002baa:	d014      	beq.n	8002bd6 <EXTI9_5_IRQHandler+0x5a>
				keyboard.sCodeBuffer[0] = 243;
 8002bac:	23f3      	movs	r3, #243	; 0xf3
			}
			else{
				// confirm odd parity
				if((keyboard.parity % 2) != 1){
					keyboard.sCodeBuffer[0] = 244;
 8002bae:	76e3      	strb	r3, [r4, #27]
				}
			}
			keyboard.parity = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	76a3      	strb	r3, [r4, #26]
			// check if the new key is readable
			// is in the list (lazy and) then check if it has an action (not 0)
			if(keyboard.sCodeBuffer[0] < 104 && getAscii() != 0){
 8002bb4:	7ee3      	ldrb	r3, [r4, #27]
 8002bb6:	2b67      	cmp	r3, #103	; 0x67
 8002bb8:	d812      	bhi.n	8002be0 <EXTI9_5_IRQHandler+0x64>
 8002bba:	f7ff ffcd 	bl	8002b58 <getAscii>
 8002bbe:	b178      	cbz	r0, 8002be0 <EXTI9_5_IRQHandler+0x64>
				// then make sure the key has changed (not just held / let go)
				if(keyboard.sCodeBuffer[0] != (keyboard.sCodeBuffer[1])){
 8002bc0:	7ee2      	ldrb	r2, [r4, #27]
 8002bc2:	7f23      	ldrb	r3, [r4, #28]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <EXTI9_5_IRQHandler+0x50>
					keyboard.readyToRead = 1;
 8002bc8:	2301      	movs	r3, #1
				}
			}
			else{
				// new scancode not readable!
				keyboard.readyToRead = 0;
 8002bca:	7763      	strb	r3, [r4, #29]
	}
	else{
		// if not reading, check if the bit is a start bit (low) then start reading.
		if(data_state != GPIO_PIN_SET) keyboard.reading = 1;
	}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002bcc:	2020      	movs	r0, #32
}
 8002bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002bd2:	f000 ba87 	b.w	80030e4 <HAL_GPIO_EXTI_IRQHandler>
				if((keyboard.parity % 2) != 1){
 8002bd6:	7ea3      	ldrb	r3, [r4, #26]
 8002bd8:	07db      	lsls	r3, r3, #31
 8002bda:	d4e9      	bmi.n	8002bb0 <EXTI9_5_IRQHandler+0x34>
					keyboard.sCodeBuffer[0] = 244;
 8002bdc:	23f4      	movs	r3, #244	; 0xf4
 8002bde:	e7e6      	b.n	8002bae <EXTI9_5_IRQHandler+0x32>
				keyboard.readyToRead = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e7f2      	b.n	8002bca <EXTI9_5_IRQHandler+0x4e>
			if(data_state == GPIO_PIN_SET) keyboard.scanCode[keyboard.count] = 1;
 8002be4:	2801      	cmp	r0, #1
			else keyboard.scanCode[keyboard.count] = 0;
 8002be6:	bf18      	it	ne
 8002be8:	2100      	movne	r1, #0
 8002bea:	eb04 0203 	add.w	r2, r4, r3
 8002bee:	bf14      	ite	ne
 8002bf0:	7411      	strbne	r1, [r2, #16]
			if(data_state == GPIO_PIN_SET) keyboard.scanCode[keyboard.count] = 1;
 8002bf2:	7410      	strbeq	r0, [r2, #16]
			keyboard.parity += keyboard.scanCode[keyboard.count];
 8002bf4:	18e1      	adds	r1, r4, r3
 8002bf6:	7ea2      	ldrb	r2, [r4, #26]
 8002bf8:	7c09      	ldrb	r1, [r1, #16]
			keyboard.count++;
 8002bfa:	3301      	adds	r3, #1
			keyboard.parity += keyboard.scanCode[keyboard.count];
 8002bfc:	440a      	add	r2, r1
 8002bfe:	76a2      	strb	r2, [r4, #26]
			keyboard.count++;
 8002c00:	73a3      	strb	r3, [r4, #14]
 8002c02:	e7e3      	b.n	8002bcc <EXTI9_5_IRQHandler+0x50>
		if(data_state != GPIO_PIN_SET) keyboard.reading = 1;
 8002c04:	2801      	cmp	r0, #1
 8002c06:	bf1c      	itt	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	73e3      	strbne	r3, [r4, #15]
 8002c0c:	e7de      	b.n	8002bcc <EXTI9_5_IRQHandler+0x50>
 8002c0e:	bf00      	nop
 8002c10:	20000000 	.word	0x20000000

08002c14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_MspInit+0x3c>)
{
 8002c16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	f002 0201 	and.w	r2, r2, #1
 8002c26:	9200      	str	r2, [sp, #0]
 8002c28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c30:	61da      	str	r2, [r3, #28]
 8002c32:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c3e:	6853      	ldr	r3, [r2, #4]
 8002c40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4a:	b002      	add	sp, #8
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000

08002c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5e:	2210      	movs	r2, #16
 8002c60:	2100      	movs	r1, #0
 8002c62:	a802      	add	r0, sp, #8
 8002c64:	f000 fed0 	bl	8003a08 <memset>
  if(huart->Instance==USART1)
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <HAL_UART_MspInit+0x70>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d128      	bne.n	8002cc2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c70:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002c74:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	4815      	ldr	r0, [pc, #84]	; (8002ccc <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7c:	619a      	str	r2, [r3, #24]
 8002c7e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c82:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c86:	9200      	str	r2, [sp, #0]
 8002c88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	f042 0204 	orr.w	r2, r2, #4
 8002c90:	619a      	str	r2, [r3, #24]
 8002c92:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f000 f927 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cb2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	f000 f91d 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc2:	b006      	add	sp, #24
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40010800 	.word	0x40010800

08002cd0 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cd0:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002cd2:	b530      	push	{r4, r5, lr}
 8002cd4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cd6:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_SRAM_MspInit+0x54>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	b9fa      	cbnz	r2, 8002d1e <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002ce6:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce8:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cee:	615a      	str	r2, [r3, #20]
 8002cf0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf2:	480e      	ldr	r0, [pc, #56]	; (8002d2c <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d00:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d06:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d08:	f000 f8f8 	bl	8002efc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d0c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d10:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_SRAM_MspInit+0x60>)
 8002d12:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d18:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d1a:	f000 f8ef 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002d1e:	b007      	add	sp, #28
 8002d20:	bd30      	pop	{r4, r5, pc}
 8002d22:	bf00      	nop
 8002d24:	20008164 	.word	0x20008164
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40011800 	.word	0x40011800
 8002d30:	40011400 	.word	0x40011400

08002d34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <NMI_Handler>

08002d36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <HardFault_Handler>

08002d38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <MemManage_Handler>

08002d3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler>

08002d3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <UsageFault_Handler>

08002d3e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d3e:	4770      	bx	lr

08002d40 <DebugMon_Handler>:
 8002d40:	4770      	bx	lr

08002d42 <PendSV_Handler>:
 8002d42:	4770      	bx	lr

08002d44 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d44:	f000 b85e 	b.w	8002e04 <HAL_IncTick>

08002d48 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	4770      	bx	lr
	...

08002d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d4c:	f7ff fffc 	bl	8002d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d50:	480b      	ldr	r0, [pc, #44]	; (8002d80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d52:	490c      	ldr	r1, [pc, #48]	; (8002d84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d68:	4c09      	ldr	r4, [pc, #36]	; (8002d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d76:	f000 fe23 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d7a:	f7fe fa61 	bl	8001240 <main>
  bx lr
 8002d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002d88:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 8002d8c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002d90:	2000816c 	.word	0x2000816c

08002d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC1_2_IRQHandler>
	...

08002d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d98:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_InitTick+0x3c>)
{
 8002d9c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9e:	7818      	ldrb	r0, [r3, #0]
 8002da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da4:	fbb3 f3f0 	udiv	r3, r3, r0
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_InitTick+0x40>)
 8002daa:	6810      	ldr	r0, [r2, #0]
 8002dac:	fbb0 f0f3 	udiv	r0, r0, r3
 8002db0:	f000 f890 	bl	8002ed4 <HAL_SYSTICK_Config>
 8002db4:	4604      	mov	r4, r0
 8002db6:	b958      	cbnz	r0, 8002dd0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db8:	2d0f      	cmp	r5, #15
 8002dba:	d809      	bhi.n	8002dd0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f000 f854 	bl	8002e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <HAL_InitTick+0x44>)
 8002dcc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002dce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	e7fc      	b.n	8002dce <HAL_InitTick+0x36>
 8002dd4:	20000024 	.word	0x20000024
 8002dd8:	20000020 	.word	0x20000020
 8002ddc:	20000028 	.word	0x20000028

08002de0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_Init+0x20>)
{
 8002de2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dee:	f000 f82d 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df2:	200f      	movs	r0, #15
 8002df4:	f7ff ffd0 	bl	8002d98 <HAL_InitTick>
  HAL_MspInit();
 8002df8:	f7ff ff0c 	bl	8002c14 <HAL_MspInit>
}
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	bd08      	pop	{r3, pc}
 8002e00:	40022000 	.word	0x40022000

08002e04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e04:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <HAL_IncTick+0x10>)
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_IncTick+0x14>)
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20008168 	.word	0x20008168
 8002e18:	20000024 	.word	0x20000024

08002e1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <HAL_GetTick+0x8>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20008168 	.word	0x20008168

08002e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff fff6 	bl	8002e1c <HAL_GetTick>
 8002e30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002e34:	bf1e      	ittt	ne
 8002e36:	4b04      	ldrne	r3, [pc, #16]	; (8002e48 <HAL_Delay+0x20>)
 8002e38:	781b      	ldrbne	r3, [r3, #0]
 8002e3a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	1b43      	subs	r3, r0, r5
 8002e42:	42a3      	cmp	r3, r4
 8002e44:	d3fa      	bcc.n	8002e3c <HAL_Delay+0x14>
  {
  }
}
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	20000024 	.word	0x20000024

08002e4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e4e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e50:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e5a:	0412      	lsls	r2, r2, #16
 8002e5c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002e68:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e72:	b530      	push	{r4, r5, lr}
 8002e74:	68dc      	ldr	r4, [r3, #12]
 8002e76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	bf28      	it	cs
 8002e84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8c:	bf98      	it	ls
 8002e8e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e94:	bf88      	it	hi
 8002e96:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	ea21 0303 	bic.w	r3, r1, r3
 8002e9c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9e:	fa05 f404 	lsl.w	r4, r5, r4
 8002ea2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002ea6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eac:	bfac      	ite	ge
 8002eae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	4a07      	ldrlt	r2, [pc, #28]	; (8002ed0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	bfab      	itete	ge
 8002ebc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002eca:	bd30      	pop	{r4, r5, pc}
 8002ecc:	e000ed00 	.word	0xe000ed00
 8002ed0:	e000ed14 	.word	0xe000ed14

08002ed4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed4:	3801      	subs	r0, #1
 8002ed6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002eda:	d20b      	bcs.n	8002ef4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	21f0      	movs	r1, #240	; 0xf0
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eea:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eec:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eee:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ef4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f00:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002f02:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f04:	4f6a      	ldr	r7, [pc, #424]	; (80030b0 <HAL_GPIO_Init+0x1b4>)
 8002f06:	4b6b      	ldr	r3, [pc, #428]	; (80030b4 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f08:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80030b8 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8002f0c:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80030bc <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f10:	680c      	ldr	r4, [r1, #0]
 8002f12:	fa34 f506 	lsrs.w	r5, r4, r6
 8002f16:	d102      	bne.n	8002f1e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002f18:	b003      	add	sp, #12
 8002f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002f1e:	f04f 0801 	mov.w	r8, #1
 8002f22:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8002f2a:	ea38 0404 	bics.w	r4, r8, r4
 8002f2e:	f040 8081 	bne.w	8003034 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8002f32:	684c      	ldr	r4, [r1, #4]
 8002f34:	2c03      	cmp	r4, #3
 8002f36:	d807      	bhi.n	8002f48 <HAL_GPIO_Init+0x4c>
 8002f38:	3c01      	subs	r4, #1
 8002f3a:	2c02      	cmp	r4, #2
 8002f3c:	f200 808c 	bhi.w	8003058 <HAL_GPIO_Init+0x15c>
 8002f40:	e8df f004 	tbb	[pc, r4]
 8002f44:	a29d      	.short	0xa29d
 8002f46:	a8          	.byte	0xa8
 8002f47:	00          	.byte	0x00
 8002f48:	2c12      	cmp	r4, #18
 8002f4a:	f000 80a0 	beq.w	800308e <HAL_GPIO_Init+0x192>
 8002f4e:	d873      	bhi.n	8003038 <HAL_GPIO_Init+0x13c>
 8002f50:	2c11      	cmp	r4, #17
 8002f52:	f000 8096 	beq.w	8003082 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f56:	2dff      	cmp	r5, #255	; 0xff
 8002f58:	bf98      	it	ls
 8002f5a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f5c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f60:	bf88      	it	hi
 8002f62:	f100 0a04 	addhi.w	sl, r0, #4
 8002f66:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f6a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f6e:	bf88      	it	hi
 8002f70:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f72:	fa09 fb04 	lsl.w	fp, r9, r4
 8002f76:	ea28 080b 	bic.w	r8, r8, fp
 8002f7a:	fa02 f404 	lsl.w	r4, r2, r4
 8002f7e:	ea48 0404 	orr.w	r4, r8, r4
 8002f82:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f86:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002f8a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002f8e:	d051      	beq.n	8003034 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f90:	69bc      	ldr	r4, [r7, #24]
 8002f92:	f026 0803 	bic.w	r8, r6, #3
 8002f96:	f044 0401 	orr.w	r4, r4, #1
 8002f9a:	61bc      	str	r4, [r7, #24]
 8002f9c:	69bc      	ldr	r4, [r7, #24]
 8002f9e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002fa2:	f004 0401 	and.w	r4, r4, #1
 8002fa6:	9401      	str	r4, [sp, #4]
 8002fa8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fac:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb0:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fb2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002fb6:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fba:	fa09 f90b 	lsl.w	r9, r9, fp
 8002fbe:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc2:	4c3f      	ldr	r4, [pc, #252]	; (80030c0 <HAL_GPIO_Init+0x1c4>)
 8002fc4:	42a0      	cmp	r0, r4
 8002fc6:	d069      	beq.n	800309c <HAL_GPIO_Init+0x1a0>
 8002fc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fcc:	42a0      	cmp	r0, r4
 8002fce:	d067      	beq.n	80030a0 <HAL_GPIO_Init+0x1a4>
 8002fd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d065      	beq.n	80030a4 <HAL_GPIO_Init+0x1a8>
 8002fd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d063      	beq.n	80030a8 <HAL_GPIO_Init+0x1ac>
 8002fe0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fe4:	42a0      	cmp	r0, r4
 8002fe6:	d061      	beq.n	80030ac <HAL_GPIO_Init+0x1b0>
 8002fe8:	4560      	cmp	r0, ip
 8002fea:	bf0c      	ite	eq
 8002fec:	2405      	moveq	r4, #5
 8002fee:	2406      	movne	r4, #6
 8002ff0:	fa04 f40b 	lsl.w	r4, r4, fp
 8002ff4:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002ff8:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ffc:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ffe:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003002:	bf14      	ite	ne
 8003004:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003006:	43ac      	biceq	r4, r5
 8003008:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800300a:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800300c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003010:	bf14      	ite	ne
 8003012:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003014:	43ac      	biceq	r4, r5
 8003016:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8003018:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800301a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800301e:	bf14      	ite	ne
 8003020:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003022:	43ac      	biceq	r4, r5
 8003024:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8003026:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003028:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800302c:	bf14      	ite	ne
 800302e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003030:	43ac      	biceq	r4, r5
 8003032:	601c      	str	r4, [r3, #0]
	position++;
 8003034:	3601      	adds	r6, #1
 8003036:	e76b      	b.n	8002f10 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003038:	4574      	cmp	r4, lr
 800303a:	d00d      	beq.n	8003058 <HAL_GPIO_Init+0x15c>
 800303c:	d818      	bhi.n	8003070 <HAL_GPIO_Init+0x174>
 800303e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80030c4 <HAL_GPIO_Init+0x1c8>
 8003042:	454c      	cmp	r4, r9
 8003044:	d008      	beq.n	8003058 <HAL_GPIO_Init+0x15c>
 8003046:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800304a:	454c      	cmp	r4, r9
 800304c:	d004      	beq.n	8003058 <HAL_GPIO_Init+0x15c>
 800304e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003052:	454c      	cmp	r4, r9
 8003054:	f47f af7f 	bne.w	8002f56 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003058:	688a      	ldr	r2, [r1, #8]
 800305a:	b1ea      	cbz	r2, 8003098 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800305c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800305e:	bf08      	it	eq
 8003060:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003064:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8003068:	bf18      	it	ne
 800306a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800306e:	e772      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8003070:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80030c8 <HAL_GPIO_Init+0x1cc>
 8003074:	454c      	cmp	r4, r9
 8003076:	d0ef      	beq.n	8003058 <HAL_GPIO_Init+0x15c>
 8003078:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800307c:	e7e9      	b.n	8003052 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800307e:	68ca      	ldr	r2, [r1, #12]
          break;
 8003080:	e769      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003082:	68ca      	ldr	r2, [r1, #12]
 8003084:	3204      	adds	r2, #4
          break;
 8003086:	e766      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003088:	68ca      	ldr	r2, [r1, #12]
 800308a:	3208      	adds	r2, #8
          break;
 800308c:	e763      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800308e:	68ca      	ldr	r2, [r1, #12]
 8003090:	320c      	adds	r2, #12
          break;
 8003092:	e760      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8003094:	2200      	movs	r2, #0
 8003096:	e75e      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003098:	2204      	movs	r2, #4
 800309a:	e75c      	b.n	8002f56 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800309c:	2400      	movs	r4, #0
 800309e:	e7a7      	b.n	8002ff0 <HAL_GPIO_Init+0xf4>
 80030a0:	2401      	movs	r4, #1
 80030a2:	e7a5      	b.n	8002ff0 <HAL_GPIO_Init+0xf4>
 80030a4:	2402      	movs	r4, #2
 80030a6:	e7a3      	b.n	8002ff0 <HAL_GPIO_Init+0xf4>
 80030a8:	2403      	movs	r4, #3
 80030aa:	e7a1      	b.n	8002ff0 <HAL_GPIO_Init+0xf4>
 80030ac:	2404      	movs	r4, #4
 80030ae:	e79f      	b.n	8002ff0 <HAL_GPIO_Init+0xf4>
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010400 	.word	0x40010400
 80030b8:	40011c00 	.word	0x40011c00
 80030bc:	10220000 	.word	0x10220000
 80030c0:	40010800 	.word	0x40010800
 80030c4:	10120000 	.word	0x10120000
 80030c8:	10310000 	.word	0x10310000

080030cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030cc:	6883      	ldr	r3, [r0, #8]
 80030ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80030d0:	bf14      	ite	ne
 80030d2:	2001      	movne	r0, #1
 80030d4:	2000      	moveq	r0, #0
 80030d6:	4770      	bx	lr

080030d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030d8:	b10a      	cbz	r2, 80030de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030da:	6101      	str	r1, [r0, #16]
  }
}
 80030dc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030de:	0409      	lsls	r1, r1, #16
 80030e0:	e7fb      	b.n	80030da <HAL_GPIO_WritePin+0x2>

080030e2 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80030e6:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030e8:	6951      	ldr	r1, [r2, #20]
 80030ea:	4201      	tst	r1, r0
 80030ec:	d002      	beq.n	80030f4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ee:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f0:	f7ff fff7 	bl	80030e2 <HAL_GPIO_EXTI_Callback>
}
 80030f4:	bd08      	pop	{r3, pc}
 80030f6:	bf00      	nop
 80030f8:	40010400 	.word	0x40010400

080030fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003100:	4605      	mov	r5, r0
 8003102:	b338      	cbz	r0, 8003154 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003104:	6803      	ldr	r3, [r0, #0]
 8003106:	07db      	lsls	r3, r3, #31
 8003108:	d410      	bmi.n	800312c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	079f      	lsls	r7, r3, #30
 800310e:	d45e      	bmi.n	80031ce <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	0719      	lsls	r1, r3, #28
 8003114:	f100 8095 	bmi.w	8003242 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	075a      	lsls	r2, r3, #29
 800311c:	f100 80c1 	bmi.w	80032a2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003120:	69e8      	ldr	r0, [r5, #28]
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 812c 	bne.w	8003380 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003128:	2000      	movs	r0, #0
 800312a:	e029      	b.n	8003180 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800312c:	4c90      	ldr	r4, [pc, #576]	; (8003370 <HAL_RCC_OscConfig+0x274>)
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d007      	beq.n	8003148 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003138:	6863      	ldr	r3, [r4, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b08      	cmp	r3, #8
 8003140:	d10a      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
 8003142:	6863      	ldr	r3, [r4, #4]
 8003144:	03de      	lsls	r6, r3, #15
 8003146:	d507      	bpl.n	8003158 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	039c      	lsls	r4, r3, #14
 800314c:	d5dd      	bpl.n	800310a <HAL_RCC_OscConfig+0xe>
 800314e:	686b      	ldr	r3, [r5, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1da      	bne.n	800310a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003154:	2001      	movs	r0, #1
 8003156:	e013      	b.n	8003180 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	686b      	ldr	r3, [r5, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d112      	bne.n	8003186 <HAL_RCC_OscConfig+0x8a>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003168:	f7ff fe58 	bl	8002e1c <HAL_GetTick>
 800316c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	0398      	lsls	r0, r3, #14
 8003172:	d4ca      	bmi.n	800310a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7ff fe52 	bl	8002e1c <HAL_GetTick>
 8003178:	1b80      	subs	r0, r0, r6
 800317a:	2864      	cmp	r0, #100	; 0x64
 800317c:	d9f7      	bls.n	800316e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800317e:	2003      	movs	r0, #3
}
 8003180:	b002      	add	sp, #8
 8003182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003186:	b99b      	cbnz	r3, 80031b0 <HAL_RCC_OscConfig+0xb4>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003196:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003198:	f7ff fe40 	bl	8002e1c <HAL_GetTick>
 800319c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	0399      	lsls	r1, r3, #14
 80031a2:	d5b2      	bpl.n	800310a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff fe3a 	bl	8002e1c <HAL_GetTick>
 80031a8:	1b80      	subs	r0, r0, r6
 80031aa:	2864      	cmp	r0, #100	; 0x64
 80031ac:	d9f7      	bls.n	800319e <HAL_RCC_OscConfig+0xa2>
 80031ae:	e7e6      	b.n	800317e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	d103      	bne.n	80031c0 <HAL_RCC_OscConfig+0xc4>
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	e7cf      	b.n	8003160 <HAL_RCC_OscConfig+0x64>
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031cc:	e7cb      	b.n	8003166 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ce:	4c68      	ldr	r4, [pc, #416]	; (8003370 <HAL_RCC_OscConfig+0x274>)
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	f013 0f0c 	tst.w	r3, #12
 80031d6:	d007      	beq.n	80031e8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031d8:	6863      	ldr	r3, [r4, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d110      	bne.n	8003204 <HAL_RCC_OscConfig+0x108>
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	03da      	lsls	r2, r3, #15
 80031e6:	d40d      	bmi.n	8003204 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	079b      	lsls	r3, r3, #30
 80031ec:	d502      	bpl.n	80031f4 <HAL_RCC_OscConfig+0xf8>
 80031ee:	692b      	ldr	r3, [r5, #16]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d1af      	bne.n	8003154 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	696a      	ldr	r2, [r5, #20]
 80031f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	e785      	b.n	8003110 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003204:	692a      	ldr	r2, [r5, #16]
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x278>)
 8003208:	b16a      	cbz	r2, 8003226 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800320e:	f7ff fe05 	bl	8002e1c <HAL_GetTick>
 8003212:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	079f      	lsls	r7, r3, #30
 8003218:	d4ec      	bmi.n	80031f4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff fdff 	bl	8002e1c <HAL_GetTick>
 800321e:	1b80      	subs	r0, r0, r6
 8003220:	2802      	cmp	r0, #2
 8003222:	d9f7      	bls.n	8003214 <HAL_RCC_OscConfig+0x118>
 8003224:	e7ab      	b.n	800317e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003226:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003228:	f7ff fdf8 	bl	8002e1c <HAL_GetTick>
 800322c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	0798      	lsls	r0, r3, #30
 8003232:	f57f af6d 	bpl.w	8003110 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7ff fdf1 	bl	8002e1c <HAL_GetTick>
 800323a:	1b80      	subs	r0, r0, r6
 800323c:	2802      	cmp	r0, #2
 800323e:	d9f6      	bls.n	800322e <HAL_RCC_OscConfig+0x132>
 8003240:	e79d      	b.n	800317e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003242:	69aa      	ldr	r2, [r5, #24]
 8003244:	4e4a      	ldr	r6, [pc, #296]	; (8003370 <HAL_RCC_OscConfig+0x274>)
 8003246:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCC_OscConfig+0x278>)
 8003248:	b1e2      	cbz	r2, 8003284 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800324a:	2201      	movs	r2, #1
 800324c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003250:	f7ff fde4 	bl	8002e1c <HAL_GetTick>
 8003254:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003258:	079b      	lsls	r3, r3, #30
 800325a:	d50d      	bpl.n	8003278 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800325c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003260:	4b45      	ldr	r3, [pc, #276]	; (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fbb3 f3f2 	udiv	r3, r3, r2
 8003268:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800326a:	bf00      	nop
  }
  while (Delay --);
 800326c:	9b01      	ldr	r3, [sp, #4]
 800326e:	1e5a      	subs	r2, r3, #1
 8003270:	9201      	str	r2, [sp, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f9      	bne.n	800326a <HAL_RCC_OscConfig+0x16e>
 8003276:	e74f      	b.n	8003118 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003278:	f7ff fdd0 	bl	8002e1c <HAL_GetTick>
 800327c:	1b00      	subs	r0, r0, r4
 800327e:	2802      	cmp	r0, #2
 8003280:	d9e9      	bls.n	8003256 <HAL_RCC_OscConfig+0x15a>
 8003282:	e77c      	b.n	800317e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003284:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003288:	f7ff fdc8 	bl	8002e1c <HAL_GetTick>
 800328c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003290:	079f      	lsls	r7, r3, #30
 8003292:	f57f af41 	bpl.w	8003118 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7ff fdc1 	bl	8002e1c <HAL_GetTick>
 800329a:	1b00      	subs	r0, r0, r4
 800329c:	2802      	cmp	r0, #2
 800329e:	d9f6      	bls.n	800328e <HAL_RCC_OscConfig+0x192>
 80032a0:	e76d      	b.n	800317e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4c33      	ldr	r4, [pc, #204]	; (8003370 <HAL_RCC_OscConfig+0x274>)
 80032a4:	69e3      	ldr	r3, [r4, #28]
 80032a6:	00d8      	lsls	r0, r3, #3
 80032a8:	d424      	bmi.n	80032f4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80032aa:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	69e3      	ldr	r3, [r4, #28]
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61e3      	str	r3, [r4, #28]
 80032b4:	69e3      	ldr	r3, [r4, #28]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4e2f      	ldr	r6, [pc, #188]	; (800337c <HAL_RCC_OscConfig+0x280>)
 80032c0:	6833      	ldr	r3, [r6, #0]
 80032c2:	05d9      	lsls	r1, r3, #23
 80032c4:	d518      	bpl.n	80032f8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c6:	68eb      	ldr	r3, [r5, #12]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d126      	bne.n	800331a <HAL_RCC_OscConfig+0x21e>
 80032cc:	6a23      	ldr	r3, [r4, #32]
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80032d4:	f7ff fda2 	bl	8002e1c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80032dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	6a23      	ldr	r3, [r4, #32]
 80032e0:	079b      	lsls	r3, r3, #30
 80032e2:	d53f      	bpl.n	8003364 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	f43f af1b 	beq.w	8003120 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	69e3      	ldr	r3, [r4, #28]
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	61e3      	str	r3, [r4, #28]
 80032f2:	e715      	b.n	8003120 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80032f4:	2700      	movs	r7, #0
 80032f6:	e7e2      	b.n	80032be <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f8:	6833      	ldr	r3, [r6, #0]
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003300:	f7ff fd8c 	bl	8002e1c <HAL_GetTick>
 8003304:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	6833      	ldr	r3, [r6, #0]
 8003308:	05da      	lsls	r2, r3, #23
 800330a:	d4dc      	bmi.n	80032c6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7ff fd86 	bl	8002e1c <HAL_GetTick>
 8003310:	eba0 0008 	sub.w	r0, r0, r8
 8003314:	2864      	cmp	r0, #100	; 0x64
 8003316:	d9f6      	bls.n	8003306 <HAL_RCC_OscConfig+0x20a>
 8003318:	e731      	b.n	800317e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331a:	b9ab      	cbnz	r3, 8003348 <HAL_RCC_OscConfig+0x24c>
 800331c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6223      	str	r3, [r4, #32]
 8003328:	6a23      	ldr	r3, [r4, #32]
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003330:	f7ff fd74 	bl	8002e1c <HAL_GetTick>
 8003334:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	6a23      	ldr	r3, [r4, #32]
 8003338:	0798      	lsls	r0, r3, #30
 800333a:	d5d3      	bpl.n	80032e4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7ff fd6e 	bl	8002e1c <HAL_GetTick>
 8003340:	1b80      	subs	r0, r0, r6
 8003342:	4540      	cmp	r0, r8
 8003344:	d9f7      	bls.n	8003336 <HAL_RCC_OscConfig+0x23a>
 8003346:	e71a      	b.n	800317e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	2b05      	cmp	r3, #5
 800334a:	6a23      	ldr	r3, [r4, #32]
 800334c:	d103      	bne.n	8003356 <HAL_RCC_OscConfig+0x25a>
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6223      	str	r3, [r4, #32]
 8003354:	e7ba      	b.n	80032cc <HAL_RCC_OscConfig+0x1d0>
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6223      	str	r3, [r4, #32]
 800335c:	6a23      	ldr	r3, [r4, #32]
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	e7b6      	b.n	80032d2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7ff fd5a 	bl	8002e1c <HAL_GetTick>
 8003368:	1b80      	subs	r0, r0, r6
 800336a:	4540      	cmp	r0, r8
 800336c:	d9b7      	bls.n	80032de <HAL_RCC_OscConfig+0x1e2>
 800336e:	e706      	b.n	800317e <HAL_RCC_OscConfig+0x82>
 8003370:	40021000 	.word	0x40021000
 8003374:	42420000 	.word	0x42420000
 8003378:	20000020 	.word	0x20000020
 800337c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4c2a      	ldr	r4, [pc, #168]	; (800342c <HAL_RCC_OscConfig+0x330>)
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d03e      	beq.n	800340a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	2200      	movs	r2, #0
 800338e:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCC_OscConfig+0x334>)
 8003390:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	d12c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003396:	f7ff fd41 	bl	8002e1c <HAL_GetTick>
 800339a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	0199      	lsls	r1, r3, #6
 80033a0:	d420      	bmi.n	80033e4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033a2:	6a2b      	ldr	r3, [r5, #32]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d105      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033aa:	6862      	ldr	r2, [r4, #4]
 80033ac:	68a9      	ldr	r1, [r5, #8]
 80033ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80033b2:	430a      	orrs	r2, r1
 80033b4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80033b8:	6862      	ldr	r2, [r4, #4]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80033c0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80033c2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_OscConfig+0x334>)
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80033ca:	f7ff fd27 	bl	8002e1c <HAL_GetTick>
 80033ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	019a      	lsls	r2, r3, #6
 80033d4:	f53f aea8 	bmi.w	8003128 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7ff fd20 	bl	8002e1c <HAL_GetTick>
 80033dc:	1b40      	subs	r0, r0, r5
 80033de:	2802      	cmp	r0, #2
 80033e0:	d9f6      	bls.n	80033d0 <HAL_RCC_OscConfig+0x2d4>
 80033e2:	e6cc      	b.n	800317e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7ff fd1a 	bl	8002e1c <HAL_GetTick>
 80033e8:	1b80      	subs	r0, r0, r6
 80033ea:	2802      	cmp	r0, #2
 80033ec:	d9d6      	bls.n	800339c <HAL_RCC_OscConfig+0x2a0>
 80033ee:	e6c6      	b.n	800317e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80033f0:	f7ff fd14 	bl	8002e1c <HAL_GetTick>
 80033f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	f57f ae95 	bpl.w	8003128 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7ff fd0d 	bl	8002e1c <HAL_GetTick>
 8003402:	1b40      	subs	r0, r0, r5
 8003404:	2802      	cmp	r0, #2
 8003406:	d9f6      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2fa>
 8003408:	e6b9      	b.n	800317e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340a:	2801      	cmp	r0, #1
 800340c:	f43f aeb8 	beq.w	8003180 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003410:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	6a2a      	ldr	r2, [r5, #32]
 8003414:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003418:	4291      	cmp	r1, r2
 800341a:	f47f ae9b 	bne.w	8003154 <HAL_RCC_OscConfig+0x58>
 800341e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003420:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003424:	4293      	cmp	r3, r2
 8003426:	f43f ae7f 	beq.w	8003128 <HAL_RCC_OscConfig+0x2c>
 800342a:	e693      	b.n	8003154 <HAL_RCC_OscConfig+0x58>
 800342c:	40021000 	.word	0x40021000
 8003430:	42420000 	.word	0x42420000

08003434 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <HAL_RCC_GetSysClockFreq+0x38>)
 8003436:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003438:	f003 010c 	and.w	r1, r3, #12
 800343c:	2908      	cmp	r1, #8
 800343e:	d112      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003440:	480b      	ldr	r0, [pc, #44]	; (8003470 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003442:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003446:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003448:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800344a:	d509      	bpl.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800344c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003450:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003454:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_RCC_GetSysClockFreq+0x44>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800345a:	fbb0 f0f3 	udiv	r0, r0, r3
 800345e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_GetSysClockFreq+0x48>)
 8003462:	4358      	muls	r0, r3
 8003464:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003466:	4803      	ldr	r0, [pc, #12]	; (8003474 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	0800646c 	.word	0x0800646c
 8003474:	007a1200 	.word	0x007a1200
 8003478:	0800647c 	.word	0x0800647c
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_ClockConfig>:
{
 8003480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003484:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003486:	4604      	mov	r4, r0
 8003488:	b910      	cbnz	r0, 8003490 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
}
 800348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4a44      	ldr	r2, [pc, #272]	; (80035a4 <HAL_RCC_ClockConfig+0x124>)
 8003492:	6813      	ldr	r3, [r2, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	428b      	cmp	r3, r1
 800349a:	d328      	bcc.n	80034ee <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	078e      	lsls	r6, r1, #30
 80034a0:	d430      	bmi.n	8003504 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	07ca      	lsls	r2, r1, #31
 80034a4:	d443      	bmi.n	800352e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4a3f      	ldr	r2, [pc, #252]	; (80035a4 <HAL_RCC_ClockConfig+0x124>)
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	42ab      	cmp	r3, r5
 80034b0:	d865      	bhi.n	800357e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	4d3c      	ldr	r5, [pc, #240]	; (80035a8 <HAL_RCC_ClockConfig+0x128>)
 80034b6:	f012 0f04 	tst.w	r2, #4
 80034ba:	d16c      	bne.n	8003596 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	0713      	lsls	r3, r2, #28
 80034be:	d506      	bpl.n	80034ce <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034c0:	686b      	ldr	r3, [r5, #4]
 80034c2:	6922      	ldr	r2, [r4, #16]
 80034c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034cc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ce:	f7ff ffb1 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80034d2:	686b      	ldr	r3, [r5, #4]
 80034d4:	4a35      	ldr	r2, [pc, #212]	; (80035ac <HAL_RCC_ClockConfig+0x12c>)
 80034d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	40d8      	lsrs	r0, r3
 80034de:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_RCC_ClockConfig+0x130>)
 80034e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_ClockConfig+0x134>)
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f7ff fc57 	bl	8002d98 <HAL_InitTick>
  return HAL_OK;
 80034ea:	2000      	movs	r0, #0
 80034ec:	e7ce      	b.n	800348c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	f023 0307 	bic.w	r3, r3, #7
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f8:	6813      	ldr	r3, [r2, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	428b      	cmp	r3, r1
 8003500:	d1c3      	bne.n	800348a <HAL_RCC_ClockConfig+0xa>
 8003502:	e7cb      	b.n	800349c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	4b28      	ldr	r3, [pc, #160]	; (80035a8 <HAL_RCC_ClockConfig+0x128>)
 8003506:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350a:	bf1e      	ittt	ne
 800350c:	685a      	ldrne	r2, [r3, #4]
 800350e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003512:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003516:	bf42      	ittt	mi
 8003518:	685a      	ldrmi	r2, [r3, #4]
 800351a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800351e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68a0      	ldr	r0, [r4, #8]
 8003524:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003528:	4302      	orrs	r2, r0
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	e7b9      	b.n	80034a2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352e:	6862      	ldr	r2, [r4, #4]
 8003530:	4e1d      	ldr	r6, [pc, #116]	; (80035a8 <HAL_RCC_ClockConfig+0x128>)
 8003532:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003534:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	d11a      	bne.n	800356e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003538:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	d0a5      	beq.n	800348a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003544:	f023 0303 	bic.w	r3, r3, #3
 8003548:	4313      	orrs	r3, r2
 800354a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800354c:	f7ff fc66 	bl	8002e1c <HAL_GetTick>
 8003550:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	6873      	ldr	r3, [r6, #4]
 8003554:	6862      	ldr	r2, [r4, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800355e:	d0a2      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003560:	f7ff fc5c 	bl	8002e1c <HAL_GetTick>
 8003564:	1bc0      	subs	r0, r0, r7
 8003566:	4540      	cmp	r0, r8
 8003568:	d9f3      	bls.n	8003552 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800356a:	2003      	movs	r0, #3
 800356c:	e78e      	b.n	800348c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356e:	2a02      	cmp	r2, #2
 8003570:	d102      	bne.n	8003578 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003576:	e7e1      	b.n	800353c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	f013 0f02 	tst.w	r3, #2
 800357c:	e7de      	b.n	800353c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	f023 0307 	bic.w	r3, r3, #7
 8003584:	432b      	orrs	r3, r5
 8003586:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003588:	6813      	ldr	r3, [r2, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	42ab      	cmp	r3, r5
 8003590:	f47f af7b 	bne.w	800348a <HAL_RCC_ClockConfig+0xa>
 8003594:	e78d      	b.n	80034b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003596:	686b      	ldr	r3, [r5, #4]
 8003598:	68e1      	ldr	r1, [r4, #12]
 800359a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800359e:	430b      	orrs	r3, r1
 80035a0:	606b      	str	r3, [r5, #4]
 80035a2:	e78b      	b.n	80034bc <HAL_RCC_ClockConfig+0x3c>
 80035a4:	40022000 	.word	0x40022000
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08006454 	.word	0x08006454
 80035b0:	20000020 	.word	0x20000020
 80035b4:	20000028 	.word	0x20000028

080035b8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	4a03      	ldr	r2, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80035c6:	6810      	ldr	r0, [r2, #0]
}
 80035c8:	40d8      	lsrs	r0, r3
 80035ca:	4770      	bx	lr
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08006464 	.word	0x08006464
 80035d4:	20000020 	.word	0x20000020

080035d8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80035e6:	6810      	ldr	r0, [r2, #0]
}
 80035e8:	40d8      	lsrs	r0, r3
 80035ea:	4770      	bx	lr
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08006464 	.word	0x08006464
 80035f4:	20000020 	.word	0x20000020

080035f8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	460e      	mov	r6, r1
 80035fc:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80035fe:	4604      	mov	r4, r0
 8003600:	b348      	cbz	r0, 8003656 <HAL_SRAM_Init+0x5e>
 8003602:	6983      	ldr	r3, [r0, #24]
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d025      	beq.n	8003656 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800360a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800360e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003612:	b91b      	cbnz	r3, 800361c <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003614:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003618:	f7ff fb5a 	bl	8002cd0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800361c:	f104 0108 	add.w	r1, r4, #8
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	f000 f959 	bl	80038d8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003626:	4631      	mov	r1, r6
 8003628:	68a2      	ldr	r2, [r4, #8]
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	f000 f986 	bl	800393c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003630:	4629      	mov	r1, r5
 8003632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003634:	68a2      	ldr	r2, [r4, #8]
 8003636:	6860      	ldr	r0, [r4, #4]
 8003638:	f000 f99e 	bl	8003978 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8003640:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003642:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 800364e:	2301      	movs	r3, #1
 8003650:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003654:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003656:	2001      	movs	r0, #1
 8003658:	e7fc      	b.n	8003654 <HAL_SRAM_Init+0x5c>
	...

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	6803      	ldr	r3, [r0, #0]
 8003662:	68c1      	ldr	r1, [r0, #12]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800366a:	430a      	orrs	r2, r1
 800366c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800366e:	6882      	ldr	r2, [r0, #8]
 8003670:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003672:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003674:	4302      	orrs	r2, r0
 8003676:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003678:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800367c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003680:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003682:	430a      	orrs	r2, r1
 8003684:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	69a1      	ldr	r1, [r4, #24]
 800368a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800368e:	430a      	orrs	r2, r1
 8003690:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <UART_SetConfig+0x70>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d115      	bne.n	80036c4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003698:	f7ff ff9e 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800369c:	2319      	movs	r3, #25
 800369e:	4343      	muls	r3, r0
 80036a0:	6862      	ldr	r2, [r4, #4]
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80036aa:	2264      	movs	r2, #100	; 0x64
 80036ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80036b0:	fb02 3311 	mls	r3, r2, r1, r3
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	3332      	adds	r3, #50	; 0x32
 80036b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036bc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80036c0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80036c2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7ff ff78 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 80036c8:	e7e8      	b.n	800369c <UART_SetConfig+0x40>
 80036ca:	bf00      	nop
 80036cc:	40013800 	.word	0x40013800

080036d0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	460e      	mov	r6, r1
 80036d6:	4617      	mov	r7, r2
 80036d8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	ea36 0303 	bics.w	r3, r6, r3
 80036e2:	d101      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80036e4:	2000      	movs	r0, #0
 80036e6:	e028      	b.n	800373a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	d0f7      	beq.n	80036dc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ec:	b125      	cbz	r5, 80036f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80036ee:	f7ff fb95 	bl	8002e1c <HAL_GetTick>
 80036f2:	1bc0      	subs	r0, r0, r7
 80036f4:	4285      	cmp	r5, r0
 80036f6:	d2f0      	bcs.n	80036da <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f8:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	f102 030c 	add.w	r3, r2, #12
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	320c      	adds	r2, #12
 8003708:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 800370c:	6821      	ldr	r1, [r4, #0]
 800370e:	2800      	cmp	r0, #0
 8003710:	d1f2      	bne.n	80036f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	f101 0314 	add.w	r3, r1, #20
 8003716:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	f101 0014 	add.w	r0, r1, #20
 8003722:	e840 3200 	strex	r2, r3, [r0]
 8003726:	2a00      	cmp	r2, #0
 8003728:	d1f3      	bne.n	8003712 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800372a:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 800372c:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800372e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8003732:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8003736:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800373a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800373c <HAL_UART_Init>:
{
 800373c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800373e:	4604      	mov	r4, r0
 8003740:	b348      	cbz	r0, 8003796 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800374a:	b91b      	cbnz	r3, 8003754 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800374c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003750:	f7ff fa82 	bl	8002c58 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003756:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800375c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800375e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003764:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003766:	f7ff ff79 	bl	800365c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800377c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003784:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003786:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800378a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800378e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003792:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003794:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003796:	2001      	movs	r0, #1
 8003798:	e7fc      	b.n	8003794 <HAL_UART_Init+0x58>

0800379a <HAL_UART_Transmit>:
{
 800379a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800379e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80037a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80037a4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80037a6:	2b20      	cmp	r3, #32
{
 80037a8:	460e      	mov	r6, r1
 80037aa:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80037ac:	d13c      	bne.n	8003828 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d03c      	beq.n	800382c <HAL_UART_Transmit+0x92>
 80037b2:	2a00      	cmp	r2, #0
 80037b4:	d03a      	beq.n	800382c <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	2500      	movs	r5, #0
 80037ba:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80037c0:	f7ff fb2c 	bl	8002e1c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80037c6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80037cc:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ce:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	d103      	bne.n	80037da <HAL_UART_Transmit+0x40>
 80037d2:	6923      	ldr	r3, [r4, #16]
 80037d4:	b90b      	cbnz	r3, 80037da <HAL_UART_Transmit+0x40>
 80037d6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80037d8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80037da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80037dc:	b29b      	uxth	r3, r3
 80037de:	b953      	cbnz	r3, 80037f6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e0:	464b      	mov	r3, r9
 80037e2:	4642      	mov	r2, r8
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7ff ff72 	bl	80036d0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80037ec:	b950      	cbnz	r0, 8003804 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80037ee:	2320      	movs	r3, #32
 80037f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80037f4:	e007      	b.n	8003806 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f6:	464b      	mov	r3, r9
 80037f8:	4642      	mov	r2, r8
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7ff ff67 	bl	80036d0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003802:	b110      	cbz	r0, 800380a <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8003804:	2003      	movs	r0, #3
}
 8003806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800380a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800380c:	b94e      	cbnz	r6, 8003822 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800380e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003816:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003818:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800381a:	3901      	subs	r1, #1
 800381c:	b289      	uxth	r1, r1
 800381e:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003820:	e7db      	b.n	80037da <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003822:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003826:	e7f6      	b.n	8003816 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8003828:	2002      	movs	r0, #2
 800382a:	e7ec      	b.n	8003806 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 800382c:	2001      	movs	r0, #1
 800382e:	e7ea      	b.n	8003806 <HAL_UART_Transmit+0x6c>

08003830 <HAL_UART_Receive>:
{
 8003830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003834:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003836:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 800383a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800383c:	2b20      	cmp	r3, #32
{
 800383e:	460e      	mov	r6, r1
 8003840:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003842:	d143      	bne.n	80038cc <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8003844:	2900      	cmp	r1, #0
 8003846:	d043      	beq.n	80038d0 <HAL_UART_Receive+0xa0>
 8003848:	2a00      	cmp	r2, #0
 800384a:	d041      	beq.n	80038d0 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800384c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	2500      	movs	r5, #0
 8003850:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003852:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8003858:	f7ff fae0 	bl	8002e1c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800385e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8003864:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003868:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386c:	d103      	bne.n	8003876 <HAL_UART_Receive+0x46>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	b90b      	cbnz	r3, 8003876 <HAL_UART_Receive+0x46>
 8003872:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003874:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8003876:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003878:	b280      	uxth	r0, r0
 800387a:	b920      	cbnz	r0, 8003886 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800387c:	2320      	movs	r3, #32
 800387e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8003882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	463b      	mov	r3, r7
 8003888:	4642      	mov	r2, r8
 800388a:	2120      	movs	r1, #32
 800388c:	4620      	mov	r0, r4
 800388e:	f7ff ff1f 	bl	80036d0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003892:	b9f8      	cbnz	r0, 80038d4 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003894:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8003896:	b94e      	cbnz	r6, 80038ac <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80038a2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80038aa:	e7e4      	b.n	8003876 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038ac:	68a2      	ldr	r2, [r4, #8]
 80038ae:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Receive+0x8a>
 80038b4:	b932      	cbnz	r2, 80038c4 <HAL_UART_Receive+0x94>
 80038b6:	6922      	ldr	r2, [r4, #16]
 80038b8:	b922      	cbnz	r2, 80038c4 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	b2c9      	uxtb	r1, r1
 80038be:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80038c2:	e7ee      	b.n	80038a2 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038ca:	e7f8      	b.n	80038be <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 80038cc:	2002      	movs	r0, #2
 80038ce:	e7d8      	b.n	8003882 <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
 80038d2:	e7d6      	b.n	8003882 <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 80038d4:	2003      	movs	r0, #3
 80038d6:	e7d4      	b.n	8003882 <HAL_UART_Receive+0x52>

080038d8 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80038d8:	680a      	ldr	r2, [r1, #0]
{
 80038da:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80038dc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80038e0:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80038ea:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80038ec:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	bf0c      	ite	eq
 80038f4:	2440      	moveq	r4, #64	; 0x40
 80038f6:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80038f8:	4333      	orrs	r3, r6
 80038fa:	68ce      	ldr	r6, [r1, #12]
 80038fc:	4333      	orrs	r3, r6
 80038fe:	690e      	ldr	r6, [r1, #16]
 8003900:	4333      	orrs	r3, r6
 8003902:	694e      	ldr	r6, [r1, #20]
 8003904:	4333      	orrs	r3, r6
 8003906:	69ce      	ldr	r6, [r1, #28]
 8003908:	4333      	orrs	r3, r6
 800390a:	6a0e      	ldr	r6, [r1, #32]
 800390c:	4333      	orrs	r3, r6
 800390e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003910:	4333      	orrs	r3, r6
 8003912:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8003914:	4333      	orrs	r3, r6
 8003916:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003918:	4333      	orrs	r3, r6
 800391a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800391c:	4333      	orrs	r3, r6
 800391e:	698e      	ldr	r6, [r1, #24]
 8003920:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003922:	4333      	orrs	r3, r6
 8003924:	430b      	orrs	r3, r1
 8003926:	4904      	ldr	r1, [pc, #16]	; (8003938 <FSMC_NORSRAM_Init+0x60>)
 8003928:	4029      	ands	r1, r5
 800392a:	430b      	orrs	r3, r1
 800392c:	4323      	orrs	r3, r4
 800392e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8003932:	2000      	movs	r0, #0
 8003934:	bd70      	pop	{r4, r5, r6, pc}
 8003936:	bf00      	nop
 8003938:	fff00080 	.word	0xfff00080

0800393c <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800393c:	680b      	ldr	r3, [r1, #0]
{
 800393e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003940:	698c      	ldr	r4, [r1, #24]
 8003942:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003946:	4323      	orrs	r3, r4
 8003948:	684c      	ldr	r4, [r1, #4]
 800394a:	6850      	ldr	r0, [r2, #4]
 800394c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003950:	688c      	ldr	r4, [r1, #8]
 8003952:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003956:	68cc      	ldr	r4, [r1, #12]
 8003958:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800395c:	690c      	ldr	r4, [r1, #16]
 800395e:	6949      	ldr	r1, [r1, #20]
 8003960:	3c01      	subs	r4, #1
 8003962:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003966:	3902      	subs	r1, #2
 8003968:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800396c:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8003970:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8003972:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003974:	6053      	str	r3, [r2, #4]
}
 8003976:	bd10      	pop	{r4, pc}

08003978 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 800397c:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800397e:	d114      	bne.n	80039aa <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003980:	698d      	ldr	r5, [r1, #24]
 8003982:	680b      	ldr	r3, [r1, #0]
 8003984:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003988:	432b      	orrs	r3, r5
 800398a:	684d      	ldr	r5, [r1, #4]
 800398c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003990:	688d      	ldr	r5, [r1, #8]
 8003992:	68c9      	ldr	r1, [r1, #12]
 8003994:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003998:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800399c:	4904      	ldr	r1, [pc, #16]	; (80039b0 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 800399e:	4021      	ands	r1, r4
 80039a0:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80039a2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80039a6:	2000      	movs	r0, #0
 80039a8:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80039aa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80039ae:	e7f8      	b.n	80039a2 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 80039b0:	cff00000 	.word	0xcff00000

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000002c 	.word	0x2000002c

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	2600      	movs	r6, #0
 80039c4:	4d0c      	ldr	r5, [pc, #48]	; (80039f8 <__libc_init_array+0x38>)
 80039c6:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c8:	1b64      	subs	r4, r4, r5
 80039ca:	10a4      	asrs	r4, r4, #2
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	f000 ff04 	bl	80047dc <_init>
 80039d4:	2600      	movs	r6, #0
 80039d6:	4d0a      	ldr	r5, [pc, #40]	; (8003a00 <__libc_init_array+0x40>)
 80039d8:	4c0a      	ldr	r4, [pc, #40]	; (8003a04 <__libc_init_array+0x44>)
 80039da:	1b64      	subs	r4, r4, r5
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	080064b0 	.word	0x080064b0
 80039fc:	080064b0 	.word	0x080064b0
 8003a00:	080064b0 	.word	0x080064b0
 8003a04:	080064b4 	.word	0x080064b4

08003a08 <memset>:
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4402      	add	r2, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <memset+0xa>
 8003a10:	4770      	bx	lr
 8003a12:	f803 1b01 	strb.w	r1, [r3], #1
 8003a16:	e7f9      	b.n	8003a0c <memset+0x4>

08003a18 <pow>:
 8003a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	4614      	mov	r4, r2
 8003a1e:	461d      	mov	r5, r3
 8003a20:	4680      	mov	r8, r0
 8003a22:	4689      	mov	r9, r1
 8003a24:	f000 f860 	bl	8003ae8 <__ieee754_pow>
 8003a28:	4622      	mov	r2, r4
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	460f      	mov	r7, r1
 8003a2e:	462b      	mov	r3, r5
 8003a30:	4620      	mov	r0, r4
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7fd f856 	bl	8000ae4 <__aeabi_dcmpun>
 8003a38:	bbc8      	cbnz	r0, 8003aae <pow+0x96>
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4640      	mov	r0, r8
 8003a40:	4649      	mov	r1, r9
 8003a42:	f7fd f81d 	bl	8000a80 <__aeabi_dcmpeq>
 8003a46:	b1b8      	cbz	r0, 8003a78 <pow+0x60>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	f7fd f816 	bl	8000a80 <__aeabi_dcmpeq>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d141      	bne.n	8003adc <pow+0xc4>
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f000 fe39 	bl	80046d2 <finite>
 8003a60:	b328      	cbz	r0, 8003aae <pow+0x96>
 8003a62:	2200      	movs	r2, #0
 8003a64:	2300      	movs	r3, #0
 8003a66:	4620      	mov	r0, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f7fd f813 	bl	8000a94 <__aeabi_dcmplt>
 8003a6e:	b1f0      	cbz	r0, 8003aae <pow+0x96>
 8003a70:	f7ff ffa0 	bl	80039b4 <__errno>
 8003a74:	2322      	movs	r3, #34	; 0x22
 8003a76:	e019      	b.n	8003aac <pow+0x94>
 8003a78:	4630      	mov	r0, r6
 8003a7a:	4639      	mov	r1, r7
 8003a7c:	f000 fe29 	bl	80046d2 <finite>
 8003a80:	b9c8      	cbnz	r0, 8003ab6 <pow+0x9e>
 8003a82:	4640      	mov	r0, r8
 8003a84:	4649      	mov	r1, r9
 8003a86:	f000 fe24 	bl	80046d2 <finite>
 8003a8a:	b1a0      	cbz	r0, 8003ab6 <pow+0x9e>
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	f000 fe1f 	bl	80046d2 <finite>
 8003a94:	b178      	cbz	r0, 8003ab6 <pow+0x9e>
 8003a96:	4632      	mov	r2, r6
 8003a98:	463b      	mov	r3, r7
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	4639      	mov	r1, r7
 8003a9e:	f7fd f821 	bl	8000ae4 <__aeabi_dcmpun>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0e4      	beq.n	8003a70 <pow+0x58>
 8003aa6:	f7ff ff85 	bl	80039b4 <__errno>
 8003aaa:	2321      	movs	r3, #33	; 0x21
 8003aac:	6003      	str	r3, [r0, #0]
 8003aae:	4630      	mov	r0, r6
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4630      	mov	r0, r6
 8003abc:	4639      	mov	r1, r7
 8003abe:	f7fc ffdf 	bl	8000a80 <__aeabi_dcmpeq>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d0f3      	beq.n	8003aae <pow+0x96>
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	4649      	mov	r1, r9
 8003aca:	f000 fe02 	bl	80046d2 <finite>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d0ed      	beq.n	8003aae <pow+0x96>
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f000 fdfc 	bl	80046d2 <finite>
 8003ada:	e7c8      	b.n	8003a6e <pow+0x56>
 8003adc:	2600      	movs	r6, #0
 8003ade:	4f01      	ldr	r7, [pc, #4]	; (8003ae4 <pow+0xcc>)
 8003ae0:	e7e5      	b.n	8003aae <pow+0x96>
 8003ae2:	bf00      	nop
 8003ae4:	3ff00000 	.word	0x3ff00000

08003ae8 <__ieee754_pow>:
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	b093      	sub	sp, #76	; 0x4c
 8003aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003af2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003af6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003afa:	4689      	mov	r9, r1
 8003afc:	ea56 0102 	orrs.w	r1, r6, r2
 8003b00:	4680      	mov	r8, r0
 8003b02:	d111      	bne.n	8003b28 <__ieee754_pow+0x40>
 8003b04:	1803      	adds	r3, r0, r0
 8003b06:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003b0a:	4152      	adcs	r2, r2
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	4b82      	ldr	r3, [pc, #520]	; (8003d18 <__ieee754_pow+0x230>)
 8003b10:	4193      	sbcs	r3, r2
 8003b12:	f080 84b9 	bcs.w	8004488 <__ieee754_pow+0x9a0>
 8003b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	f7fc fb91 	bl	8000244 <__adddf3>
 8003b22:	4683      	mov	fp, r0
 8003b24:	468c      	mov	ip, r1
 8003b26:	e06f      	b.n	8003c08 <__ieee754_pow+0x120>
 8003b28:	4b7c      	ldr	r3, [pc, #496]	; (8003d1c <__ieee754_pow+0x234>)
 8003b2a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003b2e:	429c      	cmp	r4, r3
 8003b30:	464d      	mov	r5, r9
 8003b32:	4682      	mov	sl, r0
 8003b34:	dc06      	bgt.n	8003b44 <__ieee754_pow+0x5c>
 8003b36:	d101      	bne.n	8003b3c <__ieee754_pow+0x54>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d1ec      	bne.n	8003b16 <__ieee754_pow+0x2e>
 8003b3c:	429e      	cmp	r6, r3
 8003b3e:	dc01      	bgt.n	8003b44 <__ieee754_pow+0x5c>
 8003b40:	d10f      	bne.n	8003b62 <__ieee754_pow+0x7a>
 8003b42:	b172      	cbz	r2, 8003b62 <__ieee754_pow+0x7a>
 8003b44:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003b48:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003b4c:	ea55 050a 	orrs.w	r5, r5, sl
 8003b50:	d1e1      	bne.n	8003b16 <__ieee754_pow+0x2e>
 8003b52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003b5c:	4152      	adcs	r2, r2
 8003b5e:	429d      	cmp	r5, r3
 8003b60:	e7d5      	b.n	8003b0e <__ieee754_pow+0x26>
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	da39      	bge.n	8003bda <__ieee754_pow+0xf2>
 8003b66:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <__ieee754_pow+0x238>)
 8003b68:	429e      	cmp	r6, r3
 8003b6a:	dc52      	bgt.n	8003c12 <__ieee754_pow+0x12a>
 8003b6c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003b70:	429e      	cmp	r6, r3
 8003b72:	f340 849c 	ble.w	80044ae <__ieee754_pow+0x9c6>
 8003b76:	1533      	asrs	r3, r6, #20
 8003b78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003b7c:	2b14      	cmp	r3, #20
 8003b7e:	dd0f      	ble.n	8003ba0 <__ieee754_pow+0xb8>
 8003b80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003b84:	fa22 f103 	lsr.w	r1, r2, r3
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	f040 848e 	bne.w	80044ae <__ieee754_pow+0x9c6>
 8003b92:	f001 0101 	and.w	r1, r1, #1
 8003b96:	f1c1 0302 	rsb	r3, r1, #2
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	b182      	cbz	r2, 8003bc0 <__ieee754_pow+0xd8>
 8003b9e:	e05d      	b.n	8003c5c <__ieee754_pow+0x174>
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	d159      	bne.n	8003c58 <__ieee754_pow+0x170>
 8003ba4:	f1c3 0314 	rsb	r3, r3, #20
 8003ba8:	fa46 f103 	asr.w	r1, r6, r3
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	42b3      	cmp	r3, r6
 8003bb2:	f040 8479 	bne.w	80044a8 <__ieee754_pow+0x9c0>
 8003bb6:	f001 0101 	and.w	r1, r1, #1
 8003bba:	f1c1 0302 	rsb	r3, r1, #2
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <__ieee754_pow+0x23c>)
 8003bc2:	429e      	cmp	r6, r3
 8003bc4:	d132      	bne.n	8003c2c <__ieee754_pow+0x144>
 8003bc6:	2f00      	cmp	r7, #0
 8003bc8:	f280 846a 	bge.w	80044a0 <__ieee754_pow+0x9b8>
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	4954      	ldr	r1, [pc, #336]	; (8003d24 <__ieee754_pow+0x23c>)
 8003bd4:	f7fc fe16 	bl	8000804 <__aeabi_ddiv>
 8003bd8:	e7a3      	b.n	8003b22 <__ieee754_pow+0x3a>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d13c      	bne.n	8003c5c <__ieee754_pow+0x174>
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <__ieee754_pow+0x234>)
 8003be4:	429e      	cmp	r6, r3
 8003be6:	d1eb      	bne.n	8003bc0 <__ieee754_pow+0xd8>
 8003be8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003bec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003bf0:	ea53 030a 	orrs.w	r3, r3, sl
 8003bf4:	f000 8448 	beq.w	8004488 <__ieee754_pow+0x9a0>
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <__ieee754_pow+0x240>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	dd0b      	ble.n	8003c16 <__ieee754_pow+0x12e>
 8003bfe:	2f00      	cmp	r7, #0
 8003c00:	f2c0 8448 	blt.w	8004494 <__ieee754_pow+0x9ac>
 8003c04:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003c08:	4658      	mov	r0, fp
 8003c0a:	4661      	mov	r1, ip
 8003c0c:	b013      	add	sp, #76	; 0x4c
 8003c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c12:	2302      	movs	r3, #2
 8003c14:	e7e2      	b.n	8003bdc <__ieee754_pow+0xf4>
 8003c16:	2f00      	cmp	r7, #0
 8003c18:	f04f 0b00 	mov.w	fp, #0
 8003c1c:	f04f 0c00 	mov.w	ip, #0
 8003c20:	daf2      	bge.n	8003c08 <__ieee754_pow+0x120>
 8003c22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003c26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003c2a:	e7ed      	b.n	8003c08 <__ieee754_pow+0x120>
 8003c2c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003c30:	d106      	bne.n	8003c40 <__ieee754_pow+0x158>
 8003c32:	4642      	mov	r2, r8
 8003c34:	464b      	mov	r3, r9
 8003c36:	4640      	mov	r0, r8
 8003c38:	4649      	mov	r1, r9
 8003c3a:	f7fc fcb9 	bl	80005b0 <__aeabi_dmul>
 8003c3e:	e770      	b.n	8003b22 <__ieee754_pow+0x3a>
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <__ieee754_pow+0x244>)
 8003c42:	429f      	cmp	r7, r3
 8003c44:	d10a      	bne.n	8003c5c <__ieee754_pow+0x174>
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	db08      	blt.n	8003c5c <__ieee754_pow+0x174>
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	b013      	add	sp, #76	; 0x4c
 8003c50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	f000 bc5e 	b.w	8004514 <__ieee754_sqrt>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	4649      	mov	r1, r9
 8003c60:	f000 fd34 	bl	80046cc <fabs>
 8003c64:	4683      	mov	fp, r0
 8003c66:	468c      	mov	ip, r1
 8003c68:	f1ba 0f00 	cmp.w	sl, #0
 8003c6c:	d128      	bne.n	8003cc0 <__ieee754_pow+0x1d8>
 8003c6e:	b124      	cbz	r4, 8003c7a <__ieee754_pow+0x192>
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <__ieee754_pow+0x23c>)
 8003c72:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d122      	bne.n	8003cc0 <__ieee754_pow+0x1d8>
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	da07      	bge.n	8003c8e <__ieee754_pow+0x1a6>
 8003c7e:	465a      	mov	r2, fp
 8003c80:	4663      	mov	r3, ip
 8003c82:	2000      	movs	r0, #0
 8003c84:	4927      	ldr	r1, [pc, #156]	; (8003d24 <__ieee754_pow+0x23c>)
 8003c86:	f7fc fdbd 	bl	8000804 <__aeabi_ddiv>
 8003c8a:	4683      	mov	fp, r0
 8003c8c:	468c      	mov	ip, r1
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	daba      	bge.n	8003c08 <__ieee754_pow+0x120>
 8003c92:	9b00      	ldr	r3, [sp, #0]
 8003c94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c9c:	4323      	orrs	r3, r4
 8003c9e:	d108      	bne.n	8003cb2 <__ieee754_pow+0x1ca>
 8003ca0:	465a      	mov	r2, fp
 8003ca2:	4663      	mov	r3, ip
 8003ca4:	4658      	mov	r0, fp
 8003ca6:	4661      	mov	r1, ip
 8003ca8:	f7fc faca 	bl	8000240 <__aeabi_dsub>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	e790      	b.n	8003bd4 <__ieee754_pow+0xec>
 8003cb2:	9b00      	ldr	r3, [sp, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d1a7      	bne.n	8003c08 <__ieee754_pow+0x120>
 8003cb8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003cbc:	469c      	mov	ip, r3
 8003cbe:	e7a3      	b.n	8003c08 <__ieee754_pow+0x120>
 8003cc0:	0feb      	lsrs	r3, r5, #31
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8003cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cc8:	9b00      	ldr	r3, [sp, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d104      	bne.n	8003cd8 <__ieee754_pow+0x1f0>
 8003cce:	4642      	mov	r2, r8
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	e7e7      	b.n	8003ca8 <__ieee754_pow+0x1c0>
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <__ieee754_pow+0x248>)
 8003cda:	429e      	cmp	r6, r3
 8003cdc:	f340 80f6 	ble.w	8003ecc <__ieee754_pow+0x3e4>
 8003ce0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003ce4:	429e      	cmp	r6, r3
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <__ieee754_pow+0x240>)
 8003ce8:	dd09      	ble.n	8003cfe <__ieee754_pow+0x216>
 8003cea:	429c      	cmp	r4, r3
 8003cec:	dc0c      	bgt.n	8003d08 <__ieee754_pow+0x220>
 8003cee:	2f00      	cmp	r7, #0
 8003cf0:	da0c      	bge.n	8003d0c <__ieee754_pow+0x224>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	b013      	add	sp, #76	; 0x4c
 8003cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	f000 bce2 	b.w	80046c2 <__math_oflow>
 8003cfe:	429c      	cmp	r4, r3
 8003d00:	dbf5      	blt.n	8003cee <__ieee754_pow+0x206>
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <__ieee754_pow+0x23c>)
 8003d04:	429c      	cmp	r4, r3
 8003d06:	dd15      	ble.n	8003d34 <__ieee754_pow+0x24c>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	dcf2      	bgt.n	8003cf2 <__ieee754_pow+0x20a>
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	b013      	add	sp, #76	; 0x4c
 8003d10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	f000 bcd0 	b.w	80046b8 <__math_uflow>
 8003d18:	fff00000 	.word	0xfff00000
 8003d1c:	7ff00000 	.word	0x7ff00000
 8003d20:	433fffff 	.word	0x433fffff
 8003d24:	3ff00000 	.word	0x3ff00000
 8003d28:	3fefffff 	.word	0x3fefffff
 8003d2c:	3fe00000 	.word	0x3fe00000
 8003d30:	41e00000 	.word	0x41e00000
 8003d34:	4661      	mov	r1, ip
 8003d36:	2200      	movs	r2, #0
 8003d38:	4658      	mov	r0, fp
 8003d3a:	4b5f      	ldr	r3, [pc, #380]	; (8003eb8 <__ieee754_pow+0x3d0>)
 8003d3c:	f7fc fa80 	bl	8000240 <__aeabi_dsub>
 8003d40:	a355      	add	r3, pc, #340	; (adr r3, 8003e98 <__ieee754_pow+0x3b0>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	4604      	mov	r4, r0
 8003d48:	460d      	mov	r5, r1
 8003d4a:	f7fc fc31 	bl	80005b0 <__aeabi_dmul>
 8003d4e:	a354      	add	r3, pc, #336	; (adr r3, 8003ea0 <__ieee754_pow+0x3b8>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	4606      	mov	r6, r0
 8003d56:	460f      	mov	r7, r1
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	f7fc fc28 	bl	80005b0 <__aeabi_dmul>
 8003d60:	2200      	movs	r2, #0
 8003d62:	4682      	mov	sl, r0
 8003d64:	468b      	mov	fp, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <__ieee754_pow+0x3d4>)
 8003d6c:	f7fc fc20 	bl	80005b0 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	a14c      	add	r1, pc, #304	; (adr r1, 8003ea8 <__ieee754_pow+0x3c0>)
 8003d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d7a:	f7fc fa61 	bl	8000240 <__aeabi_dsub>
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	f7fc fc15 	bl	80005b0 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	494c      	ldr	r1, [pc, #304]	; (8003ec0 <__ieee754_pow+0x3d8>)
 8003d8e:	f7fc fa57 	bl	8000240 <__aeabi_dsub>
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	4680      	mov	r8, r0
 8003d98:	4689      	mov	r9, r1
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	f7fc fc07 	bl	80005b0 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4640      	mov	r0, r8
 8003da8:	4649      	mov	r1, r9
 8003daa:	f7fc fc01 	bl	80005b0 <__aeabi_dmul>
 8003dae:	a340      	add	r3, pc, #256	; (adr r3, 8003eb0 <__ieee754_pow+0x3c8>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f7fc fbfc 	bl	80005b0 <__aeabi_dmul>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	4659      	mov	r1, fp
 8003dc0:	f7fc fa3e 	bl	8000240 <__aeabi_dsub>
 8003dc4:	f04f 0a00 	mov.w	sl, #0
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4604      	mov	r4, r0
 8003dce:	460d      	mov	r5, r1
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	4639      	mov	r1, r7
 8003dd4:	f7fc fa36 	bl	8000244 <__adddf3>
 8003dd8:	4632      	mov	r2, r6
 8003dda:	463b      	mov	r3, r7
 8003ddc:	4650      	mov	r0, sl
 8003dde:	468b      	mov	fp, r1
 8003de0:	f7fc fa2e 	bl	8000240 <__aeabi_dsub>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4620      	mov	r0, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	f7fc fa28 	bl	8000240 <__aeabi_dsub>
 8003df0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003df4:	9b00      	ldr	r3, [sp, #0]
 8003df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f04f 0600 	mov.w	r6, #0
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	bf0c      	ite	eq
 8003e06:	4b2f      	ldreq	r3, [pc, #188]	; (8003ec4 <__ieee754_pow+0x3dc>)
 8003e08:	4b2b      	ldrne	r3, [pc, #172]	; (8003eb8 <__ieee754_pow+0x3d0>)
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e12:	e9cd 2300 	strd	r2, r3, [sp]
 8003e16:	4632      	mov	r2, r6
 8003e18:	463b      	mov	r3, r7
 8003e1a:	f7fc fa11 	bl	8000240 <__aeabi_dsub>
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	f7fc fbc5 	bl	80005b0 <__aeabi_dmul>
 8003e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e2a:	4680      	mov	r8, r0
 8003e2c:	4689      	mov	r9, r1
 8003e2e:	4620      	mov	r0, r4
 8003e30:	4629      	mov	r1, r5
 8003e32:	f7fc fbbd 	bl	80005b0 <__aeabi_dmul>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	f7fc fa01 	bl	8000244 <__adddf3>
 8003e42:	4632      	mov	r2, r6
 8003e44:	463b      	mov	r3, r7
 8003e46:	4680      	mov	r8, r0
 8003e48:	4689      	mov	r9, r1
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	f7fc fbaf 	bl	80005b0 <__aeabi_dmul>
 8003e52:	4604      	mov	r4, r0
 8003e54:	460d      	mov	r5, r1
 8003e56:	460b      	mov	r3, r1
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003e62:	f7fc f9ef 	bl	8000244 <__adddf3>
 8003e66:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <__ieee754_pow+0x3e0>)
 8003e68:	4682      	mov	sl, r0
 8003e6a:	4299      	cmp	r1, r3
 8003e6c:	460f      	mov	r7, r1
 8003e6e:	460e      	mov	r6, r1
 8003e70:	f340 82e5 	ble.w	800443e <__ieee754_pow+0x956>
 8003e74:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003e78:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003e7c:	4303      	orrs	r3, r0
 8003e7e:	f000 81df 	beq.w	8004240 <__ieee754_pow+0x758>
 8003e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f7fc fe03 	bl	8000a94 <__aeabi_dcmplt>
 8003e8e:	3800      	subs	r0, #0
 8003e90:	bf18      	it	ne
 8003e92:	2001      	movne	r0, #1
 8003e94:	e72e      	b.n	8003cf4 <__ieee754_pow+0x20c>
 8003e96:	bf00      	nop
 8003e98:	60000000 	.word	0x60000000
 8003e9c:	3ff71547 	.word	0x3ff71547
 8003ea0:	f85ddf44 	.word	0xf85ddf44
 8003ea4:	3e54ae0b 	.word	0x3e54ae0b
 8003ea8:	55555555 	.word	0x55555555
 8003eac:	3fd55555 	.word	0x3fd55555
 8003eb0:	652b82fe 	.word	0x652b82fe
 8003eb4:	3ff71547 	.word	0x3ff71547
 8003eb8:	3ff00000 	.word	0x3ff00000
 8003ebc:	3fd00000 	.word	0x3fd00000
 8003ec0:	3fe00000 	.word	0x3fe00000
 8003ec4:	bff00000 	.word	0xbff00000
 8003ec8:	408fffff 	.word	0x408fffff
 8003ecc:	4bd2      	ldr	r3, [pc, #840]	; (8004218 <__ieee754_pow+0x730>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	402b      	ands	r3, r5
 8003ed2:	b943      	cbnz	r3, 8003ee6 <__ieee754_pow+0x3fe>
 8003ed4:	4658      	mov	r0, fp
 8003ed6:	4661      	mov	r1, ip
 8003ed8:	4bd0      	ldr	r3, [pc, #832]	; (800421c <__ieee754_pow+0x734>)
 8003eda:	f7fc fb69 	bl	80005b0 <__aeabi_dmul>
 8003ede:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003ee2:	4683      	mov	fp, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	1523      	asrs	r3, r4, #20
 8003ee8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003eec:	4413      	add	r3, r2
 8003eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ef0:	4bcb      	ldr	r3, [pc, #812]	; (8004220 <__ieee754_pow+0x738>)
 8003ef2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003ef6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003efa:	429c      	cmp	r4, r3
 8003efc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003f00:	dd08      	ble.n	8003f14 <__ieee754_pow+0x42c>
 8003f02:	4bc8      	ldr	r3, [pc, #800]	; (8004224 <__ieee754_pow+0x73c>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	f340 8199 	ble.w	800423c <__ieee754_pow+0x754>
 8003f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f0c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003f10:	3301      	adds	r3, #1
 8003f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f14:	2600      	movs	r6, #0
 8003f16:	00f3      	lsls	r3, r6, #3
 8003f18:	930d      	str	r3, [sp, #52]	; 0x34
 8003f1a:	4bc3      	ldr	r3, [pc, #780]	; (8004228 <__ieee754_pow+0x740>)
 8003f1c:	4658      	mov	r0, fp
 8003f1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f26:	4629      	mov	r1, r5
 8003f28:	461a      	mov	r2, r3
 8003f2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003f2e:	4623      	mov	r3, r4
 8003f30:	f7fc f986 	bl	8000240 <__aeabi_dsub>
 8003f34:	46da      	mov	sl, fp
 8003f36:	462b      	mov	r3, r5
 8003f38:	4652      	mov	r2, sl
 8003f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003f3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003f42:	f7fc f97f 	bl	8000244 <__adddf3>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	49b7      	ldr	r1, [pc, #732]	; (800422c <__ieee754_pow+0x744>)
 8003f4e:	f7fc fc59 	bl	8000804 <__aeabi_ddiv>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003f5e:	f7fc fb27 	bl	80005b0 <__aeabi_dmul>
 8003f62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f66:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003f6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2200      	movs	r2, #0
 8003f72:	46ab      	mov	fp, r5
 8003f74:	106d      	asrs	r5, r5, #1
 8003f76:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003f7a:	9304      	str	r3, [sp, #16]
 8003f7c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003f80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003f84:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003f88:	4640      	mov	r0, r8
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	461d      	mov	r5, r3
 8003f90:	f7fc fb0e 	bl	80005b0 <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003f9c:	f7fc f950 	bl	8000240 <__aeabi_dsub>
 8003fa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	460f      	mov	r7, r1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc f948 	bl	8000240 <__aeabi_dsub>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	f7fc f942 	bl	8000240 <__aeabi_dsub>
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	f7fc faf6 	bl	80005b0 <__aeabi_dmul>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4630      	mov	r0, r6
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc f938 	bl	8000240 <__aeabi_dsub>
 8003fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fd4:	f7fc faec 	bl	80005b0 <__aeabi_dmul>
 8003fd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fae4 	bl	80005b0 <__aeabi_dmul>
 8003fe8:	a379      	add	r3, pc, #484	; (adr r3, 80041d0 <__ieee754_pow+0x6e8>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	4604      	mov	r4, r0
 8003ff0:	460d      	mov	r5, r1
 8003ff2:	f7fc fadd 	bl	80005b0 <__aeabi_dmul>
 8003ff6:	a378      	add	r3, pc, #480	; (adr r3, 80041d8 <__ieee754_pow+0x6f0>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc f922 	bl	8000244 <__adddf3>
 8004000:	4622      	mov	r2, r4
 8004002:	462b      	mov	r3, r5
 8004004:	f7fc fad4 	bl	80005b0 <__aeabi_dmul>
 8004008:	a375      	add	r3, pc, #468	; (adr r3, 80041e0 <__ieee754_pow+0x6f8>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc f919 	bl	8000244 <__adddf3>
 8004012:	4622      	mov	r2, r4
 8004014:	462b      	mov	r3, r5
 8004016:	f7fc facb 	bl	80005b0 <__aeabi_dmul>
 800401a:	a373      	add	r3, pc, #460	; (adr r3, 80041e8 <__ieee754_pow+0x700>)
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f7fc f910 	bl	8000244 <__adddf3>
 8004024:	4622      	mov	r2, r4
 8004026:	462b      	mov	r3, r5
 8004028:	f7fc fac2 	bl	80005b0 <__aeabi_dmul>
 800402c:	a370      	add	r3, pc, #448	; (adr r3, 80041f0 <__ieee754_pow+0x708>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc f907 	bl	8000244 <__adddf3>
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	f7fc fab9 	bl	80005b0 <__aeabi_dmul>
 800403e:	a36e      	add	r3, pc, #440	; (adr r3, 80041f8 <__ieee754_pow+0x710>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc f8fe 	bl	8000244 <__adddf3>
 8004048:	4622      	mov	r2, r4
 800404a:	4606      	mov	r6, r0
 800404c:	460f      	mov	r7, r1
 800404e:	462b      	mov	r3, r5
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc faac 	bl	80005b0 <__aeabi_dmul>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4630      	mov	r0, r6
 800405e:	4639      	mov	r1, r7
 8004060:	f7fc faa6 	bl	80005b0 <__aeabi_dmul>
 8004064:	4604      	mov	r4, r0
 8004066:	460d      	mov	r5, r1
 8004068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	f7fc f8e8 	bl	8000244 <__adddf3>
 8004074:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004078:	f7fc fa9a 	bl	80005b0 <__aeabi_dmul>
 800407c:	4622      	mov	r2, r4
 800407e:	462b      	mov	r3, r5
 8004080:	f7fc f8e0 	bl	8000244 <__adddf3>
 8004084:	4642      	mov	r2, r8
 8004086:	4606      	mov	r6, r0
 8004088:	460f      	mov	r7, r1
 800408a:	464b      	mov	r3, r9
 800408c:	4640      	mov	r0, r8
 800408e:	4649      	mov	r1, r9
 8004090:	f7fc fa8e 	bl	80005b0 <__aeabi_dmul>
 8004094:	2200      	movs	r2, #0
 8004096:	4b66      	ldr	r3, [pc, #408]	; (8004230 <__ieee754_pow+0x748>)
 8004098:	4682      	mov	sl, r0
 800409a:	468b      	mov	fp, r1
 800409c:	f7fc f8d2 	bl	8000244 <__adddf3>
 80040a0:	4632      	mov	r2, r6
 80040a2:	463b      	mov	r3, r7
 80040a4:	f7fc f8ce 	bl	8000244 <__adddf3>
 80040a8:	2400      	movs	r4, #0
 80040aa:	460d      	mov	r5, r1
 80040ac:	4622      	mov	r2, r4
 80040ae:	460b      	mov	r3, r1
 80040b0:	4640      	mov	r0, r8
 80040b2:	4649      	mov	r1, r9
 80040b4:	f7fc fa7c 	bl	80005b0 <__aeabi_dmul>
 80040b8:	2200      	movs	r2, #0
 80040ba:	4680      	mov	r8, r0
 80040bc:	4689      	mov	r9, r1
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <__ieee754_pow+0x748>)
 80040c4:	f7fc f8bc 	bl	8000240 <__aeabi_dsub>
 80040c8:	4652      	mov	r2, sl
 80040ca:	465b      	mov	r3, fp
 80040cc:	f7fc f8b8 	bl	8000240 <__aeabi_dsub>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4630      	mov	r0, r6
 80040d6:	4639      	mov	r1, r7
 80040d8:	f7fc f8b2 	bl	8000240 <__aeabi_dsub>
 80040dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040e0:	f7fc fa66 	bl	80005b0 <__aeabi_dmul>
 80040e4:	4622      	mov	r2, r4
 80040e6:	4606      	mov	r6, r0
 80040e8:	460f      	mov	r7, r1
 80040ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80040ee:	462b      	mov	r3, r5
 80040f0:	f7fc fa5e 	bl	80005b0 <__aeabi_dmul>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4630      	mov	r0, r6
 80040fa:	4639      	mov	r1, r7
 80040fc:	f7fc f8a2 	bl	8000244 <__adddf3>
 8004100:	2400      	movs	r4, #0
 8004102:	4606      	mov	r6, r0
 8004104:	460f      	mov	r7, r1
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4640      	mov	r0, r8
 800410c:	4649      	mov	r1, r9
 800410e:	f7fc f899 	bl	8000244 <__adddf3>
 8004112:	a33b      	add	r3, pc, #236	; (adr r3, 8004200 <__ieee754_pow+0x718>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	4620      	mov	r0, r4
 800411a:	460d      	mov	r5, r1
 800411c:	f7fc fa48 	bl	80005b0 <__aeabi_dmul>
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	f7fc f888 	bl	8000240 <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4630      	mov	r0, r6
 8004136:	4639      	mov	r1, r7
 8004138:	f7fc f882 	bl	8000240 <__aeabi_dsub>
 800413c:	a332      	add	r3, pc, #200	; (adr r3, 8004208 <__ieee754_pow+0x720>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f7fc fa35 	bl	80005b0 <__aeabi_dmul>
 8004146:	a332      	add	r3, pc, #200	; (adr r3, 8004210 <__ieee754_pow+0x728>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	4606      	mov	r6, r0
 800414e:	460f      	mov	r7, r1
 8004150:	4620      	mov	r0, r4
 8004152:	4629      	mov	r1, r5
 8004154:	f7fc fa2c 	bl	80005b0 <__aeabi_dmul>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4630      	mov	r0, r6
 800415e:	4639      	mov	r1, r7
 8004160:	f7fc f870 	bl	8000244 <__adddf3>
 8004164:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004166:	4b33      	ldr	r3, [pc, #204]	; (8004234 <__ieee754_pow+0x74c>)
 8004168:	f04f 0a00 	mov.w	sl, #0
 800416c:	4413      	add	r3, r2
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc f867 	bl	8000244 <__adddf3>
 8004176:	4680      	mov	r8, r0
 8004178:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800417a:	4689      	mov	r9, r1
 800417c:	f7fc f9ae 	bl	80004dc <__aeabi_i2d>
 8004180:	4604      	mov	r4, r0
 8004182:	460d      	mov	r5, r1
 8004184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <__ieee754_pow+0x750>)
 8004188:	4413      	add	r3, r2
 800418a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800418e:	4642      	mov	r2, r8
 8004190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004194:	464b      	mov	r3, r9
 8004196:	f7fc f855 	bl	8000244 <__adddf3>
 800419a:	4632      	mov	r2, r6
 800419c:	463b      	mov	r3, r7
 800419e:	f7fc f851 	bl	8000244 <__adddf3>
 80041a2:	4622      	mov	r2, r4
 80041a4:	462b      	mov	r3, r5
 80041a6:	f7fc f84d 	bl	8000244 <__adddf3>
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	4650      	mov	r0, sl
 80041b0:	468b      	mov	fp, r1
 80041b2:	f7fc f845 	bl	8000240 <__aeabi_dsub>
 80041b6:	4632      	mov	r2, r6
 80041b8:	463b      	mov	r3, r7
 80041ba:	f7fc f841 	bl	8000240 <__aeabi_dsub>
 80041be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041c2:	f7fc f83d 	bl	8000240 <__aeabi_dsub>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4640      	mov	r0, r8
 80041cc:	4649      	mov	r1, r9
 80041ce:	e60d      	b.n	8003dec <__ieee754_pow+0x304>
 80041d0:	4a454eef 	.word	0x4a454eef
 80041d4:	3fca7e28 	.word	0x3fca7e28
 80041d8:	93c9db65 	.word	0x93c9db65
 80041dc:	3fcd864a 	.word	0x3fcd864a
 80041e0:	a91d4101 	.word	0xa91d4101
 80041e4:	3fd17460 	.word	0x3fd17460
 80041e8:	518f264d 	.word	0x518f264d
 80041ec:	3fd55555 	.word	0x3fd55555
 80041f0:	db6fabff 	.word	0xdb6fabff
 80041f4:	3fdb6db6 	.word	0x3fdb6db6
 80041f8:	33333303 	.word	0x33333303
 80041fc:	3fe33333 	.word	0x3fe33333
 8004200:	e0000000 	.word	0xe0000000
 8004204:	3feec709 	.word	0x3feec709
 8004208:	dc3a03fd 	.word	0xdc3a03fd
 800420c:	3feec709 	.word	0x3feec709
 8004210:	145b01f5 	.word	0x145b01f5
 8004214:	be3e2fe0 	.word	0xbe3e2fe0
 8004218:	7ff00000 	.word	0x7ff00000
 800421c:	43400000 	.word	0x43400000
 8004220:	0003988e 	.word	0x0003988e
 8004224:	000bb679 	.word	0x000bb679
 8004228:	08006480 	.word	0x08006480
 800422c:	3ff00000 	.word	0x3ff00000
 8004230:	40080000 	.word	0x40080000
 8004234:	080064a0 	.word	0x080064a0
 8004238:	08006490 	.word	0x08006490
 800423c:	2601      	movs	r6, #1
 800423e:	e66a      	b.n	8003f16 <__ieee754_pow+0x42e>
 8004240:	a39d      	add	r3, pc, #628	; (adr r3, 80044b8 <__ieee754_pow+0x9d0>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	4640      	mov	r0, r8
 8004248:	4649      	mov	r1, r9
 800424a:	f7fb fffb 	bl	8000244 <__adddf3>
 800424e:	4622      	mov	r2, r4
 8004250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004254:	462b      	mov	r3, r5
 8004256:	4650      	mov	r0, sl
 8004258:	4639      	mov	r1, r7
 800425a:	f7fb fff1 	bl	8000240 <__aeabi_dsub>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004266:	f7fc fc33 	bl	8000ad0 <__aeabi_dcmpgt>
 800426a:	2800      	cmp	r0, #0
 800426c:	f47f ae09 	bne.w	8003e82 <__ieee754_pow+0x39a>
 8004270:	4aa3      	ldr	r2, [pc, #652]	; (8004500 <__ieee754_pow+0xa18>)
 8004272:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004276:	4293      	cmp	r3, r2
 8004278:	f340 8101 	ble.w	800447e <__ieee754_pow+0x996>
 800427c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004280:	2000      	movs	r0, #0
 8004282:	151b      	asrs	r3, r3, #20
 8004284:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004288:	fa4a f303 	asr.w	r3, sl, r3
 800428c:	4433      	add	r3, r6
 800428e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004292:	4f9c      	ldr	r7, [pc, #624]	; (8004504 <__ieee754_pow+0xa1c>)
 8004294:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004298:	4117      	asrs	r7, r2
 800429a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800429e:	ea23 0107 	bic.w	r1, r3, r7
 80042a2:	f1c2 0214 	rsb	r2, r2, #20
 80042a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80042aa:	460b      	mov	r3, r1
 80042ac:	fa4a fa02 	asr.w	sl, sl, r2
 80042b0:	2e00      	cmp	r6, #0
 80042b2:	4602      	mov	r2, r0
 80042b4:	4629      	mov	r1, r5
 80042b6:	4620      	mov	r0, r4
 80042b8:	bfb8      	it	lt
 80042ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80042be:	f7fb ffbf 	bl	8000240 <__aeabi_dsub>
 80042c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ca:	2400      	movs	r4, #0
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	f7fb ffb8 	bl	8000244 <__adddf3>
 80042d4:	a37a      	add	r3, pc, #488	; (adr r3, 80044c0 <__ieee754_pow+0x9d8>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	4620      	mov	r0, r4
 80042dc:	460d      	mov	r5, r1
 80042de:	f7fc f967 	bl	80005b0 <__aeabi_dmul>
 80042e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042e6:	4606      	mov	r6, r0
 80042e8:	460f      	mov	r7, r1
 80042ea:	4620      	mov	r0, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	f7fb ffa7 	bl	8000240 <__aeabi_dsub>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fb ffa1 	bl	8000240 <__aeabi_dsub>
 80042fe:	a372      	add	r3, pc, #456	; (adr r3, 80044c8 <__ieee754_pow+0x9e0>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fc f954 	bl	80005b0 <__aeabi_dmul>
 8004308:	a371      	add	r3, pc, #452	; (adr r3, 80044d0 <__ieee754_pow+0x9e8>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	4680      	mov	r8, r0
 8004310:	4689      	mov	r9, r1
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f7fc f94b 	bl	80005b0 <__aeabi_dmul>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4640      	mov	r0, r8
 8004320:	4649      	mov	r1, r9
 8004322:	f7fb ff8f 	bl	8000244 <__adddf3>
 8004326:	4604      	mov	r4, r0
 8004328:	460d      	mov	r5, r1
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4630      	mov	r0, r6
 8004330:	4639      	mov	r1, r7
 8004332:	f7fb ff87 	bl	8000244 <__adddf3>
 8004336:	4632      	mov	r2, r6
 8004338:	463b      	mov	r3, r7
 800433a:	4680      	mov	r8, r0
 800433c:	4689      	mov	r9, r1
 800433e:	f7fb ff7f 	bl	8000240 <__aeabi_dsub>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f7fb ff79 	bl	8000240 <__aeabi_dsub>
 800434e:	4642      	mov	r2, r8
 8004350:	4606      	mov	r6, r0
 8004352:	460f      	mov	r7, r1
 8004354:	464b      	mov	r3, r9
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fc f929 	bl	80005b0 <__aeabi_dmul>
 800435e:	a35e      	add	r3, pc, #376	; (adr r3, 80044d8 <__ieee754_pow+0x9f0>)
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	4604      	mov	r4, r0
 8004366:	460d      	mov	r5, r1
 8004368:	f7fc f922 	bl	80005b0 <__aeabi_dmul>
 800436c:	a35c      	add	r3, pc, #368	; (adr r3, 80044e0 <__ieee754_pow+0x9f8>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fb ff65 	bl	8000240 <__aeabi_dsub>
 8004376:	4622      	mov	r2, r4
 8004378:	462b      	mov	r3, r5
 800437a:	f7fc f919 	bl	80005b0 <__aeabi_dmul>
 800437e:	a35a      	add	r3, pc, #360	; (adr r3, 80044e8 <__ieee754_pow+0xa00>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fb ff5e 	bl	8000244 <__adddf3>
 8004388:	4622      	mov	r2, r4
 800438a:	462b      	mov	r3, r5
 800438c:	f7fc f910 	bl	80005b0 <__aeabi_dmul>
 8004390:	a357      	add	r3, pc, #348	; (adr r3, 80044f0 <__ieee754_pow+0xa08>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fb ff53 	bl	8000240 <__aeabi_dsub>
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	f7fc f907 	bl	80005b0 <__aeabi_dmul>
 80043a2:	a355      	add	r3, pc, #340	; (adr r3, 80044f8 <__ieee754_pow+0xa10>)
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f7fb ff4c 	bl	8000244 <__adddf3>
 80043ac:	4622      	mov	r2, r4
 80043ae:	462b      	mov	r3, r5
 80043b0:	f7fc f8fe 	bl	80005b0 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4640      	mov	r0, r8
 80043ba:	4649      	mov	r1, r9
 80043bc:	f7fb ff40 	bl	8000240 <__aeabi_dsub>
 80043c0:	4604      	mov	r4, r0
 80043c2:	460d      	mov	r5, r1
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f7fc f8f0 	bl	80005b0 <__aeabi_dmul>
 80043d0:	2200      	movs	r2, #0
 80043d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7fb ff2f 	bl	8000240 <__aeabi_dsub>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043ea:	f7fc fa0b 	bl	8000804 <__aeabi_ddiv>
 80043ee:	4632      	mov	r2, r6
 80043f0:	4604      	mov	r4, r0
 80043f2:	460d      	mov	r5, r1
 80043f4:	463b      	mov	r3, r7
 80043f6:	4640      	mov	r0, r8
 80043f8:	4649      	mov	r1, r9
 80043fa:	f7fc f8d9 	bl	80005b0 <__aeabi_dmul>
 80043fe:	4632      	mov	r2, r6
 8004400:	463b      	mov	r3, r7
 8004402:	f7fb ff1f 	bl	8000244 <__adddf3>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f7fb ff17 	bl	8000240 <__aeabi_dsub>
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	f7fb ff13 	bl	8000240 <__aeabi_dsub>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	2000      	movs	r0, #0
 8004420:	4939      	ldr	r1, [pc, #228]	; (8004508 <__ieee754_pow+0xa20>)
 8004422:	f7fb ff0d 	bl	8000240 <__aeabi_dsub>
 8004426:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800442a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800442e:	da29      	bge.n	8004484 <__ieee754_pow+0x99c>
 8004430:	4652      	mov	r2, sl
 8004432:	f000 f955 	bl	80046e0 <scalbn>
 8004436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800443a:	f7ff bbfe 	b.w	8003c3a <__ieee754_pow+0x152>
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <__ieee754_pow+0xa24>)
 8004440:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004444:	429f      	cmp	r7, r3
 8004446:	f77f af13 	ble.w	8004270 <__ieee754_pow+0x788>
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <__ieee754_pow+0xa28>)
 800444c:	440b      	add	r3, r1
 800444e:	4303      	orrs	r3, r0
 8004450:	d009      	beq.n	8004466 <__ieee754_pow+0x97e>
 8004452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004456:	2200      	movs	r2, #0
 8004458:	2300      	movs	r3, #0
 800445a:	f7fc fb1b 	bl	8000a94 <__aeabi_dcmplt>
 800445e:	3800      	subs	r0, #0
 8004460:	bf18      	it	ne
 8004462:	2001      	movne	r0, #1
 8004464:	e453      	b.n	8003d0e <__ieee754_pow+0x226>
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	f7fb fee9 	bl	8000240 <__aeabi_dsub>
 800446e:	4642      	mov	r2, r8
 8004470:	464b      	mov	r3, r9
 8004472:	f7fc fb23 	bl	8000abc <__aeabi_dcmpge>
 8004476:	2800      	cmp	r0, #0
 8004478:	f43f aefa 	beq.w	8004270 <__ieee754_pow+0x788>
 800447c:	e7e9      	b.n	8004452 <__ieee754_pow+0x96a>
 800447e:	f04f 0a00 	mov.w	sl, #0
 8004482:	e720      	b.n	80042c6 <__ieee754_pow+0x7de>
 8004484:	4621      	mov	r1, r4
 8004486:	e7d6      	b.n	8004436 <__ieee754_pow+0x94e>
 8004488:	f04f 0b00 	mov.w	fp, #0
 800448c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004508 <__ieee754_pow+0xa20>
 8004490:	f7ff bbba 	b.w	8003c08 <__ieee754_pow+0x120>
 8004494:	f04f 0b00 	mov.w	fp, #0
 8004498:	f04f 0c00 	mov.w	ip, #0
 800449c:	f7ff bbb4 	b.w	8003c08 <__ieee754_pow+0x120>
 80044a0:	4640      	mov	r0, r8
 80044a2:	4649      	mov	r1, r9
 80044a4:	f7ff bb3d 	b.w	8003b22 <__ieee754_pow+0x3a>
 80044a8:	9200      	str	r2, [sp, #0]
 80044aa:	f7ff bb89 	b.w	8003bc0 <__ieee754_pow+0xd8>
 80044ae:	2300      	movs	r3, #0
 80044b0:	f7ff bb73 	b.w	8003b9a <__ieee754_pow+0xb2>
 80044b4:	f3af 8000 	nop.w
 80044b8:	652b82fe 	.word	0x652b82fe
 80044bc:	3c971547 	.word	0x3c971547
 80044c0:	00000000 	.word	0x00000000
 80044c4:	3fe62e43 	.word	0x3fe62e43
 80044c8:	fefa39ef 	.word	0xfefa39ef
 80044cc:	3fe62e42 	.word	0x3fe62e42
 80044d0:	0ca86c39 	.word	0x0ca86c39
 80044d4:	be205c61 	.word	0xbe205c61
 80044d8:	72bea4d0 	.word	0x72bea4d0
 80044dc:	3e663769 	.word	0x3e663769
 80044e0:	c5d26bf1 	.word	0xc5d26bf1
 80044e4:	3ebbbd41 	.word	0x3ebbbd41
 80044e8:	af25de2c 	.word	0xaf25de2c
 80044ec:	3f11566a 	.word	0x3f11566a
 80044f0:	16bebd93 	.word	0x16bebd93
 80044f4:	3f66c16c 	.word	0x3f66c16c
 80044f8:	5555553e 	.word	0x5555553e
 80044fc:	3fc55555 	.word	0x3fc55555
 8004500:	3fe00000 	.word	0x3fe00000
 8004504:	000fffff 	.word	0x000fffff
 8004508:	3ff00000 	.word	0x3ff00000
 800450c:	4090cbff 	.word	0x4090cbff
 8004510:	3f6f3400 	.word	0x3f6f3400

08004514 <__ieee754_sqrt>:
 8004514:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004670 <__ieee754_sqrt+0x15c>
 8004518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451c:	ea3c 0c01 	bics.w	ip, ip, r1
 8004520:	4606      	mov	r6, r0
 8004522:	460d      	mov	r5, r1
 8004524:	460c      	mov	r4, r1
 8004526:	460a      	mov	r2, r1
 8004528:	4607      	mov	r7, r0
 800452a:	4603      	mov	r3, r0
 800452c:	d10f      	bne.n	800454e <__ieee754_sqrt+0x3a>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	f7fc f83d 	bl	80005b0 <__aeabi_dmul>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4630      	mov	r0, r6
 800453c:	4629      	mov	r1, r5
 800453e:	f7fb fe81 	bl	8000244 <__adddf3>
 8004542:	4606      	mov	r6, r0
 8004544:	460d      	mov	r5, r1
 8004546:	4630      	mov	r0, r6
 8004548:	4629      	mov	r1, r5
 800454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800454e:	2900      	cmp	r1, #0
 8004550:	dc0e      	bgt.n	8004570 <__ieee754_sqrt+0x5c>
 8004552:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004556:	ea5c 0707 	orrs.w	r7, ip, r7
 800455a:	d0f4      	beq.n	8004546 <__ieee754_sqrt+0x32>
 800455c:	b141      	cbz	r1, 8004570 <__ieee754_sqrt+0x5c>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	f7fb fe6d 	bl	8000240 <__aeabi_dsub>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	f7fc f94b 	bl	8000804 <__aeabi_ddiv>
 800456e:	e7e8      	b.n	8004542 <__ieee754_sqrt+0x2e>
 8004570:	1521      	asrs	r1, r4, #20
 8004572:	d075      	beq.n	8004660 <__ieee754_sqrt+0x14c>
 8004574:	07cc      	lsls	r4, r1, #31
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800457e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004582:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004586:	bf5e      	ittt	pl
 8004588:	0fd9      	lsrpl	r1, r3, #31
 800458a:	005b      	lslpl	r3, r3, #1
 800458c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004590:	0fd9      	lsrs	r1, r3, #31
 8004592:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004596:	2516      	movs	r5, #22
 8004598:	4620      	mov	r0, r4
 800459a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800459e:	107f      	asrs	r7, r7, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	1846      	adds	r6, r0, r1
 80045a4:	4296      	cmp	r6, r2
 80045a6:	bfde      	ittt	le
 80045a8:	1b92      	suble	r2, r2, r6
 80045aa:	1870      	addle	r0, r6, r1
 80045ac:	1864      	addle	r4, r4, r1
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	3d01      	subs	r5, #1
 80045b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80045b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80045ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045be:	d1f0      	bne.n	80045a2 <__ieee754_sqrt+0x8e>
 80045c0:	4629      	mov	r1, r5
 80045c2:	f04f 0e20 	mov.w	lr, #32
 80045c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80045ca:	4282      	cmp	r2, r0
 80045cc:	eb06 0c05 	add.w	ip, r6, r5
 80045d0:	dc02      	bgt.n	80045d8 <__ieee754_sqrt+0xc4>
 80045d2:	d113      	bne.n	80045fc <__ieee754_sqrt+0xe8>
 80045d4:	459c      	cmp	ip, r3
 80045d6:	d811      	bhi.n	80045fc <__ieee754_sqrt+0xe8>
 80045d8:	f1bc 0f00 	cmp.w	ip, #0
 80045dc:	eb0c 0506 	add.w	r5, ip, r6
 80045e0:	da43      	bge.n	800466a <__ieee754_sqrt+0x156>
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	db41      	blt.n	800466a <__ieee754_sqrt+0x156>
 80045e6:	f100 0801 	add.w	r8, r0, #1
 80045ea:	1a12      	subs	r2, r2, r0
 80045ec:	4640      	mov	r0, r8
 80045ee:	459c      	cmp	ip, r3
 80045f0:	bf88      	it	hi
 80045f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80045f6:	eba3 030c 	sub.w	r3, r3, ip
 80045fa:	4431      	add	r1, r6
 80045fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004600:	f1be 0e01 	subs.w	lr, lr, #1
 8004604:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004608:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800460c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004610:	d1db      	bne.n	80045ca <__ieee754_sqrt+0xb6>
 8004612:	4313      	orrs	r3, r2
 8004614:	d006      	beq.n	8004624 <__ieee754_sqrt+0x110>
 8004616:	1c48      	adds	r0, r1, #1
 8004618:	bf0b      	itete	eq
 800461a:	4671      	moveq	r1, lr
 800461c:	3101      	addne	r1, #1
 800461e:	3401      	addeq	r4, #1
 8004620:	f021 0101 	bicne.w	r1, r1, #1
 8004624:	1063      	asrs	r3, r4, #1
 8004626:	0849      	lsrs	r1, r1, #1
 8004628:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800462c:	07e2      	lsls	r2, r4, #31
 800462e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004632:	bf48      	it	mi
 8004634:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004638:	460e      	mov	r6, r1
 800463a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800463e:	e782      	b.n	8004546 <__ieee754_sqrt+0x32>
 8004640:	0ada      	lsrs	r2, r3, #11
 8004642:	3815      	subs	r0, #21
 8004644:	055b      	lsls	r3, r3, #21
 8004646:	2a00      	cmp	r2, #0
 8004648:	d0fa      	beq.n	8004640 <__ieee754_sqrt+0x12c>
 800464a:	02d5      	lsls	r5, r2, #11
 800464c:	d50a      	bpl.n	8004664 <__ieee754_sqrt+0x150>
 800464e:	f1c1 0420 	rsb	r4, r1, #32
 8004652:	fa23 f404 	lsr.w	r4, r3, r4
 8004656:	1e4d      	subs	r5, r1, #1
 8004658:	408b      	lsls	r3, r1
 800465a:	4322      	orrs	r2, r4
 800465c:	1b41      	subs	r1, r0, r5
 800465e:	e789      	b.n	8004574 <__ieee754_sqrt+0x60>
 8004660:	4608      	mov	r0, r1
 8004662:	e7f0      	b.n	8004646 <__ieee754_sqrt+0x132>
 8004664:	0052      	lsls	r2, r2, #1
 8004666:	3101      	adds	r1, #1
 8004668:	e7ef      	b.n	800464a <__ieee754_sqrt+0x136>
 800466a:	4680      	mov	r8, r0
 800466c:	e7bd      	b.n	80045ea <__ieee754_sqrt+0xd6>
 800466e:	bf00      	nop
 8004670:	7ff00000 	.word	0x7ff00000

08004674 <with_errno>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	4616      	mov	r6, r2
 800467c:	f7ff f99a 	bl	80039b4 <__errno>
 8004680:	4629      	mov	r1, r5
 8004682:	6006      	str	r6, [r0, #0]
 8004684:	4620      	mov	r0, r4
 8004686:	bd70      	pop	{r4, r5, r6, pc}

08004688 <xflow>:
 8004688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800468a:	4615      	mov	r5, r2
 800468c:	461c      	mov	r4, r3
 800468e:	b180      	cbz	r0, 80046b2 <xflow+0x2a>
 8004690:	4610      	mov	r0, r2
 8004692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004696:	e9cd 0100 	strd	r0, r1, [sp]
 800469a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800469e:	4628      	mov	r0, r5
 80046a0:	4621      	mov	r1, r4
 80046a2:	f7fb ff85 	bl	80005b0 <__aeabi_dmul>
 80046a6:	2222      	movs	r2, #34	; 0x22
 80046a8:	b003      	add	sp, #12
 80046aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046ae:	f7ff bfe1 	b.w	8004674 <with_errno>
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	e7ee      	b.n	8004696 <xflow+0xe>

080046b8 <__math_uflow>:
 80046b8:	2200      	movs	r2, #0
 80046ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046be:	f7ff bfe3 	b.w	8004688 <xflow>

080046c2 <__math_oflow>:
 80046c2:	2200      	movs	r2, #0
 80046c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80046c8:	f7ff bfde 	b.w	8004688 <xflow>

080046cc <fabs>:
 80046cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046d0:	4770      	bx	lr

080046d2 <finite>:
 80046d2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80046d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80046da:	0fc0      	lsrs	r0, r0, #31
 80046dc:	4770      	bx	lr
	...

080046e0 <scalbn>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80046e6:	4604      	mov	r4, r0
 80046e8:	460d      	mov	r5, r1
 80046ea:	4617      	mov	r7, r2
 80046ec:	460b      	mov	r3, r1
 80046ee:	b996      	cbnz	r6, 8004716 <scalbn+0x36>
 80046f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046f4:	4303      	orrs	r3, r0
 80046f6:	d039      	beq.n	800476c <scalbn+0x8c>
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <scalbn+0xe8>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	f7fb ff58 	bl	80005b0 <__aeabi_dmul>
 8004700:	4b32      	ldr	r3, [pc, #200]	; (80047cc <scalbn+0xec>)
 8004702:	4604      	mov	r4, r0
 8004704:	429f      	cmp	r7, r3
 8004706:	460d      	mov	r5, r1
 8004708:	da0f      	bge.n	800472a <scalbn+0x4a>
 800470a:	a32b      	add	r3, pc, #172	; (adr r3, 80047b8 <scalbn+0xd8>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fb ff4e 	bl	80005b0 <__aeabi_dmul>
 8004714:	e006      	b.n	8004724 <scalbn+0x44>
 8004716:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800471a:	4296      	cmp	r6, r2
 800471c:	d10a      	bne.n	8004734 <scalbn+0x54>
 800471e:	4602      	mov	r2, r0
 8004720:	f7fb fd90 	bl	8000244 <__adddf3>
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	e020      	b.n	800476c <scalbn+0x8c>
 800472a:	460b      	mov	r3, r1
 800472c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004730:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004734:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004738:	19b9      	adds	r1, r7, r6
 800473a:	4291      	cmp	r1, r2
 800473c:	dd0e      	ble.n	800475c <scalbn+0x7c>
 800473e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004742:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004746:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800474a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800474e:	4820      	ldr	r0, [pc, #128]	; (80047d0 <scalbn+0xf0>)
 8004750:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004754:	a31a      	add	r3, pc, #104	; (adr r3, 80047c0 <scalbn+0xe0>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	e7d9      	b.n	8004710 <scalbn+0x30>
 800475c:	2900      	cmp	r1, #0
 800475e:	dd08      	ble.n	8004772 <scalbn+0x92>
 8004760:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004768:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004772:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004776:	da12      	bge.n	800479e <scalbn+0xbe>
 8004778:	f24c 3350 	movw	r3, #50000	; 0xc350
 800477c:	429f      	cmp	r7, r3
 800477e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004782:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004786:	dcdc      	bgt.n	8004742 <scalbn+0x62>
 8004788:	a30b      	add	r3, pc, #44	; (adr r3, 80047b8 <scalbn+0xd8>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004792:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004796:	480f      	ldr	r0, [pc, #60]	; (80047d4 <scalbn+0xf4>)
 8004798:	f041 011f 	orr.w	r1, r1, #31
 800479c:	e7b8      	b.n	8004710 <scalbn+0x30>
 800479e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047a2:	3136      	adds	r1, #54	; 0x36
 80047a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	2200      	movs	r2, #0
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <scalbn+0xf8>)
 80047b4:	e7ac      	b.n	8004710 <scalbn+0x30>
 80047b6:	bf00      	nop
 80047b8:	c2f8f359 	.word	0xc2f8f359
 80047bc:	01a56e1f 	.word	0x01a56e1f
 80047c0:	8800759c 	.word	0x8800759c
 80047c4:	7e37e43c 	.word	0x7e37e43c
 80047c8:	43500000 	.word	0x43500000
 80047cc:	ffff3cb0 	.word	0xffff3cb0
 80047d0:	8800759c 	.word	0x8800759c
 80047d4:	c2f8f359 	.word	0xc2f8f359
 80047d8:	3c900000 	.word	0x3c900000

080047dc <_init>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr

080047e8 <_fini>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr
