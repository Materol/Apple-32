
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020e8  080089d0  080089d0  000189d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aab8  0800aab8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800aab8  0800aab8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aab8  0800aab8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aab8  0800aab8  0001aab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aabc  0800aabc  0001aabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800aac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083a8  20000094  0800ab54  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000843c  0800ab54  0002843c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216cf  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004274  00000000  00000000  0004178c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012cc1  00000000  00000000  00045a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000586c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d48  00000000  00000000  00059808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d809  00000000  00000000  0005b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d30a  00000000  00000000  00078d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dabe  00000000  00000000  00096063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133b21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004200  00000000  00000000  00133b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000094 	.word	0x20000094
 8000204:	00000000 	.word	0x00000000
 8000208:	080089b4 	.word	0x080089b4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000098 	.word	0x20000098
 8000224:	080089b4 	.word	0x080089b4

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <Delay>:
	LCD_CURSOR_X = 0;
	// Draw the new cursor
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
}

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b64:	b082      	sub	sp, #8
 8000b66:	9001      	str	r0, [sp, #4]
 8000b68:	9b01      	ldr	r3, [sp, #4]
 8000b6a:	b90b      	cbnz	r3, 8000b70 <Delay+0xc>
 8000b6c:	b002      	add	sp, #8
 8000b6e:	4770      	bx	lr
 8000b70:	9b01      	ldr	r3, [sp, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	e7f7      	b.n	8000b68 <Delay+0x4>

08000b78 <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000b78:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b7a:	4d0a      	ldr	r5, [pc, #40]	; (8000ba4 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b7e:	4628      	mov	r0, r5
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	f002 fdda 	bl	800373c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f7ff ffeb 	bl	8000b64 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4628      	mov	r0, r5
 8000b92:	2102      	movs	r1, #2
 8000b94:	f002 fdd2 	bl	800373c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000b98:	4620      	mov	r0, r4
}
 8000b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 8000b9e:	f7ff bfe1 	b.w	8000b64 <Delay>
 8000ba2:	bf00      	nop
 8000ba4:	40011800 	.word	0x40011800
 8000ba8:	0002bffc 	.word	0x0002bffc

08000bac <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bb0:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2081      	movs	r0, #129	; 0x81
 8000bba:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bbc:	24ed      	movs	r4, #237	; 0xed
 8000bbe:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bc0:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <LCD_REG_Config+0x188>)
 8000bc2:	f04f 0c03 	mov.w	ip, #3
 8000bc6:	8019      	strh	r1, [r3, #0]
 8000bc8:	8018      	strh	r0, [r3, #0]
 8000bca:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bcc:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bce:	2464      	movs	r4, #100	; 0x64
 8000bd0:	801c      	strh	r4, [r3, #0]
 8000bd2:	2412      	movs	r4, #18
 8000bd4:	f8a3 c000 	strh.w	ip, [r3]
 8000bd8:	801c      	strh	r4, [r3, #0]
 8000bda:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bdc:	20e8      	movs	r0, #232	; 0xe8
 8000bde:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000be0:	2085      	movs	r0, #133	; 0x85
 8000be2:	f04f 0810 	mov.w	r8, #16
 8000be6:	8018      	strh	r0, [r3, #0]
 8000be8:	2078      	movs	r0, #120	; 0x78
 8000bea:	f8a3 8000 	strh.w	r8, [r3]
 8000bee:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bf0:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bf2:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bf6:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bf8:	202c      	movs	r0, #44	; 0x2c
 8000bfa:	f8a3 e000 	strh.w	lr, [r3]
 8000bfe:	8018      	strh	r0, [r3, #0]
 8000c00:	2034      	movs	r0, #52	; 0x34
 8000c02:	8019      	strh	r1, [r3, #0]
 8000c04:	8018      	strh	r0, [r3, #0]
 8000c06:	2002      	movs	r0, #2
 8000c08:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c0a:	20f7      	movs	r0, #247	; 0xf7
 8000c0c:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c0e:	2020      	movs	r0, #32
 8000c10:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c12:	20ea      	movs	r0, #234	; 0xea
 8000c14:	8010      	strh	r0, [r2, #0]
 8000c16:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c18:	8019      	strh	r1, [r3, #0]
 8000c1a:	f04f 091b 	mov.w	r9, #27
 8000c1e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c20:	8010      	strh	r0, [r2, #0]
 8000c22:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c24:	8019      	strh	r1, [r3, #0]
 8000c26:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c2a:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c2c:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c2e:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c30:	8018      	strh	r0, [r3, #0]
 8000c32:	20a2      	movs	r0, #162	; 0xa2
 8000c34:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c36:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c38:	2435      	movs	r4, #53	; 0x35
 8000c3a:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c3c:	24c1      	movs	r4, #193	; 0xc1
 8000c3e:	25c5      	movs	r5, #197	; 0xc5
 8000c40:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c42:	2411      	movs	r4, #17
 8000c44:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c46:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c48:	2545      	movs	r5, #69	; 0x45
 8000c4a:	801d      	strh	r5, [r3, #0]
 8000c4c:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c4e:	25c7      	movs	r5, #199	; 0xc7
 8000c50:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c52:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c54:	20f2      	movs	r0, #242	; 0xf2
 8000c56:	2626      	movs	r6, #38	; 0x26
 8000c58:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c5a:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c5c:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c5e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c60:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c62:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c64:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c66:	200f      	movs	r0, #15
 8000c68:	8018      	strh	r0, [r3, #0]
 8000c6a:	801e      	strh	r6, [r3, #0]
 8000c6c:	2624      	movs	r6, #36	; 0x24
 8000c6e:	801e      	strh	r6, [r3, #0]
 8000c70:	260b      	movs	r6, #11
 8000c72:	801e      	strh	r6, [r3, #0]
 8000c74:	260e      	movs	r6, #14
 8000c76:	f04f 0a54 	mov.w	sl, #84	; 0x54
 8000c7a:	801e      	strh	r6, [r3, #0]
 8000c7c:	2609      	movs	r6, #9
 8000c7e:	801e      	strh	r6, [r3, #0]
 8000c80:	f8a3 a000 	strh.w	sl, [r3]
 8000c84:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000c88:	f8a3 a000 	strh.w	sl, [r3]
 8000c8c:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000c90:	f8a3 a000 	strh.w	sl, [r3]
 8000c94:	f04f 0a0c 	mov.w	sl, #12
 8000c98:	f8a3 a000 	strh.w	sl, [r3]
 8000c9c:	f04f 0a17 	mov.w	sl, #23
 8000ca0:	f8a3 a000 	strh.w	sl, [r3]
 8000ca4:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ca6:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000caa:	2607      	movs	r6, #7
 8000cac:	8018      	strh	r0, [r3, #0]
 8000cae:	801e      	strh	r6, [r3, #0]
 8000cb0:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cb2:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cb6:	f04f 0a19 	mov.w	sl, #25
 8000cba:	8019      	strh	r1, [r3, #0]
 8000cbc:	f8a3 a000 	strh.w	sl, [r3]
 8000cc0:	f8a3 9000 	strh.w	r9, [r3]
 8000cc4:	f04f 0904 	mov.w	r9, #4
 8000cc8:	f8a3 9000 	strh.w	r9, [r3]
 8000ccc:	f8a3 8000 	strh.w	r8, [r3]
 8000cd0:	801e      	strh	r6, [r3, #0]
 8000cd2:	f04f 0847 	mov.w	r8, #71	; 0x47
 8000cd6:	262a      	movs	r6, #42	; 0x2a
 8000cd8:	801e      	strh	r6, [r3, #0]
 8000cda:	f8a3 8000 	strh.w	r8, [r3]
 8000cde:	f8a3 e000 	strh.w	lr, [r3]
 8000ce2:	f8a3 c000 	strh.w	ip, [r3]
 8000ce6:	f04f 0c06 	mov.w	ip, #6
 8000cea:	f8a3 c000 	strh.w	ip, [r3]
 8000cee:	f8a3 c000 	strh.w	ip, [r3]
 8000cf2:	801f      	strh	r7, [r3, #0]
 8000cf4:	2738      	movs	r7, #56	; 0x38
 8000cf6:	801f      	strh	r7, [r3, #0]
 8000cf8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cfa:	2036      	movs	r0, #54	; 0x36
 8000cfc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cfe:	2068      	movs	r0, #104	; 0x68
 8000d00:	8018      	strh	r0, [r3, #0]
 8000d02:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d04:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d06:	8019      	strh	r1, [r3, #0]
 8000d08:	8019      	strh	r1, [r3, #0]
 8000d0a:	8019      	strh	r1, [r3, #0]
 8000d0c:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d0e:	202b      	movs	r0, #43	; 0x2b
 8000d10:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d12:	8019      	strh	r1, [r3, #0]
 8000d14:	8019      	strh	r1, [r3, #0]
 8000d16:	213f      	movs	r1, #63	; 0x3f
 8000d18:	801d      	strh	r5, [r3, #0]
 8000d1a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d1c:	213a      	movs	r1, #58	; 0x3a
 8000d1e:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d20:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d24:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d26:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 8000d28:	f7ff ff1c 	bl	8000b64 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d2c:	2329      	movs	r3, #41	; 0x29
 8000d2e:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	60020000 	.word	0x60020000
 8000d38:	0002bffc 	.word	0x0002bffc

08000d3c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000d3c:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d3e:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000d42:	242a      	movs	r4, #42	; 0x2a
 8000d44:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d46:	4c0f      	ldr	r4, [pc, #60]	; (8000d84 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000d48:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d4a:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000d4c:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d4e:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d50:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d52:	3a01      	subs	r2, #1
 8000d54:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d56:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d58:	3d01      	subs	r5, #1
 8000d5a:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d5e:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d60:	8025      	strh	r5, [r4, #0]
 8000d62:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d64:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8000d66:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d68:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 8000d6a:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d6c:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d6e:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d70:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d72:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d74:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d76:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d7a:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d7c:	8022      	strh	r2, [r4, #0]
 8000d7e:	8021      	strh	r1, [r4, #0]
	
}
 8000d80:	bd70      	pop	{r4, r5, r6, pc}
 8000d82:	bf00      	nop
 8000d84:	60020000 	.word	0x60020000

08000d88 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d88:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d8c:	222c      	movs	r2, #44	; 0x2c
 8000d8e:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000d90:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d92:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000d94:	4283      	cmp	r3, r0
 8000d96:	d100      	bne.n	8000d9a <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 8000d98:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d9a:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	e7f9      	b.n	8000d94 <LCD_FillColor+0xc>
 8000da0:	60020000 	.word	0x60020000

08000da4 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	4614      	mov	r4, r2
 8000da8:	461d      	mov	r5, r3
 8000daa:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000dae:	f7ff ffc5 	bl	8000d3c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000db2:	4631      	mov	r1, r6
 8000db4:	fb05 f004 	mul.w	r0, r5, r4
	
}
 8000db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000dbc:	f7ff bfe4 	b.w	8000d88 <LCD_FillColor>

08000dc0 <LCD_INIT>:
{
 8000dc0:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <LCD_INIT+0x2c>)
 8000dca:	f002 fcb7 	bl	800373c <HAL_GPIO_WritePin>
	LCD_Rst();
 8000dce:	f7ff fed3 	bl	8000b78 <LCD_Rst>
	LCD_REG_Config();
 8000dd2:	f7ff feeb 	bl	8000bac <LCD_REG_Config>
	LCD_Clear (0, 0, 320, 240, BACKGROUND);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	23f0      	movs	r3, #240	; 0xf0
 8000dda:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dde:	4608      	mov	r0, r1
 8000de0:	9100      	str	r1, [sp, #0]
 8000de2:	f7ff ffdf 	bl	8000da4 <LCD_Clear>
}
 8000de6:	b003      	add	sp, #12
 8000de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dec:	40011400 	.word	0x40011400

08000df0 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000df0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar;
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000df2:	230a      	movs	r3, #10
{
 8000df4:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000df6:	2208      	movs	r2, #8
 8000df8:	f7ff ffa0 	bl	8000d3c <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000dfc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e00:	222c      	movs	r2, #44	; 0x2c
 8000e02:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e04:	230a      	movs	r3, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e06:	f44f 65fd 	mov.w	r5, #2024	; 0x7e8
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <LCD_DrawChar+0x4c>)
 8000e0c:	fb03 1104 	mla	r1, r3, r4, r1
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LCD_DrawChar+0x50>)
	{
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 8000e12:	2208      	movs	r2, #8
 8000e14:	f811 0b01 	ldrb.w	r0, [r1], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 8000e18:	f010 0601 	ands.w	r6, r0, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e1c:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e20:	bf14      	ite	ne
 8000e22:	8025      	strhne	r5, [r4, #0]
 8000e24:	8026      	strheq	r6, [r4, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e26:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x07e8 ); // Matrix Green
			
			else
				LCD_Write_Data (  0x0000 );								
			
			ucTemp >>= 1;		
 8000e2a:	ea4f 0050 	mov.w	r0, r0, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e2e:	d1f3      	bne.n	8000e18 <LCD_DrawChar+0x28>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e30:	3b01      	subs	r3, #1
 8000e32:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000e36:	d1ec      	bne.n	8000e12 <LCD_DrawChar+0x22>
			
		}
		
	}
	
}
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080089d0 	.word	0x080089d0
 8000e40:	60020000 	.word	0x60020000

08000e44 <LCD_CursorForward>:
void LCD_CursorForward ( void ) {
 8000e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	++LCD_CURSOR_X;
 8000e46:	4c12      	ldr	r4, [pc, #72]	; (8000e90 <LCD_CursorForward+0x4c>)
 8000e48:	4d12      	ldr	r5, [pc, #72]	; (8000e94 <LCD_CursorForward+0x50>)
 8000e4a:	7823      	ldrb	r3, [r4, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
	if (LCD_CURSOR_X == 40) {
 8000e50:	2b28      	cmp	r3, #40	; 0x28
	++LCD_CURSOR_X;
 8000e52:	7023      	strb	r3, [r4, #0]
	if (LCD_CURSOR_X == 40) {
 8000e54:	d107      	bne.n	8000e66 <LCD_CursorForward+0x22>
		LCD_CURSOR_X = 0;
 8000e56:	2100      	movs	r1, #0
		++LCD_CURSOR_Y;
 8000e58:	782b      	ldrb	r3, [r5, #0]
		LCD_CURSOR_X = 0;
 8000e5a:	7021      	strb	r1, [r4, #0]
		++LCD_CURSOR_Y;
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
		if (LCD_CURSOR_Y == 25) {
 8000e60:	2b19      	cmp	r3, #25
 8000e62:	d00c      	beq.n	8000e7e <LCD_CursorForward+0x3a>
		++LCD_CURSOR_Y;
 8000e64:	702b      	strb	r3, [r5, #0]
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e66:	22db      	movs	r2, #219	; 0xdb
 8000e68:	7829      	ldrb	r1, [r5, #0]
 8000e6a:	7820      	ldrb	r0, [r4, #0]
 8000e6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000e70:	0049      	lsls	r1, r1, #1
 8000e72:	00c0      	lsls	r0, r0, #3
}
 8000e74:	b003      	add	sp, #12
 8000e76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000e7a:	f7ff bfb9 	b.w	8000df0 <LCD_DrawChar>
			LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000e7e:	23f0      	movs	r3, #240	; 0xf0
 8000e80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e84:	4608      	mov	r0, r1
 8000e86:	9100      	str	r1, [sp, #0]
			LCD_CURSOR_Y = 0;
 8000e88:	7029      	strb	r1, [r5, #0]
			LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000e8a:	f7ff ff8b 	bl	8000da4 <LCD_Clear>
 8000e8e:	e7ea      	b.n	8000e66 <LCD_CursorForward+0x22>
 8000e90:	200000b0 	.word	0x200000b0
 8000e94:	200000b1 	.word	0x200000b1

08000e98 <LCD_CursorNewline>:
void LCD_CursorNewline ( void ) {
 8000e98:	b513      	push	{r0, r1, r4, lr}
	if (++LCD_CURSOR_Y > 24) {
 8000e9a:	4c0f      	ldr	r4, [pc, #60]	; (8000ed8 <LCD_CursorNewline+0x40>)
 8000e9c:	7823      	ldrb	r3, [r4, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b18      	cmp	r3, #24
 8000ea4:	d80d      	bhi.n	8000ec2 <LCD_CursorNewline+0x2a>
 8000ea6:	7023      	strb	r3, [r4, #0]
	LCD_CURSOR_X = 0;
 8000ea8:	2000      	movs	r0, #0
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000eaa:	22db      	movs	r2, #219	; 0xdb
 8000eac:	7821      	ldrb	r1, [r4, #0]
	LCD_CURSOR_X = 0;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LCD_CursorNewline+0x44>)
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000eb0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000eb4:	0049      	lsls	r1, r1, #1
	LCD_CURSOR_X = 0;
 8000eb6:	7018      	strb	r0, [r3, #0]
}
 8000eb8:	b002      	add	sp, #8
 8000eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_DrawChar(LCD_CURSOR_X * WIDTH_EN_CHAR, LCD_CURSOR_Y * HEIGHT_EN_CHAR, CURSOR_CHAR);
 8000ebe:	f7ff bf97 	b.w	8000df0 <LCD_DrawChar>
		LCD_CURSOR_Y = 0;
 8000ec2:	2100      	movs	r1, #0
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000ec4:	23f0      	movs	r3, #240	; 0xf0
 8000ec6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eca:	4608      	mov	r0, r1
 8000ecc:	9100      	str	r1, [sp, #0]
		LCD_CURSOR_Y = 0;
 8000ece:	7021      	strb	r1, [r4, #0]
		LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8000ed0:	f7ff ff68 	bl	8000da4 <LCD_Clear>
 8000ed4:	e7e8      	b.n	8000ea8 <LCD_CursorNewline+0x10>
 8000ed6:	bf00      	nop
 8000ed8:	200000b1 	.word	0x200000b1
 8000edc:	200000b0 	.word	0x200000b0

08000ee0 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	460d      	mov	r5, r1
 8000ee6:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8000ee8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000eec:	b902      	cbnz	r2, 8000ef0 <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000ef0:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
			usP += HEIGHT_EN_CHAR;
 8000ef4:	bf82      	ittt	hi
 8000ef6:	350a      	addhi	r5, #10
 8000ef8:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 8000efa:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000efc:	2de6      	cmp	r5, #230	; 0xe6
			usP = LCD_DispWindow_Start_PAGE;
 8000efe:	bf84      	itt	hi
 8000f00:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 8000f02:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 8000f04:	4629      	mov	r1, r5
 8000f06:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 8000f08:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 8000f0a:	f7ff ff71 	bl	8000df0 <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	e7ea      	b.n	8000ee8 <LCD_DrawString+0x8>
	...

08000f14 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000f18:	f7ff f990 	bl	800023c <strlen>
 8000f1c:	4d0e      	ldr	r5, [pc, #56]	; (8000f58 <writelineTerminal+0x44>)
 8000f1e:	4621      	mov	r1, r4
 8000f20:	b282      	uxth	r2, r0
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	4628      	mov	r0, r5
 8000f28:	f003 fb3b 	bl	80045a2 <HAL_UART_Transmit>
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2202      	movs	r2, #2
 8000f32:	4628      	mov	r0, r5
 8000f34:	4909      	ldr	r1, [pc, #36]	; (8000f5c <writelineTerminal+0x48>)
 8000f36:	f003 fb34 	bl	80045a2 <HAL_UART_Transmit>

  // LCD
  LCD_DrawString(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, buffer);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <writelineTerminal+0x4c>)
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	7819      	ldrb	r1, [r3, #0]
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <writelineTerminal+0x50>)
 8000f42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f46:	7818      	ldrb	r0, [r3, #0]
 8000f48:	0049      	lsls	r1, r1, #1
 8000f4a:	00c0      	lsls	r0, r0, #3
 8000f4c:	f7ff ffc8 	bl	8000ee0 <LCD_DrawString>
  LCD_CursorNewline();
}
 8000f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CursorNewline();
 8000f54:	f7ff bfa0 	b.w	8000e98 <LCD_CursorNewline>
 8000f58:	20008180 	.word	0x20008180
 8000f5c:	080093d0 	.word	0x080093d0
 8000f60:	200000b1 	.word	0x200000b1
 8000f64:	200000b0 	.word	0x200000b0

08000f68 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6c:	4604      	mov	r4, r0
  // UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f6e:	f7ff f965 	bl	800023c <strlen>

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f72:	2600      	movs	r6, #0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	b282      	uxth	r2, r0
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <writeTerminal+0x50>)
 8000f7e:	f003 fb10 	bl	80045a2 <HAL_UART_Transmit>
  uint8_t tempX = LCD_CURSOR_X;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <writeTerminal+0x54>)
 8000f84:	f893 8000 	ldrb.w	r8, [r3]
  uint8_t tempY = LCD_CURSOR_Y;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <writeTerminal+0x58>)
 8000f8a:	781d      	ldrb	r5, [r3, #0]
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff f955 	bl	800023c <strlen>
 8000f92:	b2f7      	uxtb	r7, r6
 8000f94:	42b8      	cmp	r0, r7
 8000f96:	f106 0601 	add.w	r6, r6, #1
 8000f9a:	d809      	bhi.n	8000fb0 <writeTerminal+0x48>
    LCD_CursorForward();
  }
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000f9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	0069      	lsls	r1, r5, #1
 8000fa4:	ea4f 00c8 	mov.w	r0, r8, lsl #3
}
 8000fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, buffer);
 8000fac:	f7ff bf98 	b.w	8000ee0 <LCD_DrawString>
    LCD_CursorForward();
 8000fb0:	f7ff ff48 	bl	8000e44 <LCD_CursorForward>
  for (uint8_t i = 0; i < strlen(buffer); i++) {
 8000fb4:	e7ea      	b.n	8000f8c <writeTerminal+0x24>
 8000fb6:	bf00      	nop
 8000fb8:	20008180 	.word	0x20008180
 8000fbc:	200000b0 	.word	0x200000b0
 8000fc0:	200000b1 	.word	0x200000b1

08000fc4 <writeTerminalChar>:

/**
 * Write char to UART & LCD without line ending (STM32)
 */
void writeTerminalChar(char *buffer) {
 8000fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // UART
  if (LCD_CURSOR_X + 1 == TERM_WIDTH) {
 8000fc6:	4c11      	ldr	r4, [pc, #68]	; (800100c <writeTerminalChar+0x48>)
void writeTerminalChar(char *buffer) {
 8000fc8:	4605      	mov	r5, r0
  if (LCD_CURSOR_X + 1 == TERM_WIDTH) {
 8000fca:	7823      	ldrb	r3, [r4, #0]
 8000fcc:	2b27      	cmp	r3, #39	; 0x27
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
  } else {
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000fce:	bf15      	itete	ne
 8000fd0:	4601      	movne	r1, r0
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000fd2:	2202      	moveq	r2, #2
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000fd4:	2201      	movne	r2, #1
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000fd6:	490e      	ldreq	r1, [pc, #56]	; (8001010 <writeTerminalChar+0x4c>)
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <writeTerminalChar+0x50>)
 8000fde:	f003 fae0 	bl	80045a2 <HAL_UART_Transmit>
  }

  // LCD
  uint8_t tempX = LCD_CURSOR_X;
  uint8_t tempY = LCD_CURSOR_Y;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <writeTerminalChar+0x54>)
  uint8_t tempX = LCD_CURSOR_X;
 8000fe4:	7826      	ldrb	r6, [r4, #0]
  uint8_t tempY = LCD_CURSOR_Y;
 8000fe6:	781c      	ldrb	r4, [r3, #0]
  char tempChar[2] = {0x00};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tempChar[0] = buffer[0];
 8000fee:	782b      	ldrb	r3, [r5, #0]
  tempChar[1] = '\0';

  LCD_CursorForward();
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000ff0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  tempChar[0] = buffer[0];
 8000ff4:	f88d 3004 	strb.w	r3, [sp, #4]
  LCD_CursorForward();
 8000ff8:	f7ff ff24 	bl	8000e44 <LCD_CursorForward>
  LCD_DrawString(tempX * FONT_WIDTH, tempY * FONT_HEIGHT, tempChar);
 8000ffc:	aa01      	add	r2, sp, #4
 8000ffe:	0061      	lsls	r1, r4, #1
 8001000:	00f0      	lsls	r0, r6, #3
 8001002:	f7ff ff6d 	bl	8000ee0 <LCD_DrawString>
}
 8001006:	b002      	add	sp, #8
 8001008:	bd70      	pop	{r4, r5, r6, pc}
 800100a:	bf00      	nop
 800100c:	200000b0 	.word	0x200000b0
 8001010:	080093d0 	.word	0x080093d0
 8001014:	20008180 	.word	0x20008180
 8001018:	200000b1 	.word	0x200000b1

0800101c <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 800101c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (value == 13) {
 800101e:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 8001020:	f88d 000f 	strb.w	r0, [sp, #15]
  if (value == 13) {
 8001024:	d128      	bne.n	8001078 <handleOutput+0x5c>
    // UART Newline
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
    // LCD Newline
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8001026:	2400      	movs	r4, #0
 8001028:	4d16      	ldr	r5, [pc, #88]	; (8001084 <handleOutput+0x68>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <handleOutput+0x6c>)
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <handleOutput+0x70>)
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 8001034:	4e16      	ldr	r6, [pc, #88]	; (8001090 <handleOutput+0x74>)
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8001036:	f003 fab4 	bl	80045a2 <HAL_UART_Transmit>
    LCD_Clear(LCD_CURSOR_X * FONT_WIDTH, LCD_CURSOR_Y * FONT_HEIGHT, FONT_WIDTH, FONT_HEIGHT, BLACK);
 800103a:	7829      	ldrb	r1, [r5, #0]
 800103c:	7830      	ldrb	r0, [r6, #0]
 800103e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001042:	230a      	movs	r3, #10
 8001044:	2208      	movs	r2, #8
 8001046:	9400      	str	r4, [sp, #0]
 8001048:	0049      	lsls	r1, r1, #1
 800104a:	00c0      	lsls	r0, r0, #3
 800104c:	f7ff feaa 	bl	8000da4 <LCD_Clear>
    if (++LCD_CURSOR_Y > 23) {
 8001050:	782b      	ldrb	r3, [r5, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b17      	cmp	r3, #23
 8001058:	d804      	bhi.n	8001064 <handleOutput+0x48>
 800105a:	702b      	strb	r3, [r5, #0]
		  LCD_CURSOR_Y = 0;
		  // Clear the screen
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
	  }
	  LCD_CURSOR_X = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	7033      	strb	r3, [r6, #0]
  }
  else {
    writeTerminalChar((char *)&value);
  }
}
 8001060:	b004      	add	sp, #16
 8001062:	bd70      	pop	{r4, r5, r6, pc}
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8001064:	23f0      	movs	r3, #240	; 0xf0
 8001066:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800106a:	4621      	mov	r1, r4
 800106c:	4620      	mov	r0, r4
 800106e:	9400      	str	r4, [sp, #0]
		  LCD_CURSOR_Y = 0;
 8001070:	702c      	strb	r4, [r5, #0]
		  LCD_Clear(0, 0, 320, 240, BACKGROUND);
 8001072:	f7ff fe97 	bl	8000da4 <LCD_Clear>
 8001076:	e7f1      	b.n	800105c <handleOutput+0x40>
    writeTerminalChar((char *)&value);
 8001078:	f10d 000f 	add.w	r0, sp, #15
 800107c:	f7ff ffa2 	bl	8000fc4 <writeTerminalChar>
}
 8001080:	e7ee      	b.n	8001060 <handleOutput+0x44>
 8001082:	bf00      	nop
 8001084:	200000b1 	.word	0x200000b1
 8001088:	080093d0 	.word	0x080093d0
 800108c:	20008180 	.word	0x20008180
 8001090:	200000b0 	.word	0x200000b0

08001094 <write6502>:
  if (address < RAM_SIZE) {
 8001094:	0403      	lsls	r3, r0, #16
 8001096:	d402      	bmi.n	800109e <write6502+0xa>
    RAM[address] = value;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <write6502+0x20>)
 800109a:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 800109c:	4770      	bx	lr
 800109e:	f24d 0312 	movw	r3, #53266	; 0xd012
 80010a2:	4298      	cmp	r0, r3
 80010a4:	d105      	bne.n	80010b2 <write6502+0x1e>
    pia.display_register = value;
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <write6502+0x24>)
    handleOutput(value);
 80010a8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 80010ac:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 80010ae:	f7ff bfb5 	b.w	800101c <handleOutput>
}
 80010b2:	4770      	bx	lr
 80010b4:	200000b2 	.word	0x200000b2
 80010b8:	200081c9 	.word	0x200081c9

080010bc <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 80010bc:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 80010be:	4c18      	ldr	r4, [pc, #96]	; (8001120 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 80010c0:	4d18      	ldr	r5, [pc, #96]	; (8001124 <initApple1+0x68>)
    HAL_Delay(1000);
 80010c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c6:	f002 f9d3 	bl	8003470 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ff22 	bl	8000f14 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <initApple1+0x68>)
 80010d2:	f000 f835 	bl	8001140 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 80010d6:	782b      	ldrb	r3, [r5, #0]
 80010d8:	2b20      	cmp	r3, #32
 80010da:	d1f2      	bne.n	80010c2 <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 80010dc:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 80010e0:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 80010e2:	f7ff ff41 	bl	8000f68 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 80010e6:	f000 fa73 	bl	80015d0 <reset6502>
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <initApple1+0x70>)
 80010ec:	f7ff ff12 	bl	8000f14 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <initApple1+0x74>)
 80010f2:	f7ff ff39 	bl	8000f68 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 80010f6:	4621      	mov	r1, r4
 80010f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <initApple1+0x78>)
 80010fe:	f005 fabf 	bl	8006680 <memset>
  }
  writelineTerminal(" Complete");
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <initApple1+0x70>)
 8001104:	f7ff ff06 	bl	8000f14 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <initApple1+0x7c>)
 800110a:	f7ff ff2d 	bl	8000f68 <writeTerminal>
  pia.keyboard_register = 0x00;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 8001112:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 8001114:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 8001116:	709c      	strb	r4, [r3, #2]
}
 8001118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 800111c:	f7ff befa 	b.w	8000f14 <writelineTerminal>
 8001120:	080093d3 	.word	0x080093d3
 8001124:	200081c8 	.word	0x200081c8
 8001128:	080093f1 	.word	0x080093f1
 800112c:	08009405 	.word	0x08009405
 8001130:	0800940f 	.word	0x0800940f
 8001134:	200000b2 	.word	0x200000b2
 8001138:	08009423 	.word	0x08009423
 800113c:	200081c9 	.word	0x200081c9

08001140 <handleInput>:
void handleInput(char *buffer) {
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 8001142:	4601      	mov	r1, r0
void handleInput(char *buffer) {
 8001144:	b093      	sub	sp, #76	; 0x4c
 8001146:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 8001148:	230a      	movs	r3, #10
 800114a:	2201      	movs	r2, #1
 800114c:	4838      	ldr	r0, [pc, #224]	; (8001230 <handleInput+0xf0>)
 800114e:	f003 fa73 	bl	8004638 <HAL_UART_Receive>
  if(isKbrdReady()){
 8001152:	f001 fdb1 	bl	8002cb8 <isKbrdReady>
 8001156:	b110      	cbz	r0, 800115e <handleInput+0x1e>
	  buffer[0] = getAscii();
 8001158:	f001 fdb4 	bl	8002cc4 <getAscii>
 800115c:	7020      	strb	r0, [r4, #0]
  buffer[0] &= 0x7F; // Mask out MSB
 800115e:	7823      	ldrb	r3, [r4, #0]
 8001160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8001164:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001168:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 800116a:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800116c:	d803      	bhi.n	8001176 <handleInput+0x36>
    buffer[0] -= 0x20;
 800116e:	3b20      	subs	r3, #32
    buffer[0] = '\r';
 8001170:	7023      	strb	r3, [r4, #0]
}
 8001172:	b013      	add	sp, #76	; 0x4c
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (buffer[0] == '\n') {
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d101      	bne.n	800117e <handleInput+0x3e>
    buffer[0] = '\r';
 800117a:	230d      	movs	r3, #13
 800117c:	e7f8      	b.n	8001170 <handleInput+0x30>
  else if (buffer[0] == '\b') {
 800117e:	2b08      	cmp	r3, #8
 8001180:	d101      	bne.n	8001186 <handleInput+0x46>
    buffer[0] = 0x5F;
 8001182:	235f      	movs	r3, #95	; 0x5f
 8001184:	e7f4      	b.n	8001170 <handleInput+0x30>
  else if (buffer[0] == 0x7F) {
 8001186:	2b7f      	cmp	r3, #127	; 0x7f
 8001188:	d0fb      	beq.n	8001182 <handleInput+0x42>
  else if (buffer[0] == 0x03) {
 800118a:	2b03      	cmp	r3, #3
 800118c:	d10e      	bne.n	80011ac <handleInput+0x6c>
    writelineTerminal("[Ctrl + C] Resetting in 5 seconds...");
 800118e:	4829      	ldr	r0, [pc, #164]	; (8001234 <handleInput+0xf4>)
 8001190:	f7ff fec0 	bl	8000f14 <writelineTerminal>
    HAL_Delay(5000);
 8001194:	f241 3088 	movw	r0, #5000	; 0x1388
 8001198:	f002 f96a 	bl	8003470 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 800119c:	2220      	movs	r2, #32
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <handleInput+0xf8>)
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	b013      	add	sp, #76	; 0x4c
 80011a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    initApple1();
 80011a8:	f7ff bf88 	b.w	80010bc <initApple1>
  else if (buffer[0] == 0x13) {
 80011ac:	2b13      	cmp	r3, #19
 80011ae:	d114      	bne.n	80011da <handleInput+0x9a>
    LCD_Clear(0, 0, 320, 240, BACKGROUND);
 80011b0:	2400      	movs	r4, #0
    HAL_UART_Transmit(&huart1, (uint8_t *)clearScreen, strlen(clearScreen), HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	2204      	movs	r2, #4
 80011b8:	4920      	ldr	r1, [pc, #128]	; (800123c <handleInput+0xfc>)
 80011ba:	481d      	ldr	r0, [pc, #116]	; (8001230 <handleInput+0xf0>)
 80011bc:	f003 f9f1 	bl	80045a2 <HAL_UART_Transmit>
    LCD_Clear(0, 0, 320, 240, BACKGROUND);
 80011c0:	23f0      	movs	r3, #240	; 0xf0
 80011c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011c6:	4621      	mov	r1, r4
 80011c8:	4620      	mov	r0, r4
 80011ca:	9400      	str	r4, [sp, #0]
 80011cc:	f7ff fdea 	bl	8000da4 <LCD_Clear>
    LCD_CURSOR_X = 0;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <handleInput+0x100>)
 80011d2:	701c      	strb	r4, [r3, #0]
    LCD_CURSOR_Y = 0;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <handleInput+0x104>)
 80011d6:	701c      	strb	r4, [r3, #0]
 80011d8:	e7cb      	b.n	8001172 <handleInput+0x32>
  else if (buffer[0] == 0x0C) {
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d1c9      	bne.n	8001172 <handleInput+0x32>
    char filename[64] = {0x00};
 80011de:	2600      	movs	r6, #0
	writelineTerminal("");
 80011e0:	4819      	ldr	r0, [pc, #100]	; (8001248 <handleInput+0x108>)
 80011e2:	f7ff fe97 	bl	8000f14 <writelineTerminal>
    writelineTerminal("[Ctrl + L] Loading tapes...");
 80011e6:	4819      	ldr	r0, [pc, #100]	; (800124c <handleInput+0x10c>)
 80011e8:	f7ff fe94 	bl	8000f14 <writelineTerminal>
    char filename[64] = {0x00};
 80011ec:	ad02      	add	r5, sp, #8
 80011ee:	223c      	movs	r2, #60	; 0x3c
 80011f0:	4631      	mov	r1, r6
 80011f2:	a803      	add	r0, sp, #12
 80011f4:	9602      	str	r6, [sp, #8]
 80011f6:	462f      	mov	r7, r5
 80011f8:	f005 fa42 	bl	8006680 <memset>
    for (int i = index; (RAM[i] != 0x00 && (i-index < 64)); i++) {
 80011fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <handleInput+0x110>)
 8001202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001206:	b113      	cbz	r3, 800120e <handleInput+0xce>
 8001208:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
 800120c:	d108      	bne.n	8001220 <handleInput+0xe0>
	buffer[0] = 0x9B; // esc character to reset input
 800120e:	239b      	movs	r3, #155	; 0x9b
    writelineTerminal("");
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <handleInput+0x108>)
	buffer[0] = 0x9B; // esc character to reset input
 8001212:	7023      	strb	r3, [r4, #0]
    writelineTerminal("");
 8001214:	f7ff fe7e 	bl	8000f14 <writelineTerminal>
    tapeLoading(filename);
 8001218:	4638      	mov	r0, r7
 800121a:	f001 fedb 	bl	8002fd4 <tapeLoading>
}
 800121e:	e7a8      	b.n	8001172 <handleInput+0x32>
        filename[i - index] = RAM[i] & 0x7F;
 8001220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001224:	f805 3b01 	strb.w	r3, [r5], #1
        RAM[i] = 0; // resetting it to 0 so it's empty.
 8001228:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (int i = index; (RAM[i] != 0x00 && (i-index < 64)); i++) {
 800122c:	3201      	adds	r2, #1
 800122e:	e7e8      	b.n	8001202 <handleInput+0xc2>
 8001230:	20008180 	.word	0x20008180
 8001234:	08009437 	.word	0x08009437
 8001238:	200081c8 	.word	0x200081c8
 800123c:	0800945c 	.word	0x0800945c
 8001240:	200000b0 	.word	0x200000b0
 8001244:	200000b1 	.word	0x200000b1
 8001248:	080093d2 	.word	0x080093d2
 800124c:	08009461 	.word	0x08009461
 8001250:	200002b2 	.word	0x200002b2

08001254 <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 8001254:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 8001256:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 8001258:	d402      	bmi.n	8001260 <read6502+0xc>
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 800125c:	5c18      	ldrb	r0, [r3, r0]
 800125e:	e005      	b.n	800126c <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 8001260:	f24d 0310 	movw	r3, #53264	; 0xd010
 8001264:	4298      	cmp	r0, r3
 8001266:	d102      	bne.n	800126e <read6502+0x1a>
    return pia.keyboard_register;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <read6502+0x64>)
 800126a:	7818      	ldrb	r0, [r3, #0]
}
 800126c:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 800126e:	f24d 0311 	movw	r3, #53265	; 0xd011
 8001272:	4298      	cmp	r0, r3
 8001274:	d10f      	bne.n	8001296 <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 8001276:	4c11      	ldr	r4, [pc, #68]	; (80012bc <read6502+0x68>)
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff ff61 	bl	8001140 <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 800127e:	7823      	ldrb	r3, [r4, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <read6502+0x64>)
 8001282:	f063 017f 	orn	r1, r3, #127	; 0x7f
 8001286:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 8001288:	b90b      	cbnz	r3, 800128e <read6502+0x3a>
      return 0x00;
 800128a:	2000      	movs	r0, #0
 800128c:	e7ee      	b.n	800126c <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 800128e:	2300      	movs	r3, #0
      return 0x80;
 8001290:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 8001292:	7023      	strb	r3, [r4, #0]
      return 0x80;
 8001294:	e7ea      	b.n	800126c <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 8001296:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800129a:	b29b      	uxth	r3, r3
 800129c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a0:	d202      	bcs.n	80012a8 <read6502+0x54>
      return BASIC[BASIC_addr];
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <read6502+0x6c>)
 80012a4:	5cd0      	ldrb	r0, [r2, r3]
 80012a6:	e7e1      	b.n	800126c <read6502+0x18>
  if (address >= 0xF000) {
 80012a8:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80012ac:	d3ed      	bcc.n	800128a <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <read6502+0x70>)
 80012b0:	b2c0      	uxtb	r0, r0
 80012b2:	e7d3      	b.n	800125c <read6502+0x8>
 80012b4:	200000b2 	.word	0x200000b2
 80012b8:	200081c9 	.word	0x200081c9
 80012bc:	200081c8 	.word	0x200081c8
 80012c0:	0800947d 	.word	0x0800947d
 80012c4:	0800a47d 	.word	0x0800a47d

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b510      	push	{r4, lr}
 80012ca:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012cc:	2214      	movs	r2, #20
 80012ce:	2100      	movs	r1, #0
 80012d0:	a808      	add	r0, sp, #32
 80012d2:	f005 f9d5 	bl	8006680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d6:	2214      	movs	r2, #20
 80012d8:	2100      	movs	r1, #0
 80012da:	a801      	add	r0, sp, #4
 80012dc:	f005 f9d0 	bl	8006680 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e8:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f002 fa31 	bl	8003760 <HAL_RCC_OscConfig>
 80012fe:	b108      	cbz	r0, 8001304 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001302:	e7fe      	b.n	8001302 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001314:	4621      	mov	r1, r4
 8001316:	a801      	add	r0, sp, #4
 8001318:	f002 fbe4 	bl	8003ae4 <HAL_RCC_ClockConfig>
 800131c:	b108      	cbz	r0, 8001322 <SystemClock_Config+0x5a>
 800131e:	b672      	cpsid	i
  while (1)
 8001320:	e7fe      	b.n	8001320 <SystemClock_Config+0x58>
}
 8001322:	b010      	add	sp, #64	; 0x40
 8001324:	bd10      	pop	{r4, pc}
	...

08001328 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	2610      	movs	r6, #16
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800132e:	f002 f87b 	bl	8003428 <HAL_Init>
  SystemClock_Config();
 8001332:	f7ff ffc9 	bl	80012c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	4632      	mov	r2, r6
 8001338:	2100      	movs	r1, #0
 800133a:	a805      	add	r0, sp, #20
 800133c:	f005 f9a0 	bl	8006680 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <main+0x1a0>)
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001348:	4860      	ldr	r0, [pc, #384]	; (80014cc <main+0x1a4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4332      	orrs	r2, r6
 800134c:	619a      	str	r2, [r3, #24]
 800134e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4032      	ands	r2, r6
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	f042 0204 	orr.w	r2, r2, #4
 8001360:	619a      	str	r2, [r3, #24]
 8001362:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	f002 0204 	and.w	r2, r2, #4
 800136c:	9201      	str	r2, [sp, #4]
 800136e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001372:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001382:	9202      	str	r2, [sp, #8]
 8001384:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	699a      	ldr	r2, [r3, #24]
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	f002 0220 	and.w	r2, r2, #32
 8001394:	9203      	str	r2, [sp, #12]
 8001396:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	f042 0208 	orr.w	r2, r2, #8
 800139e:	619a      	str	r2, [r3, #24]
 80013a0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	9304      	str	r3, [sp, #16]
 80013aa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80013ac:	f002 f9c6 	bl	800373c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2102      	movs	r1, #2
 80013b4:	4846      	ldr	r0, [pc, #280]	; (80014d0 <main+0x1a8>)
 80013b6:	f002 f9c1 	bl	800373c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ba:	2220      	movs	r2, #32
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <main+0x1ac>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	4846      	ldr	r0, [pc, #280]	; (80014d8 <main+0x1b0>)
 80013c0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f002 f8ca 	bl	8003560 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	4842      	ldr	r0, [pc, #264]	; (80014d8 <main+0x1b0>)
 80013d0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f002 f8c2 	bl	8003560 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80013dc:	483b      	ldr	r0, [pc, #236]	; (80014cc <main+0x1a4>)
 80013de:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	e9cd 7505 	strd	r7, r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e6:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f002 f8b9 	bl	8003560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 80013ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 80013f2:	483a      	ldr	r0, [pc, #232]	; (80014dc <main+0x1b4>)
 80013f4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f002 f8b0 	bl	8003560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001400:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001402:	4833      	ldr	r0, [pc, #204]	; (80014d0 <main+0x1a8>)
 8001404:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140a:	e9cd 4807 	strd	r4, r8, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800140e:	f002 f8a7 	bl	8003560 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001412:	4622      	mov	r2, r4
 8001414:	4621      	mov	r1, r4
 8001416:	2017      	movs	r0, #23
 8001418:	f002 f84e 	bl	80034b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800141c:	2017      	movs	r0, #23
 800141e:	f002 f87d 	bl	800351c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8001422:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001426:	482e      	ldr	r0, [pc, #184]	; (80014e0 <main+0x1b8>)
  huart1.Init.BaudRate = 115200;
 8001428:	492e      	ldr	r1, [pc, #184]	; (80014e4 <main+0x1bc>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800142a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800142e:	e9c0 1300 	strd	r1, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001432:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8001434:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800143a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800143c:	f003 f882 	bl	8004544 <HAL_UART_Init>
 8001440:	4602      	mov	r2, r0
 8001442:	b108      	cbz	r0, 8001448 <main+0x120>
 8001444:	b672      	cpsid	i
  while (1)
 8001446:	e7fe      	b.n	8001446 <main+0x11e>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001448:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800144c:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <main+0x1c0>)
  Timing.DataSetupTime = 255;
 8001450:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001452:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001454:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001458:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 800145c:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 800145e:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 8001462:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 8001466:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001468:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800146a:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800146e:	e9c0 6205 	strd	r6, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001472:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001476:	e9c0 2709 	strd	r2, r7, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800147a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800147e:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 8001482:	9609      	str	r6, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8001484:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001486:	f002 ffbc 	bl	8004402 <HAL_SRAM_Init>
 800148a:	b108      	cbz	r0, 8001490 <main+0x168>
 800148c:	b672      	cpsid	i
  while (1)
 800148e:	e7fe      	b.n	800148e <main+0x166>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001490:	4a16      	ldr	r2, [pc, #88]	; (80014ec <main+0x1c4>)
 8001492:	69d3      	ldr	r3, [r2, #28]
 8001494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001498:	61d3      	str	r3, [r2, #28]
  hsd.Instance = SDIO;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <main+0x1c8>)
 800149c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80014a0:	e9c3 2000 	strd	r2, r0, [r3]
  hsd.Init.ClockDiv = 4;
 80014a4:	2204      	movs	r2, #4
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014a6:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014aa:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hsd.Init.ClockDiv = 4;
 80014ae:	619a      	str	r2, [r3, #24]
  MX_FATFS_Init();
 80014b0:	f003 fc90 	bl	8004dd4 <MX_FATFS_Init>
  LCD_INIT(); // Initialize LCD
 80014b4:	f7ff fc84 	bl	8000dc0 <LCD_INIT>
  initApple1(); // Initialize Apple I
 80014b8:	f7ff fe00 	bl	80010bc <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 80014bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80014c0:	f000 ffea 	bl	8002498 <exec6502>
  while (1)
 80014c4:	e7fa      	b.n	80014bc <main+0x194>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40011800 	.word	0x40011800
 80014d4:	10210000 	.word	0x10210000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	20008180 	.word	0x20008180
 80014e4:	40013800 	.word	0x40013800
 80014e8:	20008138 	.word	0x20008138
 80014ec:	40010000 	.word	0x40010000
 80014f0:	200080b4 	.word	0x200080b4

080014f4 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 80014f4:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <getvalue+0x1c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b113      	cbz	r3, 8001502 <getvalue+0xe>
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <getvalue+0x20>)
 80014fe:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 8001500:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <getvalue+0x24>)
 8001504:	8818      	ldrh	r0, [r3, #0]
 8001506:	f7ff fea5 	bl	8001254 <read6502>
 800150a:	b280      	uxth	r0, r0
 800150c:	e7f8      	b.n	8001500 <getvalue+0xc>
 800150e:	bf00      	nop
 8001510:	200081e7 	.word	0x200081e7
 8001514:	200081cd 	.word	0x200081cd
 8001518:	200081d6 	.word	0x200081d6

0800151c <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 800151c:	4a02      	ldr	r2, [pc, #8]	; (8001528 <bcc.part.0+0xc>)
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	3302      	adds	r3, #2
 8001522:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200081d0 	.word	0x200081d0

0800152c <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 800152c:	4a02      	ldr	r2, [pc, #8]	; (8001538 <dex.part.0+0xc>)
 800152e:	7813      	ldrb	r3, [r2, #0]
 8001530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001534:	7013      	strb	r3, [r2, #0]
}
 8001536:	4770      	bx	lr
 8001538:	200081d4 	.word	0x200081d4

0800153c <push16>:
void push16(uint16_t pushval) {
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8001540:	4c09      	ldr	r4, [pc, #36]	; (8001568 <push16+0x2c>)
 8001542:	0a29      	lsrs	r1, r5, #8
 8001544:	7820      	ldrb	r0, [r4, #0]
 8001546:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800154a:	f7ff fda3 	bl	8001094 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 800154e:	7823      	ldrb	r3, [r4, #0]
 8001550:	b2e9      	uxtb	r1, r5
 8001552:	3b01      	subs	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800155a:	f7ff fd9b 	bl	8001094 <write6502>
    sp -= 2;
 800155e:	7823      	ldrb	r3, [r4, #0]
 8001560:	3b02      	subs	r3, #2
 8001562:	7023      	strb	r3, [r4, #0]
}
 8001564:	bd38      	pop	{r3, r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	200081e6 	.word	0x200081e6

0800156c <push8>:
    write6502(BASE_STACK + sp--, pushval);
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <push8+0x14>)
void push8(uint8_t pushval) {
 800156e:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8001570:	7813      	ldrb	r3, [r2, #0]
 8001572:	1e58      	subs	r0, r3, #1
 8001574:	7010      	strb	r0, [r2, #0]
 8001576:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800157a:	f7ff bd8b 	b.w	8001094 <write6502>
 800157e:	bf00      	nop
 8001580:	200081e6 	.word	0x200081e6

08001584 <pull16>:
uint16_t pull16() {
 8001584:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8001586:	4d0b      	ldr	r5, [pc, #44]	; (80015b4 <pull16+0x30>)
 8001588:	7828      	ldrb	r0, [r5, #0]
 800158a:	3001      	adds	r0, #1
 800158c:	b2c0      	uxtb	r0, r0
 800158e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001592:	f7ff fe5f 	bl	8001254 <read6502>
 8001596:	4604      	mov	r4, r0
 8001598:	7828      	ldrb	r0, [r5, #0]
 800159a:	3002      	adds	r0, #2
 800159c:	b2c0      	uxtb	r0, r0
 800159e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80015a2:	f7ff fe57 	bl	8001254 <read6502>
    sp += 2;
 80015a6:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 80015a8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 80015ac:	3302      	adds	r3, #2
 80015ae:	702b      	strb	r3, [r5, #0]
}
 80015b0:	b280      	uxth	r0, r0
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	200081e6 	.word	0x200081e6

080015b8 <pull8>:
    return (read6502(BASE_STACK + ++sp));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <pull8+0x14>)
 80015ba:	7818      	ldrb	r0, [r3, #0]
 80015bc:	3001      	adds	r0, #1
 80015be:	b2c0      	uxtb	r0, r0
 80015c0:	7018      	strb	r0, [r3, #0]
 80015c2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80015c6:	f7ff be45 	b.w	8001254 <read6502>
 80015ca:	bf00      	nop
 80015cc:	200081e6 	.word	0x200081e6

080015d0 <reset6502>:
void reset6502() {
 80015d0:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 80015d2:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 80015d6:	f7ff fe3d 	bl	8001254 <read6502>
 80015da:	4604      	mov	r4, r0
 80015dc:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 80015e0:	f7ff fe38 	bl	8001254 <read6502>
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <reset6502+0x3c>)
 80015e6:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80015ea:	801c      	strh	r4, [r3, #0]
    a = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <reset6502+0x40>)
 80015f0:	7013      	strb	r3, [r2, #0]
    x = 0;
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <reset6502+0x44>)
 80015f4:	7013      	strb	r3, [r2, #0]
    y = 0;
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <reset6502+0x48>)
 80015f8:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 80015fa:	22fd      	movs	r2, #253	; 0xfd
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <reset6502+0x4c>)
 80015fe:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <reset6502+0x50>)
 8001602:	7813      	ldrb	r3, [r2, #0]
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	7013      	strb	r3, [r2, #0]
}
 800160a:	bd10      	pop	{r4, pc}
 800160c:	200081e0 	.word	0x200081e0
 8001610:	200081cd 	.word	0x200081cd
 8001614:	200081ea 	.word	0x200081ea
 8001618:	200081eb 	.word	0x200081eb
 800161c:	200081e6 	.word	0x200081e6
 8001620:	200081d4 	.word	0x200081d4

08001624 <imm>:
    ea = pc++;
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <imm+0x10>)
 8001626:	8813      	ldrh	r3, [r2, #0]
 8001628:	1c59      	adds	r1, r3, #1
 800162a:	8011      	strh	r1, [r2, #0]
 800162c:	4a02      	ldr	r2, [pc, #8]	; (8001638 <imm+0x14>)
 800162e:	8013      	strh	r3, [r2, #0]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200081e0 	.word	0x200081e0
 8001638:	200081d6 	.word	0x200081d6

0800163c <zp>:
void zp() { // zero-page
 800163c:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <zp+0x14>)
 8001640:	8818      	ldrh	r0, [r3, #0]
 8001642:	1c42      	adds	r2, r0, #1
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	f7ff fe05 	bl	8001254 <read6502>
 800164a:	4b02      	ldr	r3, [pc, #8]	; (8001654 <zp+0x18>)
 800164c:	8018      	strh	r0, [r3, #0]
}
 800164e:	bd08      	pop	{r3, pc}
 8001650:	200081e0 	.word	0x200081e0
 8001654:	200081d6 	.word	0x200081d6

08001658 <zpx>:
void zpx() { // zero-page,X
 8001658:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <zpx+0x1c>)
 800165c:	8818      	ldrh	r0, [r3, #0]
 800165e:	1c42      	adds	r2, r0, #1
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	f7ff fdf7 	bl	8001254 <read6502>
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <zpx+0x20>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4418      	add	r0, r3
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <zpx+0x24>)
 800166e:	b2c0      	uxtb	r0, r0
 8001670:	8018      	strh	r0, [r3, #0]
}
 8001672:	bd08      	pop	{r3, pc}
 8001674:	200081e0 	.word	0x200081e0
 8001678:	200081ea 	.word	0x200081ea
 800167c:	200081d6 	.word	0x200081d6

08001680 <zpy>:
void zpy() { // zero-page,Y
 8001680:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <zpy+0x1c>)
 8001684:	8818      	ldrh	r0, [r3, #0]
 8001686:	1c42      	adds	r2, r0, #1
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	f7ff fde3 	bl	8001254 <read6502>
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <zpy+0x20>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4418      	add	r0, r3
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <zpy+0x24>)
 8001696:	b2c0      	uxtb	r0, r0
 8001698:	8018      	strh	r0, [r3, #0]
}
 800169a:	bd08      	pop	{r3, pc}
 800169c:	200081e0 	.word	0x200081e0
 80016a0:	200081eb 	.word	0x200081eb
 80016a4:	200081d6 	.word	0x200081d6

080016a8 <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 80016a8:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <rel+0x20>)
 80016ac:	8818      	ldrh	r0, [r3, #0]
 80016ae:	1c42      	adds	r2, r0, #1
 80016b0:	801a      	strh	r2, [r3, #0]
 80016b2:	f7ff fdcf 	bl	8001254 <read6502>
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <rel+0x24>)
 80016b8:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 80016ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016be:	bf18      	it	ne
 80016c0:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 80016c4:	8013      	strh	r3, [r2, #0]
}
 80016c6:	bd08      	pop	{r3, pc}
 80016c8:	200081e0 	.word	0x200081e0
 80016cc:	200081e2 	.word	0x200081e2

080016d0 <abso>:
void abso() { // absolute
 80016d0:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 80016d2:	4d09      	ldr	r5, [pc, #36]	; (80016f8 <abso+0x28>)
 80016d4:	8828      	ldrh	r0, [r5, #0]
 80016d6:	f7ff fdbd 	bl	8001254 <read6502>
 80016da:	4604      	mov	r4, r0
 80016dc:	8828      	ldrh	r0, [r5, #0]
 80016de:	3001      	adds	r0, #1
 80016e0:	b280      	uxth	r0, r0
 80016e2:	f7ff fdb7 	bl	8001254 <read6502>
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <abso+0x2c>)
 80016e8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80016ec:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80016ee:	882b      	ldrh	r3, [r5, #0]
 80016f0:	3302      	adds	r3, #2
 80016f2:	802b      	strh	r3, [r5, #0]
}
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
 80016f6:	bf00      	nop
 80016f8:	200081e0 	.word	0x200081e0
 80016fc:	200081d6 	.word	0x200081d6

08001700 <absx>:
void absx() { // absolute,X
 8001700:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8001702:	4d0a      	ldr	r5, [pc, #40]	; (800172c <absx+0x2c>)
 8001704:	8828      	ldrh	r0, [r5, #0]
 8001706:	f7ff fda5 	bl	8001254 <read6502>
 800170a:	4604      	mov	r4, r0
 800170c:	8828      	ldrh	r0, [r5, #0]
 800170e:	3001      	adds	r0, #1
 8001710:	b280      	uxth	r0, r0
 8001712:	f7ff fd9f 	bl	8001254 <read6502>
    ea += (uint16_t)x;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8001718:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 800171c:	7818      	ldrb	r0, [r3, #0]
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <absx+0x34>)
 8001720:	4404      	add	r4, r0
 8001722:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8001724:	882b      	ldrh	r3, [r5, #0]
 8001726:	3302      	adds	r3, #2
 8001728:	802b      	strh	r3, [r5, #0]
}
 800172a:	bd38      	pop	{r3, r4, r5, pc}
 800172c:	200081e0 	.word	0x200081e0
 8001730:	200081ea 	.word	0x200081ea
 8001734:	200081d6 	.word	0x200081d6

08001738 <absy>:
void absy() { // absolute,Y
 8001738:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 800173a:	4d0a      	ldr	r5, [pc, #40]	; (8001764 <absy+0x2c>)
 800173c:	8828      	ldrh	r0, [r5, #0]
 800173e:	f7ff fd89 	bl	8001254 <read6502>
 8001742:	4604      	mov	r4, r0
 8001744:	8828      	ldrh	r0, [r5, #0]
 8001746:	3001      	adds	r0, #1
 8001748:	b280      	uxth	r0, r0
 800174a:	f7ff fd83 	bl	8001254 <read6502>
    ea += (uint16_t)y;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8001750:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 8001754:	7818      	ldrb	r0, [r3, #0]
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <absy+0x34>)
 8001758:	4404      	add	r4, r0
 800175a:	801c      	strh	r4, [r3, #0]
    pc += 2;
 800175c:	882b      	ldrh	r3, [r5, #0]
 800175e:	3302      	adds	r3, #2
 8001760:	802b      	strh	r3, [r5, #0]
}
 8001762:	bd38      	pop	{r3, r4, r5, pc}
 8001764:	200081e0 	.word	0x200081e0
 8001768:	200081eb 	.word	0x200081eb
 800176c:	200081d6 	.word	0x200081d6

08001770 <ind>:
void ind() { // indirect
 8001770:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 8001772:	4e10      	ldr	r6, [pc, #64]	; (80017b4 <ind+0x44>)
 8001774:	8830      	ldrh	r0, [r6, #0]
 8001776:	f7ff fd6d 	bl	8001254 <read6502>
 800177a:	4604      	mov	r4, r0
 800177c:	8830      	ldrh	r0, [r6, #0]
 800177e:	3001      	adds	r0, #1
 8001780:	b280      	uxth	r0, r0
 8001782:	f7ff fd67 	bl	8001254 <read6502>
 8001786:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800178a:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff fd61 	bl	8001254 <read6502>
 8001792:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8001794:	1c60      	adds	r0, r4, #1
 8001796:	b2c0      	uxtb	r0, r0
 8001798:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800179c:	4320      	orrs	r0, r4
 800179e:	f7ff fd59 	bl	8001254 <read6502>
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <ind+0x48>)
 80017a4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80017a8:	801d      	strh	r5, [r3, #0]
    pc += 2;
 80017aa:	8833      	ldrh	r3, [r6, #0]
 80017ac:	3302      	adds	r3, #2
 80017ae:	8033      	strh	r3, [r6, #0]
}
 80017b0:	bd70      	pop	{r4, r5, r6, pc}
 80017b2:	bf00      	nop
 80017b4:	200081e0 	.word	0x200081e0
 80017b8:	200081d6 	.word	0x200081d6

080017bc <indx>:
void indx() { //  (indirect,X)
 80017bc:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <indx+0x30>)
 80017c0:	8818      	ldrh	r0, [r3, #0]
 80017c2:	1c42      	adds	r2, r0, #1
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	f7ff fd45 	bl	8001254 <read6502>
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <indx+0x34>)
 80017cc:	781c      	ldrb	r4, [r3, #0]
 80017ce:	4404      	add	r4, r0
 80017d0:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fd3e 	bl	8001254 <read6502>
 80017d8:	3401      	adds	r4, #1
 80017da:	4605      	mov	r5, r0
 80017dc:	b2e0      	uxtb	r0, r4
 80017de:	f7ff fd39 	bl	8001254 <read6502>
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <indx+0x38>)
 80017e4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80017e8:	801d      	strh	r5, [r3, #0]
}
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
 80017ec:	200081e0 	.word	0x200081e0
 80017f0:	200081ea 	.word	0x200081ea
 80017f4:	200081d6 	.word	0x200081d6

080017f8 <indy>:
void indy() { //  (indirect),Y
 80017f8:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <indy+0x30>)
 80017fc:	8818      	ldrh	r0, [r3, #0]
 80017fe:	1c42      	adds	r2, r0, #1
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	f7ff fd27 	bl	8001254 <read6502>
 8001806:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fd23 	bl	8001254 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 800180e:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8001810:	4605      	mov	r5, r0
 8001812:	b2e0      	uxtb	r0, r4
 8001814:	f7ff fd1e 	bl	8001254 <read6502>
    ea += (uint16_t)y;
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800181a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 800181e:	7818      	ldrb	r0, [r3, #0]
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <indy+0x38>)
 8001822:	4405      	add	r5, r0
 8001824:	801d      	strh	r5, [r3, #0]
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}
 8001828:	200081e0 	.word	0x200081e0
 800182c:	200081eb 	.word	0x200081eb
 8001830:	200081d6 	.word	0x200081d6

08001834 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <putvalue+0x18>)
 8001836:	b2c1      	uxtb	r1, r0
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b113      	cbz	r3, 8001842 <putvalue+0xe>
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <putvalue+0x1c>)
 800183e:	7019      	strb	r1, [r3, #0]
}
 8001840:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <putvalue+0x20>)
 8001844:	8818      	ldrh	r0, [r3, #0]
 8001846:	f7ff bc25 	b.w	8001094 <write6502>
 800184a:	bf00      	nop
 800184c:	200081e7 	.word	0x200081e7
 8001850:	200081cd 	.word	0x200081cd
 8001854:	200081d6 	.word	0x200081d6

08001858 <adc>:
void adc() {
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 800185a:	f7ff fe4b 	bl	80014f4 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800185e:	4d24      	ldr	r5, [pc, #144]	; (80018f0 <adc+0x98>)
    value = getvalue();
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001862:	4c25      	ldr	r4, [pc, #148]	; (80018f8 <adc+0xa0>)
    value = getvalue();
 8001864:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001866:	782b      	ldrb	r3, [r5, #0]
 8001868:	7821      	ldrb	r1, [r4, #0]
 800186a:	f003 0201 	and.w	r2, r3, #1
 800186e:	440a      	add	r2, r1
 8001870:	4e22      	ldr	r6, [pc, #136]	; (80018fc <adc+0xa4>)
 8001872:	4402      	add	r2, r0
 8001874:	b292      	uxth	r2, r2
    carrycalc(result);
 8001876:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800187a:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800187c:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 800187e:	bf14      	ite	ne
 8001880:	f043 0301 	orrne.w	r3, r3, #1
 8001884:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001888:	b1c6      	cbz	r6, 80018bc <adc+0x64>
 800188a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 800188e:	ea81 0602 	eor.w	r6, r1, r2
 8001892:	ea80 0702 	eor.w	r7, r0, r2
 8001896:	4630      	mov	r0, r6
 8001898:	4038      	ands	r0, r7
 800189a:	0607      	lsls	r7, r0, #24
 800189c:	bf4c      	ite	mi
 800189e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80018a2:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 80018a6:	0616      	lsls	r6, r2, #24
 80018a8:	bf4c      	ite	mi
 80018aa:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80018ae:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 80018b2:	0718      	lsls	r0, r3, #28
 80018b4:	d405      	bmi.n	80018c2 <adc+0x6a>
 80018b6:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 80018b8:	7022      	strb	r2, [r4, #0]
}
 80018ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	e7e5      	b.n	800188e <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 80018c2:	f001 000f 	and.w	r0, r1, #15
 80018c6:	2809      	cmp	r0, #9
            a += 0x06;
 80018c8:	bf84      	itt	hi
 80018ca:	3106      	addhi	r1, #6
 80018cc:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80018ce:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80018d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80018d4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80018d8:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80018da:	4909      	ldr	r1, [pc, #36]	; (8001900 <adc+0xa8>)
        clearcarry();
 80018dc:	702b      	strb	r3, [r5, #0]
            setcarry();
 80018de:	bf84      	itt	hi
 80018e0:	f043 0301 	orrhi.w	r3, r3, #1
 80018e4:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80018e6:	680b      	ldr	r3, [r1, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e7e4      	b.n	80018b8 <adc+0x60>
 80018ee:	bf00      	nop
 80018f0:	200081d4 	.word	0x200081d4
 80018f4:	200081e8 	.word	0x200081e8
 80018f8:	200081cd 	.word	0x200081cd
 80018fc:	200081e4 	.word	0x200081e4
 8001900:	200081d0 	.word	0x200081d0

08001904 <op_and>:
void op_and() {
 8001904:	b508      	push	{r3, lr}
    value = getvalue();
 8001906:	f7ff fdf5 	bl	80014f4 <getvalue>
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <op_and+0x40>)
    result = (uint16_t)a & value;
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <op_and+0x44>)
    value = getvalue();
 800190e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8001910:	780b      	ldrb	r3, [r1, #0]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <op_and+0x48>)
 8001914:	4018      	ands	r0, r3
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <op_and+0x4c>)
 8001918:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 800191a:	7813      	ldrb	r3, [r2, #0]
 800191c:	b148      	cbz	r0, 8001932 <op_and+0x2e>
 800191e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001922:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 8001926:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8001928:	d107      	bne.n	800193a <op_and+0x36>
 800192a:	7813      	ldrb	r3, [r2, #0]
 800192c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001930:	e005      	b.n	800193e <op_and+0x3a>
    zerocalc(result);
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8001938:	e7f7      	b.n	800192a <op_and+0x26>
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8001940:	7008      	strb	r0, [r1, #0]
}
 8001942:	bd08      	pop	{r3, pc}
 8001944:	200081e8 	.word	0x200081e8
 8001948:	200081cd 	.word	0x200081cd
 800194c:	200081d4 	.word	0x200081d4
 8001950:	200081e4 	.word	0x200081e4

08001954 <asl>:
void asl() {
 8001954:	b508      	push	{r3, lr}
    value = getvalue();
 8001956:	f7ff fdcd 	bl	80014f4 <getvalue>
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <asl+0x48>)
 800195c:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <asl+0x4c>)
 800195e:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <asl+0x50>)
 8001962:	0040      	lsls	r0, r0, #1
 8001964:	b280      	uxth	r0, r0
 8001966:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8001968:	7813      	ldrb	r3, [r2, #0]
 800196a:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 800196e:	bf14      	ite	ne
 8001970:	f043 0301 	orrne.w	r3, r3, #1
 8001974:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001978:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 800197c:	bf14      	ite	ne
 800197e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8001982:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8001986:	0601      	lsls	r1, r0, #24
 8001988:	bf4c      	ite	mi
 800198a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800198e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001992:	7013      	strb	r3, [r2, #0]
}
 8001994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001998:	f7ff bf4c 	b.w	8001834 <putvalue>
 800199c:	200081e8 	.word	0x200081e8
 80019a0:	200081d4 	.word	0x200081d4
 80019a4:	200081e4 	.word	0x200081e4

080019a8 <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <bcc+0x30>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	07db      	lsls	r3, r3, #31
 80019ae:	d412      	bmi.n	80019d6 <bcc+0x2e>
        oldpc = pc;
 80019b0:	490a      	ldr	r1, [pc, #40]	; (80019dc <bcc+0x34>)
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <bcc+0x38>)
 80019b4:	880a      	ldrh	r2, [r1, #0]
 80019b6:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <bcc+0x3c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80019c2:	4053      	eors	r3, r2
 80019c4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80019c8:	d001      	beq.n	80019ce <bcc+0x26>
 80019ca:	f7ff bda7 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 80019ce:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <bcc+0x40>)
 80019d0:	6813      	ldr	r3, [r2, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	4770      	bx	lr
 80019d8:	200081d4 	.word	0x200081d4
 80019dc:	200081e0 	.word	0x200081e0
 80019e0:	200081dc 	.word	0x200081dc
 80019e4:	200081e2 	.word	0x200081e2
 80019e8:	200081d0 	.word	0x200081d0

080019ec <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <bcs+0x30>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	07db      	lsls	r3, r3, #31
 80019f2:	d512      	bpl.n	8001a1a <bcs+0x2e>
        oldpc = pc;
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <bcs+0x34>)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <bcs+0x38>)
 80019f8:	880a      	ldrh	r2, [r1, #0]
 80019fa:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <bcs+0x3c>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001a06:	4053      	eors	r3, r2
 8001a08:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001a0c:	d001      	beq.n	8001a12 <bcs+0x26>
 8001a0e:	f7ff bd85 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <bcs+0x40>)
 8001a14:	6813      	ldr	r3, [r2, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	4770      	bx	lr
 8001a1c:	200081d4 	.word	0x200081d4
 8001a20:	200081e0 	.word	0x200081e0
 8001a24:	200081dc 	.word	0x200081dc
 8001a28:	200081e2 	.word	0x200081e2
 8001a2c:	200081d0 	.word	0x200081d0

08001a30 <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <beq+0x30>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	079b      	lsls	r3, r3, #30
 8001a36:	d512      	bpl.n	8001a5e <beq+0x2e>
        oldpc = pc;
 8001a38:	490a      	ldr	r1, [pc, #40]	; (8001a64 <beq+0x34>)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <beq+0x38>)
 8001a3c:	880a      	ldrh	r2, [r1, #0]
 8001a3e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <beq+0x3c>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001a4a:	4053      	eors	r3, r2
 8001a4c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001a50:	d001      	beq.n	8001a56 <beq+0x26>
 8001a52:	f7ff bd63 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001a56:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <beq+0x40>)
 8001a58:	6813      	ldr	r3, [r2, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]
}
 8001a5e:	4770      	bx	lr
 8001a60:	200081d4 	.word	0x200081d4
 8001a64:	200081e0 	.word	0x200081e0
 8001a68:	200081dc 	.word	0x200081dc
 8001a6c:	200081e2 	.word	0x200081e2
 8001a70:	200081d0 	.word	0x200081d0

08001a74 <op_bit>:
void op_bit() {
 8001a74:	b508      	push	{r3, lr}
    value = getvalue();
 8001a76:	f7ff fd3d 	bl	80014f4 <getvalue>
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <op_bit+0x34>)
    result = (uint16_t)a & value;
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <op_bit+0x38>)
    value = getvalue();
 8001a7e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <op_bit+0x3c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4003      	ands	r3, r0
 8001a86:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <op_bit+0x40>)
 8001a8a:	b14b      	cbz	r3, 8001aa0 <op_bit+0x2c>
 8001a8c:	7813      	ldrb	r3, [r2, #0]
 8001a8e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8001a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a96:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8001a9a:	4303      	orrs	r3, r0
 8001a9c:	7013      	strb	r3, [r2, #0]
}
 8001a9e:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001aa0:	7813      	ldrb	r3, [r2, #0]
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	e7f4      	b.n	8001a92 <op_bit+0x1e>
 8001aa8:	200081e8 	.word	0x200081e8
 8001aac:	200081e4 	.word	0x200081e4
 8001ab0:	200081cd 	.word	0x200081cd
 8001ab4:	200081d4 	.word	0x200081d4

08001ab8 <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <bmi+0x34>)
 8001aba:	f993 3000 	ldrsb.w	r3, [r3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da12      	bge.n	8001ae8 <bmi+0x30>
        oldpc = pc;
 8001ac2:	490b      	ldr	r1, [pc, #44]	; (8001af0 <bmi+0x38>)
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <bmi+0x3c>)
 8001ac6:	880a      	ldrh	r2, [r1, #0]
 8001ac8:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <bmi+0x40>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001ad4:	4053      	eors	r3, r2
 8001ad6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001ada:	d001      	beq.n	8001ae0 <bmi+0x28>
 8001adc:	f7ff bd1e 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <bmi+0x44>)
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200081d4 	.word	0x200081d4
 8001af0:	200081e0 	.word	0x200081e0
 8001af4:	200081dc 	.word	0x200081dc
 8001af8:	200081e2 	.word	0x200081e2
 8001afc:	200081d0 	.word	0x200081d0

08001b00 <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <bne+0x30>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	079b      	lsls	r3, r3, #30
 8001b06:	d412      	bmi.n	8001b2e <bne+0x2e>
        oldpc = pc;
 8001b08:	490a      	ldr	r1, [pc, #40]	; (8001b34 <bne+0x34>)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <bne+0x38>)
 8001b0c:	880a      	ldrh	r2, [r1, #0]
 8001b0e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <bne+0x3c>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001b1a:	4053      	eors	r3, r2
 8001b1c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001b20:	d001      	beq.n	8001b26 <bne+0x26>
 8001b22:	f7ff bcfb 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <bne+0x40>)
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]
}
 8001b2e:	4770      	bx	lr
 8001b30:	200081d4 	.word	0x200081d4
 8001b34:	200081e0 	.word	0x200081e0
 8001b38:	200081dc 	.word	0x200081dc
 8001b3c:	200081e2 	.word	0x200081e2
 8001b40:	200081d0 	.word	0x200081d0

08001b44 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <bpl+0x34>)
 8001b46:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db12      	blt.n	8001b74 <bpl+0x30>
        oldpc = pc;
 8001b4e:	490b      	ldr	r1, [pc, #44]	; (8001b7c <bpl+0x38>)
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <bpl+0x3c>)
 8001b52:	880a      	ldrh	r2, [r1, #0]
 8001b54:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <bpl+0x40>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001b60:	4053      	eors	r3, r2
 8001b62:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001b66:	d001      	beq.n	8001b6c <bpl+0x28>
 8001b68:	f7ff bcd8 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <bpl+0x44>)
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200081d4 	.word	0x200081d4
 8001b7c:	200081e0 	.word	0x200081e0
 8001b80:	200081dc 	.word	0x200081dc
 8001b84:	200081e2 	.word	0x200081e2
 8001b88:	200081d0 	.word	0x200081d0

08001b8c <brk>:
void brk() {
 8001b8c:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8001b8e:	4d0f      	ldr	r5, [pc, #60]	; (8001bcc <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001b90:	4c0f      	ldr	r4, [pc, #60]	; (8001bd0 <brk+0x44>)
    pc++;
 8001b92:	8828      	ldrh	r0, [r5, #0]
 8001b94:	3001      	adds	r0, #1
 8001b96:	b280      	uxth	r0, r0
 8001b98:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8001b9a:	f7ff fccf 	bl	800153c <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8001b9e:	7820      	ldrb	r0, [r4, #0]
 8001ba0:	f040 0010 	orr.w	r0, r0, #16
 8001ba4:	f7ff fce2 	bl	800156c <push8>
    setinterrupt(); // set interrupt flag
 8001ba8:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001baa:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8001bb4:	f7ff fb4e 	bl	8001254 <read6502>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bbe:	f7ff fb49 	bl	8001254 <read6502>
 8001bc2:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8001bc6:	802c      	strh	r4, [r5, #0]
}
 8001bc8:	bd38      	pop	{r3, r4, r5, pc}
 8001bca:	bf00      	nop
 8001bcc:	200081e0 	.word	0x200081e0
 8001bd0:	200081d4 	.word	0x200081d4

08001bd4 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <bvc+0x30>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	065b      	lsls	r3, r3, #25
 8001bda:	d412      	bmi.n	8001c02 <bvc+0x2e>
        oldpc = pc;
 8001bdc:	490a      	ldr	r1, [pc, #40]	; (8001c08 <bvc+0x34>)
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <bvc+0x38>)
 8001be0:	880a      	ldrh	r2, [r1, #0]
 8001be2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <bvc+0x3c>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001bee:	4053      	eors	r3, r2
 8001bf0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001bf4:	d001      	beq.n	8001bfa <bvc+0x26>
 8001bf6:	f7ff bc91 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001bfa:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <bvc+0x40>)
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	6013      	str	r3, [r2, #0]
}
 8001c02:	4770      	bx	lr
 8001c04:	200081d4 	.word	0x200081d4
 8001c08:	200081e0 	.word	0x200081e0
 8001c0c:	200081dc 	.word	0x200081dc
 8001c10:	200081e2 	.word	0x200081e2
 8001c14:	200081d0 	.word	0x200081d0

08001c18 <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <bvs+0x30>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	065b      	lsls	r3, r3, #25
 8001c1e:	d512      	bpl.n	8001c46 <bvs+0x2e>
        oldpc = pc;
 8001c20:	490a      	ldr	r1, [pc, #40]	; (8001c4c <bvs+0x34>)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <bvs+0x38>)
 8001c24:	880a      	ldrh	r2, [r1, #0]
 8001c26:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <bvs+0x3c>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8001c32:	4053      	eors	r3, r2
 8001c34:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001c38:	d001      	beq.n	8001c3e <bvs+0x26>
 8001c3a:	f7ff bc6f 	b.w	800151c <bcc.part.0>
            else clockticks6502++;
 8001c3e:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <bvs+0x40>)
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	4770      	bx	lr
 8001c48:	200081d4 	.word	0x200081d4
 8001c4c:	200081e0 	.word	0x200081e0
 8001c50:	200081dc 	.word	0x200081dc
 8001c54:	200081e2 	.word	0x200081e2
 8001c58:	200081d0 	.word	0x200081d0

08001c5c <clc>:
    clearcarry();
 8001c5c:	4a02      	ldr	r2, [pc, #8]	; (8001c68 <clc+0xc>)
 8001c5e:	7813      	ldrb	r3, [r2, #0]
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	7013      	strb	r3, [r2, #0]
}
 8001c66:	4770      	bx	lr
 8001c68:	200081d4 	.word	0x200081d4

08001c6c <cld>:
    cleardecimal();
 8001c6c:	4a02      	ldr	r2, [pc, #8]	; (8001c78 <cld+0xc>)
 8001c6e:	7813      	ldrb	r3, [r2, #0]
 8001c70:	f023 0308 	bic.w	r3, r3, #8
 8001c74:	7013      	strb	r3, [r2, #0]
}
 8001c76:	4770      	bx	lr
 8001c78:	200081d4 	.word	0x200081d4

08001c7c <cli>:
    clearinterrupt();
 8001c7c:	4a02      	ldr	r2, [pc, #8]	; (8001c88 <cli+0xc>)
 8001c7e:	7813      	ldrb	r3, [r2, #0]
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	7013      	strb	r3, [r2, #0]
}
 8001c86:	4770      	bx	lr
 8001c88:	200081d4 	.word	0x200081d4

08001c8c <clv>:
    clearoverflow();
 8001c8c:	4a02      	ldr	r2, [pc, #8]	; (8001c98 <clv+0xc>)
 8001c8e:	7813      	ldrb	r3, [r2, #0]
 8001c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c94:	7013      	strb	r3, [r2, #0]
}
 8001c96:	4770      	bx	lr
 8001c98:	200081d4 	.word	0x200081d4

08001c9c <cmp>:
void cmp() {
 8001c9c:	b508      	push	{r3, lr}
    value = getvalue();
 8001c9e:	f7ff fc29 	bl	80014f4 <getvalue>
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <cmp+0x4c>)
    result = (uint16_t)a - value;
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <cmp+0x50>)
    value = getvalue();
 8001ca6:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <cmp+0x54>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	1a19      	subs	r1, r3, r0
 8001cae:	b289      	uxth	r1, r1
 8001cb0:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8001cb2:	b2c0      	uxtb	r0, r0
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <cmp+0x58>)
 8001cb6:	4283      	cmp	r3, r0
 8001cb8:	7813      	ldrb	r3, [r2, #0]
 8001cba:	d307      	bcc.n	8001ccc <cmp+0x30>
 8001cbc:	f043 0001 	orr.w	r0, r3, #1
 8001cc0:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001cc2:	d007      	beq.n	8001cd4 <cmp+0x38>
        else clearzero();
 8001cc4:	7813      	ldrb	r3, [r2, #0]
 8001cc6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001cca:	e005      	b.n	8001cd8 <cmp+0x3c>
        else clearcarry();
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8001cd2:	e7f7      	b.n	8001cc4 <cmp+0x28>
 8001cd4:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001cd8:	0609      	lsls	r1, r1, #24
 8001cda:	bf4c      	ite	mi
 8001cdc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001ce0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001ce4:	7013      	strb	r3, [r2, #0]
}
 8001ce6:	bd08      	pop	{r3, pc}
 8001ce8:	200081e8 	.word	0x200081e8
 8001cec:	200081e4 	.word	0x200081e4
 8001cf0:	200081cd 	.word	0x200081cd
 8001cf4:	200081d4 	.word	0x200081d4

08001cf8 <cpx>:
void cpx() {
 8001cf8:	b508      	push	{r3, lr}
    value = getvalue();
 8001cfa:	f7ff fbfb 	bl	80014f4 <getvalue>
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <cpx+0x4c>)
    result = (uint16_t)x - value;
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <cpx+0x50>)
    value = getvalue();
 8001d02:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <cpx+0x54>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	1a19      	subs	r1, r3, r0
 8001d0a:	b289      	uxth	r1, r1
 8001d0c:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8001d0e:	b2c0      	uxtb	r0, r0
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <cpx+0x58>)
 8001d12:	4283      	cmp	r3, r0
 8001d14:	7813      	ldrb	r3, [r2, #0]
 8001d16:	d307      	bcc.n	8001d28 <cpx+0x30>
 8001d18:	f043 0001 	orr.w	r0, r3, #1
 8001d1c:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001d1e:	d007      	beq.n	8001d30 <cpx+0x38>
        else clearzero();
 8001d20:	7813      	ldrb	r3, [r2, #0]
 8001d22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001d26:	e005      	b.n	8001d34 <cpx+0x3c>
        else clearcarry();
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8001d2e:	e7f7      	b.n	8001d20 <cpx+0x28>
 8001d30:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001d34:	0609      	lsls	r1, r1, #24
 8001d36:	bf4c      	ite	mi
 8001d38:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001d3c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001d40:	7013      	strb	r3, [r2, #0]
}
 8001d42:	bd08      	pop	{r3, pc}
 8001d44:	200081e8 	.word	0x200081e8
 8001d48:	200081e4 	.word	0x200081e4
 8001d4c:	200081ea 	.word	0x200081ea
 8001d50:	200081d4 	.word	0x200081d4

08001d54 <cpy>:
void cpy() {
 8001d54:	b508      	push	{r3, lr}
    value = getvalue();
 8001d56:	f7ff fbcd 	bl	80014f4 <getvalue>
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <cpy+0x4c>)
    result = (uint16_t)y - value;
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <cpy+0x50>)
    value = getvalue();
 8001d5e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <cpy+0x54>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	1a19      	subs	r1, r3, r0
 8001d66:	b289      	uxth	r1, r1
 8001d68:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 8001d6a:	b2c0      	uxtb	r0, r0
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <cpy+0x58>)
 8001d6e:	4283      	cmp	r3, r0
 8001d70:	7813      	ldrb	r3, [r2, #0]
 8001d72:	d307      	bcc.n	8001d84 <cpy+0x30>
 8001d74:	f043 0001 	orr.w	r0, r3, #1
 8001d78:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8001d7a:	d007      	beq.n	8001d8c <cpy+0x38>
        else clearzero();
 8001d7c:	7813      	ldrb	r3, [r2, #0]
 8001d7e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001d82:	e005      	b.n	8001d90 <cpy+0x3c>
        else clearcarry();
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8001d8a:	e7f7      	b.n	8001d7c <cpy+0x28>
 8001d8c:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8001d90:	0609      	lsls	r1, r1, #24
 8001d92:	bf4c      	ite	mi
 8001d94:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001d98:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001d9c:	7013      	strb	r3, [r2, #0]
}
 8001d9e:	bd08      	pop	{r3, pc}
 8001da0:	200081e8 	.word	0x200081e8
 8001da4:	200081e4 	.word	0x200081e4
 8001da8:	200081eb 	.word	0x200081eb
 8001dac:	200081d4 	.word	0x200081d4

08001db0 <dec>:
void dec() {
 8001db0:	b508      	push	{r3, lr}
    value = getvalue();
 8001db2:	f7ff fb9f 	bl	80014f4 <getvalue>
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <dec+0x3c>)
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <dec+0x40>)
 8001dba:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <dec+0x44>)
 8001dbe:	3801      	subs	r0, #1
 8001dc0:	b280      	uxth	r0, r0
 8001dc2:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8001dc4:	b2c3      	uxtb	r3, r0
 8001dc6:	b16b      	cbz	r3, 8001de4 <dec+0x34>
 8001dc8:	7813      	ldrb	r3, [r2, #0]
 8001dca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001dce:	0601      	lsls	r1, r0, #24
 8001dd0:	bf4c      	ite	mi
 8001dd2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001dd6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001dda:	7013      	strb	r3, [r2, #0]
}
 8001ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001de0:	f7ff bd28 	b.w	8001834 <putvalue>
    zerocalc(result);
 8001de4:	7813      	ldrb	r3, [r2, #0]
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	e7f0      	b.n	8001dce <dec+0x1e>
 8001dec:	200081e8 	.word	0x200081e8
 8001df0:	200081d4 	.word	0x200081d4
 8001df4:	200081e4 	.word	0x200081e4

08001df8 <dex>:
    x--;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <dex+0x2c>)
    zerocalc(x);
 8001dfa:	490b      	ldr	r1, [pc, #44]	; (8001e28 <dex+0x30>)
    x--;
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	3a01      	subs	r2, #1
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001e04:	780b      	ldrb	r3, [r1, #0]
 8001e06:	b132      	cbz	r2, 8001e16 <dex+0x1e>
 8001e08:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001e0c:	0612      	lsls	r2, r2, #24
 8001e0e:	700b      	strb	r3, [r1, #0]
 8001e10:	d504      	bpl.n	8001e1c <dex+0x24>
 8001e12:	f7ff bb8b 	b.w	800152c <dex.part.0>
    zerocalc(x);
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	e7f7      	b.n	8001e0c <dex+0x14>
    signcalc(x);
 8001e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e20:	700b      	strb	r3, [r1, #0]
}
 8001e22:	4770      	bx	lr
 8001e24:	200081ea 	.word	0x200081ea
 8001e28:	200081d4 	.word	0x200081d4

08001e2c <dey>:

void dey() {
    y--;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <dey+0x2c>)
   
    zerocalc(y);
 8001e2e:	490b      	ldr	r1, [pc, #44]	; (8001e5c <dey+0x30>)
    y--;
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	3a01      	subs	r2, #1
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001e38:	780b      	ldrb	r3, [r1, #0]
 8001e3a:	b132      	cbz	r2, 8001e4a <dey+0x1e>
 8001e3c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001e40:	0612      	lsls	r2, r2, #24
 8001e42:	700b      	strb	r3, [r1, #0]
 8001e44:	d504      	bpl.n	8001e50 <dey+0x24>
 8001e46:	f7ff bb71 	b.w	800152c <dex.part.0>
    zerocalc(y);
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	e7f7      	b.n	8001e40 <dey+0x14>
    signcalc(y);
 8001e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e54:	700b      	strb	r3, [r1, #0]
}
 8001e56:	4770      	bx	lr
 8001e58:	200081eb 	.word	0x200081eb
 8001e5c:	200081d4 	.word	0x200081d4

08001e60 <eor>:

void eor() {
 8001e60:	b508      	push	{r3, lr}
    value = getvalue();
 8001e62:	f7ff fb47 	bl	80014f4 <getvalue>
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <eor+0x3c>)
    result = (uint16_t)a ^ value;
 8001e68:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <eor+0x40>)
    value = getvalue();
 8001e6a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8001e6c:	780b      	ldrb	r3, [r1, #0]
 8001e6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <eor+0x44>)
 8001e70:	4058      	eors	r0, r3
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <eor+0x48>)
 8001e74:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001e76:	b2c3      	uxtb	r3, r0
 8001e78:	b163      	cbz	r3, 8001e94 <eor+0x34>
 8001e7a:	7813      	ldrb	r3, [r2, #0]
 8001e7c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001e80:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e84:	bf14      	ite	ne
 8001e86:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8001e8a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8001e8e:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001e90:	7008      	strb	r0, [r1, #0]
}
 8001e92:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001e94:	7813      	ldrb	r3, [r2, #0]
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	e7f1      	b.n	8001e80 <eor+0x20>
 8001e9c:	200081e8 	.word	0x200081e8
 8001ea0:	200081cd 	.word	0x200081cd
 8001ea4:	200081d4 	.word	0x200081d4
 8001ea8:	200081e4 	.word	0x200081e4

08001eac <inc>:

void inc() {
 8001eac:	b508      	push	{r3, lr}
    value = getvalue();
 8001eae:	f7ff fb21 	bl	80014f4 <getvalue>
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <inc+0x3c>)
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <inc+0x40>)
 8001eb6:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <inc+0x44>)
 8001eba:	3001      	adds	r0, #1
 8001ebc:	b280      	uxth	r0, r0
 8001ebe:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001ec0:	b2c3      	uxtb	r3, r0
 8001ec2:	b16b      	cbz	r3, 8001ee0 <inc+0x34>
 8001ec4:	7813      	ldrb	r3, [r2, #0]
 8001ec6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001eca:	0601      	lsls	r1, r0, #24
 8001ecc:	bf4c      	ite	mi
 8001ece:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001ed2:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001ed6:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001edc:	f7ff bcaa 	b.w	8001834 <putvalue>
    zerocalc(result);
 8001ee0:	7813      	ldrb	r3, [r2, #0]
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	e7f0      	b.n	8001eca <inc+0x1e>
 8001ee8:	200081e8 	.word	0x200081e8
 8001eec:	200081d4 	.word	0x200081d4
 8001ef0:	200081e4 	.word	0x200081e4

08001ef4 <inx>:

void inx() {
    x++;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <inx+0x2c>)
   
    zerocalc(x);
 8001ef6:	490b      	ldr	r1, [pc, #44]	; (8001f24 <inx+0x30>)
    x++;
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	3201      	adds	r2, #1
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8001f00:	780b      	ldrb	r3, [r1, #0]
 8001f02:	b132      	cbz	r2, 8001f12 <inx+0x1e>
 8001f04:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001f08:	0612      	lsls	r2, r2, #24
 8001f0a:	700b      	strb	r3, [r1, #0]
 8001f0c:	d504      	bpl.n	8001f18 <inx+0x24>
 8001f0e:	f7ff bb0d 	b.w	800152c <dex.part.0>
    zerocalc(x);
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	e7f7      	b.n	8001f08 <inx+0x14>
    signcalc(x);
 8001f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1c:	700b      	strb	r3, [r1, #0]
}
 8001f1e:	4770      	bx	lr
 8001f20:	200081ea 	.word	0x200081ea
 8001f24:	200081d4 	.word	0x200081d4

08001f28 <iny>:

void iny() {
    y++;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <iny+0x2c>)
   
    zerocalc(y);
 8001f2a:	490b      	ldr	r1, [pc, #44]	; (8001f58 <iny+0x30>)
    y++;
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	3201      	adds	r2, #1
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001f34:	780b      	ldrb	r3, [r1, #0]
 8001f36:	b132      	cbz	r2, 8001f46 <iny+0x1e>
 8001f38:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001f3c:	0612      	lsls	r2, r2, #24
 8001f3e:	700b      	strb	r3, [r1, #0]
 8001f40:	d504      	bpl.n	8001f4c <iny+0x24>
 8001f42:	f7ff baf3 	b.w	800152c <dex.part.0>
    zerocalc(y);
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	e7f7      	b.n	8001f3c <iny+0x14>
    signcalc(y);
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f50:	700b      	strb	r3, [r1, #0]
}
 8001f52:	4770      	bx	lr
 8001f54:	200081eb 	.word	0x200081eb
 8001f58:	200081d4 	.word	0x200081d4

08001f5c <jmp>:

void jmp() {
    pc = ea;
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <jmp+0xc>)
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <jmp+0x10>)
 8001f62:	801a      	strh	r2, [r3, #0]
}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200081d6 	.word	0x200081d6
 8001f6c:	200081e0 	.word	0x200081e0

08001f70 <jsr>:

void jsr() {
 8001f70:	b510      	push	{r4, lr}
    push16(pc - 1);
 8001f72:	4c05      	ldr	r4, [pc, #20]	; (8001f88 <jsr+0x18>)
 8001f74:	8820      	ldrh	r0, [r4, #0]
 8001f76:	3801      	subs	r0, #1
 8001f78:	b280      	uxth	r0, r0
 8001f7a:	f7ff fadf 	bl	800153c <push16>
    pc = ea;
 8001f7e:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <jsr+0x1c>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	8023      	strh	r3, [r4, #0]
}
 8001f84:	bd10      	pop	{r4, pc}
 8001f86:	bf00      	nop
 8001f88:	200081e0 	.word	0x200081e0
 8001f8c:	200081d6 	.word	0x200081d6

08001f90 <lda>:

void lda() {
 8001f90:	b508      	push	{r3, lr}
    value = getvalue();
 8001f92:	f7ff faaf 	bl	80014f4 <getvalue>
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <lda+0x3c>)
    value = getvalue();
 8001f9a:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001f9c:	b2c3      	uxtb	r3, r0
 8001f9e:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <lda+0x40>)
 8001fa2:	b14b      	cbz	r3, 8001fb8 <lda+0x28>
 8001fa4:	7813      	ldrb	r3, [r2, #0]
 8001fa6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001faa:	0601      	lsls	r1, r0, #24
 8001fac:	7013      	strb	r3, [r2, #0]
 8001fae:	d507      	bpl.n	8001fc0 <lda+0x30>
}
 8001fb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001fb4:	f7ff baba 	b.w	800152c <dex.part.0>
    zerocalc(a);
 8001fb8:	7813      	ldrb	r3, [r2, #0]
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	e7f4      	b.n	8001faa <lda+0x1a>
    signcalc(a);
 8001fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc4:	7013      	strb	r3, [r2, #0]
}
 8001fc6:	bd08      	pop	{r3, pc}
 8001fc8:	200081e8 	.word	0x200081e8
 8001fcc:	200081cd 	.word	0x200081cd
 8001fd0:	200081d4 	.word	0x200081d4

08001fd4 <ldx>:

void ldx() {
 8001fd4:	b508      	push	{r3, lr}
    value = getvalue();
 8001fd6:	f7ff fa8d 	bl	80014f4 <getvalue>
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <ldx+0x3c>)
    value = getvalue();
 8001fde:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 8001fe0:	b2c3      	uxtb	r3, r0
 8001fe2:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <ldx+0x40>)
 8001fe6:	b14b      	cbz	r3, 8001ffc <ldx+0x28>
 8001fe8:	7813      	ldrb	r3, [r2, #0]
 8001fea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001fee:	0601      	lsls	r1, r0, #24
 8001ff0:	7013      	strb	r3, [r2, #0]
 8001ff2:	d507      	bpl.n	8002004 <ldx+0x30>
}
 8001ff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ff8:	f7ff ba98 	b.w	800152c <dex.part.0>
    zerocalc(x);
 8001ffc:	7813      	ldrb	r3, [r2, #0]
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	e7f4      	b.n	8001fee <ldx+0x1a>
    signcalc(x);
 8002004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002008:	7013      	strb	r3, [r2, #0]
}
 800200a:	bd08      	pop	{r3, pc}
 800200c:	200081e8 	.word	0x200081e8
 8002010:	200081ea 	.word	0x200081ea
 8002014:	200081d4 	.word	0x200081d4

08002018 <ldy>:

void ldy() {
 8002018:	b508      	push	{r3, lr}
    value = getvalue();
 800201a:	f7ff fa6b 	bl	80014f4 <getvalue>
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <ldy+0x3c>)
    value = getvalue();
 8002022:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 8002024:	b2c3      	uxtb	r3, r0
 8002026:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <ldy+0x40>)
 800202a:	b14b      	cbz	r3, 8002040 <ldy+0x28>
 800202c:	7813      	ldrb	r3, [r2, #0]
 800202e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8002032:	0601      	lsls	r1, r0, #24
 8002034:	7013      	strb	r3, [r2, #0]
 8002036:	d507      	bpl.n	8002048 <ldy+0x30>
}
 8002038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800203c:	f7ff ba76 	b.w	800152c <dex.part.0>
    zerocalc(y);
 8002040:	7813      	ldrb	r3, [r2, #0]
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	e7f4      	b.n	8002032 <ldy+0x1a>
    signcalc(y);
 8002048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204c:	7013      	strb	r3, [r2, #0]
}
 800204e:	bd08      	pop	{r3, pc}
 8002050:	200081e8 	.word	0x200081e8
 8002054:	200081eb 	.word	0x200081eb
 8002058:	200081d4 	.word	0x200081d4

0800205c <lsr>:

void lsr() {
 800205c:	b508      	push	{r3, lr}
    value = getvalue();
 800205e:	f7ff fa49 	bl	80014f4 <getvalue>
 8002062:	4603      	mov	r3, r0
 8002064:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 8002066:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 800206a:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 800206c:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <lsr+0x50>)
 800206e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002072:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 8002076:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 8002078:	7813      	ldrb	r3, [r2, #0]
 800207a:	bf14      	ite	ne
 800207c:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 8002080:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002084:	b161      	cbz	r1, 80020a0 <lsr+0x44>
 8002086:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800208a:	0601      	lsls	r1, r0, #24
 800208c:	bf4c      	ite	mi
 800208e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8002092:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8002096:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8002098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 800209c:	f7ff bbca 	b.w	8001834 <putvalue>
    zerocalc(result);
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	e7f1      	b.n	800208a <lsr+0x2e>
 80020a6:	bf00      	nop
 80020a8:	200081e8 	.word	0x200081e8
 80020ac:	200081e4 	.word	0x200081e4
 80020b0:	200081d4 	.word	0x200081d4

080020b4 <ora>:

void nop() {
}

void ora() {
 80020b4:	b508      	push	{r3, lr}
    value = getvalue();
 80020b6:	f7ff fa1d 	bl	80014f4 <getvalue>
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <ora+0x3c>)
    result = (uint16_t)a | value;
 80020bc:	490d      	ldr	r1, [pc, #52]	; (80020f4 <ora+0x40>)
    value = getvalue();
 80020be:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 80020c0:	780b      	ldrb	r3, [r1, #0]
 80020c2:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <ora+0x44>)
 80020c4:	4318      	orrs	r0, r3
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <ora+0x48>)
 80020c8:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 80020ca:	b2c3      	uxtb	r3, r0
 80020cc:	b163      	cbz	r3, 80020e8 <ora+0x34>
 80020ce:	7813      	ldrb	r3, [r2, #0]
 80020d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80020d4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80020d8:	bf14      	ite	ne
 80020da:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 80020de:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 80020e2:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 80020e4:	7008      	strb	r0, [r1, #0]
}
 80020e6:	bd08      	pop	{r3, pc}
    zerocalc(result);
 80020e8:	7813      	ldrb	r3, [r2, #0]
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	e7f1      	b.n	80020d4 <ora+0x20>
 80020f0:	200081e8 	.word	0x200081e8
 80020f4:	200081cd 	.word	0x200081cd
 80020f8:	200081d4 	.word	0x200081d4
 80020fc:	200081e4 	.word	0x200081e4

08002100 <pha>:

void pha() {
    push8(a);
 8002100:	4b01      	ldr	r3, [pc, #4]	; (8002108 <pha+0x8>)
 8002102:	7818      	ldrb	r0, [r3, #0]
 8002104:	f7ff ba32 	b.w	800156c <push8>
 8002108:	200081cd 	.word	0x200081cd

0800210c <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <php+0xc>)
 800210e:	7818      	ldrb	r0, [r3, #0]
 8002110:	f040 0010 	orr.w	r0, r0, #16
 8002114:	f7ff ba2a 	b.w	800156c <push8>
 8002118:	200081d4 	.word	0x200081d4

0800211c <pla>:
}

void pla() {
 800211c:	b508      	push	{r3, lr}
    a = pull8();
 800211e:	f7ff fa4b 	bl	80015b8 <pull8>
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <pla+0x30>)
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <pla+0x34>)
 8002126:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 8002128:	7813      	ldrb	r3, [r2, #0]
 800212a:	b140      	cbz	r0, 800213e <pla+0x22>
 800212c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8002130:	0601      	lsls	r1, r0, #24
 8002132:	7013      	strb	r3, [r2, #0]
 8002134:	d506      	bpl.n	8002144 <pla+0x28>
}
 8002136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800213a:	f7ff b9f7 	b.w	800152c <dex.part.0>
    zerocalc(a);
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	e7f5      	b.n	8002130 <pla+0x14>
    signcalc(a);
 8002144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002148:	7013      	strb	r3, [r2, #0]
}
 800214a:	bd08      	pop	{r3, pc}
 800214c:	200081cd 	.word	0x200081cd
 8002150:	200081d4 	.word	0x200081d4

08002154 <plp>:

void plp() {
 8002154:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 8002156:	f7ff fa2f 	bl	80015b8 <pull8>
 800215a:	4b02      	ldr	r3, [pc, #8]	; (8002164 <plp+0x10>)
 800215c:	f040 0020 	orr.w	r0, r0, #32
 8002160:	7018      	strb	r0, [r3, #0]
}
 8002162:	bd08      	pop	{r3, pc}
 8002164:	200081d4 	.word	0x200081d4

08002168 <rol>:

void rol() {
 8002168:	b508      	push	{r3, lr}
    value = getvalue();
 800216a:	f7ff f9c3 	bl	80014f4 <getvalue>
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002170:	4912      	ldr	r1, [pc, #72]	; (80021bc <rol+0x54>)
    value = getvalue();
 8002172:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002174:	780b      	ldrb	r3, [r1, #0]
 8002176:	f003 0201 	and.w	r2, r3, #1
 800217a:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <rol+0x58>)
 8002180:	b280      	uxth	r0, r0
   
    carrycalc(result);
 8002182:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8002186:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 8002188:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 800218a:	bf14      	ite	ne
 800218c:	f043 0301 	orrne.w	r3, r3, #1
 8002190:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002194:	b162      	cbz	r2, 80021b0 <rol+0x48>
 8002196:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800219a:	0602      	lsls	r2, r0, #24
 800219c:	bf4c      	ite	mi
 800219e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80021a2:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80021a6:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 80021a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80021ac:	f7ff bb42 	b.w	8001834 <putvalue>
    zerocalc(result);
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	e7f1      	b.n	800219a <rol+0x32>
 80021b6:	bf00      	nop
 80021b8:	200081e8 	.word	0x200081e8
 80021bc:	200081d4 	.word	0x200081d4
 80021c0:	200081e4 	.word	0x200081e4

080021c4 <ror>:

void ror() {
 80021c4:	b510      	push	{r4, lr}
    value = getvalue();
 80021c6:	f7ff f995 	bl	80014f4 <getvalue>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80021ce:	4c12      	ldr	r4, [pc, #72]	; (8002218 <ror+0x54>)
    value = getvalue();
 80021d0:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80021d2:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 80021d4:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80021d6:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <ror+0x58>)
    if (value & 1) setcarry();
 80021e2:	bf48      	it	mi
 80021e4:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80021e8:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 80021ea:	b2c2      	uxtb	r2, r0
        else clearcarry();
 80021ec:	bf58      	it	pl
 80021ee:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80021f2:	b162      	cbz	r2, 800220e <ror+0x4a>
 80021f4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80021f8:	0602      	lsls	r2, r0, #24
 80021fa:	bf4c      	ite	mi
 80021fc:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8002200:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8002204:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 8002206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 800220a:	f7ff bb13 	b.w	8001834 <putvalue>
    zerocalc(result);
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	e7f1      	b.n	80021f8 <ror+0x34>
 8002214:	200081e8 	.word	0x200081e8
 8002218:	200081d4 	.word	0x200081d4
 800221c:	200081e4 	.word	0x200081e4

08002220 <rti>:

void rti() {
 8002220:	b508      	push	{r3, lr}
    cpustatus = pull8();
 8002222:	f7ff f9c9 	bl	80015b8 <pull8>
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <rti+0x18>)
 8002228:	7018      	strb	r0, [r3, #0]
    value = pull16();
 800222a:	f7ff f9ab 	bl	8001584 <pull16>
 800222e:	4b03      	ldr	r3, [pc, #12]	; (800223c <rti+0x1c>)
 8002230:	8018      	strh	r0, [r3, #0]
    pc = value;
 8002232:	4b03      	ldr	r3, [pc, #12]	; (8002240 <rti+0x20>)
 8002234:	8018      	strh	r0, [r3, #0]
}
 8002236:	bd08      	pop	{r3, pc}
 8002238:	200081d4 	.word	0x200081d4
 800223c:	200081e8 	.word	0x200081e8
 8002240:	200081e0 	.word	0x200081e0

08002244 <rts>:

void rts() {
 8002244:	b508      	push	{r3, lr}
    value = pull16();
 8002246:	f7ff f99d 	bl	8001584 <pull16>
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <rts+0x14>)
 800224c:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <rts+0x18>)
 8002250:	3001      	adds	r0, #1
 8002252:	8018      	strh	r0, [r3, #0]
}
 8002254:	bd08      	pop	{r3, pc}
 8002256:	bf00      	nop
 8002258:	200081e8 	.word	0x200081e8
 800225c:	200081e0 	.word	0x200081e0

08002260 <sbc>:

void sbc() {
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 8002262:	f7ff f947 	bl	80014f4 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002266:	4d27      	ldr	r5, [pc, #156]	; (8002304 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <sbc+0xa8>)
 800226a:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 800226e:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002270:	4c26      	ldr	r4, [pc, #152]	; (800230c <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 8002272:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002274:	782b      	ldrb	r3, [r5, #0]
 8002276:	7821      	ldrb	r1, [r4, #0]
 8002278:	f003 0201 	and.w	r2, r3, #1
 800227c:	440a      	add	r2, r1
 800227e:	4e24      	ldr	r6, [pc, #144]	; (8002310 <sbc+0xb0>)
 8002280:	4402      	add	r2, r0
 8002282:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8002284:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8002288:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 800228a:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 800228c:	bf14      	ite	ne
 800228e:	f043 0301 	orrne.w	r3, r3, #1
 8002292:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8002296:	b1c6      	cbz	r6, 80022ca <sbc+0x6a>
 8002298:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 800229c:	ea81 0602 	eor.w	r6, r1, r2
 80022a0:	ea80 0702 	eor.w	r7, r0, r2
 80022a4:	4630      	mov	r0, r6
 80022a6:	4038      	ands	r0, r7
 80022a8:	0607      	lsls	r7, r0, #24
 80022aa:	bf4c      	ite	mi
 80022ac:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80022b0:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 80022b4:	0616      	lsls	r6, r2, #24
 80022b6:	bf4c      	ite	mi
 80022b8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80022bc:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 80022c0:	0718      	lsls	r0, r3, #28
 80022c2:	d405      	bmi.n	80022d0 <sbc+0x70>
 80022c4:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 80022c6:	7022      	strb	r2, [r4, #0]
}
 80022c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	e7e5      	b.n	800229c <sbc+0x3c>
        a -= 0x66;
 80022d0:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 80022d4:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 80022d6:	f000 000f 	and.w	r0, r0, #15
 80022da:	2809      	cmp	r0, #9
            a += 0x06;
 80022dc:	bf8a      	itet	hi
 80022de:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 80022e0:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 80022e2:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80022e4:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80022e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80022ea:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80022ee:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80022f0:	4908      	ldr	r1, [pc, #32]	; (8002314 <sbc+0xb4>)
        clearcarry();
 80022f2:	702b      	strb	r3, [r5, #0]
            setcarry();
 80022f4:	bf84      	itt	hi
 80022f6:	f043 0301 	orrhi.w	r3, r3, #1
 80022fa:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80022fc:	680b      	ldr	r3, [r1, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	600b      	str	r3, [r1, #0]
 8002302:	e7e0      	b.n	80022c6 <sbc+0x66>
 8002304:	200081d4 	.word	0x200081d4
 8002308:	200081e8 	.word	0x200081e8
 800230c:	200081cd 	.word	0x200081cd
 8002310:	200081e4 	.word	0x200081e4
 8002314:	200081d0 	.word	0x200081d0

08002318 <sec>:

void sec() {
    setcarry();
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <sec+0xc>)
 800231a:	7813      	ldrb	r3, [r2, #0]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	7013      	strb	r3, [r2, #0]
}
 8002322:	4770      	bx	lr
 8002324:	200081d4 	.word	0x200081d4

08002328 <sed>:

void sed() {
    setdecimal();
 8002328:	4a02      	ldr	r2, [pc, #8]	; (8002334 <sed+0xc>)
 800232a:	7813      	ldrb	r3, [r2, #0]
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	7013      	strb	r3, [r2, #0]
}
 8002332:	4770      	bx	lr
 8002334:	200081d4 	.word	0x200081d4

08002338 <sei>:

void sei() {
    setinterrupt();
 8002338:	4a02      	ldr	r2, [pc, #8]	; (8002344 <sei+0xc>)
 800233a:	7813      	ldrb	r3, [r2, #0]
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	7013      	strb	r3, [r2, #0]
}
 8002342:	4770      	bx	lr
 8002344:	200081d4 	.word	0x200081d4

08002348 <sta>:

void sta() {
    putvalue(a);
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <sta+0x8>)
 800234a:	7818      	ldrb	r0, [r3, #0]
 800234c:	f7ff ba72 	b.w	8001834 <putvalue>
 8002350:	200081cd 	.word	0x200081cd

08002354 <stx>:
}

void stx() {
    putvalue(x);
 8002354:	4b01      	ldr	r3, [pc, #4]	; (800235c <stx+0x8>)
 8002356:	7818      	ldrb	r0, [r3, #0]
 8002358:	f7ff ba6c 	b.w	8001834 <putvalue>
 800235c:	200081ea 	.word	0x200081ea

08002360 <sty>:
}

void sty() {
    putvalue(y);
 8002360:	4b01      	ldr	r3, [pc, #4]	; (8002368 <sty+0x8>)
 8002362:	7818      	ldrb	r0, [r3, #0]
 8002364:	f7ff ba66 	b.w	8001834 <putvalue>
 8002368:	200081eb 	.word	0x200081eb

0800236c <tax>:
}

void tax() {
    x = a;
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <tax+0x2c>)
   
    zerocalc(x);
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <tax+0x30>)
    x = a;
 8002370:	7819      	ldrb	r1, [r3, #0]
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <tax+0x34>)
 8002374:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 8002376:	7813      	ldrb	r3, [r2, #0]
 8002378:	b131      	cbz	r1, 8002388 <tax+0x1c>
 800237a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800237e:	0609      	lsls	r1, r1, #24
 8002380:	7013      	strb	r3, [r2, #0]
 8002382:	d504      	bpl.n	800238e <tax+0x22>
 8002384:	f7ff b8d2 	b.w	800152c <dex.part.0>
    zerocalc(x);
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	e7f7      	b.n	800237e <tax+0x12>
    signcalc(x);
 800238e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002392:	7013      	strb	r3, [r2, #0]
}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	200081cd 	.word	0x200081cd
 800239c:	200081d4 	.word	0x200081d4
 80023a0:	200081ea 	.word	0x200081ea

080023a4 <tay>:

void tay() {
    y = a;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <tay+0x2c>)
   
    zerocalc(y);
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <tay+0x30>)
    y = a;
 80023a8:	7819      	ldrb	r1, [r3, #0]
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <tay+0x34>)
 80023ac:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 80023ae:	7813      	ldrb	r3, [r2, #0]
 80023b0:	b131      	cbz	r1, 80023c0 <tay+0x1c>
 80023b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80023b6:	0609      	lsls	r1, r1, #24
 80023b8:	7013      	strb	r3, [r2, #0]
 80023ba:	d504      	bpl.n	80023c6 <tay+0x22>
 80023bc:	f7ff b8b6 	b.w	800152c <dex.part.0>
    zerocalc(y);
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	e7f7      	b.n	80023b6 <tay+0x12>
    signcalc(y);
 80023c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ca:	7013      	strb	r3, [r2, #0]
}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200081cd 	.word	0x200081cd
 80023d4:	200081d4 	.word	0x200081d4
 80023d8:	200081eb 	.word	0x200081eb

080023dc <tsx>:

void tsx() {
    x = sp;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <tsx+0x2c>)
   
    zerocalc(x);
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <tsx+0x30>)
    x = sp;
 80023e0:	7819      	ldrb	r1, [r3, #0]
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <tsx+0x34>)
 80023e4:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80023e6:	7813      	ldrb	r3, [r2, #0]
 80023e8:	b131      	cbz	r1, 80023f8 <tsx+0x1c>
 80023ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80023ee:	0609      	lsls	r1, r1, #24
 80023f0:	7013      	strb	r3, [r2, #0]
 80023f2:	d504      	bpl.n	80023fe <tsx+0x22>
 80023f4:	f7ff b89a 	b.w	800152c <dex.part.0>
    zerocalc(x);
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	e7f7      	b.n	80023ee <tsx+0x12>
    signcalc(x);
 80023fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002402:	7013      	strb	r3, [r2, #0]
}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200081e6 	.word	0x200081e6
 800240c:	200081d4 	.word	0x200081d4
 8002410:	200081ea 	.word	0x200081ea

08002414 <txa>:

void txa() {
    a = x;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <txa+0x2c>)
   
    zerocalc(a);
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <txa+0x30>)
    a = x;
 8002418:	7819      	ldrb	r1, [r3, #0]
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <txa+0x34>)
 800241c:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 800241e:	7813      	ldrb	r3, [r2, #0]
 8002420:	b131      	cbz	r1, 8002430 <txa+0x1c>
 8002422:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8002426:	0609      	lsls	r1, r1, #24
 8002428:	7013      	strb	r3, [r2, #0]
 800242a:	d504      	bpl.n	8002436 <txa+0x22>
 800242c:	f7ff b87e 	b.w	800152c <dex.part.0>
    zerocalc(a);
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	e7f7      	b.n	8002426 <txa+0x12>
    signcalc(a);
 8002436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243a:	7013      	strb	r3, [r2, #0]
}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	200081ea 	.word	0x200081ea
 8002444:	200081d4 	.word	0x200081d4
 8002448:	200081cd 	.word	0x200081cd

0800244c <txs>:

void txs() {
    sp = x;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <txs+0xc>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <txs+0x10>)
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200081ea 	.word	0x200081ea
 800245c:	200081e6 	.word	0x200081e6

08002460 <tya>:

void tya() {
    a = y;
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <tya+0x2c>)
   
    zerocalc(a);
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <tya+0x30>)
    a = y;
 8002464:	7819      	ldrb	r1, [r3, #0]
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <tya+0x34>)
 8002468:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 800246a:	7813      	ldrb	r3, [r2, #0]
 800246c:	b131      	cbz	r1, 800247c <tya+0x1c>
 800246e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8002472:	0609      	lsls	r1, r1, #24
 8002474:	7013      	strb	r3, [r2, #0]
 8002476:	d504      	bpl.n	8002482 <tya+0x22>
 8002478:	f7ff b858 	b.w	800152c <dex.part.0>
    zerocalc(a);
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	e7f7      	b.n	8002472 <tya+0x12>
    signcalc(a);
 8002482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002486:	7013      	strb	r3, [r2, #0]
}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	200081eb 	.word	0x200081eb
 8002490:	200081d4 	.word	0x200081d4
 8002494:	200081cd 	.word	0x200081cd

08002498 <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 800249c:	4e01      	ldr	r6, [pc, #4]	; (80024a4 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 800249e:	4d02      	ldr	r5, [pc, #8]	; (80024a8 <exec6502+0x10>)
  while (tickcount--) {
 80024a0:	b924      	cbnz	r4, 80024ac <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	200081e0 	.word	0x200081e0
 80024a8:	200081e7 	.word	0x200081e7
    opcode = read6502(pc++);
 80024ac:	8830      	ldrh	r0, [r6, #0]
 80024ae:	1c43      	adds	r3, r0, #1
 80024b0:	8033      	strh	r3, [r6, #0]
 80024b2:	f7fe fecf 	bl	8001254 <read6502>
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 80024b8:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <exec6502+0x38>)
    opcode = read6502(pc++);
 80024ba:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 80024bc:	7813      	ldrb	r3, [r2, #0]
 80024be:	f043 0320 	orr.w	r3, r3, #32
 80024c2:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	702b      	strb	r3, [r5, #0]
 80024c8:	e004      	b.n	80024d4 <exec6502+0x3c>
 80024ca:	bf00      	nop
 80024cc:	200081de 	.word	0x200081de
 80024d0:	200081d4 	.word	0x200081d4
		switch (opcode) {
 80024d4:	28fe      	cmp	r0, #254	; 0xfe
 80024d6:	f200 8103 	bhi.w	80026e0 <exec6502+0x248>
 80024da:	e8df f010 	tbh	[pc, r0, lsl #1]
 80024de:	00ff      	.short	0x00ff
 80024e0:	01010107 	.word	0x01010107
 80024e4:	01010101 	.word	0x01010101
 80024e8:	0111010c 	.word	0x0111010c
 80024ec:	01160101 	.word	0x01160101
 80024f0:	011e0119 	.word	0x011e0119
 80024f4:	01010101 	.word	0x01010101
 80024f8:	01280123 	.word	0x01280123
 80024fc:	012d0101 	.word	0x012d0101
 8002500:	01010132 	.word	0x01010132
 8002504:	01010101 	.word	0x01010101
 8002508:	013c0137 	.word	0x013c0137
 800250c:	01410101 	.word	0x01410101
 8002510:	01010144 	.word	0x01010144
 8002514:	01010101 	.word	0x01010101
 8002518:	014e0149 	.word	0x014e0149
 800251c:	01530101 	.word	0x01530101
 8002520:	01010158 	.word	0x01010158
 8002524:	015d0101 	.word	0x015d0101
 8002528:	01670162 	.word	0x01670162
 800252c:	016c0101 	.word	0x016c0101
 8002530:	0174016f 	.word	0x0174016f
 8002534:	01790101 	.word	0x01790101
 8002538:	0183017e 	.word	0x0183017e
 800253c:	01880101 	.word	0x01880101
 8002540:	0101018d 	.word	0x0101018d
 8002544:	01010101 	.word	0x01010101
 8002548:	01970192 	.word	0x01970192
 800254c:	019c0101 	.word	0x019c0101
 8002550:	0101019f 	.word	0x0101019f
 8002554:	01010101 	.word	0x01010101
 8002558:	01a901a4 	.word	0x01a901a4
 800255c:	01ae0101 	.word	0x01ae0101
 8002560:	010101b1 	.word	0x010101b1
 8002564:	01010101 	.word	0x01010101
 8002568:	01bb01b6 	.word	0x01bb01b6
 800256c:	01c00101 	.word	0x01c00101
 8002570:	01c801c3 	.word	0x01c801c3
 8002574:	01cd0101 	.word	0x01cd0101
 8002578:	01d701d2 	.word	0x01d701d2
 800257c:	01dc0101 	.word	0x01dc0101
 8002580:	010101e1 	.word	0x010101e1
 8002584:	01010101 	.word	0x01010101
 8002588:	01eb01e6 	.word	0x01eb01e6
 800258c:	01f00101 	.word	0x01f00101
 8002590:	010101f3 	.word	0x010101f3
 8002594:	01010101 	.word	0x01010101
 8002598:	01fd01f8 	.word	0x01fd01f8
 800259c:	02020101 	.word	0x02020101
 80025a0:	01010205 	.word	0x01010205
 80025a4:	01010101 	.word	0x01010101
 80025a8:	020f020a 	.word	0x020f020a
 80025ac:	02140101 	.word	0x02140101
 80025b0:	021c0217 	.word	0x021c0217
 80025b4:	02210101 	.word	0x02210101
 80025b8:	022b0226 	.word	0x022b0226
 80025bc:	02300101 	.word	0x02300101
 80025c0:	01010235 	.word	0x01010235
 80025c4:	01010101 	.word	0x01010101
 80025c8:	023f023a 	.word	0x023f023a
 80025cc:	02440101 	.word	0x02440101
 80025d0:	01010247 	.word	0x01010247
 80025d4:	01010101 	.word	0x01010101
 80025d8:	0251024c 	.word	0x0251024c
 80025dc:	01010101 	.word	0x01010101
 80025e0:	01010256 	.word	0x01010256
 80025e4:	025b0101 	.word	0x025b0101
 80025e8:	02650260 	.word	0x02650260
 80025ec:	026a0101 	.word	0x026a0101
 80025f0:	026d0101 	.word	0x026d0101
 80025f4:	02700101 	.word	0x02700101
 80025f8:	027a0275 	.word	0x027a0275
 80025fc:	027f0101 	.word	0x027f0101
 8002600:	01010284 	.word	0x01010284
 8002604:	02890101 	.word	0x02890101
 8002608:	0293028e 	.word	0x0293028e
 800260c:	02980101 	.word	0x02980101
 8002610:	02a3029b 	.word	0x02a3029b
 8002614:	01010101 	.word	0x01010101
 8002618:	010102a6 	.word	0x010102a6
 800261c:	02ab0101 	.word	0x02ab0101
 8002620:	02b502b0 	.word	0x02b502b0
 8002624:	02ba0101 	.word	0x02ba0101
 8002628:	02c402bf 	.word	0x02c402bf
 800262c:	02c90101 	.word	0x02c90101
 8002630:	02d102cc 	.word	0x02d102cc
 8002634:	02d40101 	.word	0x02d40101
 8002638:	02de02d9 	.word	0x02de02d9
 800263c:	02e30101 	.word	0x02e30101
 8002640:	010102e8 	.word	0x010102e8
 8002644:	02ed0101 	.word	0x02ed0101
 8002648:	02f702f2 	.word	0x02f702f2
 800264c:	02fc0101 	.word	0x02fc0101
 8002650:	030402ff 	.word	0x030402ff
 8002654:	03070101 	.word	0x03070101
 8002658:	0311030c 	.word	0x0311030c
 800265c:	03160101 	.word	0x03160101
 8002660:	0101031b 	.word	0x0101031b
 8002664:	03200101 	.word	0x03200101
 8002668:	032a0325 	.word	0x032a0325
 800266c:	032f0101 	.word	0x032f0101
 8002670:	03370332 	.word	0x03370332
 8002674:	033a0101 	.word	0x033a0101
 8002678:	0344033f 	.word	0x0344033f
 800267c:	03490101 	.word	0x03490101
 8002680:	0101034e 	.word	0x0101034e
 8002684:	01010101 	.word	0x01010101
 8002688:	03580353 	.word	0x03580353
 800268c:	035d0101 	.word	0x035d0101
 8002690:	01010360 	.word	0x01010360
 8002694:	01010101 	.word	0x01010101
 8002698:	036a0365 	.word	0x036a0365
 800269c:	036f0101 	.word	0x036f0101
 80026a0:	01010374 	.word	0x01010374
 80026a4:	03790101 	.word	0x03790101
 80026a8:	0383037e 	.word	0x0383037e
 80026ac:	03880101 	.word	0x03880101
 80026b0:	0101038b 	.word	0x0101038b
 80026b4:	0390038b 	.word	0x0390038b
 80026b8:	039a0395 	.word	0x039a0395
 80026bc:	039f0101 	.word	0x039f0101
 80026c0:	010103a4 	.word	0x010103a4
 80026c4:	01010101 	.word	0x01010101
 80026c8:	03ae03a9 	.word	0x03ae03a9
 80026cc:	03b30101 	.word	0x03b30101
 80026d0:	010103b6 	.word	0x010103b6
 80026d4:	01010101 	.word	0x01010101
 80026d8:	03c003bb 	.word	0x03c003bb
			brk();
 80026dc:	f7ff fa56 	bl	8001b8c <brk>
      instructions++;
 80026e0:	4acf      	ldr	r2, [pc, #828]	; (8002a20 <exec6502+0x588>)
 80026e2:	3c01      	subs	r4, #1
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e6d9      	b.n	80024a0 <exec6502+0x8>
			indx();
 80026ec:	f7ff f866 	bl	80017bc <indx>
			ora();
 80026f0:	f7ff fce0 	bl	80020b4 <ora>
			break;
 80026f4:	e7f4      	b.n	80026e0 <exec6502+0x248>
			zp();
 80026f6:	f7fe ffa1 	bl	800163c <zp>
			ora();
 80026fa:	f7ff fcdb 	bl	80020b4 <ora>
			break;
 80026fe:	e7ef      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002700:	f7fe ff9c 	bl	800163c <zp>
			asl();
 8002704:	f7ff f926 	bl	8001954 <asl>
			break;
 8002708:	e7ea      	b.n	80026e0 <exec6502+0x248>
			php();
 800270a:	f7ff fcff 	bl	800210c <php>
			break;
 800270e:	e7e7      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002710:	f7fe ff88 	bl	8001624 <imm>
			ora();
 8002714:	f7ff fcce 	bl	80020b4 <ora>
			break;
 8002718:	e7e2      	b.n	80026e0 <exec6502+0x248>
  useaccum = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	702b      	strb	r3, [r5, #0]
			asl();
 800271e:	f7ff f919 	bl	8001954 <asl>
			break;
 8002722:	e7dd      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002724:	f7fe ffd4 	bl	80016d0 <abso>
			ora();
 8002728:	f7ff fcc4 	bl	80020b4 <ora>
			break;
 800272c:	e7d8      	b.n	80026e0 <exec6502+0x248>
			abso();
 800272e:	f7fe ffcf 	bl	80016d0 <abso>
			asl();
 8002732:	f7ff f90f 	bl	8001954 <asl>
			break;
 8002736:	e7d3      	b.n	80026e0 <exec6502+0x248>
			rel();
 8002738:	f7fe ffb6 	bl	80016a8 <rel>
			bpl();
 800273c:	f7ff fa02 	bl	8001b44 <bpl>
			break;
 8002740:	e7ce      	b.n	80026e0 <exec6502+0x248>
			indy();
 8002742:	f7ff f859 	bl	80017f8 <indy>
			ora();
 8002746:	f7ff fcb5 	bl	80020b4 <ora>
			break;
 800274a:	e7c9      	b.n	80026e0 <exec6502+0x248>
			zpx();
 800274c:	f7fe ff84 	bl	8001658 <zpx>
			ora();
 8002750:	f7ff fcb0 	bl	80020b4 <ora>
			break;
 8002754:	e7c4      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002756:	f7fe ff7f 	bl	8001658 <zpx>
			asl();
 800275a:	f7ff f8fb 	bl	8001954 <asl>
			break;
 800275e:	e7bf      	b.n	80026e0 <exec6502+0x248>
			clc();
 8002760:	f7ff fa7c 	bl	8001c5c <clc>
			break;
 8002764:	e7bc      	b.n	80026e0 <exec6502+0x248>
			absy();
 8002766:	f7fe ffe7 	bl	8001738 <absy>
			ora();
 800276a:	f7ff fca3 	bl	80020b4 <ora>
			break;
 800276e:	e7b7      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002770:	f7fe ffc6 	bl	8001700 <absx>
			ora();
 8002774:	f7ff fc9e 	bl	80020b4 <ora>
			break;
 8002778:	e7b2      	b.n	80026e0 <exec6502+0x248>
			absx();
 800277a:	f7fe ffc1 	bl	8001700 <absx>
			asl();
 800277e:	f7ff f8e9 	bl	8001954 <asl>
			break;
 8002782:	e7ad      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002784:	f7fe ffa4 	bl	80016d0 <abso>
			jsr();
 8002788:	f7ff fbf2 	bl	8001f70 <jsr>
			break;
 800278c:	e7a8      	b.n	80026e0 <exec6502+0x248>
			indx();
 800278e:	f7ff f815 	bl	80017bc <indx>
			op_and();
 8002792:	f7ff f8b7 	bl	8001904 <op_and>
			break;
 8002796:	e7a3      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002798:	f7fe ff50 	bl	800163c <zp>
			op_bit();
 800279c:	f7ff f96a 	bl	8001a74 <op_bit>
			break;
 80027a0:	e79e      	b.n	80026e0 <exec6502+0x248>
			zp();
 80027a2:	f7fe ff4b 	bl	800163c <zp>
			op_and();
 80027a6:	f7ff f8ad 	bl	8001904 <op_and>
			break;
 80027aa:	e799      	b.n	80026e0 <exec6502+0x248>
			zp();
 80027ac:	f7fe ff46 	bl	800163c <zp>
			rol();
 80027b0:	f7ff fcda 	bl	8002168 <rol>
			break;
 80027b4:	e794      	b.n	80026e0 <exec6502+0x248>
			plp();
 80027b6:	f7ff fccd 	bl	8002154 <plp>
			break;
 80027ba:	e791      	b.n	80026e0 <exec6502+0x248>
			imm();
 80027bc:	f7fe ff32 	bl	8001624 <imm>
			op_and();
 80027c0:	f7ff f8a0 	bl	8001904 <op_and>
			break;
 80027c4:	e78c      	b.n	80026e0 <exec6502+0x248>
  useaccum = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	702b      	strb	r3, [r5, #0]
			rol();
 80027ca:	f7ff fccd 	bl	8002168 <rol>
			break;
 80027ce:	e787      	b.n	80026e0 <exec6502+0x248>
			abso();
 80027d0:	f7fe ff7e 	bl	80016d0 <abso>
			op_bit();
 80027d4:	f7ff f94e 	bl	8001a74 <op_bit>
			break;
 80027d8:	e782      	b.n	80026e0 <exec6502+0x248>
			abso();
 80027da:	f7fe ff79 	bl	80016d0 <abso>
			op_and();
 80027de:	f7ff f891 	bl	8001904 <op_and>
			break;
 80027e2:	e77d      	b.n	80026e0 <exec6502+0x248>
			abso();
 80027e4:	f7fe ff74 	bl	80016d0 <abso>
			rol();
 80027e8:	f7ff fcbe 	bl	8002168 <rol>
			break;
 80027ec:	e778      	b.n	80026e0 <exec6502+0x248>
			rel();
 80027ee:	f7fe ff5b 	bl	80016a8 <rel>
			bmi();
 80027f2:	f7ff f961 	bl	8001ab8 <bmi>
			break;
 80027f6:	e773      	b.n	80026e0 <exec6502+0x248>
			indy();
 80027f8:	f7fe fffe 	bl	80017f8 <indy>
			op_and();
 80027fc:	f7ff f882 	bl	8001904 <op_and>
			break;
 8002800:	e76e      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002802:	f7fe ff29 	bl	8001658 <zpx>
			op_and();
 8002806:	f7ff f87d 	bl	8001904 <op_and>
			break;
 800280a:	e769      	b.n	80026e0 <exec6502+0x248>
			zpx();
 800280c:	f7fe ff24 	bl	8001658 <zpx>
			rol();
 8002810:	f7ff fcaa 	bl	8002168 <rol>
			break;
 8002814:	e764      	b.n	80026e0 <exec6502+0x248>
			sec();
 8002816:	f7ff fd7f 	bl	8002318 <sec>
			break;
 800281a:	e761      	b.n	80026e0 <exec6502+0x248>
			absy();
 800281c:	f7fe ff8c 	bl	8001738 <absy>
			op_and();
 8002820:	f7ff f870 	bl	8001904 <op_and>
			break;
 8002824:	e75c      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002826:	f7fe ff6b 	bl	8001700 <absx>
			op_and();
 800282a:	f7ff f86b 	bl	8001904 <op_and>
			break;
 800282e:	e757      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002830:	f7fe ff66 	bl	8001700 <absx>
			rol();
 8002834:	f7ff fc98 	bl	8002168 <rol>
			break;
 8002838:	e752      	b.n	80026e0 <exec6502+0x248>
			rti();
 800283a:	f7ff fcf1 	bl	8002220 <rti>
			break;
 800283e:	e74f      	b.n	80026e0 <exec6502+0x248>
			indx();
 8002840:	f7fe ffbc 	bl	80017bc <indx>
			eor();
 8002844:	f7ff fb0c 	bl	8001e60 <eor>
			break;
 8002848:	e74a      	b.n	80026e0 <exec6502+0x248>
			zp();
 800284a:	f7fe fef7 	bl	800163c <zp>
			eor();
 800284e:	f7ff fb07 	bl	8001e60 <eor>
			break;
 8002852:	e745      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002854:	f7fe fef2 	bl	800163c <zp>
			lsr();
 8002858:	f7ff fc00 	bl	800205c <lsr>
			break;
 800285c:	e740      	b.n	80026e0 <exec6502+0x248>
			pha();
 800285e:	f7ff fc4f 	bl	8002100 <pha>
			break;
 8002862:	e73d      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002864:	f7fe fede 	bl	8001624 <imm>
			eor();
 8002868:	f7ff fafa 	bl	8001e60 <eor>
			break;
 800286c:	e738      	b.n	80026e0 <exec6502+0x248>
  useaccum = 1;
 800286e:	2301      	movs	r3, #1
 8002870:	702b      	strb	r3, [r5, #0]
			lsr();
 8002872:	f7ff fbf3 	bl	800205c <lsr>
			break;
 8002876:	e733      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002878:	f7fe ff2a 	bl	80016d0 <abso>
			jmp();
 800287c:	f7ff fb6e 	bl	8001f5c <jmp>
			break;
 8002880:	e72e      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002882:	f7fe ff25 	bl	80016d0 <abso>
			eor();
 8002886:	f7ff faeb 	bl	8001e60 <eor>
			break;
 800288a:	e729      	b.n	80026e0 <exec6502+0x248>
			abso();
 800288c:	f7fe ff20 	bl	80016d0 <abso>
			lsr();
 8002890:	f7ff fbe4 	bl	800205c <lsr>
			break;
 8002894:	e724      	b.n	80026e0 <exec6502+0x248>
			rel();
 8002896:	f7fe ff07 	bl	80016a8 <rel>
			bvc();
 800289a:	f7ff f99b 	bl	8001bd4 <bvc>
			break;
 800289e:	e71f      	b.n	80026e0 <exec6502+0x248>
			indy();
 80028a0:	f7fe ffaa 	bl	80017f8 <indy>
			eor();
 80028a4:	f7ff fadc 	bl	8001e60 <eor>
			break;
 80028a8:	e71a      	b.n	80026e0 <exec6502+0x248>
			zpx();
 80028aa:	f7fe fed5 	bl	8001658 <zpx>
			eor();
 80028ae:	f7ff fad7 	bl	8001e60 <eor>
			break;
 80028b2:	e715      	b.n	80026e0 <exec6502+0x248>
			zpx();
 80028b4:	f7fe fed0 	bl	8001658 <zpx>
			lsr();
 80028b8:	f7ff fbd0 	bl	800205c <lsr>
			break;
 80028bc:	e710      	b.n	80026e0 <exec6502+0x248>
			cli();
 80028be:	f7ff f9dd 	bl	8001c7c <cli>
			break;
 80028c2:	e70d      	b.n	80026e0 <exec6502+0x248>
			absy();
 80028c4:	f7fe ff38 	bl	8001738 <absy>
			eor();
 80028c8:	f7ff faca 	bl	8001e60 <eor>
			break;
 80028cc:	e708      	b.n	80026e0 <exec6502+0x248>
			absx();
 80028ce:	f7fe ff17 	bl	8001700 <absx>
			eor();
 80028d2:	f7ff fac5 	bl	8001e60 <eor>
			break;
 80028d6:	e703      	b.n	80026e0 <exec6502+0x248>
			absx();
 80028d8:	f7fe ff12 	bl	8001700 <absx>
			lsr();
 80028dc:	f7ff fbbe 	bl	800205c <lsr>
			break;
 80028e0:	e6fe      	b.n	80026e0 <exec6502+0x248>
			rts();
 80028e2:	f7ff fcaf 	bl	8002244 <rts>
			break;
 80028e6:	e6fb      	b.n	80026e0 <exec6502+0x248>
			indx();
 80028e8:	f7fe ff68 	bl	80017bc <indx>
			adc();
 80028ec:	f7fe ffb4 	bl	8001858 <adc>
			break;
 80028f0:	e6f6      	b.n	80026e0 <exec6502+0x248>
			zp();
 80028f2:	f7fe fea3 	bl	800163c <zp>
			adc();
 80028f6:	f7fe ffaf 	bl	8001858 <adc>
			break;
 80028fa:	e6f1      	b.n	80026e0 <exec6502+0x248>
			zp();
 80028fc:	f7fe fe9e 	bl	800163c <zp>
			ror();
 8002900:	f7ff fc60 	bl	80021c4 <ror>
			break;
 8002904:	e6ec      	b.n	80026e0 <exec6502+0x248>
			pla();
 8002906:	f7ff fc09 	bl	800211c <pla>
			break;
 800290a:	e6e9      	b.n	80026e0 <exec6502+0x248>
			imm();
 800290c:	f7fe fe8a 	bl	8001624 <imm>
			adc();
 8002910:	f7fe ffa2 	bl	8001858 <adc>
			break;
 8002914:	e6e4      	b.n	80026e0 <exec6502+0x248>
  useaccum = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	702b      	strb	r3, [r5, #0]
			ror();
 800291a:	f7ff fc53 	bl	80021c4 <ror>
			break;
 800291e:	e6df      	b.n	80026e0 <exec6502+0x248>
			ind();
 8002920:	f7fe ff26 	bl	8001770 <ind>
			jmp();
 8002924:	f7ff fb1a 	bl	8001f5c <jmp>
			break;
 8002928:	e6da      	b.n	80026e0 <exec6502+0x248>
			abso();
 800292a:	f7fe fed1 	bl	80016d0 <abso>
			adc();
 800292e:	f7fe ff93 	bl	8001858 <adc>
			break;
 8002932:	e6d5      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002934:	f7fe fecc 	bl	80016d0 <abso>
			ror();
 8002938:	f7ff fc44 	bl	80021c4 <ror>
			break;
 800293c:	e6d0      	b.n	80026e0 <exec6502+0x248>
			rel();
 800293e:	f7fe feb3 	bl	80016a8 <rel>
			bvs();
 8002942:	f7ff f969 	bl	8001c18 <bvs>
			break;
 8002946:	e6cb      	b.n	80026e0 <exec6502+0x248>
			indy();
 8002948:	f7fe ff56 	bl	80017f8 <indy>
			adc();
 800294c:	f7fe ff84 	bl	8001858 <adc>
			break;
 8002950:	e6c6      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002952:	f7fe fe81 	bl	8001658 <zpx>
			adc();
 8002956:	f7fe ff7f 	bl	8001858 <adc>
			break;
 800295a:	e6c1      	b.n	80026e0 <exec6502+0x248>
			zpx();
 800295c:	f7fe fe7c 	bl	8001658 <zpx>
			ror();
 8002960:	f7ff fc30 	bl	80021c4 <ror>
			break;
 8002964:	e6bc      	b.n	80026e0 <exec6502+0x248>
			sei();
 8002966:	f7ff fce7 	bl	8002338 <sei>
			break;
 800296a:	e6b9      	b.n	80026e0 <exec6502+0x248>
			absy();
 800296c:	f7fe fee4 	bl	8001738 <absy>
			adc();
 8002970:	f7fe ff72 	bl	8001858 <adc>
			break;
 8002974:	e6b4      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002976:	f7fe fec3 	bl	8001700 <absx>
			adc();
 800297a:	f7fe ff6d 	bl	8001858 <adc>
			break;
 800297e:	e6af      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002980:	f7fe febe 	bl	8001700 <absx>
			ror();
 8002984:	f7ff fc1e 	bl	80021c4 <ror>
			break;
 8002988:	e6aa      	b.n	80026e0 <exec6502+0x248>
			indx();
 800298a:	f7fe ff17 	bl	80017bc <indx>
			sta();
 800298e:	f7ff fcdb 	bl	8002348 <sta>
			break;
 8002992:	e6a5      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002994:	f7fe fe52 	bl	800163c <zp>
			sty();
 8002998:	f7ff fce2 	bl	8002360 <sty>
			break;
 800299c:	e6a0      	b.n	80026e0 <exec6502+0x248>
			zp();
 800299e:	f7fe fe4d 	bl	800163c <zp>
			sta();
 80029a2:	f7ff fcd1 	bl	8002348 <sta>
			break;
 80029a6:	e69b      	b.n	80026e0 <exec6502+0x248>
			zp();
 80029a8:	f7fe fe48 	bl	800163c <zp>
			stx();
 80029ac:	f7ff fcd2 	bl	8002354 <stx>
			break;
 80029b0:	e696      	b.n	80026e0 <exec6502+0x248>
			dey();
 80029b2:	f7ff fa3b 	bl	8001e2c <dey>
			break;
 80029b6:	e693      	b.n	80026e0 <exec6502+0x248>
			txa();
 80029b8:	f7ff fd2c 	bl	8002414 <txa>
			break;
 80029bc:	e690      	b.n	80026e0 <exec6502+0x248>
			abso();
 80029be:	f7fe fe87 	bl	80016d0 <abso>
			sty();
 80029c2:	f7ff fccd 	bl	8002360 <sty>
			break;
 80029c6:	e68b      	b.n	80026e0 <exec6502+0x248>
			abso();
 80029c8:	f7fe fe82 	bl	80016d0 <abso>
			sta();
 80029cc:	f7ff fcbc 	bl	8002348 <sta>
			break;
 80029d0:	e686      	b.n	80026e0 <exec6502+0x248>
			abso();
 80029d2:	f7fe fe7d 	bl	80016d0 <abso>
			stx();
 80029d6:	f7ff fcbd 	bl	8002354 <stx>
			break;
 80029da:	e681      	b.n	80026e0 <exec6502+0x248>
			rel();
 80029dc:	f7fe fe64 	bl	80016a8 <rel>
			bcc();
 80029e0:	f7fe ffe2 	bl	80019a8 <bcc>
			break;
 80029e4:	e67c      	b.n	80026e0 <exec6502+0x248>
			indy();
 80029e6:	f7fe ff07 	bl	80017f8 <indy>
			sta();
 80029ea:	f7ff fcad 	bl	8002348 <sta>
			break;
 80029ee:	e677      	b.n	80026e0 <exec6502+0x248>
			zpx();
 80029f0:	f7fe fe32 	bl	8001658 <zpx>
			sty();
 80029f4:	f7ff fcb4 	bl	8002360 <sty>
			break;
 80029f8:	e672      	b.n	80026e0 <exec6502+0x248>
			zpx();
 80029fa:	f7fe fe2d 	bl	8001658 <zpx>
			sta();
 80029fe:	f7ff fca3 	bl	8002348 <sta>
			break;
 8002a02:	e66d      	b.n	80026e0 <exec6502+0x248>
			zpy();
 8002a04:	f7fe fe3c 	bl	8001680 <zpy>
			stx();
 8002a08:	f7ff fca4 	bl	8002354 <stx>
			break;
 8002a0c:	e668      	b.n	80026e0 <exec6502+0x248>
			tya();
 8002a0e:	f7ff fd27 	bl	8002460 <tya>
			break;
 8002a12:	e665      	b.n	80026e0 <exec6502+0x248>
			absy();
 8002a14:	f7fe fe90 	bl	8001738 <absy>
			sta();
 8002a18:	f7ff fc96 	bl	8002348 <sta>
			break;
 8002a1c:	e660      	b.n	80026e0 <exec6502+0x248>
 8002a1e:	bf00      	nop
 8002a20:	200081d8 	.word	0x200081d8
			txs();
 8002a24:	f7ff fd12 	bl	800244c <txs>
			break;
 8002a28:	e65a      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002a2a:	f7fe fe69 	bl	8001700 <absx>
			sta();
 8002a2e:	f7ff fc8b 	bl	8002348 <sta>
			break;
 8002a32:	e655      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002a34:	f7fe fdf6 	bl	8001624 <imm>
			ldy();
 8002a38:	f7ff faee 	bl	8002018 <ldy>
			break;
 8002a3c:	e650      	b.n	80026e0 <exec6502+0x248>
			indx();
 8002a3e:	f7fe febd 	bl	80017bc <indx>
			lda();
 8002a42:	f7ff faa5 	bl	8001f90 <lda>
			break;
 8002a46:	e64b      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002a48:	f7fe fdec 	bl	8001624 <imm>
			ldx();
 8002a4c:	f7ff fac2 	bl	8001fd4 <ldx>
			break;
 8002a50:	e646      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002a52:	f7fe fdf3 	bl	800163c <zp>
			ldy();
 8002a56:	f7ff fadf 	bl	8002018 <ldy>
			break;
 8002a5a:	e641      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002a5c:	f7fe fdee 	bl	800163c <zp>
			lda();
 8002a60:	f7ff fa96 	bl	8001f90 <lda>
			break;
 8002a64:	e63c      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002a66:	f7fe fde9 	bl	800163c <zp>
			ldx();
 8002a6a:	f7ff fab3 	bl	8001fd4 <ldx>
			break;
 8002a6e:	e637      	b.n	80026e0 <exec6502+0x248>
			tay();
 8002a70:	f7ff fc98 	bl	80023a4 <tay>
			break;
 8002a74:	e634      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002a76:	f7fe fdd5 	bl	8001624 <imm>
			lda();
 8002a7a:	f7ff fa89 	bl	8001f90 <lda>
			break;
 8002a7e:	e62f      	b.n	80026e0 <exec6502+0x248>
			tax();
 8002a80:	f7ff fc74 	bl	800236c <tax>
			break;
 8002a84:	e62c      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002a86:	f7fe fe23 	bl	80016d0 <abso>
			ldy();
 8002a8a:	f7ff fac5 	bl	8002018 <ldy>
			break;
 8002a8e:	e627      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002a90:	f7fe fe1e 	bl	80016d0 <abso>
			lda();
 8002a94:	f7ff fa7c 	bl	8001f90 <lda>
			break;
 8002a98:	e622      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002a9a:	f7fe fe19 	bl	80016d0 <abso>
			ldx();
 8002a9e:	f7ff fa99 	bl	8001fd4 <ldx>
			break;
 8002aa2:	e61d      	b.n	80026e0 <exec6502+0x248>
			rel();
 8002aa4:	f7fe fe00 	bl	80016a8 <rel>
			bcs();
 8002aa8:	f7fe ffa0 	bl	80019ec <bcs>
			break;
 8002aac:	e618      	b.n	80026e0 <exec6502+0x248>
			indy();
 8002aae:	f7fe fea3 	bl	80017f8 <indy>
			lda();
 8002ab2:	f7ff fa6d 	bl	8001f90 <lda>
			break;
 8002ab6:	e613      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002ab8:	f7fe fdce 	bl	8001658 <zpx>
			ldy();
 8002abc:	f7ff faac 	bl	8002018 <ldy>
			break;
 8002ac0:	e60e      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002ac2:	f7fe fdc9 	bl	8001658 <zpx>
			lda();
 8002ac6:	f7ff fa63 	bl	8001f90 <lda>
			break;
 8002aca:	e609      	b.n	80026e0 <exec6502+0x248>
			zpy();
 8002acc:	f7fe fdd8 	bl	8001680 <zpy>
			ldx();
 8002ad0:	f7ff fa80 	bl	8001fd4 <ldx>
			break;
 8002ad4:	e604      	b.n	80026e0 <exec6502+0x248>
			clv();
 8002ad6:	f7ff f8d9 	bl	8001c8c <clv>
			break;
 8002ada:	e601      	b.n	80026e0 <exec6502+0x248>
			absy();
 8002adc:	f7fe fe2c 	bl	8001738 <absy>
			lda();
 8002ae0:	f7ff fa56 	bl	8001f90 <lda>
			break;
 8002ae4:	e5fc      	b.n	80026e0 <exec6502+0x248>
			tsx();
 8002ae6:	f7ff fc79 	bl	80023dc <tsx>
			break;
 8002aea:	e5f9      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002aec:	f7fe fe08 	bl	8001700 <absx>
			ldy();
 8002af0:	f7ff fa92 	bl	8002018 <ldy>
			break;
 8002af4:	e5f4      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002af6:	f7fe fe03 	bl	8001700 <absx>
			lda();
 8002afa:	f7ff fa49 	bl	8001f90 <lda>
			break;
 8002afe:	e5ef      	b.n	80026e0 <exec6502+0x248>
			absy();
 8002b00:	f7fe fe1a 	bl	8001738 <absy>
			ldx();
 8002b04:	f7ff fa66 	bl	8001fd4 <ldx>
			break;
 8002b08:	e5ea      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002b0a:	f7fe fd8b 	bl	8001624 <imm>
			cpy();
 8002b0e:	f7ff f921 	bl	8001d54 <cpy>
			break;
 8002b12:	e5e5      	b.n	80026e0 <exec6502+0x248>
			indx();
 8002b14:	f7fe fe52 	bl	80017bc <indx>
			cmp();
 8002b18:	f7ff f8c0 	bl	8001c9c <cmp>
			break;
 8002b1c:	e5e0      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002b1e:	f7fe fd8d 	bl	800163c <zp>
			cpy();
 8002b22:	f7ff f917 	bl	8001d54 <cpy>
			break;
 8002b26:	e5db      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002b28:	f7fe fd88 	bl	800163c <zp>
			cmp();
 8002b2c:	f7ff f8b6 	bl	8001c9c <cmp>
			break;
 8002b30:	e5d6      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002b32:	f7fe fd83 	bl	800163c <zp>
			dec();
 8002b36:	f7ff f93b 	bl	8001db0 <dec>
			break;
 8002b3a:	e5d1      	b.n	80026e0 <exec6502+0x248>
			iny();
 8002b3c:	f7ff f9f4 	bl	8001f28 <iny>
			break;
 8002b40:	e5ce      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002b42:	f7fe fd6f 	bl	8001624 <imm>
			cmp();
 8002b46:	f7ff f8a9 	bl	8001c9c <cmp>
			break;
 8002b4a:	e5c9      	b.n	80026e0 <exec6502+0x248>
			dex();
 8002b4c:	f7ff f954 	bl	8001df8 <dex>
			break;
 8002b50:	e5c6      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002b52:	f7fe fdbd 	bl	80016d0 <abso>
			cpy();
 8002b56:	f7ff f8fd 	bl	8001d54 <cpy>
			break;
 8002b5a:	e5c1      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002b5c:	f7fe fdb8 	bl	80016d0 <abso>
			cmp();
 8002b60:	f7ff f89c 	bl	8001c9c <cmp>
			break;
 8002b64:	e5bc      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002b66:	f7fe fdb3 	bl	80016d0 <abso>
			dec();
 8002b6a:	f7ff f921 	bl	8001db0 <dec>
			break;
 8002b6e:	e5b7      	b.n	80026e0 <exec6502+0x248>
			rel();
 8002b70:	f7fe fd9a 	bl	80016a8 <rel>
			bne();
 8002b74:	f7fe ffc4 	bl	8001b00 <bne>
			break;
 8002b78:	e5b2      	b.n	80026e0 <exec6502+0x248>
			indy();
 8002b7a:	f7fe fe3d 	bl	80017f8 <indy>
			cmp();
 8002b7e:	f7ff f88d 	bl	8001c9c <cmp>
			break;
 8002b82:	e5ad      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002b84:	f7fe fd68 	bl	8001658 <zpx>
			cmp();
 8002b88:	f7ff f888 	bl	8001c9c <cmp>
			break;
 8002b8c:	e5a8      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002b8e:	f7fe fd63 	bl	8001658 <zpx>
			dec();
 8002b92:	f7ff f90d 	bl	8001db0 <dec>
			break;
 8002b96:	e5a3      	b.n	80026e0 <exec6502+0x248>
			cld();
 8002b98:	f7ff f868 	bl	8001c6c <cld>
			break;
 8002b9c:	e5a0      	b.n	80026e0 <exec6502+0x248>
			absy();
 8002b9e:	f7fe fdcb 	bl	8001738 <absy>
			cmp();
 8002ba2:	f7ff f87b 	bl	8001c9c <cmp>
			break;
 8002ba6:	e59b      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002ba8:	f7fe fdaa 	bl	8001700 <absx>
			cmp();
 8002bac:	f7ff f876 	bl	8001c9c <cmp>
			break;
 8002bb0:	e596      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002bb2:	f7fe fda5 	bl	8001700 <absx>
			dec();
 8002bb6:	f7ff f8fb 	bl	8001db0 <dec>
			break;
 8002bba:	e591      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002bbc:	f7fe fd32 	bl	8001624 <imm>
			cpx();
 8002bc0:	f7ff f89a 	bl	8001cf8 <cpx>
			break;
 8002bc4:	e58c      	b.n	80026e0 <exec6502+0x248>
			indx();
 8002bc6:	f7fe fdf9 	bl	80017bc <indx>
			sbc();
 8002bca:	f7ff fb49 	bl	8002260 <sbc>
			break;
 8002bce:	e587      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002bd0:	f7fe fd34 	bl	800163c <zp>
			cpx();
 8002bd4:	f7ff f890 	bl	8001cf8 <cpx>
			break;
 8002bd8:	e582      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002bda:	f7fe fd2f 	bl	800163c <zp>
			sbc();
 8002bde:	f7ff fb3f 	bl	8002260 <sbc>
			break;
 8002be2:	e57d      	b.n	80026e0 <exec6502+0x248>
			zp();
 8002be4:	f7fe fd2a 	bl	800163c <zp>
			inc();
 8002be8:	f7ff f960 	bl	8001eac <inc>
			break;
 8002bec:	e578      	b.n	80026e0 <exec6502+0x248>
			inx();
 8002bee:	f7ff f981 	bl	8001ef4 <inx>
			break;
 8002bf2:	e575      	b.n	80026e0 <exec6502+0x248>
			imm();
 8002bf4:	f7fe fd16 	bl	8001624 <imm>
			sbc();
 8002bf8:	f7ff fb32 	bl	8002260 <sbc>
			break;
 8002bfc:	e570      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002bfe:	f7fe fd67 	bl	80016d0 <abso>
			cpx();
 8002c02:	f7ff f879 	bl	8001cf8 <cpx>
			break;
 8002c06:	e56b      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002c08:	f7fe fd62 	bl	80016d0 <abso>
			sbc();
 8002c0c:	f7ff fb28 	bl	8002260 <sbc>
			break;
 8002c10:	e566      	b.n	80026e0 <exec6502+0x248>
			abso();
 8002c12:	f7fe fd5d 	bl	80016d0 <abso>
			inc();
 8002c16:	f7ff f949 	bl	8001eac <inc>
			break;
 8002c1a:	e561      	b.n	80026e0 <exec6502+0x248>
			rel();
 8002c1c:	f7fe fd44 	bl	80016a8 <rel>
			beq();
 8002c20:	f7fe ff06 	bl	8001a30 <beq>
			break;
 8002c24:	e55c      	b.n	80026e0 <exec6502+0x248>
			indy();
 8002c26:	f7fe fde7 	bl	80017f8 <indy>
			sbc();
 8002c2a:	f7ff fb19 	bl	8002260 <sbc>
			break;
 8002c2e:	e557      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002c30:	f7fe fd12 	bl	8001658 <zpx>
			sbc();
 8002c34:	f7ff fb14 	bl	8002260 <sbc>
			break;
 8002c38:	e552      	b.n	80026e0 <exec6502+0x248>
			zpx();
 8002c3a:	f7fe fd0d 	bl	8001658 <zpx>
			inc();
 8002c3e:	f7ff f935 	bl	8001eac <inc>
			break;
 8002c42:	e54d      	b.n	80026e0 <exec6502+0x248>
			sed();
 8002c44:	f7ff fb70 	bl	8002328 <sed>
			break;
 8002c48:	e54a      	b.n	80026e0 <exec6502+0x248>
			absy();
 8002c4a:	f7fe fd75 	bl	8001738 <absy>
			sbc();
 8002c4e:	f7ff fb07 	bl	8002260 <sbc>
			break;
 8002c52:	e545      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002c54:	f7fe fd54 	bl	8001700 <absx>
			sbc();
 8002c58:	f7ff fb02 	bl	8002260 <sbc>
			break;
 8002c5c:	e540      	b.n	80026e0 <exec6502+0x248>
			absx();
 8002c5e:	f7fe fd4f 	bl	8001700 <absx>
			inc();
 8002c62:	f7ff f923 	bl	8001eac <inc>
			break;
 8002c66:	e53b      	b.n	80026e0 <exec6502+0x248>

08002c68 <getSCode>:
		.readyToRead = 0,
		.debug = 0
};

// convert byte into dec value
uint8_t getSCode(uint8_t *byte){
 8002c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c6c:	4607      	mov	r7, r0
	double output = 0;
	for(int i=0; i<8; i++){
 8002c6e:	2600      	movs	r6, #0
	double output = 0;
 8002c70:	2400      	movs	r4, #0
 8002c72:	2500      	movs	r5, #0
		if(byte[i]) output += pow(2, i);
 8002c74:	f04f 0800 	mov.w	r8, #0
 8002c78:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8002c7c:	5dbb      	ldrb	r3, [r7, r6]
 8002c7e:	b183      	cbz	r3, 8002ca2 <getSCode+0x3a>
 8002c80:	4630      	mov	r0, r6
 8002c82:	f7fd fc35 	bl	80004f0 <__aeabi_i2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	f004 ffaf 	bl	8007bf0 <pow>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4620      	mov	r0, r4
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f7fd fadd 	bl	8000258 <__adddf3>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
	for(int i=0; i<8; i++){
 8002ca2:	3601      	adds	r6, #1
 8002ca4:	2e08      	cmp	r6, #8
 8002ca6:	d1e9      	bne.n	8002c7c <getSCode+0x14>
	}
	return (uint8_t)output;
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd ff3a 	bl	8000b24 <__aeabi_d2uiz>
}
 8002cb0:	b2c0      	uxtb	r0, r0
 8002cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08002cb8 <isKbrdReady>:

uint8_t isKbrdReady(){
	return keyboard.readyToRead;
}
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <isKbrdReady+0x8>)
 8002cba:	7f58      	ldrb	r0, [r3, #29]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000000 	.word	0x20000000

08002cc4 <getAscii>:

uint8_t getAscii(){
	// key read now, no longer new key to read
	keyboard.readyToRead = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <getAscii+0x1c>)
 8002cc8:	7753      	strb	r3, [r2, #29]
	if(keyboard.ctrlStatus){
		return asciiMaps.ctrlMap[keyboard.sCodeBuffer[0]];
 8002cca:	7ed1      	ldrb	r1, [r2, #27]
	if(keyboard.ctrlStatus){
 8002ccc:	7e52      	ldrb	r2, [r2, #25]
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <getAscii+0x20>)
 8002cd0:	b11a      	cbz	r2, 8002cda <getAscii+0x16>
		return asciiMaps.ctrlMap[keyboard.sCodeBuffer[0]];
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 8002cd8:	4770      	bx	lr
	}
	else{
		return asciiMaps.defMap[keyboard.sCodeBuffer[0]];
 8002cda:	5c58      	ldrb	r0, [r3, r1]
	}
}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	0800a584 	.word	0x0800a584

08002ce8 <toggleKeys>:

void toggleKeys(){
	// ctrl toggle
	if(keyboard.sCodeBuffer[0] == L_CTRL){
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <toggleKeys+0x1c>)
 8002cea:	7eda      	ldrb	r2, [r3, #27]
 8002cec:	2a14      	cmp	r2, #20
 8002cee:	d102      	bne.n	8002cf6 <toggleKeys+0xe>
		keyboard.ctrlStatus = 1;
 8002cf0:	2201      	movs	r2, #1
	} // ctrl released
	else if(keyboard.sCodeBuffer[0] == RELEASE && keyboard.sCodeBuffer[1] == L_CTRL){
		keyboard.ctrlStatus = 0;
 8002cf2:	765a      	strb	r2, [r3, #25]
	}
}
 8002cf4:	4770      	bx	lr
	else if(keyboard.sCodeBuffer[0] == RELEASE && keyboard.sCodeBuffer[1] == L_CTRL){
 8002cf6:	2af0      	cmp	r2, #240	; 0xf0
 8002cf8:	d1fc      	bne.n	8002cf4 <toggleKeys+0xc>
 8002cfa:	7f1a      	ldrb	r2, [r3, #28]
 8002cfc:	2a14      	cmp	r2, #20
 8002cfe:	d1f9      	bne.n	8002cf4 <toggleKeys+0xc>
		keyboard.ctrlStatus = 0;
 8002d00:	2200      	movs	r2, #0
 8002d02:	e7f6      	b.n	8002cf2 <toggleKeys+0xa>
 8002d04:	20000000 	.word	0x20000000

08002d08 <debug>:

void debug(){
 8002d08:	b507      	push	{r0, r1, r2, lr}
	char outputS[4]; // 3 digits + null terminator
	sprintf(outputS, "%03u", keyboard.sCodeBuffer[0]);
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <debug+0x20>)
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <debug+0x24>)
 8002d0e:	7eda      	ldrb	r2, [r3, #27]
 8002d10:	a801      	add	r0, sp, #4
 8002d12:	f003 fda9 	bl	8006868 <siprintf>
	toggleKeys();
	writeTerminal("|");
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <debug+0x28>)
	toggleKeys();
 8002d18:	f7ff ffe6 	bl	8002ce8 <toggleKeys>
	writeTerminal("|");
 8002d1c:	f7fe f924 	bl	8000f68 <writeTerminal>
}
 8002d20:	b003      	add	sp, #12
 8002d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	0800a57d 	.word	0x0800a57d
 8002d30:	0800a582 	.word	0x0800a582

08002d34 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002d34:	b538      	push	{r3, r4, r5, lr}
	GPIO_PinState data_state = HAL_GPIO_ReadPin(keyboard.dataPort, keyboard.dataNumber);
 8002d36:	4c24      	ldr	r4, [pc, #144]	; (8002dc8 <EXTI9_5_IRQHandler+0x94>)
 8002d38:	89a1      	ldrh	r1, [r4, #12]
 8002d3a:	68a0      	ldr	r0, [r4, #8]
 8002d3c:	f000 fcf8 	bl	8003730 <HAL_GPIO_ReadPin>
	// check if we are reading during this interrupt
	if(keyboard.reading){
 8002d40:	7be3      	ldrb	r3, [r4, #15]
	GPIO_PinState data_state = HAL_GPIO_ReadPin(keyboard.dataPort, keyboard.dataNumber);
 8002d42:	4605      	mov	r5, r0
	if(keyboard.reading){
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d039      	beq.n	8002dbc <EXTI9_5_IRQHandler+0x88>
		// do not allow external reading, new key being read.
		keyboard.readyToRead = 0;
 8002d48:	2300      	movs	r3, #0
		// check if end of string
		if(keyboard.count == 9) {
 8002d4a:	7ba2      	ldrb	r2, [r4, #14]
		keyboard.readyToRead = 0;
 8002d4c:	7763      	strb	r3, [r4, #29]
		if(keyboard.count == 9) {
 8002d4e:	2a09      	cmp	r2, #9
 8002d50:	d129      	bne.n	8002da6 <EXTI9_5_IRQHandler+0x72>
			// reset read values
			keyboard.count = 0;
 8002d52:	81e3      	strh	r3, [r4, #14]
			keyboard.reading = 0;
			// update the code buffer
			keyboard.sCodeBuffer[1] = keyboard.sCodeBuffer[0];
 8002d54:	7ee3      	ldrb	r3, [r4, #27]
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002d56:	f104 0010 	add.w	r0, r4, #16
			keyboard.sCodeBuffer[1] = keyboard.sCodeBuffer[0];
 8002d5a:	7723      	strb	r3, [r4, #28]
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002d5c:	f7ff ff84 	bl	8002c68 <getSCode>
			// check stop bit(should be high)
			if(data_state != GPIO_PIN_SET){
 8002d60:	2d01      	cmp	r5, #1
			keyboard.sCodeBuffer[0] = getSCode(keyboard.scanCode);
 8002d62:	76e0      	strb	r0, [r4, #27]
			if(data_state != GPIO_PIN_SET){
 8002d64:	d018      	beq.n	8002d98 <EXTI9_5_IRQHandler+0x64>
				keyboard.sCodeBuffer[0] = 243;
 8002d66:	23f3      	movs	r3, #243	; 0xf3
			}
			else{
				// confirm odd parity
				if((keyboard.parity % 2) != 1){
					keyboard.sCodeBuffer[0] = 244;
 8002d68:	76e3      	strb	r3, [r4, #27]
				}
			}
			keyboard.parity = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	76a3      	strb	r3, [r4, #26]
			// check if the new key is readable
			// is in the list (lazy and) then check if it has an action (not 0)
			if(keyboard.sCodeBuffer[0] < 104 && getAscii() != 0){
 8002d6e:	7ee3      	ldrb	r3, [r4, #27]
 8002d70:	2b67      	cmp	r3, #103	; 0x67
 8002d72:	d816      	bhi.n	8002da2 <EXTI9_5_IRQHandler+0x6e>
 8002d74:	f7ff ffa6 	bl	8002cc4 <getAscii>
 8002d78:	b198      	cbz	r0, 8002da2 <EXTI9_5_IRQHandler+0x6e>
				// then make sure the key has changed (not just held / let go)
				if(keyboard.sCodeBuffer[0] != (keyboard.sCodeBuffer[1])){
 8002d7a:	7ee2      	ldrb	r2, [r4, #27]
 8002d7c:	7f23      	ldrb	r3, [r4, #28]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <EXTI9_5_IRQHandler+0x52>
					keyboard.readyToRead = 1;
 8002d82:	2301      	movs	r3, #1
				}
			}
			else{
				// new scancode not readable!
				keyboard.readyToRead = 0;
 8002d84:	7763      	strb	r3, [r4, #29]
			}
			if(keyboard.debug) debug();
 8002d86:	7fa3      	ldrb	r3, [r4, #30]
 8002d88:	b10b      	cbz	r3, 8002d8e <EXTI9_5_IRQHandler+0x5a>
 8002d8a:	f7ff ffbd 	bl	8002d08 <debug>
	else{
		// if not reading, check if the bit is a start bit (low) then start reading.
		if(data_state != GPIO_PIN_SET) keyboard.reading = 1;
	}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
}
 8002d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002d92:	2020      	movs	r0, #32
 8002d94:	f000 bcd8 	b.w	8003748 <HAL_GPIO_EXTI_IRQHandler>
				if((keyboard.parity % 2) != 1){
 8002d98:	7ea3      	ldrb	r3, [r4, #26]
 8002d9a:	07db      	lsls	r3, r3, #31
 8002d9c:	d4e5      	bmi.n	8002d6a <EXTI9_5_IRQHandler+0x36>
					keyboard.sCodeBuffer[0] = 244;
 8002d9e:	23f4      	movs	r3, #244	; 0xf4
 8002da0:	e7e2      	b.n	8002d68 <EXTI9_5_IRQHandler+0x34>
				keyboard.readyToRead = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e7ee      	b.n	8002d84 <EXTI9_5_IRQHandler+0x50>
			if(data_state == GPIO_PIN_SET) keyboard.scanCode[keyboard.count] = 1;
 8002da6:	2801      	cmp	r0, #1
 8002da8:	bf08      	it	eq
 8002daa:	4603      	moveq	r3, r0
			keyboard.parity += keyboard.scanCode[keyboard.count];
 8002dac:	7ea0      	ldrb	r0, [r4, #26]
 8002dae:	18a1      	adds	r1, r4, r2
			if(data_state == GPIO_PIN_SET) keyboard.scanCode[keyboard.count] = 1;
 8002db0:	740b      	strb	r3, [r1, #16]
			keyboard.count++;
 8002db2:	3201      	adds	r2, #1
			keyboard.parity += keyboard.scanCode[keyboard.count];
 8002db4:	4403      	add	r3, r0
 8002db6:	76a3      	strb	r3, [r4, #26]
			keyboard.count++;
 8002db8:	73a2      	strb	r2, [r4, #14]
 8002dba:	e7e8      	b.n	8002d8e <EXTI9_5_IRQHandler+0x5a>
		if(data_state != GPIO_PIN_SET) keyboard.reading = 1;
 8002dbc:	2801      	cmp	r0, #1
 8002dbe:	bf1c      	itt	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	73e3      	strbne	r3, [r4, #15]
 8002dc4:	e7e3      	b.n	8002d8e <EXTI9_5_IRQHandler+0x5a>
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <parseFilename>:
// Extract matrix, 004A
// Example: apple30th.0280.0FFF.bin
// Extract apple30th, 0280, 0FFF, bin
// return tapeFile struct

tapeFile* parseFilename(char* filename) {
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4605      	mov	r5, r0
    tapeFile* file = malloc(sizeof(tapeFile));
 8002dd0:	208a      	movs	r0, #138	; 0x8a
 8002dd2:	f003 fc37 	bl	8006644 <malloc>
    strcpy(file->fullName, filename);
 8002dd6:	4629      	mov	r1, r5
    tapeFile* file = malloc(sizeof(tapeFile));
 8002dd8:	4604      	mov	r4, r0
    strcpy(file->fullName, filename);
 8002dda:	f003 fd65 	bl	80068a8 <strcpy>
    char* token = strtok(filename, ".");
 8002dde:	4929      	ldr	r1, [pc, #164]	; (8002e84 <parseFilename+0xb8>)
 8002de0:	4628      	mov	r0, r5
 8002de2:	f003 fd69 	bl	80068b8 <strtok>
 8002de6:	4605      	mov	r5, r0
    writelineTerminal("Name Token:");
 8002de8:	4827      	ldr	r0, [pc, #156]	; (8002e88 <parseFilename+0xbc>)
 8002dea:	f7fe f893 	bl	8000f14 <writelineTerminal>
	writelineTerminal(token);
 8002dee:	4628      	mov	r0, r5
 8002df0:	f7fe f890 	bl	8000f14 <writelineTerminal>
    strcpy(file->name, token);
 8002df4:	4629      	mov	r1, r5
 8002df6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002dfa:	f003 fd55 	bl	80068a8 <strcpy>
    token = strtok(NULL, ".");
 8002dfe:	4921      	ldr	r1, [pc, #132]	; (8002e84 <parseFilename+0xb8>)
 8002e00:	2000      	movs	r0, #0
 8002e02:	f003 fd59 	bl	80068b8 <strtok>
 8002e06:	4605      	mov	r5, r0
    writelineTerminal("Start Token:");
 8002e08:	4820      	ldr	r0, [pc, #128]	; (8002e8c <parseFilename+0xc0>)
 8002e0a:	f7fe f883 	bl	8000f14 <writelineTerminal>
    writelineTerminal(token);
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f7fe f880 	bl	8000f14 <writelineTerminal>
    file->start = strtol(token, NULL, 16);
 8002e14:	2210      	movs	r2, #16
 8002e16:	2100      	movs	r1, #0
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f003 fe25 	bl	8006a68 <strtol>
    token = strtok(NULL, ".");
 8002e1e:	4919      	ldr	r1, [pc, #100]	; (8002e84 <parseFilename+0xb8>)
    file->start = strtol(token, NULL, 16);
 8002e20:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    token = strtok(NULL, ".");
 8002e24:	2000      	movs	r0, #0
 8002e26:	f003 fd47 	bl	80068b8 <strtok>
 8002e2a:	4605      	mov	r5, r0
    writelineTerminal("End Token:");
 8002e2c:	4818      	ldr	r0, [pc, #96]	; (8002e90 <parseFilename+0xc4>)
 8002e2e:	f7fe f871 	bl	8000f14 <writelineTerminal>
	writelineTerminal(token);
 8002e32:	4628      	mov	r0, r5
 8002e34:	f7fe f86e 	bl	8000f14 <writelineTerminal>
    file->end = strtol(token, NULL, 16);
 8002e38:	2210      	movs	r2, #16
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f003 fe13 	bl	8006a68 <strtol>
    token = strtok(NULL, ".");
 8002e42:	4910      	ldr	r1, [pc, #64]	; (8002e84 <parseFilename+0xb8>)
    file->end = strtol(token, NULL, 16);
 8002e44:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    token = strtok(NULL, ".");
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f003 fd35 	bl	80068b8 <strtok>
 8002e4e:	4605      	mov	r5, r0
    writelineTerminal("Type Token:");
 8002e50:	4810      	ldr	r0, [pc, #64]	; (8002e94 <parseFilename+0xc8>)
 8002e52:	f7fe f85f 	bl	8000f14 <writelineTerminal>
    writelineTerminal(token);
 8002e56:	4628      	mov	r0, r5
 8002e58:	f7fe f85c 	bl	8000f14 <writelineTerminal>
    // lowercase for pattern matching
    for(int i = 0; token[i]; i++)
    {
        token[i] = tolower(token[i]);
 8002e5c:	480e      	ldr	r0, [pc, #56]	; (8002e98 <parseFilename+0xcc>)
 8002e5e:	1e6a      	subs	r2, r5, #1
    for(int i = 0; token[i]; i++)
 8002e60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002e64:	b933      	cbnz	r3, 8002e74 <parseFilename+0xa8>
    }
    strcpy(file->type, token);
 8002e66:	4629      	mov	r1, r5
 8002e68:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8002e6c:	f003 fd1c 	bl	80068a8 <strcpy>
    return file;
}
 8002e70:	4620      	mov	r0, r4
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
        token[i] = tolower(token[i]);
 8002e74:	5cc1      	ldrb	r1, [r0, r3]
 8002e76:	f001 0103 	and.w	r1, r1, #3
 8002e7a:	2901      	cmp	r1, #1
 8002e7c:	bf08      	it	eq
 8002e7e:	3320      	addeq	r3, #32
 8002e80:	7013      	strb	r3, [r2, #0]
    for(int i = 0; token[i]; i++)
 8002e82:	e7ed      	b.n	8002e60 <parseFilename+0x94>
 8002e84:	08009435 	.word	0x08009435
 8002e88:	0800a654 	.word	0x0800a654
 8002e8c:	0800a660 	.word	0x0800a660
 8002e90:	0800a66d 	.word	0x0800a66d
 8002e94:	0800a678 	.word	0x0800a678
 8002e98:	0800a83d 	.word	0x0800a83d

08002e9c <loadBasic>:
// Write first 182 bytes header to RAM starting from 0x004A
// Write the rest of the file to RAM starting from the starting address
// delete the buffer
// Return 0 on success

int loadBasic(tapeFile* file) {
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	4607      	mov	r7, r0
 8002ea0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    FATFS fs;
    FIL fileHandle;
    UINT bytesRead;
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 8002ea4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8002ea8:	f003 fbcc 	bl	8006644 <malloc>
    FRESULT result = f_mount(&fs, SDPath, 1);
 8002eac:	2201      	movs	r2, #1
 8002eae:	4920      	ldr	r1, [pc, #128]	; (8002f30 <loadBasic+0x94>)
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 8002eb0:	4605      	mov	r5, r0
    FRESULT result = f_mount(&fs, SDPath, 1);
 8002eb2:	a88d      	add	r0, sp, #564	; 0x234
 8002eb4:	f003 f8c2 	bl	800603c <f_mount>
 8002eb8:	4604      	mov	r4, r0
    char* line = malloc(64);
 8002eba:	2040      	movs	r0, #64	; 0x40
 8002ebc:	f003 fbc2 	bl	8006644 <malloc>
 8002ec0:	4606      	mov	r6, r0

    if (result != FR_OK) {
 8002ec2:	bb8c      	cbnz	r4, 8002f28 <loadBasic+0x8c>
        return -1;
    }
    // open file and read in the data (up to maximum tape size)
    f_open(&fileHandle, file->fullName, FA_READ | FA_OPEN_EXISTING);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	a802      	add	r0, sp, #8
 8002eca:	f003 f8e3 	bl	8006094 <f_open>
		f_read(&fileHandle, buffer, MAX_TAPE_SIZE, &bytesRead);
 8002ece:	ab01      	add	r3, sp, #4
 8002ed0:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	a802      	add	r0, sp, #8
 8002ed8:	f003 f9a0 	bl	800621c <f_read>
		sprintf(line, "Bytes read: %d", bytesRead);
 8002edc:	9a01      	ldr	r2, [sp, #4]
 8002ede:	4915      	ldr	r1, [pc, #84]	; (8002f34 <loadBasic+0x98>)
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f003 fcc1 	bl	8006868 <siprintf>
		writelineTerminal(line);
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f7fe f814 	bl	8000f14 <writelineTerminal>
    f_close(&fileHandle);
 8002eec:	a802      	add	r0, sp, #8
 8002eee:	f003 fabd 	bl	800646c <f_close>
    // copy first 'BASIC_HEADER_SIZE' worth of data from the basic header start address
    // the rest from the file's provided start address
    memcpy(&RAM[BASIC_HEADER_START], buffer, BASIC_HEADER_SIZE);
 8002ef2:	22b6      	movs	r2, #182	; 0xb6
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	4810      	ldr	r0, [pc, #64]	; (8002f38 <loadBasic+0x9c>)
 8002ef8:	f003 fbb4 	bl	8006664 <memcpy>
    memcpy(&RAM[file->start], &buffer[BASIC_HEADER_SIZE], file->end - file->start + 1);
 8002efc:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002f00:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <loadBasic+0xa0>)
 8002f06:	1ad2      	subs	r2, r2, r3
 8002f08:	3201      	adds	r2, #1
 8002f0a:	f105 01b6 	add.w	r1, r5, #182	; 0xb6
 8002f0e:	4418      	add	r0, r3
 8002f10:	f003 fba8 	bl	8006664 <memcpy>
    free(buffer);
 8002f14:	4628      	mov	r0, r5
 8002f16:	f003 fb9d 	bl	8006654 <free>
    free(line);
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f003 fb9a 	bl	8006654 <free>
    return 0;
 8002f20:	4620      	mov	r0, r4
}
 8002f22:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e7f9      	b.n	8002f22 <loadBasic+0x86>
 8002f2e:	bf00      	nop
 8002f30:	200081f8 	.word	0x200081f8
 8002f34:	0800a684 	.word	0x0800a684
 8002f38:	200000fc 	.word	0x200000fc
 8002f3c:	200000b2 	.word	0x200000b2

08002f40 <loadBin>:
// Read binary file into buffer
// Write the file to RAM starting from the starting address
// delete the buffer
// Return 0 on success

int loadBin(tapeFile* file) {
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f42:	4607      	mov	r7, r0
 8002f44:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    FATFS fs;
    FIL fileHandle;
    UINT bytesRead;
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 8002f48:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8002f4c:	f003 fb7a 	bl	8006644 <malloc>
    FRESULT result = f_mount(&fs, SDPath, 1);
 8002f50:	2201      	movs	r2, #1
 8002f52:	491d      	ldr	r1, [pc, #116]	; (8002fc8 <loadBin+0x88>)
    uint8_t* buffer = malloc(MAX_TAPE_SIZE);
 8002f54:	4606      	mov	r6, r0
    FRESULT result = f_mount(&fs, SDPath, 1);
 8002f56:	a88d      	add	r0, sp, #564	; 0x234
 8002f58:	f003 f870 	bl	800603c <f_mount>
 8002f5c:	4604      	mov	r4, r0
    char* line = malloc(64);
 8002f5e:	2040      	movs	r0, #64	; 0x40
 8002f60:	f003 fb70 	bl	8006644 <malloc>
 8002f64:	4605      	mov	r5, r0

    if (result != FR_OK) {
 8002f66:	bb5c      	cbnz	r4, 8002fc0 <loadBin+0x80>
        return -1;
    }
    // open file and read in the data (up to maximum tape size)
    f_open(&fileHandle, file->fullName, FA_READ | FA_OPEN_EXISTING);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4639      	mov	r1, r7
 8002f6c:	a802      	add	r0, sp, #8
 8002f6e:	f003 f891 	bl	8006094 <f_open>
		f_read(&fileHandle, buffer, MAX_TAPE_SIZE, &bytesRead);
 8002f72:	ab01      	add	r3, sp, #4
 8002f74:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8002f78:	4631      	mov	r1, r6
 8002f7a:	a802      	add	r0, sp, #8
 8002f7c:	f003 f94e 	bl	800621c <f_read>
		sprintf(line, "Bytes read: %d", bytesRead);
 8002f80:	9a01      	ldr	r2, [sp, #4]
 8002f82:	4912      	ldr	r1, [pc, #72]	; (8002fcc <loadBin+0x8c>)
 8002f84:	4628      	mov	r0, r5
 8002f86:	f003 fc6f 	bl	8006868 <siprintf>
		writelineTerminal(line);
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f7fd ffc2 	bl	8000f14 <writelineTerminal>
    f_close(&fileHandle);
 8002f90:	a802      	add	r0, sp, #8
 8002f92:	f003 fa6b 	bl	800646c <f_close>
    // copy into ram at the specified start & end address
    memcpy(&RAM[file->start], buffer, file->end - file->start + 1);
 8002f96:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002f9a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <loadBin+0x90>)
 8002fa0:	1ad2      	subs	r2, r2, r3
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	3201      	adds	r2, #1
 8002fa6:	4418      	add	r0, r3
 8002fa8:	f003 fb5c 	bl	8006664 <memcpy>
    free(buffer);
 8002fac:	4630      	mov	r0, r6
 8002fae:	f003 fb51 	bl	8006654 <free>
    free(line);
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f003 fb4e 	bl	8006654 <free>
    return 0;
 8002fb8:	4620      	mov	r0, r4
}
 8002fba:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	e7f9      	b.n	8002fba <loadBin+0x7a>
 8002fc6:	bf00      	nop
 8002fc8:	200081f8 	.word	0x200081f8
 8002fcc:	0800a684 	.word	0x0800a684
 8002fd0:	200000b2 	.word	0x200000b2

08002fd4 <tapeLoading>:
// Check if the file is .basic or .bin
// Call the appropriate function
// writelineTerminal to show info and how to run the program (1. [starting address]R) if .bin
// writelineTerminal to show info and how to run the program (1. E2B3R, 2. RUN) if .basic

void tapeLoading(char* filename) {
 8002fd4:	b538      	push	{r3, r4, r5, lr}
    tapeFile* file = parseFilename(filename);
 8002fd6:	f7ff fef9 	bl	8002dcc <parseFilename>
 8002fda:	4604      	mov	r4, r0
    writelineTerminal("Extension before pattern match:");
 8002fdc:	4843      	ldr	r0, [pc, #268]	; (80030ec <tapeLoading+0x118>)
    writelineTerminal(file->type);
 8002fde:	f104 0584 	add.w	r5, r4, #132	; 0x84
    writelineTerminal("Extension before pattern match:");
 8002fe2:	f7fd ff97 	bl	8000f14 <writelineTerminal>
    writelineTerminal(file->type);
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	f7fd ff94 	bl	8000f14 <writelineTerminal>
    if (strcmp(file->type, "basic") == 0) {
 8002fec:	4628      	mov	r0, r5
 8002fee:	4940      	ldr	r1, [pc, #256]	; (80030f0 <tapeLoading+0x11c>)
 8002ff0:	f7fd f91a 	bl	8000228 <strcmp>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d138      	bne.n	800306a <tapeLoading+0x96>
        char* line = malloc(64);
 8002ff8:	2040      	movs	r0, #64	; 0x40
 8002ffa:	f003 fb23 	bl	8006644 <malloc>
 8002ffe:	4605      	mov	r5, r0
        writelineTerminal("Loading BASIC program...");
 8003000:	483c      	ldr	r0, [pc, #240]	; (80030f4 <tapeLoading+0x120>)
 8003002:	f7fd ff87 	bl	8000f14 <writelineTerminal>
        sprintf(line, "Program: %s", file->name);
 8003006:	493c      	ldr	r1, [pc, #240]	; (80030f8 <tapeLoading+0x124>)
 8003008:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800300c:	4628      	mov	r0, r5
 800300e:	f003 fc2b 	bl	8006868 <siprintf>
        writelineTerminal(line);
 8003012:	4628      	mov	r0, r5
 8003014:	f7fd ff7e 	bl	8000f14 <writelineTerminal>
        sprintf(line, "Start: %04XR", file->start);
 8003018:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800301c:	4937      	ldr	r1, [pc, #220]	; (80030fc <tapeLoading+0x128>)
 800301e:	4628      	mov	r0, r5
 8003020:	f003 fc22 	bl	8006868 <siprintf>
        writelineTerminal(line);
 8003024:	4628      	mov	r0, r5
 8003026:	f7fd ff75 	bl	8000f14 <writelineTerminal>
        sprintf(line, "End: %04XR", file->end);
 800302a:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 800302e:	4934      	ldr	r1, [pc, #208]	; (8003100 <tapeLoading+0x12c>)
 8003030:	4628      	mov	r0, r5
 8003032:	f003 fc19 	bl	8006868 <siprintf>
        writelineTerminal(line);  
 8003036:	4628      	mov	r0, r5
 8003038:	f7fd ff6c 	bl	8000f14 <writelineTerminal>
        int result = loadBasic(file);
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff ff2d 	bl	8002e9c <loadBasic>
        if (result != 0) {
 8003042:	b120      	cbz	r0, 800304e <tapeLoading+0x7a>
        sprintf(line, "1. %04XR", file->start);
        writelineTerminal(line);
        free(line);
    }
    free(file);
}
 8003044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            writelineTerminal("Error loading file.");
 8003048:	482e      	ldr	r0, [pc, #184]	; (8003104 <tapeLoading+0x130>)
 800304a:	f7fd bf63 	b.w	8000f14 <writelineTerminal>
        writelineTerminal("Program loaded.");
 800304e:	482e      	ldr	r0, [pc, #184]	; (8003108 <tapeLoading+0x134>)
 8003050:	f7fd ff60 	bl	8000f14 <writelineTerminal>
        writelineTerminal("To run, type:");
 8003054:	482d      	ldr	r0, [pc, #180]	; (800310c <tapeLoading+0x138>)
 8003056:	f7fd ff5d 	bl	8000f14 <writelineTerminal>
        writelineTerminal("1. E2B3R, 2. RUN");
 800305a:	482d      	ldr	r0, [pc, #180]	; (8003110 <tapeLoading+0x13c>)
 800305c:	f7fd ff5a 	bl	8000f14 <writelineTerminal>
    free(file);
 8003060:	4620      	mov	r0, r4
}
 8003062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free(file);
 8003066:	f003 baf5 	b.w	8006654 <free>
    } else if (strcmp(file->type, "bin") == 0) {
 800306a:	4628      	mov	r0, r5
 800306c:	4929      	ldr	r1, [pc, #164]	; (8003114 <tapeLoading+0x140>)
 800306e:	f7fd f8db 	bl	8000228 <strcmp>
 8003072:	2800      	cmp	r0, #0
 8003074:	d1f4      	bne.n	8003060 <tapeLoading+0x8c>
        char* line = malloc(64);
 8003076:	2040      	movs	r0, #64	; 0x40
 8003078:	f003 fae4 	bl	8006644 <malloc>
 800307c:	4605      	mov	r5, r0
        writelineTerminal("Loading binary program...");
 800307e:	4826      	ldr	r0, [pc, #152]	; (8003118 <tapeLoading+0x144>)
 8003080:	f7fd ff48 	bl	8000f14 <writelineTerminal>
        sprintf(line, "Program: %s", file->name);
 8003084:	491c      	ldr	r1, [pc, #112]	; (80030f8 <tapeLoading+0x124>)
 8003086:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800308a:	4628      	mov	r0, r5
 800308c:	f003 fbec 	bl	8006868 <siprintf>
        writelineTerminal(line);
 8003090:	4628      	mov	r0, r5
 8003092:	f7fd ff3f 	bl	8000f14 <writelineTerminal>
        sprintf(line, "Start: %04XR", file->start);
 8003096:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800309a:	4918      	ldr	r1, [pc, #96]	; (80030fc <tapeLoading+0x128>)
 800309c:	4628      	mov	r0, r5
 800309e:	f003 fbe3 	bl	8006868 <siprintf>
        writelineTerminal(line);
 80030a2:	4628      	mov	r0, r5
 80030a4:	f7fd ff36 	bl	8000f14 <writelineTerminal>
        sprintf(line, "End: %04XR", file->end);
 80030a8:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 80030ac:	4914      	ldr	r1, [pc, #80]	; (8003100 <tapeLoading+0x12c>)
 80030ae:	4628      	mov	r0, r5
 80030b0:	f003 fbda 	bl	8006868 <siprintf>
        writelineTerminal(line);
 80030b4:	4628      	mov	r0, r5
 80030b6:	f7fd ff2d 	bl	8000f14 <writelineTerminal>
        int result = loadBin(file);
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff ff40 	bl	8002f40 <loadBin>
        if (result != 0) {
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d1bf      	bne.n	8003044 <tapeLoading+0x70>
        writelineTerminal("Program loaded.");
 80030c4:	4810      	ldr	r0, [pc, #64]	; (8003108 <tapeLoading+0x134>)
 80030c6:	f7fd ff25 	bl	8000f14 <writelineTerminal>
        writelineTerminal("To run, type:");
 80030ca:	4810      	ldr	r0, [pc, #64]	; (800310c <tapeLoading+0x138>)
 80030cc:	f7fd ff22 	bl	8000f14 <writelineTerminal>
        sprintf(line, "1. %04XR", file->start);
 80030d0:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <tapeLoading+0x148>)
 80030d6:	4628      	mov	r0, r5
 80030d8:	f003 fbc6 	bl	8006868 <siprintf>
        writelineTerminal(line);
 80030dc:	4628      	mov	r0, r5
 80030de:	f7fd ff19 	bl	8000f14 <writelineTerminal>
        free(line);
 80030e2:	4628      	mov	r0, r5
 80030e4:	f003 fab6 	bl	8006654 <free>
 80030e8:	e7ba      	b.n	8003060 <tapeLoading+0x8c>
 80030ea:	bf00      	nop
 80030ec:	0800a693 	.word	0x0800a693
 80030f0:	0800a6b3 	.word	0x0800a6b3
 80030f4:	0800a6b9 	.word	0x0800a6b9
 80030f8:	0800a6d2 	.word	0x0800a6d2
 80030fc:	0800a6de 	.word	0x0800a6de
 8003100:	0800a6eb 	.word	0x0800a6eb
 8003104:	0800a6f6 	.word	0x0800a6f6
 8003108:	0800a70a 	.word	0x0800a70a
 800310c:	0800a71a 	.word	0x0800a71a
 8003110:	0800a728 	.word	0x0800a728
 8003114:	0800a739 	.word	0x0800a739
 8003118:	0800a73d 	.word	0x0800a73d
 800311c:	0800a757 	.word	0x0800a757

08003120 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_MspInit+0x3c>)
{
 8003122:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	619a      	str	r2, [r3, #24]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	f002 0201 	and.w	r2, r2, #1
 8003132:	9200      	str	r2, [sp, #0]
 8003134:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800313c:	61da      	str	r2, [r3, #28]
 800313e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800314a:	6853      	ldr	r3, [r2, #4]
 800314c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003156:	b002      	add	sp, #8
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000

08003164 <HAL_SD_MspInit>:
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	2210      	movs	r2, #16
{
 8003166:	b530      	push	{r4, r5, lr}
 8003168:	4604      	mov	r4, r0
 800316a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	eb0d 0002 	add.w	r0, sp, r2
 8003170:	2100      	movs	r1, #0
 8003172:	f003 fa85 	bl	8006680 <memset>
  if(hsd->Instance==SDIO)
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_SD_MspInit+0x80>)
 800317a:	429a      	cmp	r2, r3
 800317c:	d12f      	bne.n	80031de <HAL_SD_MspInit+0x7a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800317e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8003182:	695a      	ldr	r2, [r3, #20]
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2502      	movs	r5, #2
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003186:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800318a:	615a      	str	r2, [r3, #20]
 800318c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800318e:	2403      	movs	r4, #3
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003190:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003194:	9201      	str	r2, [sp, #4]
 8003196:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003198:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319a:	4813      	ldr	r0, [pc, #76]	; (80031e8 <HAL_SD_MspInit+0x84>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319c:	f042 0210 	orr.w	r2, r2, #16
 80031a0:	619a      	str	r2, [r3, #24]
 80031a2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a6:	f002 0210 	and.w	r2, r2, #16
 80031aa:	9202      	str	r2, [sp, #8]
 80031ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	619a      	str	r2, [r3, #24]
 80031b6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b8:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	9303      	str	r3, [sp, #12]
 80031c0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80031c6:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ca:	f000 f9c9 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031ce:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d0:	4806      	ldr	r0, [pc, #24]	; (80031ec <HAL_SD_MspInit+0x88>)
 80031d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031da:	f000 f9c1 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80031de:	b009      	add	sp, #36	; 0x24
 80031e0:	bd30      	pop	{r4, r5, pc}
 80031e2:	bf00      	nop
 80031e4:	40018000 	.word	0x40018000
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40011400 	.word	0x40011400

080031f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4604      	mov	r4, r0
 80031f4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f6:	2210      	movs	r2, #16
 80031f8:	2100      	movs	r1, #0
 80031fa:	a802      	add	r0, sp, #8
 80031fc:	f003 fa40 	bl	8006680 <memset>
  if(huart->Instance==USART1)
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	4b17      	ldr	r3, [pc, #92]	; (8003260 <HAL_UART_MspInit+0x70>)
 8003204:	429a      	cmp	r2, r3
 8003206:	d128      	bne.n	800325a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003208:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800320c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	4815      	ldr	r0, [pc, #84]	; (8003264 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003214:	619a      	str	r2, [r3, #24]
 8003216:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800321a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	f042 0204 	orr.w	r2, r2, #4
 8003228:	619a      	str	r2, [r3, #24]
 800322a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	f000 f98d 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800324a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800324e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f000 f983 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800325a:	b006      	add	sp, #24
 800325c:	bd10      	pop	{r4, pc}
 800325e:	bf00      	nop
 8003260:	40013800 	.word	0x40013800
 8003264:	40010800 	.word	0x40010800

08003268 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003268:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800326a:	b530      	push	{r4, r5, lr}
 800326c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800326e:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_SRAM_MspInit+0x54>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	b9fa      	cbnz	r2, 80032b6 <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 800327e:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003280:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800328a:	480e      	ldr	r0, [pc, #56]	; (80032c4 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003298:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800329e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a0:	f000 f95e 	bl	8003560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80032a4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a8:	4807      	ldr	r0, [pc, #28]	; (80032c8 <HAL_SRAM_MspInit+0x60>)
 80032aa:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b2:	f000 f955 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80032b6:	b007      	add	sp, #28
 80032b8:	bd30      	pop	{r4, r5, pc}
 80032ba:	bf00      	nop
 80032bc:	200081ec 	.word	0x200081ec
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40011800 	.word	0x40011800
 80032c8:	40011400 	.word	0x40011400

080032cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <NMI_Handler>

080032ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler>

080032d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <MemManage_Handler>

080032d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <BusFault_Handler>

080032d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler>

080032d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032d6:	4770      	bx	lr

080032d8 <DebugMon_Handler>:
 80032d8:	4770      	bx	lr

080032da <PendSV_Handler>:
 80032da:	4770      	bx	lr

080032dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032dc:	f000 b8b6 	b.w	800344c <HAL_IncTick>

080032e0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80032e0:	2001      	movs	r0, #1
 80032e2:	4770      	bx	lr

080032e4 <_kill>:

int _kill(int pid, int sig)
{
 80032e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80032e6:	f003 f983 	bl	80065f0 <__errno>
 80032ea:	2316      	movs	r3, #22
 80032ec:	6003      	str	r3, [r0, #0]
	return -1;
}
 80032ee:	f04f 30ff 	mov.w	r0, #4294967295
 80032f2:	bd08      	pop	{r3, pc}

080032f4 <_exit>:

void _exit (int status)
{
 80032f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80032f6:	f003 f97b 	bl	80065f0 <__errno>
 80032fa:	2316      	movs	r3, #22
 80032fc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80032fe:	e7fe      	b.n	80032fe <_exit+0xa>

08003300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	460d      	mov	r5, r1
 8003304:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003306:	460e      	mov	r6, r1
 8003308:	1b73      	subs	r3, r6, r5
 800330a:	429c      	cmp	r4, r3
 800330c:	dc01      	bgt.n	8003312 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800330e:	4620      	mov	r0, r4
 8003310:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003312:	f3af 8000 	nop.w
 8003316:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	e7f5      	b.n	8003308 <_read+0x8>

0800331c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	460d      	mov	r5, r1
 8003320:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003322:	460e      	mov	r6, r1
 8003324:	1b73      	subs	r3, r6, r5
 8003326:	429c      	cmp	r4, r3
 8003328:	dc01      	bgt.n	800332e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800332a:	4620      	mov	r0, r4
 800332c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800332e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003332:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	e7f5      	b.n	8003324 <_write+0x8>

08003338 <_close>:

int _close(int file)
{
	return -1;
}
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	4770      	bx	lr

0800333e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800333e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003342:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003344:	604b      	str	r3, [r1, #4]
}
 8003346:	4770      	bx	lr

08003348 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003348:	2001      	movs	r0, #1
 800334a:	4770      	bx	lr

0800334c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800334c:	2000      	movs	r0, #0
 800334e:	4770      	bx	lr

08003350 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <_sbrk+0x30>)
{
 8003352:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003354:	6811      	ldr	r1, [r2, #0]
{
 8003356:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003358:	b909      	cbnz	r1, 800335e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800335a:	490a      	ldr	r1, [pc, #40]	; (8003384 <_sbrk+0x34>)
 800335c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335e:	6810      	ldr	r0, [r2, #0]
 8003360:	4909      	ldr	r1, [pc, #36]	; (8003388 <_sbrk+0x38>)
 8003362:	4c0a      	ldr	r4, [pc, #40]	; (800338c <_sbrk+0x3c>)
 8003364:	4403      	add	r3, r0
 8003366:	1b09      	subs	r1, r1, r4
 8003368:	428b      	cmp	r3, r1
 800336a:	d906      	bls.n	800337a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800336c:	f003 f940 	bl	80065f0 <__errno>
 8003370:	230c      	movs	r3, #12
 8003372:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003374:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003378:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800337a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800337c:	e7fc      	b.n	8003378 <_sbrk+0x28>
 800337e:	bf00      	nop
 8003380:	200081f0 	.word	0x200081f0
 8003384:	20008440 	.word	0x20008440
 8003388:	20010000 	.word	0x20010000
 800338c:	00000400 	.word	0x00000400

08003390 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003390:	4770      	bx	lr
	...

08003394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003394:	f7ff fffc 	bl	8003390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800339a:	490c      	ldr	r1, [pc, #48]	; (80033cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800339c:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a0:	e002      	b.n	80033a8 <LoopCopyDataInit>

080033a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a6:	3304      	adds	r3, #4

080033a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ac:	d3f9      	bcc.n	80033a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033b0:	4c09      	ldr	r4, [pc, #36]	; (80033d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b4:	e001      	b.n	80033ba <LoopFillZerobss>

080033b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b8:	3204      	adds	r2, #4

080033ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033bc:	d3fb      	bcc.n	80033b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033be:	f003 f91d 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033c2:	f7fd ffb1 	bl	8001328 <main>
  bx lr
 80033c6:	4770      	bx	lr
  ldr r0, =_sdata
 80033c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033cc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80033d0:	0800aac0 	.word	0x0800aac0
  ldr r2, =_sbss
 80033d4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80033d8:	2000843c 	.word	0x2000843c

080033dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033dc:	e7fe      	b.n	80033dc <ADC1_2_IRQHandler>
	...

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_InitTick+0x3c>)
{
 80033e4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e6:	7818      	ldrb	r0, [r3, #0]
 80033e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_InitTick+0x40>)
 80033f2:	6810      	ldr	r0, [r2, #0]
 80033f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80033f8:	f000 f89e 	bl	8003538 <HAL_SYSTICK_Config>
 80033fc:	4604      	mov	r4, r0
 80033fe:	b958      	cbnz	r0, 8003418 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003400:	2d0f      	cmp	r5, #15
 8003402:	d809      	bhi.n	8003418 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003404:	4602      	mov	r2, r0
 8003406:	4629      	mov	r1, r5
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f000 f854 	bl	80034b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003410:	4620      	mov	r0, r4
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_InitTick+0x44>)
 8003414:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003416:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
 800341a:	e7fc      	b.n	8003416 <HAL_InitTick+0x36>
 800341c:	20000024 	.word	0x20000024
 8003420:	20000020 	.word	0x20000020
 8003424:	20000028 	.word	0x20000028

08003428 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003428:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_Init+0x20>)
{
 800342a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800342c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800342e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003430:	f043 0310 	orr.w	r3, r3, #16
 8003434:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003436:	f000 f82d 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800343a:	200f      	movs	r0, #15
 800343c:	f7ff ffd0 	bl	80033e0 <HAL_InitTick>
  HAL_MspInit();
 8003440:	f7ff fe6e 	bl	8003120 <HAL_MspInit>
}
 8003444:	2000      	movs	r0, #0
 8003446:	bd08      	pop	{r3, pc}
 8003448:	40022000 	.word	0x40022000

0800344c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800344c:	4a03      	ldr	r2, [pc, #12]	; (800345c <HAL_IncTick+0x10>)
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_IncTick+0x14>)
 8003450:	6811      	ldr	r1, [r2, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	440b      	add	r3, r1
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	200081f4 	.word	0x200081f4
 8003460:	20000024 	.word	0x20000024

08003464 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003464:	4b01      	ldr	r3, [pc, #4]	; (800346c <HAL_GetTick+0x8>)
 8003466:	6818      	ldr	r0, [r3, #0]
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	200081f4 	.word	0x200081f4

08003470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003474:	f7ff fff6 	bl	8003464 <HAL_GetTick>
 8003478:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800347c:	bf1e      	ittt	ne
 800347e:	4b04      	ldrne	r3, [pc, #16]	; (8003490 <HAL_Delay+0x20>)
 8003480:	781b      	ldrbne	r3, [r3, #0]
 8003482:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003484:	f7ff ffee 	bl	8003464 <HAL_GetTick>
 8003488:	1b43      	subs	r3, r0, r5
 800348a:	42a3      	cmp	r3, r4
 800348c:	d3fa      	bcc.n	8003484 <HAL_Delay+0x14>
  {
  }
}
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	20000024 	.word	0x20000024

08003494 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003496:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800349a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a2:	0412      	lsls	r2, r2, #16
 80034a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80034b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ba:	b530      	push	{r4, r5, lr}
 80034bc:	68dc      	ldr	r4, [r3, #12]
 80034be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	bf28      	it	cs
 80034cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d4:	bf98      	it	ls
 80034d6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034dc:	bf88      	it	hi
 80034de:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	ea21 0303 	bic.w	r3, r1, r3
 80034e4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e6:	fa05 f404 	lsl.w	r4, r5, r4
 80034ea:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80034ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	bfac      	ite	ge
 80034f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	4a07      	ldrlt	r2, [pc, #28]	; (8003518 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003500:	b2db      	uxtb	r3, r3
 8003502:	bfab      	itete	ge
 8003504:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003508:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003510:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003512:	bd30      	pop	{r4, r5, pc}
 8003514:	e000ed00 	.word	0xe000ed00
 8003518:	e000ed14 	.word	0xe000ed14

0800351c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800351c:	2800      	cmp	r0, #0
 800351e:	db08      	blt.n	8003532 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003520:	2301      	movs	r3, #1
 8003522:	0942      	lsrs	r2, r0, #5
 8003524:	f000 001f 	and.w	r0, r0, #31
 8003528:	fa03 f000 	lsl.w	r0, r3, r0
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <HAL_NVIC_EnableIRQ+0x18>)
 800352e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100

08003538 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003538:	3801      	subs	r0, #1
 800353a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800353e:	d20b      	bcs.n	8003558 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003540:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	21f0      	movs	r1, #240	; 0xf0
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003548:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800354e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003550:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003552:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003554:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003556:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003558:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003564:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003566:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003568:	4f6a      	ldr	r7, [pc, #424]	; (8003714 <HAL_GPIO_Init+0x1b4>)
 800356a:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800356c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800371c <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8003570:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8003720 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003574:	680c      	ldr	r4, [r1, #0]
 8003576:	fa34 f506 	lsrs.w	r5, r4, r6
 800357a:	d102      	bne.n	8003582 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800357c:	b003      	add	sp, #12
 800357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003582:	f04f 0801 	mov.w	r8, #1
 8003586:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 800358e:	ea38 0404 	bics.w	r4, r8, r4
 8003592:	f040 8081 	bne.w	8003698 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8003596:	684c      	ldr	r4, [r1, #4]
 8003598:	2c03      	cmp	r4, #3
 800359a:	d807      	bhi.n	80035ac <HAL_GPIO_Init+0x4c>
 800359c:	3c01      	subs	r4, #1
 800359e:	2c02      	cmp	r4, #2
 80035a0:	f200 808c 	bhi.w	80036bc <HAL_GPIO_Init+0x15c>
 80035a4:	e8df f004 	tbb	[pc, r4]
 80035a8:	a29d      	.short	0xa29d
 80035aa:	a8          	.byte	0xa8
 80035ab:	00          	.byte	0x00
 80035ac:	2c12      	cmp	r4, #18
 80035ae:	f000 80a0 	beq.w	80036f2 <HAL_GPIO_Init+0x192>
 80035b2:	d873      	bhi.n	800369c <HAL_GPIO_Init+0x13c>
 80035b4:	2c11      	cmp	r4, #17
 80035b6:	f000 8096 	beq.w	80036e6 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035ba:	2dff      	cmp	r5, #255	; 0xff
 80035bc:	bf98      	it	ls
 80035be:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035c0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035c4:	bf88      	it	hi
 80035c6:	f100 0a04 	addhi.w	sl, r0, #4
 80035ca:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035ce:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035d2:	bf88      	it	hi
 80035d4:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035d6:	fa09 fb04 	lsl.w	fp, r9, r4
 80035da:	ea28 080b 	bic.w	r8, r8, fp
 80035de:	fa02 f404 	lsl.w	r4, r2, r4
 80035e2:	ea48 0404 	orr.w	r4, r8, r4
 80035e6:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ea:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80035ee:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80035f2:	d051      	beq.n	8003698 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035f4:	69bc      	ldr	r4, [r7, #24]
 80035f6:	f026 0803 	bic.w	r8, r6, #3
 80035fa:	f044 0401 	orr.w	r4, r4, #1
 80035fe:	61bc      	str	r4, [r7, #24]
 8003600:	69bc      	ldr	r4, [r7, #24]
 8003602:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003606:	f004 0401 	and.w	r4, r4, #1
 800360a:	9401      	str	r4, [sp, #4]
 800360c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003610:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003614:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003616:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800361a:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800361e:	fa09 f90b 	lsl.w	r9, r9, fp
 8003622:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003626:	4c3f      	ldr	r4, [pc, #252]	; (8003724 <HAL_GPIO_Init+0x1c4>)
 8003628:	42a0      	cmp	r0, r4
 800362a:	d069      	beq.n	8003700 <HAL_GPIO_Init+0x1a0>
 800362c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003630:	42a0      	cmp	r0, r4
 8003632:	d067      	beq.n	8003704 <HAL_GPIO_Init+0x1a4>
 8003634:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003638:	42a0      	cmp	r0, r4
 800363a:	d065      	beq.n	8003708 <HAL_GPIO_Init+0x1a8>
 800363c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003640:	42a0      	cmp	r0, r4
 8003642:	d063      	beq.n	800370c <HAL_GPIO_Init+0x1ac>
 8003644:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003648:	42a0      	cmp	r0, r4
 800364a:	d061      	beq.n	8003710 <HAL_GPIO_Init+0x1b0>
 800364c:	4560      	cmp	r0, ip
 800364e:	bf0c      	ite	eq
 8003650:	2405      	moveq	r4, #5
 8003652:	2406      	movne	r4, #6
 8003654:	fa04 f40b 	lsl.w	r4, r4, fp
 8003658:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800365c:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003660:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003662:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003666:	bf14      	ite	ne
 8003668:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800366a:	43ac      	biceq	r4, r5
 800366c:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800366e:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003670:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003674:	bf14      	ite	ne
 8003676:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003678:	43ac      	biceq	r4, r5
 800367a:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800367c:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800367e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003682:	bf14      	ite	ne
 8003684:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003686:	43ac      	biceq	r4, r5
 8003688:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800368a:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800368c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003690:	bf14      	ite	ne
 8003692:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003694:	43ac      	biceq	r4, r5
 8003696:	601c      	str	r4, [r3, #0]
	position++;
 8003698:	3601      	adds	r6, #1
 800369a:	e76b      	b.n	8003574 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800369c:	4574      	cmp	r4, lr
 800369e:	d00d      	beq.n	80036bc <HAL_GPIO_Init+0x15c>
 80036a0:	d818      	bhi.n	80036d4 <HAL_GPIO_Init+0x174>
 80036a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003728 <HAL_GPIO_Init+0x1c8>
 80036a6:	454c      	cmp	r4, r9
 80036a8:	d008      	beq.n	80036bc <HAL_GPIO_Init+0x15c>
 80036aa:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80036ae:	454c      	cmp	r4, r9
 80036b0:	d004      	beq.n	80036bc <HAL_GPIO_Init+0x15c>
 80036b2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80036b6:	454c      	cmp	r4, r9
 80036b8:	f47f af7f 	bne.w	80035ba <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036bc:	688a      	ldr	r2, [r1, #8]
 80036be:	b1ea      	cbz	r2, 80036fc <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036c0:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80036c2:	bf08      	it	eq
 80036c4:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036c8:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80036cc:	bf18      	it	ne
 80036ce:	f8c0 8014 	strne.w	r8, [r0, #20]
 80036d2:	e772      	b.n	80035ba <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80036d4:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800372c <HAL_GPIO_Init+0x1cc>
 80036d8:	454c      	cmp	r4, r9
 80036da:	d0ef      	beq.n	80036bc <HAL_GPIO_Init+0x15c>
 80036dc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80036e0:	e7e9      	b.n	80036b6 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036e2:	68ca      	ldr	r2, [r1, #12]
          break;
 80036e4:	e769      	b.n	80035ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036e6:	68ca      	ldr	r2, [r1, #12]
 80036e8:	3204      	adds	r2, #4
          break;
 80036ea:	e766      	b.n	80035ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036ec:	68ca      	ldr	r2, [r1, #12]
 80036ee:	3208      	adds	r2, #8
          break;
 80036f0:	e763      	b.n	80035ba <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036f2:	68ca      	ldr	r2, [r1, #12]
 80036f4:	320c      	adds	r2, #12
          break;
 80036f6:	e760      	b.n	80035ba <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80036f8:	2200      	movs	r2, #0
 80036fa:	e75e      	b.n	80035ba <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036fc:	2204      	movs	r2, #4
 80036fe:	e75c      	b.n	80035ba <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003700:	2400      	movs	r4, #0
 8003702:	e7a7      	b.n	8003654 <HAL_GPIO_Init+0xf4>
 8003704:	2401      	movs	r4, #1
 8003706:	e7a5      	b.n	8003654 <HAL_GPIO_Init+0xf4>
 8003708:	2402      	movs	r4, #2
 800370a:	e7a3      	b.n	8003654 <HAL_GPIO_Init+0xf4>
 800370c:	2403      	movs	r4, #3
 800370e:	e7a1      	b.n	8003654 <HAL_GPIO_Init+0xf4>
 8003710:	2404      	movs	r4, #4
 8003712:	e79f      	b.n	8003654 <HAL_GPIO_Init+0xf4>
 8003714:	40021000 	.word	0x40021000
 8003718:	40010400 	.word	0x40010400
 800371c:	40011c00 	.word	0x40011c00
 8003720:	10220000 	.word	0x10220000
 8003724:	40010800 	.word	0x40010800
 8003728:	10120000 	.word	0x10120000
 800372c:	10310000 	.word	0x10310000

08003730 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003730:	6883      	ldr	r3, [r0, #8]
 8003732:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003734:	bf14      	ite	ne
 8003736:	2001      	movne	r0, #1
 8003738:	2000      	moveq	r0, #0
 800373a:	4770      	bx	lr

0800373c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800373c:	b10a      	cbz	r2, 8003742 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800373e:	6101      	str	r1, [r0, #16]
  }
}
 8003740:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003742:	0409      	lsls	r1, r1, #16
 8003744:	e7fb      	b.n	800373e <HAL_GPIO_WritePin+0x2>

08003746 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003746:	4770      	bx	lr

08003748 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800374a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800374c:	6951      	ldr	r1, [r2, #20]
 800374e:	4201      	tst	r1, r0
 8003750:	d002      	beq.n	8003758 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003752:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003754:	f7ff fff7 	bl	8003746 <HAL_GPIO_EXTI_Callback>
}
 8003758:	bd08      	pop	{r3, pc}
 800375a:	bf00      	nop
 800375c:	40010400 	.word	0x40010400

08003760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	4605      	mov	r5, r0
 8003766:	b338      	cbz	r0, 80037b8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003768:	6803      	ldr	r3, [r0, #0]
 800376a:	07db      	lsls	r3, r3, #31
 800376c:	d410      	bmi.n	8003790 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	682b      	ldr	r3, [r5, #0]
 8003770:	079f      	lsls	r7, r3, #30
 8003772:	d45e      	bmi.n	8003832 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	0719      	lsls	r1, r3, #28
 8003778:	f100 8095 	bmi.w	80038a6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	075a      	lsls	r2, r3, #29
 8003780:	f100 80c1 	bmi.w	8003906 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003784:	69e8      	ldr	r0, [r5, #28]
 8003786:	2800      	cmp	r0, #0
 8003788:	f040 812c 	bne.w	80039e4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800378c:	2000      	movs	r0, #0
 800378e:	e029      	b.n	80037e4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003790:	4c90      	ldr	r4, [pc, #576]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b04      	cmp	r3, #4
 800379a:	d007      	beq.n	80037ac <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d10a      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
 80037a6:	6863      	ldr	r3, [r4, #4]
 80037a8:	03de      	lsls	r6, r3, #15
 80037aa:	d507      	bpl.n	80037bc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	039c      	lsls	r4, r3, #14
 80037b0:	d5dd      	bpl.n	800376e <HAL_RCC_OscConfig+0xe>
 80037b2:	686b      	ldr	r3, [r5, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1da      	bne.n	800376e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
 80037ba:	e013      	b.n	80037e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	686b      	ldr	r3, [r5, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d112      	bne.n	80037ea <HAL_RCC_OscConfig+0x8a>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037cc:	f7ff fe4a 	bl	8003464 <HAL_GetTick>
 80037d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	0398      	lsls	r0, r3, #14
 80037d6:	d4ca      	bmi.n	800376e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7ff fe44 	bl	8003464 <HAL_GetTick>
 80037dc:	1b80      	subs	r0, r0, r6
 80037de:	2864      	cmp	r0, #100	; 0x64
 80037e0:	d9f7      	bls.n	80037d2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
}
 80037e4:	b002      	add	sp, #8
 80037e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ea:	b99b      	cbnz	r3, 8003814 <HAL_RCC_OscConfig+0xb4>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037fc:	f7ff fe32 	bl	8003464 <HAL_GetTick>
 8003800:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	0399      	lsls	r1, r3, #14
 8003806:	d5b2      	bpl.n	800376e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fe2c 	bl	8003464 <HAL_GetTick>
 800380c:	1b80      	subs	r0, r0, r6
 800380e:	2864      	cmp	r0, #100	; 0x64
 8003810:	d9f7      	bls.n	8003802 <HAL_RCC_OscConfig+0xa2>
 8003812:	e7e6      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	d103      	bne.n	8003824 <HAL_RCC_OscConfig+0xc4>
 800381c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	e7cf      	b.n	80037c4 <HAL_RCC_OscConfig+0x64>
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003830:	e7cb      	b.n	80037ca <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003832:	4c68      	ldr	r4, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	f013 0f0c 	tst.w	r3, #12
 800383a:	d007      	beq.n	800384c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	d110      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
 8003846:	6863      	ldr	r3, [r4, #4]
 8003848:	03da      	lsls	r2, r3, #15
 800384a:	d40d      	bmi.n	8003868 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	079b      	lsls	r3, r3, #30
 8003850:	d502      	bpl.n	8003858 <HAL_RCC_OscConfig+0xf8>
 8003852:	692b      	ldr	r3, [r5, #16]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d1af      	bne.n	80037b8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	696a      	ldr	r2, [r5, #20]
 800385c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003860:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	e785      	b.n	8003774 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003868:	692a      	ldr	r2, [r5, #16]
 800386a:	4b5b      	ldr	r3, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x278>)
 800386c:	b16a      	cbz	r2, 800388a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003872:	f7ff fdf7 	bl	8003464 <HAL_GetTick>
 8003876:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	079f      	lsls	r7, r3, #30
 800387c:	d4ec      	bmi.n	8003858 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7ff fdf1 	bl	8003464 <HAL_GetTick>
 8003882:	1b80      	subs	r0, r0, r6
 8003884:	2802      	cmp	r0, #2
 8003886:	d9f7      	bls.n	8003878 <HAL_RCC_OscConfig+0x118>
 8003888:	e7ab      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800388a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800388c:	f7ff fdea 	bl	8003464 <HAL_GetTick>
 8003890:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	0798      	lsls	r0, r3, #30
 8003896:	f57f af6d 	bpl.w	8003774 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7ff fde3 	bl	8003464 <HAL_GetTick>
 800389e:	1b80      	subs	r0, r0, r6
 80038a0:	2802      	cmp	r0, #2
 80038a2:	d9f6      	bls.n	8003892 <HAL_RCC_OscConfig+0x132>
 80038a4:	e79d      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a6:	69aa      	ldr	r2, [r5, #24]
 80038a8:	4e4a      	ldr	r6, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038aa:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCC_OscConfig+0x278>)
 80038ac:	b1e2      	cbz	r2, 80038e8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80038ae:	2201      	movs	r2, #1
 80038b0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80038b4:	f7ff fdd6 	bl	8003464 <HAL_GetTick>
 80038b8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038bc:	079b      	lsls	r3, r3, #30
 80038be:	d50d      	bpl.n	80038dc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80038c4:	4b45      	ldr	r3, [pc, #276]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038cc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80038ce:	bf00      	nop
  }
  while (Delay --);
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	9201      	str	r2, [sp, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f9      	bne.n	80038ce <HAL_RCC_OscConfig+0x16e>
 80038da:	e74f      	b.n	800377c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7ff fdc2 	bl	8003464 <HAL_GetTick>
 80038e0:	1b00      	subs	r0, r0, r4
 80038e2:	2802      	cmp	r0, #2
 80038e4:	d9e9      	bls.n	80038ba <HAL_RCC_OscConfig+0x15a>
 80038e6:	e77c      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80038e8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80038ec:	f7ff fdba 	bl	8003464 <HAL_GetTick>
 80038f0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038f4:	079f      	lsls	r7, r3, #30
 80038f6:	f57f af41 	bpl.w	800377c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7ff fdb3 	bl	8003464 <HAL_GetTick>
 80038fe:	1b00      	subs	r0, r0, r4
 8003900:	2802      	cmp	r0, #2
 8003902:	d9f6      	bls.n	80038f2 <HAL_RCC_OscConfig+0x192>
 8003904:	e76d      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4c33      	ldr	r4, [pc, #204]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003908:	69e3      	ldr	r3, [r4, #28]
 800390a:	00d8      	lsls	r0, r3, #3
 800390c:	d424      	bmi.n	8003958 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800390e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	69e3      	ldr	r3, [r4, #28]
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	61e3      	str	r3, [r4, #28]
 8003918:	69e3      	ldr	r3, [r4, #28]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4e2f      	ldr	r6, [pc, #188]	; (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003924:	6833      	ldr	r3, [r6, #0]
 8003926:	05d9      	lsls	r1, r3, #23
 8003928:	d518      	bpl.n	800395c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392a:	68eb      	ldr	r3, [r5, #12]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d126      	bne.n	800397e <HAL_RCC_OscConfig+0x21e>
 8003930:	6a23      	ldr	r3, [r4, #32]
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003938:	f7ff fd94 	bl	8003464 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003940:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	6a23      	ldr	r3, [r4, #32]
 8003944:	079b      	lsls	r3, r3, #30
 8003946:	d53f      	bpl.n	80039c8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003948:	2f00      	cmp	r7, #0
 800394a:	f43f af1b 	beq.w	8003784 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	69e3      	ldr	r3, [r4, #28]
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	61e3      	str	r3, [r4, #28]
 8003956:	e715      	b.n	8003784 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003958:	2700      	movs	r7, #0
 800395a:	e7e2      	b.n	8003922 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395c:	6833      	ldr	r3, [r6, #0]
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003964:	f7ff fd7e 	bl	8003464 <HAL_GetTick>
 8003968:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	6833      	ldr	r3, [r6, #0]
 800396c:	05da      	lsls	r2, r3, #23
 800396e:	d4dc      	bmi.n	800392a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003970:	f7ff fd78 	bl	8003464 <HAL_GetTick>
 8003974:	eba0 0008 	sub.w	r0, r0, r8
 8003978:	2864      	cmp	r0, #100	; 0x64
 800397a:	d9f6      	bls.n	800396a <HAL_RCC_OscConfig+0x20a>
 800397c:	e731      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397e:	b9ab      	cbnz	r3, 80039ac <HAL_RCC_OscConfig+0x24c>
 8003980:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6223      	str	r3, [r4, #32]
 800398c:	6a23      	ldr	r3, [r4, #32]
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003994:	f7ff fd66 	bl	8003464 <HAL_GetTick>
 8003998:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399a:	6a23      	ldr	r3, [r4, #32]
 800399c:	0798      	lsls	r0, r3, #30
 800399e:	d5d3      	bpl.n	8003948 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7ff fd60 	bl	8003464 <HAL_GetTick>
 80039a4:	1b80      	subs	r0, r0, r6
 80039a6:	4540      	cmp	r0, r8
 80039a8:	d9f7      	bls.n	800399a <HAL_RCC_OscConfig+0x23a>
 80039aa:	e71a      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	6a23      	ldr	r3, [r4, #32]
 80039b0:	d103      	bne.n	80039ba <HAL_RCC_OscConfig+0x25a>
 80039b2:	f043 0304 	orr.w	r3, r3, #4
 80039b6:	6223      	str	r3, [r4, #32]
 80039b8:	e7ba      	b.n	8003930 <HAL_RCC_OscConfig+0x1d0>
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6223      	str	r3, [r4, #32]
 80039c0:	6a23      	ldr	r3, [r4, #32]
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	e7b6      	b.n	8003936 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7ff fd4c 	bl	8003464 <HAL_GetTick>
 80039cc:	1b80      	subs	r0, r0, r6
 80039ce:	4540      	cmp	r0, r8
 80039d0:	d9b7      	bls.n	8003942 <HAL_RCC_OscConfig+0x1e2>
 80039d2:	e706      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	42420000 	.word	0x42420000
 80039dc:	20000020 	.word	0x20000020
 80039e0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e4:	4c2a      	ldr	r4, [pc, #168]	; (8003a90 <HAL_RCC_OscConfig+0x330>)
 80039e6:	6863      	ldr	r3, [r4, #4]
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d03e      	beq.n	8003a6e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f0:	2200      	movs	r2, #0
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_RCC_OscConfig+0x334>)
 80039f4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f8:	d12c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80039fa:	f7ff fd33 	bl	8003464 <HAL_GetTick>
 80039fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	0199      	lsls	r1, r3, #6
 8003a04:	d420      	bmi.n	8003a48 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a06:	6a2b      	ldr	r3, [r5, #32]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a0e:	6862      	ldr	r2, [r4, #4]
 8003a10:	68a9      	ldr	r1, [r5, #8]
 8003a12:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003a16:	430a      	orrs	r2, r1
 8003a18:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003a1c:	6862      	ldr	r2, [r4, #4]
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003a24:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003a26:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a28:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_RCC_OscConfig+0x334>)
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003a2e:	f7ff fd19 	bl	8003464 <HAL_GetTick>
 8003a32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	f53f aea8 	bmi.w	800378c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7ff fd12 	bl	8003464 <HAL_GetTick>
 8003a40:	1b40      	subs	r0, r0, r5
 8003a42:	2802      	cmp	r0, #2
 8003a44:	d9f6      	bls.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
 8003a46:	e6cc      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7ff fd0c 	bl	8003464 <HAL_GetTick>
 8003a4c:	1b80      	subs	r0, r0, r6
 8003a4e:	2802      	cmp	r0, #2
 8003a50:	d9d6      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2a0>
 8003a52:	e6c6      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003a54:	f7ff fd06 	bl	8003464 <HAL_GetTick>
 8003a58:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	f57f ae95 	bpl.w	800378c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7ff fcff 	bl	8003464 <HAL_GetTick>
 8003a66:	1b40      	subs	r0, r0, r5
 8003a68:	2802      	cmp	r0, #2
 8003a6a:	d9f6      	bls.n	8003a5a <HAL_RCC_OscConfig+0x2fa>
 8003a6c:	e6b9      	b.n	80037e2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6e:	2801      	cmp	r0, #1
 8003a70:	f43f aeb8 	beq.w	80037e4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003a74:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	6a2a      	ldr	r2, [r5, #32]
 8003a78:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003a7c:	4291      	cmp	r1, r2
 8003a7e:	f47f ae9b 	bne.w	80037b8 <HAL_RCC_OscConfig+0x58>
 8003a82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f43f ae7f 	beq.w	800378c <HAL_RCC_OscConfig+0x2c>
 8003a8e:	e693      	b.n	80037b8 <HAL_RCC_OscConfig+0x58>
 8003a90:	40021000 	.word	0x40021000
 8003a94:	42420000 	.word	0x42420000

08003a98 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x38>)
 8003a9a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003a9c:	f003 010c 	and.w	r1, r3, #12
 8003aa0:	2908      	cmp	r1, #8
 8003aa2:	d112      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aa4:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003aa6:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aaa:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aac:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aae:	d509      	bpl.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ab8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <HAL_RCC_GetSysClockFreq+0x44>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003abe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ac2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x48>)
 8003ac6:	4358      	muls	r0, r3
 8003ac8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	0800a778 	.word	0x0800a778
 8003ad8:	007a1200 	.word	0x007a1200
 8003adc:	0800a788 	.word	0x0800a788
 8003ae0:	003d0900 	.word	0x003d0900

08003ae4 <HAL_RCC_ClockConfig>:
{
 8003ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003aea:	4604      	mov	r4, r0
 8003aec:	b910      	cbnz	r0, 8003af4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003aee:	2001      	movs	r0, #1
}
 8003af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af4:	4a44      	ldr	r2, [pc, #272]	; (8003c08 <HAL_RCC_ClockConfig+0x124>)
 8003af6:	6813      	ldr	r3, [r2, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	428b      	cmp	r3, r1
 8003afe:	d328      	bcc.n	8003b52 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	078e      	lsls	r6, r1, #30
 8003b04:	d430      	bmi.n	8003b68 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	07ca      	lsls	r2, r1, #31
 8003b08:	d443      	bmi.n	8003b92 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x124>)
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	42ab      	cmp	r3, r5
 8003b14:	d865      	bhi.n	8003be2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	4d3c      	ldr	r5, [pc, #240]	; (8003c0c <HAL_RCC_ClockConfig+0x128>)
 8003b1a:	f012 0f04 	tst.w	r2, #4
 8003b1e:	d16c      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	0713      	lsls	r3, r2, #28
 8003b22:	d506      	bpl.n	8003b32 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b24:	686b      	ldr	r3, [r5, #4]
 8003b26:	6922      	ldr	r2, [r4, #16]
 8003b28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003b30:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b32:	f7ff ffb1 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003b36:	686b      	ldr	r3, [r5, #4]
 8003b38:	4a35      	ldr	r2, [pc, #212]	; (8003c10 <HAL_RCC_ClockConfig+0x12c>)
 8003b3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	40d8      	lsrs	r0, r3
 8003b42:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <HAL_RCC_ClockConfig+0x130>)
 8003b44:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_ClockConfig+0x134>)
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f7ff fc49 	bl	80033e0 <HAL_InitTick>
  return HAL_OK;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e7ce      	b.n	8003af0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	f023 0307 	bic.w	r3, r3, #7
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	428b      	cmp	r3, r1
 8003b64:	d1c3      	bne.n	8003aee <HAL_RCC_ClockConfig+0xa>
 8003b66:	e7cb      	b.n	8003b00 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCC_ClockConfig+0x128>)
 8003b6a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6e:	bf1e      	ittt	ne
 8003b70:	685a      	ldrne	r2, [r3, #4]
 8003b72:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003b76:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b7a:	bf42      	ittt	mi
 8003b7c:	685a      	ldrmi	r2, [r3, #4]
 8003b7e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003b82:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	68a0      	ldr	r0, [r4, #8]
 8003b88:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b8c:	4302      	orrs	r2, r0
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	e7b9      	b.n	8003b06 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	6862      	ldr	r2, [r4, #4]
 8003b94:	4e1d      	ldr	r6, [pc, #116]	; (8003c0c <HAL_RCC_ClockConfig+0x128>)
 8003b96:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b98:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	d11a      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	d0a5      	beq.n	8003aee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba8:	f023 0303 	bic.w	r3, r3, #3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003bb0:	f7ff fc58 	bl	8003464 <HAL_GetTick>
 8003bb4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	6873      	ldr	r3, [r6, #4]
 8003bb8:	6862      	ldr	r2, [r4, #4]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003bc2:	d0a2      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc4:	f7ff fc4e 	bl	8003464 <HAL_GetTick>
 8003bc8:	1bc0      	subs	r0, r0, r7
 8003bca:	4540      	cmp	r0, r8
 8003bcc:	d9f3      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003bce:	2003      	movs	r0, #3
 8003bd0:	e78e      	b.n	8003af0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd2:	2a02      	cmp	r2, #2
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bda:	e7e1      	b.n	8003ba0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bdc:	f013 0f02 	tst.w	r3, #2
 8003be0:	e7de      	b.n	8003ba0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	f023 0307 	bic.w	r3, r3, #7
 8003be8:	432b      	orrs	r3, r5
 8003bea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	42ab      	cmp	r3, r5
 8003bf4:	f47f af7b 	bne.w	8003aee <HAL_RCC_ClockConfig+0xa>
 8003bf8:	e78d      	b.n	8003b16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfa:	686b      	ldr	r3, [r5, #4]
 8003bfc:	68e1      	ldr	r1, [r4, #12]
 8003bfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c02:	430b      	orrs	r3, r1
 8003c04:	606b      	str	r3, [r5, #4]
 8003c06:	e78b      	b.n	8003b20 <HAL_RCC_ClockConfig+0x3c>
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	0800a760 	.word	0x0800a760
 8003c14:	20000020 	.word	0x20000020
 8003c18:	20000028 	.word	0x20000028

08003c1c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003c1e:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	4a03      	ldr	r2, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c2a:	6810      	ldr	r0, [r2, #0]
}
 8003c2c:	40d8      	lsrs	r0, r3
 8003c2e:	4770      	bx	lr
 8003c30:	40021000 	.word	0x40021000
 8003c34:	0800a770 	.word	0x0800a770
 8003c38:	20000020 	.word	0x20000020

08003c3c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c4a:	6810      	ldr	r0, [r2, #0]
}
 8003c4c:	40d8      	lsrs	r0, r3
 8003c4e:	4770      	bx	lr
 8003c50:	40021000 	.word	0x40021000
 8003c54:	0800a770 	.word	0x0800a770
 8003c58:	20000020 	.word	0x20000020

08003c5c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	b089      	sub	sp, #36	; 0x24
 8003c62:	4604      	mov	r4, r0
 8003c64:	460d      	mov	r5, r1
 8003c66:	4616      	mov	r6, r2
 8003c68:	469a      	mov	sl, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c6a:	f7ff fbfb 	bl	8003464 <HAL_GetTick>
 8003c6e:	4680      	mov	r8, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 8003c70:	b92d      	cbnz	r5, 8003c7e <HAL_SD_ReadBlocks+0x22>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
    return HAL_ERROR;
 8003c78:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c7a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003c7c:	e010      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8003c7e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	b2df      	uxtb	r7, r3
 8003c86:	f040 80e6 	bne.w	8003e56 <HAL_SD_ReadBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c8a:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c8c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c8e:	eb06 030a 	add.w	r3, r6, sl
 8003c92:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c94:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c96:	d907      	bls.n	8003ca8 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	b009      	add	sp, #36	; 0x24
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cb0:	2200      	movs	r2, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cb2:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003cba:	ea4f 234a 	mov.w	r3, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cbe:	f04f 0b01 	mov.w	fp, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003cc2:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003cc4:	f04f 0902 	mov.w	r9, #2
 8003cc8:	f04f 0390 	mov.w	r3, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8003ccc:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 8003cce:	bf18      	it	ne
 8003cd0:	0276      	lslne	r6, r6, #9
    hsd->Instance->DCTRL = 0U;
 8003cd2:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cd4:	a902      	add	r1, sp, #8
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003cd6:	e9cd 3904 	strd	r3, r9, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cda:	e9cd 2b06 	strd	r2, fp, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cde:	f000 fdaf 	bl	8004840 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003ce2:	45da      	cmp	sl, fp
 8003ce4:	d912      	bls.n	8003d0c <HAL_SD_ReadBlocks+0xb0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003cea:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003cee:	f000 fea1 	bl	8004a34 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cf2:	b190      	cbz	r0, 8003d1a <HAL_SD_ReadBlocks+0xbe>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	4a5a      	ldr	r2, [pc, #360]	; (8003e60 <HAL_SD_ReadBlocks+0x204>)
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003cfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cfc:	4318      	orrs	r0, r3
 8003cfe:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8003d0a:	e7c9      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003d10:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d14:	f000 fe76 	bl	8004a04 <SDMMC_CmdReadSingleBlock>
 8003d18:	e7eb      	b.n	8003cf2 <HAL_SD_ReadBlocks+0x96>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d1a:	f240 3b2a 	movw	fp, #810	; 0x32a
    dataremaining = config.DataLength;
 8003d1e:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d24:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003d28:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d2a:	d017      	beq.n	8003d5c <HAL_SD_ReadBlocks+0x100>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	d509      	bpl.n	8003d44 <HAL_SD_ReadBlocks+0xe8>
 8003d30:	f1ba 0f01 	cmp.w	sl, #1
 8003d34:	d906      	bls.n	8003d44 <HAL_SD_ReadBlocks+0xe8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003d36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d003      	beq.n	8003d44 <HAL_SD_ReadBlocks+0xe8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d3c:	f000 fec2 	bl	8004ac4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1d7      	bne.n	8003cf4 <HAL_SD_ReadBlocks+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d48:	f011 0108 	ands.w	r1, r1, #8
 8003d4c:	d038      	beq.n	8003dc0 <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d4e:	4a44      	ldr	r2, [pc, #272]	; (8003e60 <HAL_SD_ReadBlocks+0x204>)
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d54:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003d58:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d5a:	e7d1      	b.n	8003d00 <HAL_SD_ReadBlocks+0xa4>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	d51a      	bpl.n	8003d96 <HAL_SD_ReadBlocks+0x13a>
 8003d60:	b1ce      	cbz	r6, 8003d96 <HAL_SD_ReadBlocks+0x13a>
 8003d62:	f105 0904 	add.w	r9, r5, #4
 8003d66:	f105 0224 	add.w	r2, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8003d6a:	6820      	ldr	r0, [r4, #0]
 8003d6c:	9201      	str	r2, [sp, #4]
 8003d6e:	f000 fd41 	bl	80047f4 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d72:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003d74:	f809 0c04 	strb.w	r0, [r9, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d78:	f809 1c03 	strb.w	r1, [r9, #-3]
        for(count = 0U; count < 8U; count++)
 8003d7c:	9a01      	ldr	r2, [sp, #4]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d7e:	0c01      	lsrs	r1, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d80:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d82:	f809 1c02 	strb.w	r1, [r9, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d86:	f809 0c01 	strb.w	r0, [r9, #-1]
        for(count = 0U; count < 8U; count++)
 8003d8a:	f109 0904 	add.w	r9, r9, #4
 8003d8e:	454a      	cmp	r2, r9
 8003d90:	d1eb      	bne.n	8003d6a <HAL_SD_ReadBlocks+0x10e>
          tempbuff++;
 8003d92:	3520      	adds	r5, #32
          dataremaining--;
 8003d94:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d96:	f7ff fb65 	bl	8003464 <HAL_GetTick>
 8003d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d9c:	eba0 0008 	sub.w	r0, r0, r8
 8003da0:	4298      	cmp	r0, r3
 8003da2:	d3bd      	bcc.n	8003d20 <HAL_SD_ReadBlocks+0xc4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	4a2e      	ldr	r2, [pc, #184]	; (8003e60 <HAL_SD_ReadBlocks+0x204>)
        return HAL_TIMEOUT;
 8003da8:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8003dbe:	e76f      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc2:	f012 0202 	ands.w	r2, r2, #2
 8003dc6:	d00a      	beq.n	8003dde <HAL_SD_ReadBlocks+0x182>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dc8:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <HAL_SD_ReadBlocks+0x204>)
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dda:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003ddc:	e760      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003de0:	0689      	lsls	r1, r1, #26
 8003de2:	d529      	bpl.n	8003e38 <HAL_SD_ReadBlocks+0x1dc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de4:	491e      	ldr	r1, [pc, #120]	; (8003e60 <HAL_SD_ReadBlocks+0x204>)
 8003de6:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dea:	f043 0320 	orr.w	r3, r3, #32
 8003dee:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003df6:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003df8:	e752      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x44>
      data = SDIO_ReadFIFO(hsd->Instance);
 8003dfa:	f000 fcfb 	bl	80047f4 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003dfe:	0a03      	lsrs	r3, r0, #8
 8003e00:	f805 3c03 	strb.w	r3, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e04:	0c03      	lsrs	r3, r0, #16
 8003e06:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e0a:	0e03      	lsrs	r3, r0, #24
 8003e0c:	f805 3c01 	strb.w	r3, [r5, #-1]
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003e10:	f805 0c04 	strb.w	r0, [r5, #-4]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e14:	f7ff fb26 	bl	8003464 <HAL_GetTick>
 8003e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e1a:	eba0 0008 	sub.w	r0, r0, r8
 8003e1e:	4298      	cmp	r0, r3
      dataremaining--;
 8003e20:	f1a6 0604 	sub.w	r6, r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e24:	f105 0504 	add.w	r5, r5, #4
 8003e28:	d307      	bcc.n	8003e3a <HAL_SD_ReadBlocks+0x1de>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_SD_ReadBlocks+0x204>)
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e36:	e78f      	b.n	8003d58 <HAL_SD_ReadBlocks+0xfc>
 8003e38:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	d501      	bpl.n	8003e46 <HAL_SD_ReadBlocks+0x1ea>
 8003e42:	2e00      	cmp	r6, #0
 8003e44:	d1d9      	bne.n	8003dfa <HAL_SD_ReadBlocks+0x19e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e46:	f240 533a 	movw	r3, #1338	; 0x53a
 8003e4a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e4c:	2301      	movs	r3, #1
    return HAL_OK;
 8003e4e:	2700      	movs	r7, #0
    hsd->State = HAL_SD_STATE_READY;
 8003e50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003e54:	e724      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5c:	e70c      	b.n	8003c78 <HAL_SD_ReadBlocks+0x1c>
 8003e5e:	bf00      	nop
 8003e60:	004005ff 	.word	0x004005ff

08003e64 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e68:	b089      	sub	sp, #36	; 0x24
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	460d      	mov	r5, r1
 8003e6e:	4692      	mov	sl, r2
 8003e70:	461f      	mov	r7, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003e72:	f7ff faf7 	bl	8003464 <HAL_GetTick>
 8003e76:	4681      	mov	r9, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 8003e78:	b935      	cbnz	r5, 8003e88 <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
    return HAL_ERROR;
 8003e80:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e84:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003e86:	e011      	b.n	8003eac <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 8003e88:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	fa5f f883 	uxtb.w	r8, r3
 8003e92:	f040 80b1 	bne.w	8003ff8 <HAL_SD_WriteBlocks+0x194>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e96:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e98:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e9a:	eb0a 0307 	add.w	r3, sl, r7
 8003e9e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ea0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ea2:	d907      	bls.n	8003eb4 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8003eac:	4640      	mov	r0, r8
 8003eae:	b009      	add	sp, #36	; 0x24
 8003eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003eba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8003ebc:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ebe:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ec6:	ea4f 2347 	mov.w	r3, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 8003eca:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ecc:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ece:	f04f 0190 	mov.w	r1, #144	; 0x90
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003eda:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003edc:	f04f 0301 	mov.w	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ee0:	a902      	add	r1, sp, #8
      add *= 512U;
 8003ee2:	bf18      	it	ne
 8003ee4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ee8:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003eea:	f000 fca9 	bl	8004840 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003eee:	2f01      	cmp	r7, #1
 8003ef0:	d912      	bls.n	8003f18 <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003ef2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003ef8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003efa:	f000 fdcb 	bl	8004a94 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003efe:	b190      	cbz	r0, 8003f26 <HAL_SD_WriteBlocks+0xc2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	4a3f      	ldr	r2, [pc, #252]	; (8004000 <HAL_SD_WriteBlocks+0x19c>)
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f08:	4318      	orrs	r0, r3
 8003f0a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003f16:	e7c9      	b.n	8003eac <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003f18:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003f1e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003f20:	f000 fda0 	bl	8004a64 <SDMMC_CmdWriteSingleBlock>
 8003f24:	e7eb      	b.n	8003efe <HAL_SD_WriteBlocks+0x9a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f26:	f240 3a1a 	movw	sl, #794	; 0x31a
    dataremaining = config.DataLength;
 8003f2a:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f30:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003f34:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f36:	d016      	beq.n	8003f66 <HAL_SD_WriteBlocks+0x102>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	d508      	bpl.n	8003f4e <HAL_SD_WriteBlocks+0xea>
 8003f3c:	2f01      	cmp	r7, #1
 8003f3e:	d906      	bls.n	8003f4e <HAL_SD_WriteBlocks+0xea>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d003      	beq.n	8003f4e <HAL_SD_WriteBlocks+0xea>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f46:	f000 fdbd 	bl	8004ac4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d1d8      	bne.n	8003f00 <HAL_SD_WriteBlocks+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f52:	f010 0008 	ands.w	r0, r0, #8
 8003f56:	d029      	beq.n	8003fac <HAL_SD_WriteBlocks+0x148>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <HAL_SD_WriteBlocks+0x19c>)
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f5e:	f043 0308 	orr.w	r3, r3, #8
 8003f62:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f64:	e7d2      	b.n	8003f0c <HAL_SD_WriteBlocks+0xa8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003f66:	045a      	lsls	r2, r3, #17
 8003f68:	d50c      	bpl.n	8003f84 <HAL_SD_WriteBlocks+0x120>
 8003f6a:	b15e      	cbz	r6, 8003f84 <HAL_SD_WriteBlocks+0x120>
 8003f6c:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003f70:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003f78:	9201      	str	r2, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003f7a:	f000 fc3e 	bl	80047fa <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003f7e:	45ab      	cmp	fp, r5
 8003f80:	d1f6      	bne.n	8003f70 <HAL_SD_WriteBlocks+0x10c>
          dataremaining--;
 8003f82:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f84:	f7ff fa6e 	bl	8003464 <HAL_GetTick>
 8003f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f8a:	eba0 0009 	sub.w	r0, r0, r9
 8003f8e:	4298      	cmp	r0, r3
 8003f90:	d3cc      	bcc.n	8003f2c <HAL_SD_WriteBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <HAL_SD_WriteBlocks+0x19c>)
        return HAL_TIMEOUT;
 8003f96:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f9e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8003faa:	e77f      	b.n	8003eac <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fae:	f011 0102 	ands.w	r1, r1, #2
 8003fb2:	d00a      	beq.n	8003fca <HAL_SD_WriteBlocks+0x166>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_SD_WriteBlocks+0x19c>)
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fc6:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003fc8:	e770      	b.n	8003eac <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fcc:	f012 0210 	ands.w	r2, r2, #16
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_SD_WriteBlocks+0x184>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <HAL_SD_WriteBlocks+0x19c>)
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fe4:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003fe6:	e761      	b.n	8003eac <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fe8:	f240 513a 	movw	r1, #1338	; 0x53a
 8003fec:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fee:	2301      	movs	r3, #1
    return HAL_OK;
 8003ff0:	4690      	mov	r8, r2
    hsd->State = HAL_SD_STATE_READY;
 8003ff2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003ff6:	e759      	b.n	8003eac <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffe:	e73f      	b.n	8003e80 <HAL_SD_WriteBlocks+0x1c>
 8004000:	004005ff 	.word	0x004005ff

08004004 <HAL_SD_GetCardCSD>:
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004004:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8004006:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004008:	0f9a      	lsrs	r2, r3, #30
 800400a:	700a      	strb	r2, [r1, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800400c:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8004010:	704a      	strb	r2, [r1, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004012:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8004016:	708a      	strb	r2, [r1, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004018:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800401c:	70ca      	strb	r2, [r1, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800401e:	f3c3 2207 	ubfx	r2, r3, #8, #8

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004022:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004024:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004026:	714b      	strb	r3, [r1, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004028:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800402a:	0d1a      	lsrs	r2, r3, #20
 800402c:	80ca      	strh	r2, [r1, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800402e:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8004032:	720a      	strb	r2, [r1, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004034:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004038:	724a      	strb	r2, [r1, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800403a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800403e:	728a      	strb	r2, [r1, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004040:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8004044:	72ca      	strb	r2, [r1, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004046:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800404a:	730a      	strb	r2, [r1, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800404c:	2200      	movs	r2, #0
 800404e:	734a      	strb	r2, [r1, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004052:	2a00      	cmp	r2, #0
 8004054:	d16c      	bne.n	8004130 <HAL_SD_GetCardCSD+0x12c>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004056:	f640 74fc 	movw	r4, #4092	; 0xffc
 800405a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800405c:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8004060:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8004064:	610b      	str	r3, [r1, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004066:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800406a:	750b      	strb	r3, [r1, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800406c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8004070:	754b      	strb	r3, [r1, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004072:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8004076:	758b      	strb	r3, [r1, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004078:	f3c2 4382 	ubfx	r3, r2, #18, #3

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800407c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004080:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004082:	760a      	strb	r2, [r1, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004084:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004086:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004088:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800408a:	f002 0207 	and.w	r2, r2, #7
 800408e:	3202      	adds	r2, #2
 8004090:	fa03 f202 	lsl.w	r2, r3, r2
 8004094:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004096:	7a0b      	ldrb	r3, [r1, #8]
 8004098:	f003 040f 	and.w	r4, r3, #15
 800409c:	2301      	movs	r3, #1
 800409e:	40a3      	lsls	r3, r4
 80040a0:	6583      	str	r3, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80040a2:	0a5b      	lsrs	r3, r3, #9
 80040a4:	4353      	muls	r3, r2
 80040a6:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040a8:	f44f 7300 	mov.w	r3, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
    hsd->SdCard.BlockSize = 512U;
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80040ac:	6603      	str	r3, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80040ae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80040b0:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80040b4:	764a      	strb	r2, [r1, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040b6:	f3c3 12c6 	ubfx	r2, r3, #7, #7

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040be:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040c0:	76cb      	strb	r3, [r1, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80040c2:	6f03      	ldr	r3, [r0, #112]	; 0x70

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);

  pCSD->Reserved3 = 0;
 80040c4:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80040c6:	0fda      	lsrs	r2, r3, #31
 80040c8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80040ca:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80040ce:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80040d0:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80040d4:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80040d6:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80040da:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80040dc:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80040e0:	f881 2020 	strb.w	r2, [r1, #32]

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80040e4:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80040e8:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80040ec:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80040f0:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80040f4:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80040f8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80040fc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004100:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8004104:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004108:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800410c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004110:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8004114:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004118:	f3c3 2201 	ubfx	r2, r3, #8, #2

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800411c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004120:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004124:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004128:	2301      	movs	r3, #1
 800412a:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a

  return HAL_OK;
}
 800412e:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004130:	2a01      	cmp	r2, #1
 8004132:	d10f      	bne.n	8004154 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004134:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800413e:	4313      	orrs	r3, r2
 8004140:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004142:	690b      	ldr	r3, [r1, #16]
 8004144:	3301      	adds	r3, #1
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800414a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800414c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004150:	6583      	str	r3, [r0, #88]	; 0x58
 8004152:	e7ab      	b.n	80040ac <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004154:	6803      	ldr	r3, [r0, #0]
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <HAL_SD_GetCardCSD+0x168>)
 8004158:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800415a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004162:	2301      	movs	r3, #1
 8004164:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8004168:	4618      	mov	r0, r3
 800416a:	e7e0      	b.n	800412e <HAL_SD_GetCardCSD+0x12a>
 800416c:	004005ff 	.word	0x004005ff

08004170 <HAL_SD_InitCard>:
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004170:	2300      	movs	r3, #0
{
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	b098      	sub	sp, #96	; 0x60
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004178:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800417c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004180:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004182:	2376      	movs	r3, #118	; 0x76
{
 8004184:	4604      	mov	r4, r0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004186:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8004188:	ab0a      	add	r3, sp, #40	; 0x28
 800418a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800418e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004192:	ab07      	add	r3, sp, #28
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004198:	f000 fb10 	bl	80047bc <SDIO_Init>
  if(status != HAL_OK)
 800419c:	4605      	mov	r5, r0
 800419e:	2800      	cmp	r0, #0
 80041a0:	f040 80e6 	bne.w	8004370 <HAL_SD_InitCard+0x200>
  __HAL_SD_ENABLE(hsd);
 80041a4:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 80041a6:	4f73      	ldr	r7, [pc, #460]	; (8004374 <HAL_SD_InitCard+0x204>)
 80041a8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	f000 fb29 	bl	8004804 <SDIO_PowerState_ON>
  HAL_Delay(2);
 80041b2:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 80041b4:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
  HAL_Delay(2);
 80041b8:	f7ff f95a 	bl	8003470 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041bc:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80041be:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041c0:	f000 fb52 	bl	8004868 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80041c4:	4605      	mov	r5, r0
 80041c6:	b940      	cbnz	r0, 80041da <HAL_SD_InitCard+0x6a>
  {
    return errorstate;
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	f000 fdeb 	bl	8004da4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ce:	b170      	cbz	r0, 80041ee <HAL_SD_InitCard+0x7e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041d0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 80041d2:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041d4:	f000 fb48 	bl	8004868 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d8:	b190      	cbz	r0, 8004200 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 80041da:	2501      	movs	r5, #1
 80041dc:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80041e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041e2:	4303      	orrs	r3, r0
 80041e4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80041e6:	4628      	mov	r0, r5
 80041e8:	b018      	add	sp, #96	; 0x60
 80041ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041ee:	64a6      	str	r6, [r4, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041f0:	2100      	movs	r1, #0
 80041f2:	6820      	ldr	r0, [r4, #0]
 80041f4:	f000 fc98 	bl	8004b28 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f8:	b128      	cbz	r0, 8004206 <HAL_SD_InitCard+0x96>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80041fe:	e7ec      	b.n	80041da <HAL_SD_InitCard+0x6a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004200:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004202:	2b01      	cmp	r3, #1
 8004204:	d0f4      	beq.n	80041f0 <HAL_SD_InitCard+0x80>
{
 8004206:	2600      	movs	r6, #0
    }
  }
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004208:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    {
      return errorstate;
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800420c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8004378 <HAL_SD_InitCard+0x208>
 8004210:	e014      	b.n	800423c <HAL_SD_InitCard+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004212:	4631      	mov	r1, r6
 8004214:	6820      	ldr	r0, [r4, #0]
 8004216:	f000 fc87 	bl	8004b28 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800421a:	2800      	cmp	r0, #0
 800421c:	d1dd      	bne.n	80041da <HAL_SD_InitCard+0x6a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800421e:	4641      	mov	r1, r8
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	f000 fd21 	bl	8004c68 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004226:	2800      	cmp	r0, #0
 8004228:	d1e7      	bne.n	80041fa <HAL_SD_InitCard+0x8a>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800422a:	4631      	mov	r1, r6
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	f000 fb04 	bl	800483a <SDIO_GetResponse>
 8004232:	4605      	mov	r5, r0

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);

    count++;
 8004234:	9b06      	ldr	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004236:	0fc6      	lsrs	r6, r0, #31
    count++;
 8004238:	3301      	adds	r3, #1
 800423a:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800423c:	9b06      	ldr	r3, [sp, #24]
 800423e:	42bb      	cmp	r3, r7
 8004240:	d801      	bhi.n	8004246 <HAL_SD_InitCard+0xd6>
 8004242:	2e00      	cmp	r6, #0
 8004244:	d0e5      	beq.n	8004212 <HAL_SD_InitCard+0xa2>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004246:	9b06      	ldr	r3, [sp, #24]
 8004248:	42bb      	cmp	r3, r7
 800424a:	d80c      	bhi.n	8004266 <HAL_SD_InitCard+0xf6>
  uint16_t sd_rca = 1U;
 800424c:	2301      	movs	r3, #1
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800424e:	f3c5 7580 	ubfx	r5, r5, #30, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004252:	6820      	ldr	r0, [r4, #0]
 8004254:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8004256:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800425a:	f000 fad7 	bl	800480c <SDIO_GetPowerState>
 800425e:	b928      	cbnz	r0, 800426c <HAL_SD_InitCard+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004260:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8004264:	e07d      	b.n	8004362 <HAL_SD_InitCard+0x1f2>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004266:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800426a:	e7b6      	b.n	80041da <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800426c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800426e:	2b03      	cmp	r3, #3
 8004270:	d044      	beq.n	80042fc <HAL_SD_InitCard+0x18c>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	f000 fcae 	bl	8004bd4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004278:	4601      	mov	r1, r0
 800427a:	2800      	cmp	r0, #0
 800427c:	d171      	bne.n	8004362 <HAL_SD_InitCard+0x1f2>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800427e:	6820      	ldr	r0, [r4, #0]
 8004280:	f000 fadb 	bl	800483a <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004284:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004286:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	f000 fad6 	bl	800483a <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800428e:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004290:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004292:	6820      	ldr	r0, [r4, #0]
 8004294:	f000 fad1 	bl	800483a <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004298:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800429a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	f000 facc 	bl	800483a <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042a4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d027      	beq.n	80042fc <HAL_SD_InitCard+0x18c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042ac:	f10d 0116 	add.w	r1, sp, #22
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	f000 fd35 	bl	8004d20 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80042b6:	4601      	mov	r1, r0
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d152      	bne.n	8004362 <HAL_SD_InitCard+0x1f2>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042be:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d01b      	beq.n	80042fc <HAL_SD_InitCard+0x18c>
    hsd->SdCard.RelCardAdd = sd_rca;
 80042c4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80042c8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042ca:	0409      	lsls	r1, r1, #16
 80042cc:	f000 fc97 	bl	8004bfe <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	4601      	mov	r1, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d145      	bne.n	8004362 <HAL_SD_InitCard+0x1f2>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	f000 faaf 	bl	800483a <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042dc:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042de:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	f000 faaa 	bl	800483a <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042e6:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042e8:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042ea:	6820      	ldr	r0, [r4, #0]
 80042ec:	f000 faa5 	bl	800483a <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042f0:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042f2:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	f000 faa0 	bl	800483a <SDIO_GetResponse>
 80042fa:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80042fc:	2104      	movs	r1, #4
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	f000 fa9b 	bl	800483a <SDIO_GetResponse>
 8004304:	0d00      	lsrs	r0, r0, #20
 8004306:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004308:	a90d      	add	r1, sp, #52	; 0x34
 800430a:	4620      	mov	r0, r4
 800430c:	f7ff fe7a 	bl	8004004 <HAL_SD_GetCardCSD>
 8004310:	4605      	mov	r5, r0
 8004312:	bb20      	cbnz	r0, 800435e <HAL_SD_InitCard+0x1ee>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004314:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004316:	4603      	mov	r3, r0
 8004318:	0412      	lsls	r2, r2, #16
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	f000 fbec 	bl	8004af8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004320:	4601      	mov	r1, r0
 8004322:	b9f0      	cbnz	r0, 8004362 <HAL_SD_InitCard+0x1f2>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004324:	f104 0310 	add.w	r3, r4, #16
 8004328:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800432c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004330:	1d23      	adds	r3, r4, #4
 8004332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	f000 fa41 	bl	80047bc <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800433a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	f000 fb48 	bl	80049d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004344:	2800      	cmp	r0, #0
 8004346:	f43f af4e 	beq.w	80041e6 <HAL_SD_InitCard+0x76>
    hsd->State = HAL_SD_STATE_READY;
 800434a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	4a0b      	ldr	r2, [pc, #44]	; (800437c <HAL_SD_InitCard+0x20c>)
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004354:	4318      	orrs	r0, r3
 8004356:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004358:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800435c:	e743      	b.n	80041e6 <HAL_SD_InitCard+0x76>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800435e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8004362:	2501      	movs	r5, #1
 8004364:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004368:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800436a:	4319      	orrs	r1, r3
 800436c:	63a1      	str	r1, [r4, #56]	; 0x38
    return HAL_ERROR;
 800436e:	e73a      	b.n	80041e6 <HAL_SD_InitCard+0x76>
    return HAL_ERROR;
 8004370:	2501      	movs	r5, #1
 8004372:	e738      	b.n	80041e6 <HAL_SD_InitCard+0x76>
 8004374:	42300000 	.word	0x42300000
 8004378:	c1100000 	.word	0xc1100000
 800437c:	004005ff 	.word	0x004005ff

08004380 <HAL_SD_Init>:
{
 8004380:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004382:	4604      	mov	r4, r0
 8004384:	b908      	cbnz	r0, 800438a <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8004386:	2001      	movs	r0, #1
}
 8004388:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800438a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800438e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004392:	b913      	cbnz	r3, 800439a <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8004394:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8004396:	f7fe fee5 	bl	8003164 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800439a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800439c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800439e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80043a2:	f7ff fee5 	bl	8004170 <HAL_SD_InitCard>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d1ed      	bne.n	8004386 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80043aa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043ac:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80043ae:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80043b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80043b4:	e7e8      	b.n	8004388 <HAL_SD_Init+0x8>

080043b6 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80043b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80043b8:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80043ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80043bc:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80043be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80043c0:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80043c4:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043c6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80043c8:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80043ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80043cc:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80043ce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80043d0:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043d2:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 80043d4:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043d6:	61cb      	str	r3, [r1, #28]
}
 80043d8:	4770      	bx	lr

080043da <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043da:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80043dc:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043de:	0409      	lsls	r1, r1, #16
{
 80043e0:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	f000 fbb8 	bl	8004b58 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e8:	4601      	mov	r1, r0
 80043ea:	b928      	cbnz	r0, 80043f8 <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	f000 fa24 	bl	800483a <SDIO_GetResponse>
}
 80043f2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80043f6:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80043f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80043fa:	4308      	orrs	r0, r1
 80043fc:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80043fe:	2000      	movs	r0, #0
 8004400:	e7f7      	b.n	80043f2 <HAL_SD_GetCardState+0x18>

08004402 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004402:	b570      	push	{r4, r5, r6, lr}
 8004404:	460e      	mov	r6, r1
 8004406:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004408:	4604      	mov	r4, r0
 800440a:	b348      	cbz	r0, 8004460 <HAL_SRAM_Init+0x5e>
 800440c:	6983      	ldr	r3, [r0, #24]
 800440e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004412:	d025      	beq.n	8004460 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004414:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004418:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800441c:	b91b      	cbnz	r3, 8004426 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800441e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004422:	f7fe ff21 	bl	8003268 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004426:	f104 0108 	add.w	r1, r4, #8
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	f000 f958 	bl	80046e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004430:	4631      	mov	r1, r6
 8004432:	68a2      	ldr	r2, [r4, #8]
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	f000 f985 	bl	8004744 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800443a:	4629      	mov	r1, r5
 800443c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800443e:	68a2      	ldr	r2, [r4, #8]
 8004440:	6860      	ldr	r0, [r4, #4]
 8004442:	f000 f99d 	bl	8004780 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 800444a:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800444c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8004458:	2301      	movs	r3, #1
 800445a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800445e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004460:	2001      	movs	r0, #1
 8004462:	e7fc      	b.n	800445e <HAL_SRAM_Init+0x5c>

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	b510      	push	{r4, lr}
 8004466:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004468:	6803      	ldr	r3, [r0, #0]
 800446a:	68c1      	ldr	r1, [r0, #12]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004472:	430a      	orrs	r2, r1
 8004474:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004476:	6882      	ldr	r2, [r0, #8]
 8004478:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800447a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800447c:	4302      	orrs	r2, r0
 800447e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004480:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004484:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004488:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800448a:	430a      	orrs	r2, r1
 800448c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	69a1      	ldr	r1, [r4, #24]
 8004492:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004496:	430a      	orrs	r2, r1
 8004498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800449a:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <UART_SetConfig+0x70>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d115      	bne.n	80044cc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7ff fbcc 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a4:	2319      	movs	r3, #25
 80044a6:	4343      	muls	r3, r0
 80044a8:	6862      	ldr	r2, [r4, #4]
 80044aa:	6820      	ldr	r0, [r4, #0]
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b2:	2264      	movs	r2, #100	; 0x64
 80044b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80044b8:	fb02 3311 	mls	r3, r2, r1, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	; 0x32
 80044c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80044c8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80044ca:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7ff fba6 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 80044d0:	e7e8      	b.n	80044a4 <UART_SetConfig+0x40>
 80044d2:	bf00      	nop
 80044d4:	40013800 	.word	0x40013800

080044d8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	460e      	mov	r6, r1
 80044de:	4617      	mov	r7, r2
 80044e0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	ea36 0303 	bics.w	r3, r6, r3
 80044ea:	d101      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80044ec:	2000      	movs	r0, #0
 80044ee:	e028      	b.n	8004542 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	1c6b      	adds	r3, r5, #1
 80044f2:	d0f7      	beq.n	80044e4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044f4:	b125      	cbz	r5, 8004500 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80044f6:	f7fe ffb5 	bl	8003464 <HAL_GetTick>
 80044fa:	1bc0      	subs	r0, r0, r7
 80044fc:	4285      	cmp	r5, r0
 80044fe:	d2f0      	bcs.n	80044e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004500:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	f102 030c 	add.w	r3, r2, #12
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	320c      	adds	r2, #12
 8004510:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	2800      	cmp	r0, #0
 8004518:	d1f2      	bne.n	8004500 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	f101 0314 	add.w	r3, r1, #20
 800451e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	f101 0014 	add.w	r0, r1, #20
 800452a:	e840 3200 	strex	r2, r3, [r0]
 800452e:	2a00      	cmp	r2, #0
 8004530:	d1f3      	bne.n	800451a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8004532:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8004534:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8004536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 800453a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800453e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8004542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004544 <HAL_UART_Init>:
{
 8004544:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004546:	4604      	mov	r4, r0
 8004548:	b348      	cbz	r0, 800459e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800454e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004552:	b91b      	cbnz	r3, 800455c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004554:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8004558:	f7fe fe4a 	bl	80031f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800455c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800455e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004564:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004566:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800456e:	f7ff ff79 	bl	8004464 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004572:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004584:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800458e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004592:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800459c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800459e:	2001      	movs	r0, #1
 80045a0:	e7fc      	b.n	800459c <HAL_UART_Init+0x58>

080045a2 <HAL_UART_Transmit>:
{
 80045a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a6:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80045a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80045ac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80045ae:	2b20      	cmp	r3, #32
{
 80045b0:	460e      	mov	r6, r1
 80045b2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80045b4:	d13c      	bne.n	8004630 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80045b6:	2900      	cmp	r1, #0
 80045b8:	d03c      	beq.n	8004634 <HAL_UART_Transmit+0x92>
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d03a      	beq.n	8004634 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045be:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	2500      	movs	r5, #0
 80045c2:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80045c8:	f7fe ff4c 	bl	8003464 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045cc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80045ce:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80045d4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80045d6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d8:	d103      	bne.n	80045e2 <HAL_UART_Transmit+0x40>
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	b90b      	cbnz	r3, 80045e2 <HAL_UART_Transmit+0x40>
 80045de:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80045e0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80045e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b953      	cbnz	r3, 80045fe <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e8:	464b      	mov	r3, r9
 80045ea:	4642      	mov	r2, r8
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7ff ff72 	bl	80044d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80045f4:	b950      	cbnz	r0, 800460c <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80045f6:	2320      	movs	r3, #32
 80045f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80045fc:	e007      	b.n	800460e <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fe:	464b      	mov	r3, r9
 8004600:	4642      	mov	r2, r8
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	4620      	mov	r0, r4
 8004606:	f7ff ff67 	bl	80044d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800460a:	b110      	cbz	r0, 8004612 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 800460c:	2003      	movs	r0, #3
}
 800460e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004612:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004614:	b94e      	cbnz	r6, 800462a <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004616:	f835 3b02 	ldrh.w	r3, [r5], #2
 800461a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800461e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004620:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004622:	3901      	subs	r1, #1
 8004624:	b289      	uxth	r1, r1
 8004626:	84e1      	strh	r1, [r4, #38]	; 0x26
 8004628:	e7db      	b.n	80045e2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800462a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800462e:	e7f6      	b.n	800461e <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8004630:	2002      	movs	r0, #2
 8004632:	e7ec      	b.n	800460e <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8004634:	2001      	movs	r0, #1
 8004636:	e7ea      	b.n	800460e <HAL_UART_Transmit+0x6c>

08004638 <HAL_UART_Receive>:
{
 8004638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800463c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800463e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8004642:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8004644:	2b20      	cmp	r3, #32
{
 8004646:	460e      	mov	r6, r1
 8004648:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800464a:	d143      	bne.n	80046d4 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 800464c:	2900      	cmp	r1, #0
 800464e:	d043      	beq.n	80046d8 <HAL_UART_Receive+0xa0>
 8004650:	2a00      	cmp	r2, #0
 8004652:	d041      	beq.n	80046d8 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004654:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004656:	2500      	movs	r5, #0
 8004658:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800465a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465e:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8004660:	f7fe ff00 	bl	8003464 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004666:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800466c:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004670:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	d103      	bne.n	800467e <HAL_UART_Receive+0x46>
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	b90b      	cbnz	r3, 800467e <HAL_UART_Receive+0x46>
 800467a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800467c:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 800467e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8004680:	b280      	uxth	r0, r0
 8004682:	b920      	cbnz	r0, 800468e <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8004684:	2320      	movs	r3, #32
 8004686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800468e:	463b      	mov	r3, r7
 8004690:	4642      	mov	r2, r8
 8004692:	2120      	movs	r1, #32
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff ff1f 	bl	80044d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800469a:	b9f8      	cbnz	r0, 80046dc <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800469c:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800469e:	b94e      	cbnz	r6, 80046b4 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80046aa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80046b2:	e7e4      	b.n	800467e <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b4:	68a2      	ldr	r2, [r4, #8]
 80046b6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80046ba:	d002      	beq.n	80046c2 <HAL_UART_Receive+0x8a>
 80046bc:	b932      	cbnz	r2, 80046cc <HAL_UART_Receive+0x94>
 80046be:	6922      	ldr	r2, [r4, #16]
 80046c0:	b922      	cbnz	r2, 80046cc <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	b2c9      	uxtb	r1, r1
 80046c6:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80046ca:	e7ee      	b.n	80046aa <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80046d2:	e7f8      	b.n	80046c6 <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 80046d4:	2002      	movs	r0, #2
 80046d6:	e7d8      	b.n	800468a <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 80046d8:	2001      	movs	r0, #1
 80046da:	e7d6      	b.n	800468a <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 80046dc:	2003      	movs	r0, #3
 80046de:	e7d4      	b.n	800468a <HAL_UART_Receive+0x52>

080046e0 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046e0:	680a      	ldr	r2, [r1, #0]
{
 80046e2:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046e4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80046e8:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80046f2:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80046f4:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	bf0c      	ite	eq
 80046fc:	2440      	moveq	r4, #64	; 0x40
 80046fe:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004700:	4333      	orrs	r3, r6
 8004702:	68ce      	ldr	r6, [r1, #12]
 8004704:	4333      	orrs	r3, r6
 8004706:	690e      	ldr	r6, [r1, #16]
 8004708:	4333      	orrs	r3, r6
 800470a:	694e      	ldr	r6, [r1, #20]
 800470c:	4333      	orrs	r3, r6
 800470e:	69ce      	ldr	r6, [r1, #28]
 8004710:	4333      	orrs	r3, r6
 8004712:	6a0e      	ldr	r6, [r1, #32]
 8004714:	4333      	orrs	r3, r6
 8004716:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004718:	4333      	orrs	r3, r6
 800471a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800471c:	4333      	orrs	r3, r6
 800471e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8004720:	4333      	orrs	r3, r6
 8004722:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8004724:	4333      	orrs	r3, r6
 8004726:	698e      	ldr	r6, [r1, #24]
 8004728:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800472a:	4333      	orrs	r3, r6
 800472c:	430b      	orrs	r3, r1
 800472e:	4904      	ldr	r1, [pc, #16]	; (8004740 <FSMC_NORSRAM_Init+0x60>)
 8004730:	4029      	ands	r1, r5
 8004732:	430b      	orrs	r3, r1
 8004734:	4323      	orrs	r3, r4
 8004736:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 800473a:	2000      	movs	r0, #0
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	bf00      	nop
 8004740:	fff00080 	.word	0xfff00080

08004744 <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004744:	680b      	ldr	r3, [r1, #0]
{
 8004746:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004748:	698c      	ldr	r4, [r1, #24]
 800474a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800474e:	4323      	orrs	r3, r4
 8004750:	684c      	ldr	r4, [r1, #4]
 8004752:	6850      	ldr	r0, [r2, #4]
 8004754:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004758:	688c      	ldr	r4, [r1, #8]
 800475a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800475e:	68cc      	ldr	r4, [r1, #12]
 8004760:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004764:	690c      	ldr	r4, [r1, #16]
 8004766:	6949      	ldr	r1, [r1, #20]
 8004768:	3c01      	subs	r4, #1
 800476a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800476e:	3902      	subs	r1, #2
 8004770:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004774:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8004778:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 800477a:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800477c:	6053      	str	r3, [r2, #4]
}
 800477e:	bd10      	pop	{r4, pc}

08004780 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8004784:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004786:	d114      	bne.n	80047b2 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004788:	698d      	ldr	r5, [r1, #24]
 800478a:	680b      	ldr	r3, [r1, #0]
 800478c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004790:	432b      	orrs	r3, r5
 8004792:	684d      	ldr	r5, [r1, #4]
 8004794:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004798:	688d      	ldr	r5, [r1, #8]
 800479a:	68c9      	ldr	r1, [r1, #12]
 800479c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80047a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80047a4:	4904      	ldr	r1, [pc, #16]	; (80047b8 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 80047a6:	4021      	ands	r1, r4
 80047a8:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047aa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80047ae:	2000      	movs	r0, #0
 80047b0:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80047b2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80047b6:	e7f8      	b.n	80047aa <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 80047b8:	cff00000 	.word	0xcff00000

080047bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80047bc:	b084      	sub	sp, #16
 80047be:	b510      	push	{r4, lr}
 80047c0:	ac03      	add	r4, sp, #12
 80047c2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80047c6:	460b      	mov	r3, r1
 80047c8:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047ca:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80047cc:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80047ce:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047d0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 80047d4:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80047d6:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047d8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 80047dc:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80047de:	9907      	ldr	r1, [sp, #28]
 80047e0:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80047e2:	9908      	ldr	r1, [sp, #32]

  return HAL_OK;
}
 80047e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
 80047e8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047ea:	4313      	orrs	r3, r2
 80047ec:	6043      	str	r3, [r0, #4]
}
 80047ee:	b004      	add	sp, #16
 80047f0:	2000      	movs	r0, #0
 80047f2:	4770      	bx	lr

080047f4 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80047f4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80047f8:	4770      	bx	lr

080047fa <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80047fa:	680b      	ldr	r3, [r1, #0]
 80047fc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8004800:	2000      	movs	r0, #0
 8004802:	4770      	bx	lr

08004804 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004804:	2303      	movs	r3, #3
 8004806:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8004808:	2000      	movs	r0, #0
 800480a:	4770      	bx	lr

0800480c <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800480c:	6800      	ldr	r0, [r0, #0]
}
 800480e:	f000 0003 	and.w	r0, r0, #3
 8004812:	4770      	bx	lr

08004814 <SDIO_SendCommand>:
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004814:	680b      	ldr	r3, [r1, #0]
{
 8004816:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8004818:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800481a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800481c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
 8004820:	4323      	orrs	r3, r4
                       Command->Response         |\
 8004822:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8004824:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8004826:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004828:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 800482c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800482e:	f022 020f 	bic.w	r2, r2, #15
 8004832:	4313      	orrs	r3, r2
 8004834:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8004836:	2000      	movs	r0, #0
 8004838:	bd10      	pop	{r4, pc}

0800483a <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800483a:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 800483c:	5840      	ldr	r0, [r0, r1]
}  
 800483e:	4770      	bx	lr

08004840 <SDIO_ConfigData>:
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004840:	680b      	ldr	r3, [r1, #0]
{
 8004842:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8004844:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004846:	684b      	ldr	r3, [r1, #4]
 8004848:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800484a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800484e:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8004850:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004852:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 8004854:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8004856:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8004858:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800485a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800485e:	4313      	orrs	r3, r2
 8004860:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8004862:	2000      	movs	r0, #0
 8004864:	bd10      	pop	{r4, pc}
	...

08004868 <SDMMC_CmdGoIdleState>:
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004868:	2300      	movs	r3, #0
{
 800486a:	b510      	push	{r4, lr}
 800486c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800486e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004872:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004876:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800487a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800487c:	9305      	str	r3, [sp, #20]
{
 800487e:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004880:	f7ff ffc8 	bl	8004814 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004884:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <SDMMC_CmdGoIdleState+0x48>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8004896:	3b01      	subs	r3, #1
 8004898:	d307      	bcc.n	80048aa <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800489a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800489c:	0612      	lsls	r2, r2, #24
 800489e:	d5fa      	bpl.n	8004896 <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048a0:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 80048a2:	2000      	movs	r0, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048a4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80048a6:	b006      	add	sp, #24
 80048a8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80048aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80048ae:	e7fa      	b.n	80048a6 <SDMMC_CmdGoIdleState+0x3e>
 80048b0:	20000020 	.word	0x20000020

080048b4 <SDMMC_GetCmdResp1>:
{
 80048b4:	b510      	push	{r4, lr}
 80048b6:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80048b8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <SDMMC_GetCmdResp1+0x118>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80048c4:	435a      	muls	r2, r3
    if (count-- == 0U)
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	d049      	beq.n	800495e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 80048ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048cc:	f013 0f45 	tst.w	r3, #69	; 0x45
 80048d0:	d007      	beq.n	80048e2 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048d2:	051b      	lsls	r3, r3, #20
 80048d4:	d405      	bmi.n	80048e2 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d8:	0758      	lsls	r0, r3, #29
 80048da:	d504      	bpl.n	80048e6 <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048dc:	2004      	movs	r0, #4
 80048de:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	3a01      	subs	r2, #1
 80048e4:	e7ef      	b.n	80048c6 <SDMMC_GetCmdResp1+0x12>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80048e8:	f010 0001 	ands.w	r0, r0, #1
 80048ec:	d002      	beq.n	80048f4 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048ee:	2301      	movs	r3, #1
 80048f0:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048f2:	e7f5      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048f4:	23c5      	movs	r3, #197	; 0xc5
 80048f6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80048f8:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d131      	bne.n	8004964 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8004900:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004902:	4833      	ldr	r0, [pc, #204]	; (80049d0 <SDMMC_GetCmdResp1+0x11c>)
 8004904:	4018      	ands	r0, r3
 8004906:	2800      	cmp	r0, #0
 8004908:	d0ea      	beq.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800490a:	2b00      	cmp	r3, #0
 800490c:	db2c      	blt.n	8004968 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800490e:	005a      	lsls	r2, r3, #1
 8004910:	d42d      	bmi.n	800496e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004912:	009c      	lsls	r4, r3, #2
 8004914:	d42d      	bmi.n	8004972 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004916:	00d9      	lsls	r1, r3, #3
 8004918:	d42d      	bmi.n	8004976 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800491a:	011a      	lsls	r2, r3, #4
 800491c:	d42e      	bmi.n	800497c <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800491e:	015c      	lsls	r4, r3, #5
 8004920:	d42f      	bmi.n	8004982 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004922:	01d9      	lsls	r1, r3, #7
 8004924:	d430      	bmi.n	8004988 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	d431      	bmi.n	800498e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800492a:	025c      	lsls	r4, r3, #9
 800492c:	d432      	bmi.n	8004994 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800492e:	0299      	lsls	r1, r3, #10
 8004930:	d433      	bmi.n	800499a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004932:	02da      	lsls	r2, r3, #11
 8004934:	d434      	bmi.n	80049a0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004936:	035c      	lsls	r4, r3, #13
 8004938:	d435      	bmi.n	80049a6 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800493a:	0399      	lsls	r1, r3, #14
 800493c:	d436      	bmi.n	80049ac <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800493e:	03da      	lsls	r2, r3, #15
 8004940:	d437      	bmi.n	80049b2 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004942:	041c      	lsls	r4, r3, #16
 8004944:	d438      	bmi.n	80049b8 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004946:	0459      	lsls	r1, r3, #17
 8004948:	d439      	bmi.n	80049be <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800494a:	049a      	lsls	r2, r3, #18
 800494c:	d43a      	bmi.n	80049c4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800494e:	f013 0f08 	tst.w	r3, #8
 8004952:	bf14      	ite	ne
 8004954:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8004958:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800495c:	e7c0      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800495e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004962:	e7bd      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004964:	2001      	movs	r0, #1
 8004966:	e7bb      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004968:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800496c:	e7b8      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800496e:	2040      	movs	r0, #64	; 0x40
 8004970:	e7b6      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004972:	2080      	movs	r0, #128	; 0x80
 8004974:	e7b4      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004976:	f44f 7080 	mov.w	r0, #256	; 0x100
 800497a:	e7b1      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800497c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004980:	e7ae      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004982:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004986:	e7ab      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800498c:	e7a8      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800498e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004992:	e7a5      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004998:	e7a2      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800499a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800499e:	e79f      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80049a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80049a4:	e79c      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80049a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80049aa:	e799      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80049ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80049b0:	e796      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80049b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80049b6:	e793      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80049b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049bc:	e790      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80049be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80049c2:	e78d      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80049c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80049c8:	e78a      	b.n	80048e0 <SDMMC_GetCmdResp1+0x2c>
 80049ca:	bf00      	nop
 80049cc:	20000020 	.word	0x20000020
 80049d0:	fdffe008 	.word	0xfdffe008

080049d4 <SDMMC_CmdBlockLength>:
{
 80049d4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049d6:	2340      	movs	r3, #64	; 0x40
 80049d8:	2510      	movs	r5, #16
{
 80049da:	b087      	sub	sp, #28
 80049dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049de:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049e0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049e8:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049f0:	f7ff ff10 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4629      	mov	r1, r5
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7ff ff5a 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004a00:	b007      	add	sp, #28
 8004a02:	bd30      	pop	{r4, r5, pc}

08004a04 <SDMMC_CmdReadSingleBlock>:
{
 8004a04:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	2511      	movs	r5, #17
{
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a0e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a10:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a18:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a20:	f7ff fef8 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff ff42 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004a30:	b007      	add	sp, #28
 8004a32:	bd30      	pop	{r4, r5, pc}

08004a34 <SDMMC_CmdReadMultiBlock>:
{
 8004a34:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a36:	2340      	movs	r3, #64	; 0x40
 8004a38:	2512      	movs	r5, #18
{
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a3e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a40:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a48:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a50:	f7ff fee0 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f7ff ff2a 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004a60:	b007      	add	sp, #28
 8004a62:	bd30      	pop	{r4, r5, pc}

08004a64 <SDMMC_CmdWriteSingleBlock>:
{
 8004a64:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	2518      	movs	r5, #24
{
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a6e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a70:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a78:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a7a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a80:	f7ff fec8 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7ff ff12 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004a90:	b007      	add	sp, #28
 8004a92:	bd30      	pop	{r4, r5, pc}

08004a94 <SDMMC_CmdWriteMultiBlock>:
{
 8004a94:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a96:	2340      	movs	r3, #64	; 0x40
 8004a98:	2519      	movs	r5, #25
{
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a9e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004aa0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004aa8:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aaa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ab0:	f7ff feb0 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff fefa 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004ac0:	b007      	add	sp, #28
 8004ac2:	bd30      	pop	{r4, r5, pc}

08004ac4 <SDMMC_CmdStopTransfer>:
{
 8004ac4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004aca:	2240      	movs	r2, #64	; 0x40
{
 8004acc:	b087      	sub	sp, #28
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ace:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8004ad2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004ad4:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004adc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ade:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ae0:	f7ff fe98 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4a02      	ldr	r2, [pc, #8]	; (8004af4 <SDMMC_CmdStopTransfer+0x30>)
 8004aea:	f7ff fee3 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004aee:	b007      	add	sp, #28
 8004af0:	bd30      	pop	{r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	05f5e100 	.word	0x05f5e100

08004af8 <SDMMC_CmdSelDesel>:
{
 8004af8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004afa:	2340      	movs	r3, #64	; 0x40
 8004afc:	2507      	movs	r5, #7
{
 8004afe:	b087      	sub	sp, #28
 8004b00:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b02:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b06:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0c:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b0e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b10:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b14:	f7ff fe7e 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fec8 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004b24:	b007      	add	sp, #28
 8004b26:	bd30      	pop	{r4, r5, pc}

08004b28 <SDMMC_CmdAppCommand>:
{
 8004b28:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b2a:	2340      	movs	r3, #64	; 0x40
 8004b2c:	2537      	movs	r5, #55	; 0x37
{
 8004b2e:	b087      	sub	sp, #28
 8004b30:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b32:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b34:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b3c:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b3e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b44:	f7ff fe66 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff feb0 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004b54:	b007      	add	sp, #28
 8004b56:	bd30      	pop	{r4, r5, pc}

08004b58 <SDMMC_CmdSendStatus>:
{
 8004b58:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	250d      	movs	r5, #13
{
 8004b5e:	b087      	sub	sp, #28
 8004b60:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b62:	2200      	movs	r2, #0
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b64:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 8004b6c:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b6e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b70:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b74:	f7ff fe4e 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff fe98 	bl	80048b4 <SDMMC_GetCmdResp1>
}
 8004b84:	b007      	add	sp, #28
 8004b86:	bd30      	pop	{r4, r5, pc}

08004b88 <SDMMC_GetCmdResp2>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b88:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <SDMMC_GetCmdResp2+0x48>)
{
 8004b8e:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b96:	f241 3188 	movw	r1, #5000	; 0x1388
 8004b9a:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	d313      	bcc.n	8004bc8 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDIOx->STA;
 8004ba0:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ba2:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004ba6:	d0f9      	beq.n	8004b9c <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ba8:	0509      	lsls	r1, r1, #20
 8004baa:	d4f7      	bmi.n	8004b9c <SDMMC_GetCmdResp2+0x14>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004bae:	075b      	lsls	r3, r3, #29
 8004bb0:	d502      	bpl.n	8004bb8 <SDMMC_GetCmdResp2+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004bb2:	2004      	movs	r0, #4
 8004bb4:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bb6:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004bb8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8004bba:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004bc2:	23c5      	moveq	r3, #197	; 0xc5
 8004bc4:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004bc6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004bc8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000020 	.word	0x20000020

08004bd4 <SDMMC_CmdSendCID>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2202      	movs	r2, #2
{
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004bdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004be0:	22c0      	movs	r2, #192	; 0xc0
{
 8004be2:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004be4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bee:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bf0:	f7ff fe10 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff ffc7 	bl	8004b88 <SDMMC_GetCmdResp2>
}
 8004bfa:	b006      	add	sp, #24
 8004bfc:	bd10      	pop	{r4, pc}

08004bfe <SDMMC_CmdSendCSD>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004bfe:	2209      	movs	r2, #9
 8004c00:	23c0      	movs	r3, #192	; 0xc0
{
 8004c02:	b510      	push	{r4, lr}
 8004c04:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8004c0a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c10:	2100      	movs	r1, #0
{
 8004c12:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c14:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c18:	a901      	add	r1, sp, #4
 8004c1a:	f7ff fdfb 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7ff ffb2 	bl	8004b88 <SDMMC_GetCmdResp2>
}
 8004c24:	b006      	add	sp, #24
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <SDMMC_GetCmdResp3>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c28:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <SDMMC_GetCmdResp3+0x3c>)
{
 8004c2e:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c36:	f241 3188 	movw	r1, #5000	; 0x1388
 8004c3a:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	d30e      	bcc.n	8004c5e <SDMMC_GetCmdResp3+0x36>
    sta_reg = SDIOx->STA;
 8004c40:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c42:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004c46:	d0f9      	beq.n	8004c3c <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c48:	0509      	lsls	r1, r1, #20
 8004c4a:	d4f7      	bmi.n	8004c3c <SDMMC_GetCmdResp3+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c4c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8004c4e:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c52:	bf15      	itete	ne
 8004c54:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c56:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c58:	6390      	strne	r0, [r2, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c5a:	6393      	streq	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004c5c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004c5e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004c62:	4770      	bx	lr
 8004c64:	20000020 	.word	0x20000020

08004c68 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c68:	2229      	movs	r2, #41	; 0x29
 8004c6a:	2340      	movs	r3, #64	; 0x40
{
 8004c6c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c6e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8004c72:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c7c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c82:	2100      	movs	r1, #0
{
 8004c84:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c86:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c8a:	a901      	add	r1, sp, #4
 8004c8c:	f7ff fdc2 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7ff ffc9 	bl	8004c28 <SDMMC_GetCmdResp3>
}
 8004c96:	b006      	add	sp, #24
 8004c98:	bd10      	pop	{r4, pc}
	...

08004c9c <SDMMC_GetCmdResp6>:
{
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	4604      	mov	r4, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ca0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <SDMMC_GetCmdResp6+0x80>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	fbb3 f3f0 	udiv	r3, r3, r0
 8004cac:	f241 3088 	movw	r0, #5000	; 0x1388
 8004cb0:	4343      	muls	r3, r0
    if (count-- == 0U)
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	d329      	bcc.n	8004d0a <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDIOx->STA;
 8004cb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cb8:	f010 0f45 	tst.w	r0, #69	; 0x45
 8004cbc:	d0f9      	beq.n	8004cb2 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cbe:	0500      	lsls	r0, r0, #20
 8004cc0:	d4f7      	bmi.n	8004cb2 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cc4:	0758      	lsls	r0, r3, #29
 8004cc6:	d502      	bpl.n	8004cce <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cc8:	2004      	movs	r0, #4
 8004cca:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004ccc:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004cd0:	f010 0001 	ands.w	r0, r0, #1
 8004cd4:	d002      	beq.n	8004cdc <SDMMC_GetCmdResp6+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cda:	e7f7      	b.n	8004ccc <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDIOx->RESPCMD);
 8004cdc:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	d115      	bne.n	8004d10 <SDMMC_GetCmdResp6+0x74>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ce4:	23c5      	movs	r3, #197	; 0xc5
 8004ce6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004ce8:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004cea:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8004cee:	d102      	bne.n	8004cf6 <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8004cf4:	e7ea      	b.n	8004ccc <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004cf6:	045a      	lsls	r2, r3, #17
 8004cf8:	d40c      	bmi.n	8004d14 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cfa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004cfe:	bf14      	ite	ne
 8004d00:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8004d04:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004d08:	e7e0      	b.n	8004ccc <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8004d0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004d0e:	e7dd      	b.n	8004ccc <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d10:	2001      	movs	r0, #1
 8004d12:	e7db      	b.n	8004ccc <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d18:	e7d8      	b.n	8004ccc <SDMMC_GetCmdResp6+0x30>
 8004d1a:	bf00      	nop
 8004d1c:	20000020 	.word	0x20000020

08004d20 <SDMMC_CmdSetRelAdd>:
{
 8004d20:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004d22:	2300      	movs	r3, #0
 8004d24:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d26:	2240      	movs	r2, #64	; 0x40
{
 8004d28:	b086      	sub	sp, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d2a:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8004d2e:	4604      	mov	r4, r0
 8004d30:	460d      	mov	r5, r1
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004d32:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d3a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d3c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d3e:	f7ff fd69 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004d42:	462a      	mov	r2, r5
 8004d44:	4631      	mov	r1, r6
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff ffa8 	bl	8004c9c <SDMMC_GetCmdResp6>
}
 8004d4c:	b006      	add	sp, #24
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}

08004d50 <SDMMC_GetCmdResp7>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d50:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004d54:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <SDMMC_GetCmdResp7+0x50>)
{
 8004d56:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d62:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004d64:	3b01      	subs	r3, #1
 8004d66:	d317      	bcc.n	8004d98 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDIOx->STA;
 8004d68:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d6a:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004d6e:	d0f9      	beq.n	8004d64 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d70:	0508      	lsls	r0, r1, #20
 8004d72:	d4f7      	bmi.n	8004d64 <SDMMC_GetCmdResp7+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d74:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004d76:	0759      	lsls	r1, r3, #29
 8004d78:	d502      	bpl.n	8004d80 <SDMMC_GetCmdResp7+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d7a:	2004      	movs	r0, #4
 8004d7c:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d7e:	4770      	bx	lr
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d80:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8004d82:	f010 0001 	ands.w	r0, r0, #1
 8004d86:	d002      	beq.n	8004d8e <SDMMC_GetCmdResp7+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d88:	2301      	movs	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004d8a:	6393      	str	r3, [r2, #56]	; 0x38
 8004d8c:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004d8e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004d90:	065b      	lsls	r3, r3, #25
 8004d92:	d503      	bpl.n	8004d9c <SDMMC_GetCmdResp7+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	e7f8      	b.n	8004d8a <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8004d98:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000020 	.word	0x20000020

08004da4 <SDMMC_CmdOperCond>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004da4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004da8:	2308      	movs	r3, #8
{
 8004daa:	b510      	push	{r4, lr}
 8004dac:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004dae:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004db2:	2140      	movs	r1, #64	; 0x40
 8004db4:	2300      	movs	r3, #0
{
 8004db6:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004db8:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dc0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dc2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dc4:	f7ff fd26 	bl	8004814 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff ffc1 	bl	8004d50 <SDMMC_GetCmdResp7>
}
 8004dce:	b006      	add	sp, #24
 8004dd0:	bd10      	pop	{r4, pc}
	...

08004dd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004dd4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004dd6:	4903      	ldr	r1, [pc, #12]	; (8004de4 <MX_FATFS_Init+0x10>)
 8004dd8:	4803      	ldr	r0, [pc, #12]	; (8004de8 <MX_FATFS_Init+0x14>)
 8004dda:	f001 fb7b 	bl	80064d4 <FATFS_LinkDriver>
 8004dde:	4b03      	ldr	r3, [pc, #12]	; (8004dec <MX_FATFS_Init+0x18>)
 8004de0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004de2:	bd08      	pop	{r3, pc}
 8004de4:	200081f8 	.word	0x200081f8
 8004de8:	0800a828 	.word	0x0800a828
 8004dec:	200081fc 	.word	0x200081fc

08004df0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004df0:	2000      	movs	r0, #0
 8004df2:	4770      	bx	lr

08004df4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004df4:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	4601      	mov	r1, r0
 8004dfe:	4804      	ldr	r0, [pc, #16]	; (8004e10 <BSP_SD_ReadBlocks+0x1c>)
 8004e00:	f7fe ff2c 	bl	8003c5c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004e04:	3800      	subs	r0, #0
 8004e06:	bf18      	it	ne
 8004e08:	2001      	movne	r0, #1
 8004e0a:	b003      	add	sp, #12
 8004e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e10:	200080b4 	.word	0x200080b4

08004e14 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004e14:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	4804      	ldr	r0, [pc, #16]	; (8004e30 <BSP_SD_WriteBlocks+0x1c>)
 8004e20:	f7ff f820 	bl	8003e64 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004e24:	3800      	subs	r0, #0
 8004e26:	bf18      	it	ne
 8004e28:	2001      	movne	r0, #1
 8004e2a:	b003      	add	sp, #12
 8004e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e30:	200080b4 	.word	0x200080b4

08004e34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004e34:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004e36:	4803      	ldr	r0, [pc, #12]	; (8004e44 <BSP_SD_GetCardState+0x10>)
 8004e38:	f7ff facf 	bl	80043da <HAL_SD_GetCardState>
}
 8004e3c:	3804      	subs	r0, #4
 8004e3e:	bf18      	it	ne
 8004e40:	2001      	movne	r0, #1
 8004e42:	bd08      	pop	{r3, pc}
 8004e44:	200080b4 	.word	0x200080b4

08004e48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004e48:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004e4a:	4801      	ldr	r0, [pc, #4]	; (8004e50 <BSP_SD_GetCardInfo+0x8>)
 8004e4c:	f7ff bab3 	b.w	80043b6 <HAL_SD_GetCardInfo>
 8004e50:	200080b4 	.word	0x200080b4

08004e54 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8004e54:	2301      	movs	r3, #1
{
 8004e56:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8004e58:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004e5c:	f000 f816 	bl	8004e8c <BSP_PlatformIsDetected>
 8004e60:	b908      	cbnz	r0, 8004e66 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8004e62:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8004e66:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004e6a:	b003      	add	sp, #12
 8004e6c:	f85d fb04 	ldr.w	pc, [sp], #4

08004e70 <BSP_SD_Init>:
{
 8004e70:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004e72:	f7ff ffef 	bl	8004e54 <BSP_SD_IsDetected>
 8004e76:	2801      	cmp	r0, #1
 8004e78:	d104      	bne.n	8004e84 <BSP_SD_Init+0x14>
}
 8004e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sd_state = HAL_SD_Init(&hsd);
 8004e7e:	4802      	ldr	r0, [pc, #8]	; (8004e88 <BSP_SD_Init+0x18>)
 8004e80:	f7ff ba7e 	b.w	8004380 <HAL_SD_Init>
}
 8004e84:	2001      	movs	r0, #1
 8004e86:	bd08      	pop	{r3, pc}
 8004e88:	200080b4 	.word	0x200080b4

08004e8c <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
uint8_t	BSP_PlatformIsDetected(void) {
 8004e90:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004e92:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <BSP_PlatformIsDetected+0x14>)
 8004e94:	f7fe fc4c 	bl	8003730 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8004e98:	fab0 f080 	clz	r0, r0
 8004e9c:	0940      	lsrs	r0, r0, #5
 8004e9e:	bd08      	pop	{r3, pc}
 8004ea0:	40010c00 	.word	0x40010c00

08004ea4 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <disk_status+0x10>)
 8004ea6:	181a      	adds	r2, r3, r0
 8004ea8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	7a10      	ldrb	r0, [r2, #8]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4718      	bx	r3
 8004eb4:	20008420 	.word	0x20008420

08004eb8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <disk_initialize+0x1c>)
 8004eba:	5c1a      	ldrb	r2, [r3, r0]
 8004ebc:	b942      	cbnz	r2, 8004ed0 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004ec2:	181a      	adds	r2, r3, r0
 8004ec4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	7a10      	ldrb	r0, [r2, #8]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4718      	bx	r3
  }
  return stat;
}
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	4770      	bx	lr
 8004ed4:	20008420 	.word	0x20008420

08004ed8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ed8:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004eda:	4c05      	ldr	r4, [pc, #20]	; (8004ef0 <disk_read+0x18>)
 8004edc:	1825      	adds	r5, r4, r0
 8004ede:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004ee2:	6860      	ldr	r0, [r4, #4]
 8004ee4:	6884      	ldr	r4, [r0, #8]
 8004ee6:	7a28      	ldrb	r0, [r5, #8]
 8004ee8:	46a4      	mov	ip, r4
  return res;
}
 8004eea:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004eec:	4760      	bx	ip
 8004eee:	bf00      	nop
 8004ef0:	20008420 	.word	0x20008420

08004ef4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ef4:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ef6:	4c05      	ldr	r4, [pc, #20]	; (8004f0c <disk_write+0x18>)
 8004ef8:	1825      	adds	r5, r4, r0
 8004efa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004efe:	6860      	ldr	r0, [r4, #4]
 8004f00:	68c4      	ldr	r4, [r0, #12]
 8004f02:	7a28      	ldrb	r0, [r5, #8]
 8004f04:	46a4      	mov	ip, r4
  return res;
}
 8004f06:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f08:	4760      	bx	ip
 8004f0a:	bf00      	nop
 8004f0c:	20008420 	.word	0x20008420

08004f10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f10:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <disk_ioctl+0x14>)
 8004f14:	181c      	adds	r4, r3, r0
 8004f16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	7a20      	ldrb	r0, [r4, #8]
 8004f1e:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8004f20:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f22:	4718      	bx	r3
 8004f24:	20008420 	.word	0x20008420

08004f28 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004f28:	3801      	subs	r0, #1
 8004f2a:	440a      	add	r2, r1
 8004f2c:	4291      	cmp	r1, r2
 8004f2e:	d100      	bne.n	8004f32 <mem_cpy+0xa>
		*d++ = *s++;
}
 8004f30:	4770      	bx	lr
		*d++ = *s++;
 8004f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f36:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004f3a:	e7f7      	b.n	8004f2c <mem_cpy+0x4>

08004f3c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4290      	cmp	r0, r2
 8004f40:	d100      	bne.n	8004f44 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8004f42:	4770      	bx	lr
		*d++ = (BYTE)val;
 8004f44:	f800 1b01 	strb.w	r1, [r0], #1
 8004f48:	e7f9      	b.n	8004f3e <mem_set+0x2>
	...

08004f4c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8004f4c:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <chk_lock+0x80>)
{
 8004f4e:	4603      	mov	r3, r0
		if (Files[i].fs) {	/* Existing entry */
 8004f50:	6810      	ldr	r0, [r2, #0]
{
 8004f52:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8004f54:	b178      	cbz	r0, 8004f76 <chk_lock+0x2a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004f56:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8004f5a:	4284      	cmp	r4, r0
 8004f5c:	d109      	bne.n	8004f72 <chk_lock+0x26>
 8004f5e:	6854      	ldr	r4, [r2, #4]
 8004f60:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8004f64:	4284      	cmp	r4, r0
 8004f66:	d104      	bne.n	8004f72 <chk_lock+0x26>
				Files[i].clu == dp->sclust &&
 8004f68:	8914      	ldrh	r4, [r2, #8]
 8004f6a:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004f6e:	4284      	cmp	r4, r0
 8004f70:	d024      	beq.n	8004fbc <chk_lock+0x70>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f72:	2400      	movs	r4, #0
 8004f74:	e000      	b.n	8004f78 <chk_lock+0x2c>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 8004f76:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8004f78:	68d0      	ldr	r0, [r2, #12]
 8004f7a:	b190      	cbz	r0, 8004fa2 <chk_lock+0x56>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004f7c:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
 8004f80:	42a8      	cmp	r0, r5
 8004f82:	d109      	bne.n	8004f98 <chk_lock+0x4c>
 8004f84:	6915      	ldr	r5, [r2, #16]
 8004f86:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8004f8a:	4285      	cmp	r5, r0
 8004f8c:	d104      	bne.n	8004f98 <chk_lock+0x4c>
				Files[i].clu == dp->sclust &&
 8004f8e:	8a90      	ldrh	r0, [r2, #20]
 8004f90:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004f94:	4298      	cmp	r0, r3
 8004f96:	d016      	beq.n	8004fc6 <chk_lock+0x7a>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f98:	b974      	cbnz	r4, 8004fb8 <chk_lock+0x6c>
 8004f9a:	2902      	cmp	r1, #2
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2000      	moveq	r0, #0
 8004fa0:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8004fa2:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fa4:	210c      	movs	r1, #12
 8004fa6:	fb01 2303 	mla	r3, r1, r3, r2
 8004faa:	895b      	ldrh	r3, [r3, #10]
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb0:	bf14      	ite	ne
 8004fb2:	2000      	movne	r0, #0
 8004fb4:	2010      	moveq	r0, #16
 8004fb6:	e7f4      	b.n	8004fa2 <chk_lock+0x56>
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e7f2      	b.n	8004fa2 <chk_lock+0x56>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fbc:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <chk_lock+0x58>
 8004fc2:	2010      	movs	r0, #16
 8004fc4:	e7ed      	b.n	8004fa2 <chk_lock+0x56>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e7f9      	b.n	8004fbe <chk_lock+0x72>
 8004fca:	bf00      	nop
 8004fcc:	20008204 	.word	0x20008204

08004fd0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8004fd0:	4a24      	ldr	r2, [pc, #144]	; (8005064 <inc_lock+0x94>)
{
 8004fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 8004fda:	429e      	cmp	r6, r3
 8004fdc:	d109      	bne.n	8004ff2 <inc_lock+0x22>
 8004fde:	6855      	ldr	r5, [r2, #4]
 8004fe0:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 8004fe4:	42a5      	cmp	r5, r4
 8004fe6:	d104      	bne.n	8004ff2 <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
 8004fe8:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8004fec:	8914      	ldrh	r4, [r2, #8]
 8004fee:	42a5      	cmp	r5, r4
 8004ff0:	d028      	beq.n	8005044 <inc_lock+0x74>
		if (Files[i].fs == dp->fs &&
 8004ff2:	68d4      	ldr	r4, [r2, #12]
 8004ff4:	42b4      	cmp	r4, r6
 8004ff6:	d109      	bne.n	800500c <inc_lock+0x3c>
 8004ff8:	6917      	ldr	r7, [r2, #16]
 8004ffa:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8004ffe:	42af      	cmp	r7, r5
 8005000:	d104      	bne.n	800500c <inc_lock+0x3c>
			Files[i].clu == dp->sclust &&
 8005002:	8a97      	ldrh	r7, [r2, #20]
 8005004:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8005008:	42af      	cmp	r7, r5
 800500a:	d026      	beq.n	800505a <inc_lock+0x8a>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800500c:	b10b      	cbz	r3, 8005012 <inc_lock+0x42>
 800500e:	bb34      	cbnz	r4, 800505e <inc_lock+0x8e>
 8005010:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8005012:	240c      	movs	r4, #12
 8005014:	435c      	muls	r4, r3
 8005016:	1915      	adds	r5, r2, r4
 8005018:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 800501a:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 800501e:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
		Files[i].clu = dp->sclust;
 8005022:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 8005024:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8005026:	2000      	movs	r0, #0
 8005028:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800502a:	b999      	cbnz	r1, 8005054 <inc_lock+0x84>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800502c:	210c      	movs	r1, #12
 800502e:	fb01 2103 	mla	r1, r1, r3, r2
 8005032:	8949      	ldrh	r1, [r1, #10]
 8005034:	3101      	adds	r1, #1
 8005036:	b289      	uxth	r1, r1
 8005038:	200c      	movs	r0, #12
 800503a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 800503e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005040:	8151      	strh	r1, [r2, #10]
}
 8005042:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005044:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005046:	2900      	cmp	r1, #0
 8005048:	d0f0      	beq.n	800502c <inc_lock+0x5c>
 800504a:	210c      	movs	r1, #12
 800504c:	fb01 2103 	mla	r1, r1, r3, r2
 8005050:	8949      	ldrh	r1, [r1, #10]
 8005052:	b921      	cbnz	r1, 800505e <inc_lock+0x8e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005058:	e7ee      	b.n	8005038 <inc_lock+0x68>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800505a:	2301      	movs	r3, #1
 800505c:	e7f3      	b.n	8005046 <inc_lock+0x76>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800505e:	2000      	movs	r0, #0
 8005060:	e7ef      	b.n	8005042 <inc_lock+0x72>
 8005062:	bf00      	nop
 8005064:	20008204 	.word	0x20008204

08005068 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005068:	3801      	subs	r0, #1
 800506a:	2801      	cmp	r0, #1
 800506c:	d817      	bhi.n	800509e <dec_lock+0x36>
		n = Files[i].ctr;
 800506e:	220c      	movs	r2, #12
 8005070:	490c      	ldr	r1, [pc, #48]	; (80050a4 <dec_lock+0x3c>)
 8005072:	fb02 1200 	mla	r2, r2, r0, r1
 8005076:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507c:	d106      	bne.n	800508c <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 800507e:	2300      	movs	r3, #0
 8005080:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005082:	230c      	movs	r3, #12
 8005084:	4358      	muls	r0, r3
 8005086:	2300      	movs	r3, #0
 8005088:	500b      	str	r3, [r1, r0]
 800508a:	e006      	b.n	800509a <dec_lock+0x32>
		if (n) n--;					/* Decrement read mode open count */
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f8      	beq.n	8005082 <dec_lock+0x1a>
 8005090:	3b01      	subs	r3, #1
 8005092:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8005094:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f3      	beq.n	8005082 <dec_lock+0x1a>
		res = FR_OK;
 800509a:	2000      	movs	r0, #0
 800509c:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800509e:	2002      	movs	r0, #2
	}
	return res;
}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20008204 	.word	0x20008204

080050a8 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <clear_lock+0x18>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4290      	cmp	r0, r2
 80050ae:	bf04      	itt	eq
 80050b0:	2200      	moveq	r2, #0
 80050b2:	601a      	streq	r2, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	4290      	cmp	r0, r2
 80050b8:	bf04      	itt	eq
 80050ba:	2200      	moveq	r2, #0
 80050bc:	60da      	streq	r2, [r3, #12]
	}
}
 80050be:	4770      	bx	lr
 80050c0:	20008204 	.word	0x20008204

080050c4 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80050c4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 80050c8:	0a49      	lsrs	r1, r1, #9
 80050ca:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80050ce:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80050d2:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80050d6:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050d8:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80050da:	b130      	cbz	r0, 80050ea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80050dc:	4281      	cmp	r1, r0
 80050de:	d302      	bcc.n	80050e6 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80050e0:	1a09      	subs	r1, r1, r0
 80050e2:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050e4:	e7f8      	b.n	80050d8 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80050e6:	6858      	ldr	r0, [r3, #4]
 80050e8:	4408      	add	r0, r1
}
 80050ea:	4770      	bx	lr

080050ec <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80050ec:	4603      	mov	r3, r0
 80050ee:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 80050f2:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80050f4:	01c2      	lsls	r2, r0, #7
 80050f6:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 80050fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050fe:	4410      	add	r0, r2
 8005100:	428b      	cmp	r3, r1
 8005102:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8005106:	d1f5      	bne.n	80050f4 <sum_sfn+0x8>
	return sum;
}
 8005108:	4770      	bx	lr

0800510a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800510a:	6802      	ldr	r2, [r0, #0]
{
 800510c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800510e:	b152      	cbz	r2, 8005126 <get_ldnumber+0x1c>
 8005110:	4611      	mov	r1, r2
 8005112:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005118:	2c1f      	cmp	r4, #31
 800511a:	d90c      	bls.n	8005136 <get_ldnumber+0x2c>
 800511c:	2c3a      	cmp	r4, #58	; 0x3a
 800511e:	d1f8      	bne.n	8005112 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8005120:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005122:	428b      	cmp	r3, r1
 8005124:	d002      	beq.n	800512c <get_ldnumber+0x22>
	int vol = -1;
 8005126:	f04f 30ff 	mov.w	r0, #4294967295
 800512a:	e005      	b.n	8005138 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	2a30      	cmp	r2, #48	; 0x30
 8005130:	d1f9      	bne.n	8005126 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8005132:	3301      	adds	r3, #1
 8005134:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005136:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8005138:	bd10      	pop	{r4, pc}

0800513a <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800513a:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800513c:	b190      	cbz	r0, 8005164 <validate+0x2a>
 800513e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005142:	b17b      	cbz	r3, 8005164 <validate+0x2a>
 8005144:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8005148:	b162      	cbz	r2, 8005164 <validate+0x2a>
 800514a:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800514e:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8005152:	4291      	cmp	r1, r2
 8005154:	d106      	bne.n	8005164 <validate+0x2a>
 8005156:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800515a:	f7ff fea3 	bl	8004ea4 <disk_status>
 800515e:	f010 0001 	ands.w	r0, r0, #1
 8005162:	d000      	beq.n	8005166 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8005164:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8005166:	bd08      	pop	{r3, pc}

08005168 <sync_window.part.0>:
FRESULT sync_window (
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800516a:	f8d0 6230 	ldr.w	r6, [r0, #560]	; 0x230
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800516e:	4601      	mov	r1, r0
FRESULT sync_window (
 8005170:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005172:	2301      	movs	r3, #1
 8005174:	4632      	mov	r2, r6
 8005176:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800517a:	f7ff febb 	bl	8004ef4 <disk_write>
 800517e:	4605      	mov	r5, r0
 8005180:	b9d0      	cbnz	r0, 80051b8 <sync_window.part.0+0x50>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005182:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8005186:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 800518a:	1af3      	subs	r3, r6, r3
 800518c:	4293      	cmp	r3, r2
			fs->wflag = 0;
 800518e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005192:	d203      	bcs.n	800519c <sync_window.part.0+0x34>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005194:	f894 7203 	ldrb.w	r7, [r4, #515]	; 0x203
 8005198:	2f01      	cmp	r7, #1
 800519a:	d801      	bhi.n	80051a0 <sync_window.part.0+0x38>
}
 800519c:	4628      	mov	r0, r5
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 80051a0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80051a4:	4621      	mov	r1, r4
					wsect += fs->fsize;
 80051a6:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80051a8:	4632      	mov	r2, r6
 80051aa:	2301      	movs	r3, #1
 80051ac:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80051b0:	f7ff fea0 	bl	8004ef4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051b4:	3f01      	subs	r7, #1
 80051b6:	e7ef      	b.n	8005198 <sync_window.part.0+0x30>
			res = FR_DISK_ERR;
 80051b8:	2501      	movs	r5, #1
 80051ba:	e7ef      	b.n	800519c <sync_window.part.0+0x34>

080051bc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051bc:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 80051c0:	b10b      	cbz	r3, 80051c6 <sync_window+0xa>
 80051c2:	f7ff bfd1 	b.w	8005168 <sync_window.part.0>
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	4770      	bx	lr

080051ca <move_window>:
{
 80051ca:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80051cc:	f8d0 3230 	ldr.w	r3, [r0, #560]	; 0x230
{
 80051d0:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80051d2:	428b      	cmp	r3, r1
{
 80051d4:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80051d6:	d011      	beq.n	80051fc <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80051d8:	f7ff fff0 	bl	80051bc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80051dc:	b968      	cbnz	r0, 80051fa <move_window+0x30>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80051de:	4622      	mov	r2, r4
 80051e0:	2301      	movs	r3, #1
 80051e2:	4629      	mov	r1, r5
 80051e4:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 80051e8:	f7ff fe76 	bl	8004ed8 <disk_read>
				res = FR_DISK_ERR;
 80051ec:	2800      	cmp	r0, #0
 80051ee:	bf1c      	itt	ne
 80051f0:	f04f 34ff 	movne.w	r4, #4294967295
 80051f4:	2001      	movne	r0, #1
			fs->winsect = sector;
 80051f6:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
}
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80051fc:	2000      	movs	r0, #0
 80051fe:	e7fc      	b.n	80051fa <move_window+0x30>

08005200 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005200:	2300      	movs	r3, #0
{
 8005202:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005204:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	f8c0 3230 	str.w	r3, [r0, #560]	; 0x230
{
 8005210:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005212:	f7ff ffda 	bl	80051ca <move_window>
 8005216:	b9a0      	cbnz	r0, 8005242 <check_fs+0x42>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005218:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800521c:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	; 0x1fe
 8005220:	429a      	cmp	r2, r3
 8005222:	d110      	bne.n	8005246 <check_fs+0x46>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005224:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8005228:	4a08      	ldr	r2, [pc, #32]	; (800524c <check_fs+0x4c>)
 800522a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800522e:	4293      	cmp	r3, r2
 8005230:	d006      	beq.n	8005240 <check_fs+0x40>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005232:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8005236:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800523a:	1a80      	subs	r0, r0, r2
 800523c:	bf18      	it	ne
 800523e:	2001      	movne	r0, #1
}
 8005240:	bd10      	pop	{r4, pc}
		return 3;
 8005242:	2003      	movs	r0, #3
 8005244:	e7fc      	b.n	8005240 <check_fs+0x40>
		return 2;
 8005246:	2002      	movs	r0, #2
 8005248:	e7fa      	b.n	8005240 <check_fs+0x40>
 800524a:	bf00      	nop
 800524c:	00544146 	.word	0x00544146

08005250 <find_volume>:
{
 8005250:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8005254:	2300      	movs	r3, #0
{
 8005256:	4607      	mov	r7, r0
	*rfs = 0;
 8005258:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 800525a:	4608      	mov	r0, r1
{
 800525c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800525e:	f7ff ff54 	bl	800510a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005262:	1e06      	subs	r6, r0, #0
 8005264:	f2c0 8103 	blt.w	800546e <find_volume+0x21e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005268:	4b85      	ldr	r3, [pc, #532]	; (8005480 <find_volume+0x230>)
 800526a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800526e:	2c00      	cmp	r4, #0
 8005270:	f000 80ff 	beq.w	8005472 <find_volume+0x222>
	*rfs = fs;							/* Return pointer to the file system object */
 8005274:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005276:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800527a:	b173      	cbz	r3, 800529a <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800527c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005280:	f7ff fe10 	bl	8004ea4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005284:	07c1      	lsls	r1, r0, #31
 8005286:	d408      	bmi.n	800529a <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005288:	b11d      	cbz	r5, 8005292 <find_volume+0x42>
 800528a:	f010 0504 	ands.w	r5, r0, #4
 800528e:	d000      	beq.n	8005292 <find_volume+0x42>
				return FR_WRITE_PROTECTED;
 8005290:	250a      	movs	r5, #10
}
 8005292:	4628      	mov	r0, r5
 8005294:	b004      	add	sp, #16
 8005296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800529a:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800529c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800529e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80052a2:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80052a6:	f7ff fe07 	bl	8004eb8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80052aa:	07c2      	lsls	r2, r0, #31
 80052ac:	f100 80e3 	bmi.w	8005476 <find_volume+0x226>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80052b0:	b10d      	cbz	r5, 80052b6 <find_volume+0x66>
 80052b2:	0743      	lsls	r3, r0, #29
 80052b4:	d4ec      	bmi.n	8005290 <find_volume+0x40>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80052b6:	2100      	movs	r1, #0
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff ffa1 	bl	8005200 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80052be:	2801      	cmp	r0, #1
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80052c0:	4605      	mov	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80052c2:	f040 80ba 	bne.w	800543a <find_volume+0x1ea>
 80052c6:	46e8      	mov	r8, sp
 80052c8:	4641      	mov	r1, r8
 80052ca:	f504 73df 	add.w	r3, r4, #446	; 0x1be
 80052ce:	f504 70ff 	add.w	r0, r4, #510	; 0x1fe
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80052d2:	791a      	ldrb	r2, [r3, #4]
 80052d4:	b102      	cbz	r2, 80052d8 <find_volume+0x88>
 80052d6:	689a      	ldr	r2, [r3, #8]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80052d8:	3310      	adds	r3, #16
 80052da:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80052dc:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80052e0:	d1f7      	bne.n	80052d2 <find_volume+0x82>
 80052e2:	2700      	movs	r7, #0
			bsect = br[i];
 80052e4:	f858 6b04 	ldr.w	r6, [r8], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80052e8:	2e00      	cmp	r6, #0
 80052ea:	f000 809e 	beq.w	800542a <find_volume+0x1da>
 80052ee:	4631      	mov	r1, r6
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff ff85 	bl	8005200 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f040 8098 	bne.w	800542c <find_volume+0x1dc>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80052fc:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	f040 809c 	bne.w	8005440 <find_volume+0x1f0>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005308:	8ae0      	ldrh	r0, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800530a:	b900      	cbnz	r0, 800530e <find_volume+0xbe>
 800530c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800530e:	7c27      	ldrb	r7, [r4, #16]
	fs->fsize = fasize;
 8005310:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005314:	1e7b      	subs	r3, r7, #1
 8005316:	2b01      	cmp	r3, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005318:	f884 7203 	strb.w	r7, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800531c:	f200 8090 	bhi.w	8005440 <find_volume+0x1f0>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005320:	7b65      	ldrb	r5, [r4, #13]
 8005322:	f884 5202 	strb.w	r5, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005326:	2d00      	cmp	r5, #0
 8005328:	f000 808a 	beq.w	8005440 <find_volume+0x1f0>
 800532c:	1e6b      	subs	r3, r5, #1
 800532e:	422b      	tst	r3, r5
 8005330:	f040 8086 	bne.w	8005440 <find_volume+0x1f0>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005334:	f8b4 c011 	ldrh.w	ip, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005338:	f01c 0f0f 	tst.w	ip, #15
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800533c:	f8a4 c208 	strh.w	ip, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005340:	d17e      	bne.n	8005440 <find_volume+0x1f0>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005342:	f8b4 3013 	ldrh.w	r3, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005346:	b903      	cbnz	r3, 800534a <find_volume+0xfa>
 8005348:	6a23      	ldr	r3, [r4, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800534a:	89e2      	ldrh	r2, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800534c:	2a00      	cmp	r2, #0
 800534e:	d077      	beq.n	8005440 <find_volume+0x1f0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005350:	4347      	muls	r7, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005352:	eb02 111c 	add.w	r1, r2, ip, lsr #4
 8005356:	4439      	add	r1, r7
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005358:	428b      	cmp	r3, r1
 800535a:	d371      	bcc.n	8005440 <find_volume+0x1f0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800535c:	1a5b      	subs	r3, r3, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800535e:	42ab      	cmp	r3, r5
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005360:	fbb3 fef5 	udiv	lr, r3, r5
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005364:	d36c      	bcc.n	8005440 <find_volume+0x1f0>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005366:	f640 73f5 	movw	r3, #4085	; 0xff5
 800536a:	459e      	cmp	lr, r3
 800536c:	d96c      	bls.n	8005448 <find_volume+0x1f8>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800536e:	f64f 75f5 	movw	r5, #65525	; 0xfff5
 8005372:	45ae      	cmp	lr, r5
 8005374:	bf94      	ite	ls
 8005376:	2502      	movls	r5, #2
 8005378:	2503      	movhi	r5, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800537a:	f10e 0302 	add.w	r3, lr, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800537e:	4432      	add	r2, r6
	fs->database = bsect + sysect;						/* Data start sector */
 8005380:	4431      	add	r1, r6
	if (fmt == FS_FAT32) {
 8005382:	2d03      	cmp	r5, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005384:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8005388:	f8c4 6220 	str.w	r6, [r4, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800538c:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8005390:	f8c4 122c 	str.w	r1, [r4, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8005394:	d15a      	bne.n	800544c <find_volume+0x1fc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005396:	f1bc 0f00 	cmp.w	ip, #0
 800539a:	d151      	bne.n	8005440 <find_volume+0x1f0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800539c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800539e:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80053a0:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80053a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80053a8:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
 80053ac:	d348      	bcc.n	8005440 <find_volume+0x1f0>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	e9c4 3383 	strd	r3, r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 80053b6:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80053b8:	2d03      	cmp	r5, #3
	fs->fsi_flag = 0x80;
 80053ba:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80053be:	d124      	bne.n	800540a <find_volume+0x1ba>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80053c0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d121      	bne.n	800540a <find_volume+0x1ba>
		&& move_window(fs, bsect + 1) == FR_OK)
 80053c6:	4620      	mov	r0, r4
 80053c8:	1c71      	adds	r1, r6, #1
 80053ca:	f7ff fefe 	bl	80051ca <move_window>
 80053ce:	b9e0      	cbnz	r0, 800540a <find_volume+0x1ba>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80053d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80053d4:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 80053d8:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80053dc:	429a      	cmp	r2, r3
 80053de:	d114      	bne.n	800540a <find_volume+0x1ba>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <find_volume+0x234>)
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d110      	bne.n	800540a <find_volume+0x1ba>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80053e8:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80053ec:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 80053f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053f4:	3320      	adds	r3, #32
 80053f6:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80053f8:	bf01      	itttt	eq
 80053fa:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 80053fe:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005402:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8005406:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->fs_type = fmt;	/* FAT sub-type */
 800540a:	f884 5200 	strb.w	r5, [r4, #512]	; 0x200
	fs->cdir = 0;		/* Set current directory to root */
 800540e:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
 8005410:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <find_volume+0x238>)
	clear_lock(fs);
 8005412:	4620      	mov	r0, r4
	fs->id = ++Fsid;	/* File system mount ID */
 8005414:	8813      	ldrh	r3, [r2, #0]
	fs->cdir = 0;		/* Set current directory to root */
 8005416:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	fs->id = ++Fsid;	/* File system mount ID */
 800541a:	3301      	adds	r3, #1
 800541c:	b29b      	uxth	r3, r3
 800541e:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
 8005422:	8013      	strh	r3, [r2, #0]
	clear_lock(fs);
 8005424:	f7ff fe40 	bl	80050a8 <clear_lock>
	return FR_OK;
 8005428:	e733      	b.n	8005292 <find_volume+0x42>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800542a:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800542c:	3701      	adds	r7, #1
 800542e:	2f04      	cmp	r7, #4
 8005430:	f47f af58 	bne.w	80052e4 <find_volume+0x94>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005434:	2803      	cmp	r0, #3
 8005436:	d103      	bne.n	8005440 <find_volume+0x1f0>
 8005438:	e72b      	b.n	8005292 <find_volume+0x42>
 800543a:	2803      	cmp	r0, #3
 800543c:	d01d      	beq.n	800547a <find_volume+0x22a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800543e:	b108      	cbz	r0, 8005444 <find_volume+0x1f4>
 8005440:	250d      	movs	r5, #13
 8005442:	e726      	b.n	8005292 <find_volume+0x42>
	bsect = 0;
 8005444:	4606      	mov	r6, r0
 8005446:	e759      	b.n	80052fc <find_volume+0xac>
	fmt = FS_FAT12;
 8005448:	2501      	movs	r5, #1
 800544a:	e796      	b.n	800537a <find_volume+0x12a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800544c:	f1bc 0f00 	cmp.w	ip, #0
 8005450:	d0f6      	beq.n	8005440 <find_volume+0x1f0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005452:	443a      	add	r2, r7
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005454:	2d02      	cmp	r5, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005456:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800545a:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800545e:	bf1b      	ittet	ne
 8005460:	18d2      	addne	r2, r2, r3
 8005462:	f003 0301 	andne.w	r3, r3, #1
 8005466:	4613      	moveq	r3, r2
 8005468:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800546c:	e79a      	b.n	80053a4 <find_volume+0x154>
	if (vol < 0) return FR_INVALID_DRIVE;
 800546e:	250b      	movs	r5, #11
 8005470:	e70f      	b.n	8005292 <find_volume+0x42>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005472:	250c      	movs	r5, #12
 8005474:	e70d      	b.n	8005292 <find_volume+0x42>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005476:	2503      	movs	r5, #3
 8005478:	e70b      	b.n	8005292 <find_volume+0x42>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800547a:	2501      	movs	r5, #1
 800547c:	e709      	b.n	8005292 <find_volume+0x42>
 800547e:	bf00      	nop
 8005480:	20008200 	.word	0x20008200
 8005484:	41615252 	.word	0x41615252
 8005488:	2000821c 	.word	0x2000821c

0800548c <sync_fs>:
{
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8005490:	f7ff fe94 	bl	80051bc <sync_window>
 8005494:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8005496:	bbb8      	cbnz	r0, 8005508 <sync_fs+0x7c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005498:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800549c:	2b03      	cmp	r3, #3
 800549e:	d12a      	bne.n	80054f6 <sync_fs+0x6a>
 80054a0:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d126      	bne.n	80054f6 <sync_fs+0x6a>
			mem_set(fs->win.d8, 0, SS(fs));
 80054a8:	4601      	mov	r1, r0
 80054aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7ff fd44 	bl	8004f3c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80054b4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80054b8:	f8a4 21fe 	strh.w	r2, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <sync_fs+0x80>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80054be:	4621      	mov	r1, r4
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80054c0:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80054c2:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 80054c6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80054ca:	3220      	adds	r2, #32
 80054cc:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80054d0:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80054d4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80054d8:	f8c4 21e8 	str.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80054dc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80054e0:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
			fs->winsect = fs->volbase + 1;
 80054e4:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
 80054e8:	3201      	adds	r2, #1
 80054ea:	f8c4 2230 	str.w	r2, [r4, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80054ee:	f7ff fd01 	bl	8004ef4 <disk_write>
			fs->fsi_flag = 0;
 80054f2:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80054f6:	2200      	movs	r2, #0
 80054f8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80054fc:	4611      	mov	r1, r2
 80054fe:	f7ff fd07 	bl	8004f10 <disk_ioctl>
	res = sync_window(fs);
 8005502:	3800      	subs	r0, #0
 8005504:	bf18      	it	ne
 8005506:	2001      	movne	r0, #1
}
 8005508:	bd38      	pop	{r3, r4, r5, pc}
 800550a:	bf00      	nop
 800550c:	41615252 	.word	0x41615252

08005510 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32)
 8005510:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8005512:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005514:	bf04      	itt	eq
 8005516:	8a8a      	ldrheq	r2, [r1, #20]
 8005518:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800551c:	4618      	mov	r0, r3
 800551e:	4770      	bx	lr

08005520 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005520:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
	clst -= 2;
 8005524:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005526:	3b02      	subs	r3, #2
 8005528:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800552a:	bf83      	ittte	hi
 800552c:	f890 3202 	ldrbhi.w	r3, [r0, #514]	; 0x202
 8005530:	f8d0 022c 	ldrhi.w	r0, [r0, #556]	; 0x22c
 8005534:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005538:	2000      	movls	r0, #0
}
 800553a:	4770      	bx	lr

0800553c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800553c:	2901      	cmp	r1, #1
{
 800553e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005540:	4606      	mov	r6, r0
 8005542:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005544:	d959      	bls.n	80055fa <get_fat+0xbe>
 8005546:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800554a:	428b      	cmp	r3, r1
 800554c:	d955      	bls.n	80055fa <get_fat+0xbe>
		switch (fs->fs_type) {
 800554e:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8005552:	2b02      	cmp	r3, #2
 8005554:	d027      	beq.n	80055a6 <get_fat+0x6a>
 8005556:	2b03      	cmp	r3, #3
 8005558:	d036      	beq.n	80055c8 <get_fat+0x8c>
 800555a:	2b01      	cmp	r3, #1
 800555c:	d14d      	bne.n	80055fa <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 800555e:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005562:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 8005566:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800556a:	f7ff fe2e 	bl	80051ca <move_window>
 800556e:	b110      	cbz	r0, 8005576 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005576:	f8d6 1224 	ldr.w	r1, [r6, #548]	; 0x224
			wc = fs->win.d8[bc++ % SS(fs)];
 800557a:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800557c:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800557e:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005582:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8005586:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005588:	f7ff fe1f 	bl	80051ca <move_window>
 800558c:	2800      	cmp	r0, #0
 800558e:	d1ef      	bne.n	8005570 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005590:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005594:	5df0      	ldrb	r0, [r6, r7]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005596:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005598:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800559c:	bf4c      	ite	mi
 800559e:	0900      	lsrmi	r0, r0, #4
 80055a0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80055a4:	e7e6      	b.n	8005574 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055a6:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 80055aa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80055ae:	f7ff fe0c 	bl	80051ca <move_window>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d1dc      	bne.n	8005570 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80055b6:	006d      	lsls	r5, r5, #1
 80055b8:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 80055bc:	1973      	adds	r3, r6, r5
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	5d70      	ldrb	r0, [r6, r5]
 80055c2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 80055c6:	e7d5      	b.n	8005574 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055c8:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 80055cc:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80055d0:	f7ff fdfb 	bl	80051ca <move_window>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d1cb      	bne.n	8005570 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80055d8:	00ad      	lsls	r5, r5, #2
 80055da:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80055de:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80055e0:	7898      	ldrb	r0, [r3, #2]
 80055e2:	78da      	ldrb	r2, [r3, #3]
 80055e4:	0400      	lsls	r0, r0, #16
 80055e6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80055ea:	5d72      	ldrb	r2, [r6, r5]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	4310      	orrs	r0, r2
 80055f0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80055f4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80055f8:	e7bc      	b.n	8005574 <get_fat+0x38>
		switch (fs->fs_type) {
 80055fa:	2001      	movs	r0, #1
	return val;
 80055fc:	e7ba      	b.n	8005574 <get_fat+0x38>

080055fe <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80055fe:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8005602:	b570      	push	{r4, r5, r6, lr}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005604:	2a01      	cmp	r2, #1
{
 8005606:	4604      	mov	r4, r0
 8005608:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 800560a:	f8a0 1206 	strh.w	r1, [r0, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800560e:	d101      	bne.n	8005614 <dir_sdi+0x16>
		return FR_INT_ERR;
 8005610:	2002      	movs	r0, #2
}
 8005612:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005614:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005618:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 800561c:	4291      	cmp	r1, r2
 800561e:	d9f7      	bls.n	8005610 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005620:	b9fa      	cbnz	r2, 8005662 <dir_sdi+0x64>
 8005622:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8005626:	2903      	cmp	r1, #3
 8005628:	d102      	bne.n	8005630 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800562a:	f8d3 1228 	ldr.w	r1, [r3, #552]	; 0x228
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800562e:	b9b9      	cbnz	r1, 8005660 <dir_sdi+0x62>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005630:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8005634:	42a9      	cmp	r1, r5
 8005636:	d9eb      	bls.n	8005610 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8005638:	f8d3 0228 	ldr.w	r0, [r3, #552]	; 0x228
	dp->clust = clst;	/* Current cluster# */
 800563c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005640:	2800      	cmp	r0, #0
 8005642:	d0e5      	beq.n	8005610 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005644:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005648:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800564c:	f005 050f 	and.w	r5, r5, #15
 8005650:	eb01 1545 	add.w	r5, r1, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005654:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005658:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 800565c:	2000      	movs	r0, #0
 800565e:	e7d8      	b.n	8005612 <dir_sdi+0x14>
 8005660:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005662:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
 8005666:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8005668:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800566a:	4611      	mov	r1, r2
 800566c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8005670:	d202      	bcs.n	8005678 <dir_sdi+0x7a>
		sect = clust2sect(dp->fs, clst);
 8005672:	f7ff ff55 	bl	8005520 <clust2sect>
 8005676:	e7e1      	b.n	800563c <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005678:	f7ff ff60 	bl	800553c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800567c:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800567e:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005680:	d009      	beq.n	8005696 <dir_sdi+0x98>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005682:	2801      	cmp	r0, #1
 8005684:	d9c4      	bls.n	8005610 <dir_sdi+0x12>
 8005686:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800568a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800568e:	4283      	cmp	r3, r0
 8005690:	d9be      	bls.n	8005610 <dir_sdi+0x12>
			idx -= ic;
 8005692:	1bad      	subs	r5, r5, r6
 8005694:	e7e8      	b.n	8005668 <dir_sdi+0x6a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005696:	2001      	movs	r0, #1
 8005698:	e7bb      	b.n	8005612 <dir_sdi+0x14>

0800569a <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800569a:	2901      	cmp	r1, #1
{
 800569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a0:	4605      	mov	r5, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80056a6:	d970      	bls.n	800578a <put_fat+0xf0>
 80056a8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80056ac:	428b      	cmp	r3, r1
 80056ae:	d96c      	bls.n	800578a <put_fat+0xf0>
		switch (fs->fs_type) {
 80056b0:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d03c      	beq.n	8005732 <put_fat+0x98>
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d04b      	beq.n	8005754 <put_fat+0xba>
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d164      	bne.n	800578a <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 80056c0:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056c4:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 80056c8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80056cc:	f7ff fd7d 	bl	80051ca <move_window>
			if (res != FR_OK) break;
 80056d0:	bb28      	cbnz	r0, 800571e <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80056d2:	f014 0401 	ands.w	r4, r4, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80056d6:	f107 0801 	add.w	r8, r7, #1
 80056da:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80056de:	bf17      	itett	ne
 80056e0:	5deb      	ldrbne	r3, [r5, r7]
 80056e2:	b2f3      	uxtbeq	r3, r6
 80056e4:	f003 020f 	andne.w	r2, r3, #15
 80056e8:	0133      	lslne	r3, r6, #4
 80056ea:	bf1c      	itt	ne
 80056ec:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80056f0:	4313      	orrne	r3, r2
 80056f2:	55eb      	strb	r3, [r5, r7]
			fs->wflag = 1;
 80056f4:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056f6:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
 80056fa:	4628      	mov	r0, r5
			fs->wflag = 1;
 80056fc:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005700:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005704:	f7ff fd61 	bl	80051ca <move_window>
			if (res != FR_OK) break;
 8005708:	b948      	cbnz	r0, 800571e <put_fat+0x84>
			p = &fs->win.d8[bc % SS(fs)];
 800570a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800570e:	b144      	cbz	r4, 8005722 <put_fat+0x88>
 8005710:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8005714:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8005718:	2301      	movs	r3, #1
 800571a:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
}
 800571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005722:	f815 2008 	ldrb.w	r2, [r5, r8]
 8005726:	f022 030f 	bic.w	r3, r2, #15
 800572a:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800572e:	431a      	orrs	r2, r3
 8005730:	e7f0      	b.n	8005714 <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005732:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 8005736:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800573a:	f7ff fd46 	bl	80051ca <move_window>
			if (res != FR_OK) break;
 800573e:	2800      	cmp	r0, #0
 8005740:	d1ed      	bne.n	800571e <put_fat+0x84>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005742:	0064      	lsls	r4, r4, #1
 8005744:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8005748:	552e      	strb	r6, [r5, r4]
 800574a:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800574e:	442c      	add	r4, r5
 8005750:	7062      	strb	r2, [r4, #1]
			fs->wflag = 1;
 8005752:	e7e1      	b.n	8005718 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005754:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 8005758:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800575c:	f7ff fd35 	bl	80051ca <move_window>
			if (res != FR_OK) break;
 8005760:	2800      	cmp	r0, #0
 8005762:	d1dc      	bne.n	800571e <put_fat+0x84>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005764:	00a4      	lsls	r4, r4, #2
 8005766:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800576a:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800576c:	78cb      	ldrb	r3, [r1, #3]
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005774:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8005778:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800577c:	552a      	strb	r2, [r5, r4]
 800577e:	704b      	strb	r3, [r1, #1]
 8005780:	0c13      	lsrs	r3, r2, #16
 8005782:	0e12      	lsrs	r2, r2, #24
 8005784:	708b      	strb	r3, [r1, #2]
 8005786:	70ca      	strb	r2, [r1, #3]
 8005788:	e7c6      	b.n	8005718 <put_fat+0x7e>
		switch (fs->fs_type) {
 800578a:	2002      	movs	r0, #2
 800578c:	e7c7      	b.n	800571e <put_fat+0x84>

0800578e <create_chain>:
{
 800578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005790:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8005792:	460f      	mov	r7, r1
 8005794:	b989      	cbnz	r1, 80057ba <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8005796:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800579a:	b1f6      	cbz	r6, 80057da <create_chain+0x4c>
 800579c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80057a0:	429e      	cmp	r6, r3
 80057a2:	bf28      	it	cs
 80057a4:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
 80057a6:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80057a8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
		ncl++;							/* Next cluster */
 80057ac:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	d816      	bhi.n	80057e0 <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 80057b2:	2e01      	cmp	r6, #1
 80057b4:	d813      	bhi.n	80057de <create_chain+0x50>
 80057b6:	2400      	movs	r4, #0
 80057b8:	e005      	b.n	80057c6 <create_chain+0x38>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80057ba:	f7ff febf 	bl	800553c <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80057be:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80057c0:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80057c2:	d802      	bhi.n	80057ca <create_chain+0x3c>
 80057c4:	2401      	movs	r4, #1
}
 80057c6:	4620      	mov	r0, r4
 80057c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057ca:	1c60      	adds	r0, r4, #1
 80057cc:	d035      	beq.n	800583a <create_chain+0xac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057ce:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	d8f7      	bhi.n	80057c6 <create_chain+0x38>
 80057d6:	463e      	mov	r6, r7
 80057d8:	e7e5      	b.n	80057a6 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80057da:	2601      	movs	r6, #1
 80057dc:	e7e3      	b.n	80057a6 <create_chain+0x18>
			ncl = 2;
 80057de:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80057e0:	4621      	mov	r1, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	f7ff feaa 	bl	800553c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80057e8:	b130      	cbz	r0, 80057f8 <create_chain+0x6a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80057ea:	1c41      	adds	r1, r0, #1
 80057ec:	d025      	beq.n	800583a <create_chain+0xac>
 80057ee:	2801      	cmp	r0, #1
 80057f0:	d0e8      	beq.n	80057c4 <create_chain+0x36>
		if (ncl == scl) return 0;		/* No free cluster */
 80057f2:	42b4      	cmp	r4, r6
 80057f4:	d1d8      	bne.n	80057a8 <create_chain+0x1a>
 80057f6:	e7de      	b.n	80057b6 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80057f8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f7ff ff4b 	bl	800569a <put_fat>
	if (res == FR_OK && clst != 0) {
 8005804:	b9b8      	cbnz	r0, 8005836 <create_chain+0xa8>
 8005806:	b97f      	cbnz	r7, 8005828 <create_chain+0x9a>
		if (fs->free_clust != 0xFFFFFFFF) {
 8005808:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 800580c:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	d0d8      	beq.n	80057c6 <create_chain+0x38>
			fs->free_clust--;
 8005814:	3b01      	subs	r3, #1
 8005816:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 800581a:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8005826:	e7ce      	b.n	80057c6 <create_chain+0x38>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005828:	4622      	mov	r2, r4
 800582a:	4639      	mov	r1, r7
 800582c:	4628      	mov	r0, r5
 800582e:	f7ff ff34 	bl	800569a <put_fat>
	if (res == FR_OK) {
 8005832:	2800      	cmp	r0, #0
 8005834:	d0e8      	beq.n	8005808 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005836:	2801      	cmp	r0, #1
 8005838:	d1c4      	bne.n	80057c4 <create_chain+0x36>
 800583a:	f04f 34ff 	mov.w	r4, #4294967295
 800583e:	e7c2      	b.n	80057c6 <create_chain+0x38>

08005840 <dir_next>:
{
 8005840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8005844:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
{
 8005848:	4604      	mov	r4, r0
	i = dp->index + 1;
 800584a:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800584c:	b2b3      	uxth	r3, r6
{
 800584e:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005850:	b913      	cbnz	r3, 8005858 <dir_next+0x18>
		return FR_NO_FILE;
 8005852:	2004      	movs	r0, #4
}
 8005854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005858:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f8      	beq.n	8005852 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005860:	f016 080f 	ands.w	r8, r6, #15
 8005864:	d10b      	bne.n	800587e <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8005866:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 800586a:	3301      	adds	r3, #1
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800586c:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		dp->sect++;					/* Next sector */
 8005870:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 8005874:	b969      	cbnz	r1, 8005892 <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005876:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 800587a:	42b3      	cmp	r3, r6
 800587c:	d9e9      	bls.n	8005852 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800587e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return FR_OK;
 8005882:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005884:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	dp->index = (WORD)i;	/* Current index */
 8005888:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800588c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8005890:	e7e0      	b.n	8005854 <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005892:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8005896:	3f01      	subs	r7, #1
 8005898:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 800589c:	d1ef      	bne.n	800587e <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800589e:	f7ff fe4d 	bl	800553c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80058a2:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80058a4:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80058a6:	d801      	bhi.n	80058ac <dir_next+0x6c>
 80058a8:	2002      	movs	r0, #2
 80058aa:	e7d3      	b.n	8005854 <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80058ac:	1c42      	adds	r2, r0, #1
 80058ae:	d101      	bne.n	80058b4 <dir_next+0x74>
 80058b0:	2001      	movs	r0, #1
 80058b2:	e7cf      	b.n	8005854 <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80058b4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80058b8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80058bc:	42ab      	cmp	r3, r5
 80058be:	d82f      	bhi.n	8005920 <dir_next+0xe0>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80058c0:	f1b9 0f00 	cmp.w	r9, #0
 80058c4:	d0c5      	beq.n	8005852 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80058c6:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80058ca:	f7ff ff60 	bl	800578e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80058ce:	4605      	mov	r5, r0
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d03e      	beq.n	8005952 <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 80058d4:	2801      	cmp	r0, #1
 80058d6:	d0e7      	beq.n	80058a8 <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d0e9      	beq.n	80058b0 <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80058dc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80058e0:	f7ff fc6c 	bl	80051bc <sync_window>
 80058e4:	4601      	mov	r1, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d1e2      	bne.n	80058b0 <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80058ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ee:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80058f2:	f7ff fb23 	bl	8004f3c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80058f6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80058fa:	4629      	mov	r1, r5
 80058fc:	4610      	mov	r0, r2
 80058fe:	f7ff fe0f 	bl	8005520 <clust2sect>
						dp->fs->wflag = 1;
 8005902:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005906:	f8c2 0230 	str.w	r0, [r2, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800590a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800590e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8005912:	42bb      	cmp	r3, r7
 8005914:	d80e      	bhi.n	8005934 <dir_next+0xf4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005916:	f8d0 3230 	ldr.w	r3, [r0, #560]	; 0x230
 800591a:	1bdb      	subs	r3, r3, r7
 800591c:	f8c0 3230 	str.w	r3, [r0, #560]	; 0x230
				dp->sect = clust2sect(dp->fs, clst);
 8005920:	4629      	mov	r1, r5
 8005922:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				dp->clust = clst;				/* Initialize data for new cluster */
 8005926:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800592a:	f7ff fdf9 	bl	8005520 <clust2sect>
 800592e:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8005932:	e7a4      	b.n	800587e <dir_next+0x3e>
						dp->fs->wflag = 1;
 8005934:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005938:	f7ff fc16 	bl	8005168 <sync_window.part.0>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800593c:	2800      	cmp	r0, #0
 800593e:	d1b7      	bne.n	80058b0 <dir_next+0x70>
						dp->fs->winsect++;
 8005940:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005944:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8005946:	f8d2 3230 	ldr.w	r3, [r2, #560]	; 0x230
 800594a:	3301      	adds	r3, #1
 800594c:	f8c2 3230 	str.w	r3, [r2, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005950:	e7db      	b.n	800590a <dir_next+0xca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005952:	2007      	movs	r0, #7
 8005954:	e77e      	b.n	8005854 <dir_next+0x14>
	...

08005958 <dir_find>:
{
 8005958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800595c:	2100      	movs	r1, #0
{
 800595e:	4606      	mov	r6, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005960:	f7ff fe4d 	bl	80055fe <dir_sdi>
	if (res != FR_OK) return res;
 8005964:	4604      	mov	r4, r0
 8005966:	2800      	cmp	r0, #0
 8005968:	d171      	bne.n	8005a4e <dir_find+0xf6>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800596a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800596e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8005972:	4645      	mov	r5, r8
 8005974:	f8a6 9224 	strh.w	r9, [r6, #548]	; 0x224
		res = move_window(dp->fs, dp->sect);
 8005978:	f8d6 1210 	ldr.w	r1, [r6, #528]	; 0x210
 800597c:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
 8005980:	f7ff fc23 	bl	80051ca <move_window>
		if (res != FR_OK) break;
 8005984:	4604      	mov	r4, r0
 8005986:	2800      	cmp	r0, #0
 8005988:	d161      	bne.n	8005a4e <dir_find+0xf6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800598a:	f8d6 7214 	ldr.w	r7, [r6, #532]	; 0x214
		c = dir[DIR_Name];
 800598e:	783b      	ldrb	r3, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005990:	2b00      	cmp	r3, #0
 8005992:	d07e      	beq.n	8005a92 <dir_find+0x13a>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005994:	2be5      	cmp	r3, #229	; 0xe5
 8005996:	d006      	beq.n	80059a6 <dir_find+0x4e>
		a = dir[DIR_Attr] & AM_MASK;
 8005998:	7af9      	ldrb	r1, [r7, #11]
 800599a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800599e:	0709      	lsls	r1, r1, #28
 80059a0:	d504      	bpl.n	80059ac <dir_find+0x54>
 80059a2:	2a0f      	cmp	r2, #15
 80059a4:	d004      	beq.n	80059b0 <dir_find+0x58>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80059a6:	f8a6 9224 	strh.w	r9, [r6, #548]	; 0x224
 80059aa:	e056      	b.n	8005a5a <dir_find+0x102>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80059ac:	2a0f      	cmp	r2, #15
 80059ae:	d159      	bne.n	8005a64 <dir_find+0x10c>
				if (dp->lfn) {
 80059b0:	f8d6 4220 	ldr.w	r4, [r6, #544]	; 0x220
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	d043      	beq.n	8005a40 <dir_find+0xe8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80059b8:	065a      	lsls	r2, r3, #25
 80059ba:	d54c      	bpl.n	8005a56 <dir_find+0xfe>
						c &= ~LLEF; ord = c;	/* LFN start order */
 80059bc:	f003 05bf 	and.w	r5, r3, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80059c0:	f8b6 3206 	ldrh.w	r3, [r6, #518]	; 0x206
						sum = dir[LDIR_Chksum];
 80059c4:	f897 800d 	ldrb.w	r8, [r7, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80059c8:	f8a6 3224 	strh.w	r3, [r6, #548]	; 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80059cc:	7b7b      	ldrb	r3, [r7, #13]
 80059ce:	4543      	cmp	r3, r8
 80059d0:	d143      	bne.n	8005a5a <dir_find+0x102>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80059d2:	f04f 0b0d 	mov.w	fp, #13
	s = 0; wc = 1;
 80059d6:	f04f 0c01 	mov.w	ip, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80059da:	783b      	ldrb	r3, [r7, #0]
 80059dc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005a98 <dir_find+0x140>
 80059e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e4:	3b01      	subs	r3, #1
 80059e6:	fb0b fb03 	mul.w	fp, fp, r3
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80059ea:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80059ee:	18b9      	adds	r1, r7, r2
 80059f0:	7848      	ldrb	r0, [r1, #1]
 80059f2:	5cba      	ldrb	r2, [r7, r2]
 80059f4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last character has not been processed */
 80059f8:	f1bc 0f00 	cmp.w	ip, #0
 80059fc:	d02f      	beq.n	8005a5e <dir_find+0x106>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80059fe:	f000 fdeb 	bl	80065d8 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005a02:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005a06:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005a08:	d827      	bhi.n	8005a5a <dir_find+0x102>
 8005a0a:	f10b 0101 	add.w	r1, fp, #1
 8005a0e:	f834 001b 	ldrh.w	r0, [r4, fp, lsl #1]
 8005a12:	9100      	str	r1, [sp, #0]
 8005a14:	f000 fde0 	bl	80065d8 <ff_wtoupper>
 8005a18:	9a01      	ldr	r2, [sp, #4]
 8005a1a:	4684      	mov	ip, r0
 8005a1c:	4282      	cmp	r2, r0
 8005a1e:	d11c      	bne.n	8005a5a <dir_find+0x102>
 8005a20:	9900      	ldr	r1, [sp, #0]
 8005a22:	468b      	mov	fp, r1
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <dir_find+0x144>)
 8005a26:	4553      	cmp	r3, sl
 8005a28:	d1df      	bne.n	80059ea <dir_find+0x92>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005a2a:	783b      	ldrb	r3, [r7, #0]
 8005a2c:	065b      	lsls	r3, r3, #25
 8005a2e:	d505      	bpl.n	8005a3c <dir_find+0xe4>
 8005a30:	f1bc 0f00 	cmp.w	ip, #0
 8005a34:	d002      	beq.n	8005a3c <dir_find+0xe4>
 8005a36:	f834 301b 	ldrh.w	r3, [r4, fp, lsl #1]
 8005a3a:	b973      	cbnz	r3, 8005a5a <dir_find+0x102>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005a3c:	3d01      	subs	r5, #1
 8005a3e:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
 8005a40:	2100      	movs	r1, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff fefc 	bl	8005840 <dir_next>
	} while (res == FR_OK);
 8005a48:	4604      	mov	r4, r0
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d094      	beq.n	8005978 <dir_find+0x20>
}
 8005a4e:	4620      	mov	r0, r4
 8005a50:	b003      	add	sp, #12
 8005a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005a56:	42ab      	cmp	r3, r5
 8005a58:	d0b8      	beq.n	80059cc <dir_find+0x74>
 8005a5a:	25ff      	movs	r5, #255	; 0xff
 8005a5c:	e7f0      	b.n	8005a40 <dir_find+0xe8>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005a5e:	4548      	cmp	r0, r9
 8005a60:	d0e0      	beq.n	8005a24 <dir_find+0xcc>
 8005a62:	e7fa      	b.n	8005a5a <dir_find+0x102>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005a64:	b925      	cbnz	r5, 8005a70 <dir_find+0x118>
 8005a66:	4638      	mov	r0, r7
 8005a68:	f7ff fb40 	bl	80050ec <sum_sfn>
 8005a6c:	4540      	cmp	r0, r8
 8005a6e:	d0ee      	beq.n	8005a4e <dir_find+0xf6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a70:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 8005a74:	7adc      	ldrb	r4, [r3, #11]
 8005a76:	f014 0401 	ands.w	r4, r4, #1
 8005a7a:	d194      	bne.n	80059a6 <dir_find+0x4e>
 8005a7c:	f107 000b 	add.w	r0, r7, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005a80:	4287      	cmp	r7, r0
 8005a82:	d0e4      	beq.n	8005a4e <dir_find+0xf6>
 8005a84:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a8c:	4291      	cmp	r1, r2
 8005a8e:	d0f7      	beq.n	8005a80 <dir_find+0x128>
 8005a90:	e789      	b.n	80059a6 <dir_find+0x4e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a92:	2404      	movs	r4, #4
 8005a94:	e7db      	b.n	8005a4e <dir_find+0xf6>
 8005a96:	bf00      	nop
 8005a98:	0800a81a 	.word	0x0800a81a
 8005a9c:	0800a827 	.word	0x0800a827

08005aa0 <follow_path>:
{
 8005aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 8005aa4:	780b      	ldrb	r3, [r1, #0]
{
 8005aa6:	4605      	mov	r5, r0
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 8005aa8:	2b2f      	cmp	r3, #47	; 0x2f
{
 8005aaa:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 8005aac:	d001      	beq.n	8005ab2 <follow_path+0x12>
 8005aae:	2b5c      	cmp	r3, #92	; 0x5c
 8005ab0:	d113      	bne.n	8005ada <follow_path+0x3a>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f108 0801 	add.w	r8, r8, #1
 8005ab8:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005abc:	f898 3000 	ldrb.w	r3, [r8]
 8005ac0:	2b1f      	cmp	r3, #31
 8005ac2:	f200 80f4 	bhi.w	8005cae <follow_path+0x20e>
		res = dir_sdi(dp, 0);
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7ff fd98 	bl	80055fe <dir_sdi>
		dp->dir = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 8005ad4:	b003      	add	sp, #12
 8005ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 8005ada:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005ade:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ae2:	e7e9      	b.n	8005ab8 <follow_path+0x18>
		w = p[si++];					/* Get a character */
 8005ae4:	4646      	mov	r6, r8
		lfn[di++] = w;					/* Store the Unicode character */
 8005ae6:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8005aea:	e0f1      	b.n	8005cd0 <follow_path+0x230>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005aec:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8005aee:	44a0      	add	r8, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005af0:	bf34      	ite	cc
 8005af2:	2404      	movcc	r4, #4
 8005af4:	2400      	movcs	r4, #0
	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
 8005af6:	2e01      	cmp	r6, #1
 8005af8:	d12f      	bne.n	8005b5a <follow_path+0xba>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
 8005afa:	f8b9 3000 	ldrh.w	r3, [r9]
 8005afe:	2b2e      	cmp	r3, #46	; 0x2e
 8005b00:	d131      	bne.n	8005b66 <follow_path+0xc6>
		lfn[di] = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
			dp->fn[i] = (i < di) ? '.' : ' ';
 8005b08:	429e      	cmp	r6, r3
 8005b0a:	bf8c      	ite	hi
 8005b0c:	212e      	movhi	r1, #46	; 0x2e
 8005b0e:	2120      	movls	r1, #32
 8005b10:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8005b14:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 11; i++)
 8005b16:	3301      	adds	r3, #1
 8005b18:	2b0b      	cmp	r3, #11
 8005b1a:	d1f5      	bne.n	8005b08 <follow_path+0x68>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8005b1c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8005b20:	f044 0420 	orr.w	r4, r4, #32
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005b24:	72dc      	strb	r4, [r3, #11]
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005b26:	4628      	mov	r0, r5
 8005b28:	f7ff ff16 	bl	8005958 <dir_find>
			ns = dp->fn[NSFLAG];
 8005b2c:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8005b30:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f000 80ab 	beq.w	8005c8e <follow_path+0x1ee>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b38:	2804      	cmp	r0, #4
 8005b3a:	d1cb      	bne.n	8005ad4 <follow_path+0x34>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 8005b3c:	0699      	lsls	r1, r3, #26
 8005b3e:	f003 0204 	and.w	r2, r3, #4
 8005b42:	f140 80a0 	bpl.w	8005c86 <follow_path+0x1e6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 8005b46:	2300      	movs	r3, #0
 8005b48:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
 8005b4c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	f000 80ac 	beq.w	8005cae <follow_path+0x20e>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 8005b56:	2000      	movs	r0, #0
 8005b58:	e7bc      	b.n	8005ad4 <follow_path+0x34>
	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
 8005b5a:	2e02      	cmp	r6, #2
 8005b5c:	d103      	bne.n	8005b66 <follow_path+0xc6>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
 8005b5e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8005b62:	2b2e      	cmp	r3, #46	; 0x2e
 8005b64:	d0c9      	beq.n	8005afa <follow_path+0x5a>
	while (di) {						/* Strip trailing spaces and dots */
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	f000 80d1 	beq.w	8005d0e <follow_path+0x26e>
		w = lfn[di - 1];
 8005b6c:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
		if (w != ' ' && w != '.') break;
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d002      	beq.n	8005b7a <follow_path+0xda>
 8005b74:	2b2e      	cmp	r3, #46	; 0x2e
 8005b76:	f040 80ce 	bne.w	8005d16 <follow_path+0x276>
		di--;
 8005b7a:	3e01      	subs	r6, #1
 8005b7c:	e7f3      	b.n	8005b66 <follow_path+0xc6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005b7e:	3101      	adds	r1, #1
 8005b80:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d0fa      	beq.n	8005b7e <follow_path+0xde>
 8005b88:	2b2e      	cmp	r3, #46	; 0x2e
 8005b8a:	d0f8      	beq.n	8005b7e <follow_path+0xde>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005b8c:	b109      	cbz	r1, 8005b92 <follow_path+0xf2>
 8005b8e:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005b92:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8005b96:	2b2e      	cmp	r3, #46	; 0x2e
 8005b98:	d001      	beq.n	8005b9e <follow_path+0xfe>
 8005b9a:	3e01      	subs	r6, #1
 8005b9c:	d1f9      	bne.n	8005b92 <follow_path+0xf2>
		dp->fn[i++] = (BYTE)w;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f04f 0a08 	mov.w	sl, #8
 8005ba4:	461f      	mov	r7, r3
		w = lfn[si++];					/* Get an LFN character */
 8005ba6:	f839 0011 	ldrh.w	r0, [r9, r1, lsl #1]
 8005baa:	f101 0b01 	add.w	fp, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8005bae:	b1c0      	cbz	r0, 8005be2 <follow_path+0x142>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005bb0:	2820      	cmp	r0, #32
 8005bb2:	d003      	beq.n	8005bbc <follow_path+0x11c>
 8005bb4:	282e      	cmp	r0, #46	; 0x2e
 8005bb6:	d105      	bne.n	8005bc4 <follow_path+0x124>
 8005bb8:	455e      	cmp	r6, fp
 8005bba:	d007      	beq.n	8005bcc <follow_path+0x12c>
			cf |= NS_LOSS | NS_LFN; continue;
 8005bbc:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	e7f0      	b.n	8005ba6 <follow_path+0x106>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005bc4:	4553      	cmp	r3, sl
 8005bc6:	d205      	bcs.n	8005bd4 <follow_path+0x134>
 8005bc8:	455e      	cmp	r6, fp
 8005bca:	d13b      	bne.n	8005c44 <follow_path+0x1a4>
			if (ni == 11) {				/* Long extension */
 8005bcc:	f1ba 0f0b 	cmp.w	sl, #11
 8005bd0:	d131      	bne.n	8005c36 <follow_path+0x196>
 8005bd2:	e002      	b.n	8005bda <follow_path+0x13a>
 8005bd4:	f1ba 0f0b 	cmp.w	sl, #11
 8005bd8:	d128      	bne.n	8005c2c <follow_path+0x18c>
				cf |= NS_LOSS | NS_LFN; break;
 8005bda:	f04f 0a0b 	mov.w	sl, #11
 8005bde:	f044 0403 	orr.w	r4, r4, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005be2:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	2ae5      	cmp	r2, #229	; 0xe5
 8005bea:	bf04      	itt	eq
 8005bec:	2205      	moveq	r2, #5
 8005bee:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8005bf0:	f1ba 0f08 	cmp.w	sl, #8
 8005bf4:	bf04      	itt	eq
 8005bf6:	00bf      	lsleq	r7, r7, #2
 8005bf8:	b2ff      	uxtbeq	r7, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005bfa:	f007 030c 	and.w	r3, r7, #12
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d003      	beq.n	8005c0a <follow_path+0x16a>
 8005c02:	f007 0203 	and.w	r2, r7, #3
 8005c06:	2a03      	cmp	r2, #3
 8005c08:	d101      	bne.n	8005c0e <follow_path+0x16e>
		cf |= NS_LFN;
 8005c0a:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005c0e:	07a0      	lsls	r0, r4, #30
 8005c10:	d409      	bmi.n	8005c26 <follow_path+0x186>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c12:	f007 0703 	and.w	r7, r7, #3
 8005c16:	2f01      	cmp	r7, #1
 8005c18:	bf08      	it	eq
 8005c1a:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	bf08      	it	eq
 8005c22:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005c26:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8005c2a:	e77b      	b.n	8005b24 <follow_path+0x84>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005c2c:	455e      	cmp	r6, fp
 8005c2e:	d002      	beq.n	8005c36 <follow_path+0x196>
 8005c30:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8005c34:	d3d5      	bcc.n	8005be2 <follow_path+0x142>
			b <<= 2; continue;
 8005c36:	00bf      	lsls	r7, r7, #2
 8005c38:	46b3      	mov	fp, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005c3a:	f04f 0a0b 	mov.w	sl, #11
 8005c3e:	2308      	movs	r3, #8
			b <<= 2; continue;
 8005c40:	b2ff      	uxtb	r7, r7
 8005c42:	e7bd      	b.n	8005bc0 <follow_path+0x120>
		if (w >= 0x80) {				/* Non ASCII character */
 8005c44:	287f      	cmp	r0, #127	; 0x7f
 8005c46:	d90c      	bls.n	8005c62 <follow_path+0x1c2>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005c48:	2100      	movs	r1, #0
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	f000 fcc0 	bl	80065d0 <ff_convert>
			cf |= NS_LFN;				/* Force create LFN entry */
 8005c50:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	b158      	cbz	r0, 8005c70 <follow_path+0x1d0>
 8005c58:	4a3b      	ldr	r2, [pc, #236]	; (8005d48 <follow_path+0x2a8>)
 8005c5a:	4410      	add	r0, r2
 8005c5c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005c60:	b130      	cbz	r0, 8005c70 <follow_path+0x1d0>
	while (*str && *str != chr) str++;
 8005c62:	4a3a      	ldr	r2, [pc, #232]	; (8005d4c <follow_path+0x2ac>)
 8005c64:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	d05f      	beq.n	8005d2c <follow_path+0x28c>
 8005c6c:	4281      	cmp	r1, r0
 8005c6e:	d1f9      	bne.n	8005c64 <follow_path+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005c70:	205f      	movs	r0, #95	; 0x5f
 8005c72:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8005c76:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8005c7a:	54c8      	strb	r0, [r1, r3]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e79f      	b.n	8005bc0 <follow_path+0x120>
					b |= 2;
 8005c80:	f047 0702 	orr.w	r7, r7, #2
 8005c84:	e7f7      	b.n	8005c76 <follow_path+0x1d6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	bf08      	it	eq
 8005c8a:	2005      	moveq	r0, #5
 8005c8c:	e722      	b.n	8005ad4 <follow_path+0x34>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c8e:	075a      	lsls	r2, r3, #29
 8005c90:	f53f af61 	bmi.w	8005b56 <follow_path+0xb6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005c94:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005c98:	7acb      	ldrb	r3, [r1, #11]
 8005c9a:	06db      	lsls	r3, r3, #27
 8005c9c:	d539      	bpl.n	8005d12 <follow_path+0x272>
			dp->sclust = ld_clust(dp->fs, dir);
 8005c9e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8005ca2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005ca6:	f7ff fc33 	bl	8005510 <ld_clust.isra.0>
 8005caa:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005cae:	f898 3000 	ldrb.w	r3, [r8]
 8005cb2:	4644      	mov	r4, r8
 8005cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8005cb6:	f108 0801 	add.w	r8, r8, #1
 8005cba:	d0f8      	beq.n	8005cae <follow_path+0x20e>
 8005cbc:	2b5c      	cmp	r3, #92	; 0x5c
 8005cbe:	d0f6      	beq.n	8005cae <follow_path+0x20e>
	lfn = dp->lfn;
 8005cc0:	f8d5 9220 	ldr.w	r9, [r5, #544]	; 0x220
	si = di = 0;
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	f1a9 0702 	sub.w	r7, r9, #2
 8005cca:	46ba      	mov	sl, r7
 8005ccc:	f104 3bff 	add.w	fp, r4, #4294967295
		w = p[si++];					/* Get a character */
 8005cd0:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 8005cd4:	f106 0801 	add.w	r8, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005cd8:	281f      	cmp	r0, #31
 8005cda:	f67f af07 	bls.w	8005aec <follow_path+0x4c>
 8005cde:	282f      	cmp	r0, #47	; 0x2f
 8005ce0:	f43f af04 	beq.w	8005aec <follow_path+0x4c>
 8005ce4:	285c      	cmp	r0, #92	; 0x5c
 8005ce6:	f43f af01 	beq.w	8005aec <follow_path+0x4c>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005cea:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8005cee:	d00e      	beq.n	8005d0e <follow_path+0x26e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	f000 fc6d 	bl	80065d0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005cf6:	b150      	cbz	r0, 8005d0e <follow_path+0x26e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005cf8:	287f      	cmp	r0, #127	; 0x7f
 8005cfa:	f63f aef3 	bhi.w	8005ae4 <follow_path+0x44>
 8005cfe:	4914      	ldr	r1, [pc, #80]	; (8005d50 <follow_path+0x2b0>)
	while (*str && *str != chr) str++;
 8005d00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	f43f aeed 	beq.w	8005ae4 <follow_path+0x44>
 8005d0a:	4282      	cmp	r2, r0
 8005d0c:	d1f8      	bne.n	8005d00 <follow_path+0x260>
				cf |= NS_LOSS | NS_LFN; break;
 8005d0e:	2006      	movs	r0, #6
 8005d10:	e6e0      	b.n	8005ad4 <follow_path+0x34>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005d12:	2005      	movs	r0, #5
	return res;
 8005d14:	e6de      	b.n	8005ad4 <follow_path+0x34>
	lfn[di] = 0;						/* LFN is created */
 8005d16:	2300      	movs	r3, #0
	mem_set(dp->fn, ' ', 11);
 8005d18:	2120      	movs	r1, #32
 8005d1a:	220b      	movs	r2, #11
 8005d1c:	f8d5 0218 	ldr.w	r0, [r5, #536]	; 0x218
	lfn[di] = 0;						/* LFN is created */
 8005d20:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8005d24:	f7ff f90a 	bl	8004f3c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005d28:	4619      	mov	r1, r3
 8005d2a:	e729      	b.n	8005b80 <follow_path+0xe0>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005d2c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8005d30:	2919      	cmp	r1, #25
 8005d32:	d9a5      	bls.n	8005c80 <follow_path+0x1e0>
					if (IsLower(w)) {	/* ASCII small capital */
 8005d34:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8005d38:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8005d3a:	bf9e      	ittt	ls
 8005d3c:	3820      	subls	r0, #32
 8005d3e:	f047 0701 	orrls.w	r7, r7, #1
 8005d42:	b280      	uxthls	r0, r0
 8005d44:	e797      	b.n	8005c76 <follow_path+0x1d6>
 8005d46:	bf00      	nop
 8005d48:	0800a79a 	.word	0x0800a79a
 8005d4c:	0800a793 	.word	0x0800a793
 8005d50:	0800a78a 	.word	0x0800a78a

08005d54 <dir_register>:
	mem_cpy(sn, fn, 12);
 8005d54:	220c      	movs	r2, #12
{
 8005d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 8005d5a:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
{
 8005d5e:	b087      	sub	sp, #28
	fn = dp->fn; lfn = dp->lfn;
 8005d60:	f8d0 7220 	ldr.w	r7, [r0, #544]	; 0x220
{
 8005d64:	4605      	mov	r5, r0
	mem_cpy(sn, fn, 12);
 8005d66:	4631      	mov	r1, r6
 8005d68:	eb0d 0002 	add.w	r0, sp, r2
 8005d6c:	f7ff f8dc 	bl	8004f28 <mem_cpy>
	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
 8005d70:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005d74:	f013 0220 	ands.w	r2, r3, #32
 8005d78:	f040 8082 	bne.w	8005e80 <dir_register+0x12c>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005d7c:	07db      	lsls	r3, r3, #31
 8005d7e:	f140 8088 	bpl.w	8005e92 <dir_register+0x13e>
		for (n = 1; n < 100; n++) {
 8005d82:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005d86:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8005fcc <dir_register+0x278>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005d8a:	72f2      	strb	r2, [r6, #11]
 8005d8c:	f8c5 2220 	str.w	r2, [r5, #544]	; 0x220
	mem_cpy(dst, src, 11);
 8005d90:	220b      	movs	r2, #11
 8005d92:	4630      	mov	r0, r6
 8005d94:	a903      	add	r1, sp, #12
 8005d96:	f7ff f8c7 	bl	8004f28 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005d9a:	f1b9 0f05 	cmp.w	r9, #5
 8005d9e:	d953      	bls.n	8005e48 <dir_register+0xf4>
 8005da0:	464b      	mov	r3, r9
 8005da2:	1eb8      	subs	r0, r7, #2
		while (*lfn) {	/* Create a CRC */
 8005da4:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d13f      	bne.n	8005e2c <dir_register+0xd8>
 8005dac:	2207      	movs	r2, #7
 8005dae:	f10d 000b 	add.w	r0, sp, #11
		c = (seq % 16) + '0';
 8005db2:	f003 040f 	and.w	r4, r3, #15
 8005db6:	f104 0130 	add.w	r1, r4, #48	; 0x30
		if (c > '9') c += 7;
 8005dba:	2939      	cmp	r1, #57	; 0x39
 8005dbc:	bf88      	it	hi
 8005dbe:	f104 0137 	addhi.w	r1, r4, #55	; 0x37
	} while (seq);
 8005dc2:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 8005dc4:	f800 1901 	strb.w	r1, [r0], #-1
 8005dc8:	f102 32ff 	add.w	r2, r2, #4294967295
		seq /= 16;
 8005dcc:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8005dd0:	d83c      	bhi.n	8005e4c <dir_register+0xf8>
	ns[i] = '~';
 8005dd2:	217e      	movs	r1, #126	; 0x7e
 8005dd4:	f102 0318 	add.w	r3, r2, #24
 8005dd8:	446b      	add	r3, sp
 8005dda:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005dde:	2300      	movs	r3, #0
 8005de0:	1e74      	subs	r4, r6, #1
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d003      	beq.n	8005dee <dir_register+0x9a>
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	5c60      	ldrb	r0, [r4, r1]
 8005dea:	2820      	cmp	r0, #32
 8005dec:	d130      	bne.n	8005e50 <dir_register+0xfc>
 8005dee:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005df0:	2a07      	cmp	r2, #7
 8005df2:	bf8f      	iteee	hi
 8005df4:	2120      	movhi	r1, #32
 8005df6:	f102 0118 	addls.w	r1, r2, #24
 8005dfa:	4469      	addls	r1, sp
 8005dfc:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8005e00:	bf98      	it	ls
 8005e02:	3201      	addls	r2, #1
 8005e04:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8005e08:	1b99      	subs	r1, r3, r6
 8005e0a:	2907      	cmp	r1, #7
 8005e0c:	d9f0      	bls.n	8005df0 <dir_register+0x9c>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7ff fda2 	bl	8005958 <dir_find>
 8005e14:	4604      	mov	r4, r0
			if (res != FR_OK) break;
 8005e16:	bba8      	cbnz	r0, 8005e84 <dir_register+0x130>
		for (n = 1; n < 100; n++) {
 8005e18:	f109 0901 	add.w	r9, r9, #1
 8005e1c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8005e20:	d1b6      	bne.n	8005d90 <dir_register+0x3c>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005e22:	2407      	movs	r4, #7
}
 8005e24:	4620      	mov	r0, r4
 8005e26:	b007      	add	sp, #28
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8005e2e:	f002 0401 	and.w	r4, r2, #1
 8005e32:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005e36:	03dc      	lsls	r4, r3, #15
 8005e38:	bf48      	it	mi
 8005e3a:	ea83 0308 	eormi.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8005e3e:	3901      	subs	r1, #1
				wc >>= 1;
 8005e40:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8005e44:	d1f3      	bne.n	8005e2e <dir_register+0xda>
 8005e46:	e7ad      	b.n	8005da4 <dir_register+0x50>
 8005e48:	464b      	mov	r3, r9
 8005e4a:	e7af      	b.n	8005dac <dir_register+0x58>
		seq /= 16;
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	e7b0      	b.n	8005db2 <dir_register+0x5e>
 8005e50:	460b      	mov	r3, r1
 8005e52:	e7c6      	b.n	8005de2 <dir_register+0x8e>
		for (n = 0; lfn[n]; n++) ;
 8005e54:	3601      	adds	r6, #1
 8005e56:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1fa      	bne.n	8005e54 <dir_register+0x100>
		nent = (n + 25) / 13;
 8005e5e:	230d      	movs	r3, #13
 8005e60:	3619      	adds	r6, #25
 8005e62:	fbb6 f6f3 	udiv	r6, r6, r3
 8005e66:	e019      	b.n	8005e9c <dir_register+0x148>
		for (n = 0; lfn[n]; n++) ;
 8005e68:	2600      	movs	r6, #0
 8005e6a:	e7f4      	b.n	8005e56 <dir_register+0x102>
				n = 0;					/* Not a blank entry. Restart to search */
 8005e6c:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4628      	mov	r0, r5
 8005e72:	f7ff fce5 	bl	8005840 <dir_next>
		} while (res == FR_OK);
 8005e76:	4604      	mov	r4, r0
 8005e78:	b1c0      	cbz	r0, 8005eac <dir_register+0x158>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e7a:	2c04      	cmp	r4, #4
 8005e7c:	d0d1      	beq.n	8005e22 <dir_register+0xce>
 8005e7e:	e7d1      	b.n	8005e24 <dir_register+0xd0>
		return FR_INVALID_NAME;
 8005e80:	2406      	movs	r4, #6
 8005e82:	e7cf      	b.n	8005e24 <dir_register+0xd0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005e84:	2804      	cmp	r0, #4
 8005e86:	d1cd      	bne.n	8005e24 <dir_register+0xd0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005e88:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005e8c:	72f3      	strb	r3, [r6, #11]
 8005e8e:	f8c5 7220 	str.w	r7, [r5, #544]	; 0x220
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005e92:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005e96:	079b      	lsls	r3, r3, #30
 8005e98:	d4e6      	bmi.n	8005e68 <dir_register+0x114>
		nent = 1;
 8005e9a:	2601      	movs	r6, #1
	res = dir_sdi(dp, 0);
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7ff fbad 	bl	80055fe <dir_sdi>
	if (res == FR_OK) {
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d1e7      	bne.n	8005e7a <dir_register+0x126>
		n = 0;
 8005eaa:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8005eac:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8005eb0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8005eb4:	f7ff f989 	bl	80051ca <move_window>
			if (res != FR_OK) break;
 8005eb8:	4604      	mov	r4, r0
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d1dd      	bne.n	8005e7a <dir_register+0x126>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005ebe:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2be5      	cmp	r3, #229	; 0xe5
 8005ec6:	d001      	beq.n	8005ecc <dir_register+0x178>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1cf      	bne.n	8005e6c <dir_register+0x118>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005ecc:	3701      	adds	r7, #1
 8005ece:	42be      	cmp	r6, r7
 8005ed0:	d1cd      	bne.n	8005e6e <dir_register+0x11a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005ed2:	3e01      	subs	r6, #1
 8005ed4:	d059      	beq.n	8005f8a <dir_register+0x236>
		res = dir_sdi(dp, dp->index - nent);
 8005ed6:	f8b5 1206 	ldrh.w	r1, [r5, #518]	; 0x206
 8005eda:	4628      	mov	r0, r5
 8005edc:	1b89      	subs	r1, r1, r6
 8005ede:	f7ff fb8e 	bl	80055fe <dir_sdi>
		if (res == FR_OK) {
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d19d      	bne.n	8005e24 <dir_register+0xd0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005ee8:	f8d5 0218 	ldr.w	r0, [r5, #536]	; 0x218
 8005eec:	f7ff f8fe 	bl	80050ec <sum_sfn>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005ef0:	f04f 080f 	mov.w	r8, #15
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005ef4:	4607      	mov	r7, r0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005ef6:	f64f 79ff 	movw	r9, #65535	; 0xffff
				res = move_window(dp->fs, dp->sect);
 8005efa:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8005efe:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8005f02:	f7ff f962 	bl	80051ca <move_window>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4604      	mov	r4, r0
				if (res != FR_OK) break;
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d18a      	bne.n	8005e24 <dir_register+0xd0>
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005f0e:	240d      	movs	r4, #13
	s = wc = 0;
 8005f10:	469a      	mov	sl, r3
 8005f12:	b2f0      	uxtb	r0, r6
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005f14:	1e41      	subs	r1, r0, #1
 8005f16:	4361      	muls	r1, r4
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005f18:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 8005f1c:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8005fd0 <dir_register+0x27c>
 8005f20:	f8d5 c220 	ldr.w	ip, [r5, #544]	; 0x220
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005f24:	7357      	strb	r7, [r2, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005f26:	f882 800b 	strb.w	r8, [r2, #11]
	dir[LDIR_Type] = 0;
 8005f2a:	7313      	strb	r3, [r2, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005f2c:	7693      	strb	r3, [r2, #26]
 8005f2e:	76d3      	strb	r3, [r2, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005f30:	454b      	cmp	r3, r9
 8005f32:	bf18      	it	ne
 8005f34:	f83c 3011 	ldrhne.w	r3, [ip, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005f38:	f81e 4b01 	ldrb.w	r4, [lr], #1
	} while (++s < 13);
 8005f3c:	f10a 0a01 	add.w	sl, sl, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005f40:	5513      	strb	r3, [r2, r4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005f42:	bf18      	it	ne
 8005f44:	3101      	addne	r1, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005f46:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8005f4a:	4414      	add	r4, r2
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf08      	it	eq
 8005f50:	464b      	moveq	r3, r9
	} while (++s < 13);
 8005f52:	f1ba 0f0d 	cmp.w	sl, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005f56:	f884 b001 	strb.w	fp, [r4, #1]
	} while (++s < 13);
 8005f5a:	d1e9      	bne.n	8005f30 <dir_register+0x1dc>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005f5c:	454b      	cmp	r3, r9
 8005f5e:	d002      	beq.n	8005f66 <dir_register+0x212>
 8005f60:	f83c 3011 	ldrh.w	r3, [ip, r1, lsl #1]
 8005f64:	b90b      	cbnz	r3, 8005f6a <dir_register+0x216>
 8005f66:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005f6a:	7010      	strb	r0, [r2, #0]
				dp->fs->wflag = 1;
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
				res = dir_next(dp, 0);	/* Next entry */
 8005f72:	2100      	movs	r1, #0
 8005f74:	4628      	mov	r0, r5
				dp->fs->wflag = 1;
 8005f76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8005f7a:	f7ff fc61 	bl	8005840 <dir_next>
			} while (res == FR_OK && --nent);
 8005f7e:	4604      	mov	r4, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f47f af4f 	bne.w	8005e24 <dir_register+0xd0>
 8005f86:	3e01      	subs	r6, #1
 8005f88:	d1b7      	bne.n	8005efa <dir_register+0x1a6>
		res = move_window(dp->fs, dp->sect);
 8005f8a:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8005f8e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8005f92:	f7ff f91a 	bl	80051ca <move_window>
		if (res == FR_OK) {
 8005f96:	4604      	mov	r4, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f47f af43 	bne.w	8005e24 <dir_register+0xd0>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8005fa6:	f7fe ffc9 	bl	8004f3c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005faa:	e9d5 0185 	ldrd	r0, r1, [r5, #532]	; 0x214
 8005fae:	220b      	movs	r2, #11
 8005fb0:	f7fe ffba 	bl	8004f28 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005fb4:	e9d5 2385 	ldrd	r2, r3, [r5, #532]	; 0x214
 8005fb8:	7adb      	ldrb	r3, [r3, #11]
 8005fba:	f003 0318 	and.w	r3, r3, #24
 8005fbe:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8005fc6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005fca:	e72b      	b.n	8005e24 <dir_register+0xd0>
 8005fcc:	00011021 	.word	0x00011021
 8005fd0:	0800a81a 	.word	0x0800a81a

08005fd4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005fd4:	2901      	cmp	r1, #1
{
 8005fd6:	b570      	push	{r4, r5, r6, lr}
 8005fd8:	4605      	mov	r5, r0
 8005fda:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005fdc:	d929      	bls.n	8006032 <remove_chain+0x5e>
 8005fde:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8005fe2:	428b      	cmp	r3, r1
 8005fe4:	d925      	bls.n	8006032 <remove_chain+0x5e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f7ff faa7 	bl	800553c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8005fee:	4626      	mov	r6, r4
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	b908      	cbnz	r0, 8005ff8 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005ff4:	2000      	movs	r0, #0
}
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005ff8:	2801      	cmp	r0, #1
 8005ffa:	d01a      	beq.n	8006032 <remove_chain+0x5e>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005ffc:	1c41      	adds	r1, r0, #1
 8005ffe:	d01a      	beq.n	8006036 <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006000:	2200      	movs	r2, #0
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	f7ff fb48 	bl	800569a <put_fat>
			if (res != FR_OK) break;
 800600a:	2800      	cmp	r0, #0
 800600c:	d1f3      	bne.n	8005ff6 <remove_chain+0x22>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800600e:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	d008      	beq.n	8006028 <remove_chain+0x54>
				fs->free_clust++;
 8006016:	3301      	adds	r3, #1
 8006018:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
				fs->fsi_flag |= 1;
 800601c:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006028:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 800602c:	429c      	cmp	r4, r3
 800602e:	d3da      	bcc.n	8005fe6 <remove_chain+0x12>
 8006030:	e7e0      	b.n	8005ff4 <remove_chain+0x20>
		res = FR_INT_ERR;
 8006032:	2002      	movs	r0, #2
 8006034:	e7df      	b.n	8005ff6 <remove_chain+0x22>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006036:	2001      	movs	r0, #1
 8006038:	e7dd      	b.n	8005ff6 <remove_chain+0x22>
	...

0800603c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800603c:	b530      	push	{r4, r5, lr}
 800603e:	b085      	sub	sp, #20
 8006040:	e9cd 1000 	strd	r1, r0, [sp]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8006044:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8006046:	9103      	str	r1, [sp, #12]
{
 8006048:	4614      	mov	r4, r2
	vol = get_ldnumber(&rp);
 800604a:	f7ff f85e 	bl	800510a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800604e:	1e01      	subs	r1, r0, #0
 8006050:	db19      	blt.n	8006086 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006052:	4d0f      	ldr	r5, [pc, #60]	; (8006090 <f_mount+0x54>)
 8006054:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]

	if (cfs) {
 8006058:	b120      	cbz	r0, 8006064 <f_mount+0x28>
#if _FS_LOCK
		clear_lock(cfs);
 800605a:	f7ff f825 	bl	80050a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800605e:	2300      	movs	r3, #0
 8006060:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
	}

	if (fs) {
 8006064:	9801      	ldr	r0, [sp, #4]
 8006066:	b110      	cbz	r0, 800606e <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 8006068:	2300      	movs	r3, #0
 800606a:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800606e:	f845 0021 	str.w	r0, [r5, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006072:	b130      	cbz	r0, 8006082 <f_mount+0x46>
 8006074:	2c01      	cmp	r4, #1
 8006076:	d108      	bne.n	800608a <f_mount+0x4e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006078:	2200      	movs	r2, #0
 800607a:	4669      	mov	r1, sp
 800607c:	a801      	add	r0, sp, #4
 800607e:	f7ff f8e7 	bl	8005250 <find_volume>
	LEAVE_FF(fs, res);
}
 8006082:	b005      	add	sp, #20
 8006084:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006086:	200b      	movs	r0, #11
 8006088:	e7fb      	b.n	8006082 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800608a:	2000      	movs	r0, #0
 800608c:	e7f9      	b.n	8006082 <f_mount+0x46>
 800608e:	bf00      	nop
 8006090:	20008200 	.word	0x20008200

08006094 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006098:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800609c:	4617      	mov	r7, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800609e:	4605      	mov	r5, r0
{
 80060a0:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80060a2:	2800      	cmp	r0, #0
 80060a4:	f000 8092 	beq.w	80061cc <f_open+0x138>
	fp->fs = 0;			/* Clear file object */
 80060a8:	2300      	movs	r3, #0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80060aa:	f002 021e 	and.w	r2, r2, #30
	fp->fs = 0;			/* Clear file object */
 80060ae:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80060b2:	a901      	add	r1, sp, #4
 80060b4:	a886      	add	r0, sp, #536	; 0x218
 80060b6:	f7ff f8cb 	bl	8005250 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80060ba:	bb20      	cbnz	r0, 8006106 <f_open+0x72>
		INIT_BUF(dj);
 80060bc:	ab03      	add	r3, sp, #12
 80060be:	938c      	str	r3, [sp, #560]	; 0x230
 80060c0:	4b54      	ldr	r3, [pc, #336]	; (8006214 <f_open+0x180>)
		res = follow_path(&dj, path);	/* Follow the file path */
 80060c2:	9901      	ldr	r1, [sp, #4]
 80060c4:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 80060c6:	938e      	str	r3, [sp, #568]	; 0x238
		res = follow_path(&dj, path);	/* Follow the file path */
 80060c8:	f7ff fcea 	bl	8005aa0 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80060cc:	f007 041f 	and.w	r4, r7, #31
		dir = dj.dir;
 80060d0:	9e8b      	ldr	r6, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80060d2:	b940      	cbnz	r0, 80060e6 <f_open+0x52>
			if (!dir)	/* Default directory itself */
 80060d4:	b1de      	cbz	r6, 800610e <f_open+0x7a>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060d6:	f014 0f1e 	tst.w	r4, #30
 80060da:	bf14      	ite	ne
 80060dc:	2101      	movne	r1, #1
 80060de:	2100      	moveq	r1, #0
 80060e0:	a806      	add	r0, sp, #24
 80060e2:	f7fe ff33 	bl	8004f4c <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060e6:	f017 0f1c 	tst.w	r7, #28
 80060ea:	d064      	beq.n	80061b6 <f_open+0x122>
			if (res != FR_OK) {					/* No file, create new */
 80060ec:	b188      	cbz	r0, 8006112 <f_open+0x7e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80060ee:	2804      	cmp	r0, #4
 80060f0:	d109      	bne.n	8006106 <f_open+0x72>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060f2:	4b49      	ldr	r3, [pc, #292]	; (8006218 <f_open+0x184>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	b112      	cbz	r2, 80060fe <f_open+0x6a>
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d168      	bne.n	80061d0 <f_open+0x13c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80060fe:	a806      	add	r0, sp, #24
 8006100:	f7ff fe28 	bl	8005d54 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006104:	b170      	cbz	r0, 8006124 <f_open+0x90>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8006106:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 800610a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 800610e:	2006      	movs	r0, #6
 8006110:	e7e9      	b.n	80060e6 <f_open+0x52>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006112:	7af3      	ldrb	r3, [r6, #11]
 8006114:	f013 0f11 	tst.w	r3, #17
 8006118:	d156      	bne.n	80061c8 <f_open+0x134>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800611a:	0778      	lsls	r0, r7, #29
 800611c:	d45a      	bmi.n	80061d4 <f_open+0x140>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800611e:	073b      	lsls	r3, r7, #28
 8006120:	d533      	bpl.n	800618a <f_open+0xf6>
 8006122:	e002      	b.n	800612a <f_open+0x96>
				dir = dj.dir;					/* New entry */
 8006124:	9e8b      	ldr	r6, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006126:	f044 0408 	orr.w	r4, r4, #8
				dw = GET_FATTIME();				/* Created time */
 800612a:	f7fe fe61 	bl	8004df0 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800612e:	2700      	movs	r7, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006130:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006134:	73b0      	strb	r0, [r6, #14]
 8006136:	73f3      	strb	r3, [r6, #15]
 8006138:	0c03      	lsrs	r3, r0, #16
 800613a:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800613c:	72f7      	strb	r7, [r6, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800613e:	7737      	strb	r7, [r6, #28]
 8006140:	7777      	strb	r7, [r6, #29]
 8006142:	77b7      	strb	r7, [r6, #30]
 8006144:	77f7      	strb	r7, [r6, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006146:	7433      	strb	r3, [r6, #16]
 8006148:	7470      	strb	r0, [r6, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800614a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800614c:	4631      	mov	r1, r6
 800614e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8006152:	f7ff f9dd 	bl	8005510 <ld_clust.isra.0>
				dj.fs->wflag = 1;
 8006156:	2301      	movs	r3, #1
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006158:	4601      	mov	r1, r0
	ST_WORD(dir + DIR_FstClusLO, cl);
 800615a:	76b7      	strb	r7, [r6, #26]
 800615c:	76f7      	strb	r7, [r6, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800615e:	7537      	strb	r7, [r6, #20]
 8006160:	7577      	strb	r7, [r6, #21]
				dj.fs->wflag = 1;
 8006162:	9886      	ldr	r0, [sp, #536]	; 0x218
				if (cl) {						/* Remove the cluster chain if exist */
 8006164:	460f      	mov	r7, r1
				dj.fs->wflag = 1;
 8006166:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800616a:	b171      	cbz	r1, 800618a <f_open+0xf6>
					dw = dj.fs->winsect;
 800616c:	f8d0 8230 	ldr.w	r8, [r0, #560]	; 0x230
					res = remove_chain(dj.fs, cl);
 8006170:	f7ff ff30 	bl	8005fd4 <remove_chain>
					if (res == FR_OK) {
 8006174:	2800      	cmp	r0, #0
 8006176:	d1c6      	bne.n	8006106 <f_open+0x72>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006178:	9886      	ldr	r0, [sp, #536]	; 0x218
 800617a:	3f01      	subs	r7, #1
						res = move_window(dj.fs, dw);
 800617c:	4641      	mov	r1, r8
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800617e:	f8c0 720c 	str.w	r7, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8006182:	f7ff f822 	bl	80051ca <move_window>
		if (res == FR_OK) {
 8006186:	2800      	cmp	r0, #0
 8006188:	d1bd      	bne.n	8006106 <f_open+0x72>
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800618a:	9b86      	ldr	r3, [sp, #536]	; 0x218
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800618c:	0722      	lsls	r2, r4, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800618e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
				mode |= FA__WRITTEN;
 8006192:	bf48      	it	mi
 8006194:	f044 0420 	orrmi.w	r4, r4, #32
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006198:	f014 0ffe 	tst.w	r4, #254	; 0xfe
 800619c:	bf14      	ite	ne
 800619e:	2101      	movne	r1, #1
 80061a0:	2100      	moveq	r1, #0
			fp->dir_ptr = dir;
 80061a2:	e9c5 3687 	strd	r3, r6, [r5, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80061a6:	a806      	add	r0, sp, #24
 80061a8:	f7fe ff12 	bl	8004fd0 <inc_lock>
 80061ac:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80061b0:	b9a0      	cbnz	r0, 80061dc <f_open+0x148>
 80061b2:	2002      	movs	r0, #2
 80061b4:	e7a7      	b.n	8006106 <f_open+0x72>
			if (res == FR_OK) {					/* Follow succeeded */
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d1a5      	bne.n	8006106 <f_open+0x72>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80061ba:	7af3      	ldrb	r3, [r6, #11]
 80061bc:	06da      	lsls	r2, r3, #27
 80061be:	d40b      	bmi.n	80061d8 <f_open+0x144>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80061c0:	07bf      	lsls	r7, r7, #30
 80061c2:	d5e2      	bpl.n	800618a <f_open+0xf6>
 80061c4:	07d8      	lsls	r0, r3, #31
 80061c6:	d5e0      	bpl.n	800618a <f_open+0xf6>
					res = FR_DENIED;
 80061c8:	2007      	movs	r0, #7
 80061ca:	e79c      	b.n	8006106 <f_open+0x72>
	if (!fp) return FR_INVALID_OBJECT;
 80061cc:	2009      	movs	r0, #9
 80061ce:	e79a      	b.n	8006106 <f_open+0x72>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80061d0:	2012      	movs	r0, #18
 80061d2:	e798      	b.n	8006106 <f_open+0x72>
						res = FR_EXIST;
 80061d4:	2008      	movs	r0, #8
 80061d6:	e796      	b.n	8006106 <f_open+0x72>
					res = FR_NO_FILE;
 80061d8:	2004      	movs	r0, #4
 80061da:	e794      	b.n	8006106 <f_open+0x72>
			fp->flag = mode;					/* File access mode */
 80061dc:	f885 4206 	strb.w	r4, [r5, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80061e0:	2400      	movs	r4, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80061e2:	9f86      	ldr	r7, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 80061e4:	f885 4207 	strb.w	r4, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80061e8:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 80061ec:	4631      	mov	r1, r6
 80061ee:	f7ff f98f 	bl	8005510 <ld_clust.isra.0>
 80061f2:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80061f6:	69f3      	ldr	r3, [r6, #28]
			fp->id = fp->fs->id;
 80061f8:	4620      	mov	r0, r4
			fp->fptr = 0;						/* File pointer */
 80061fa:	e9c5 4382 	strd	r4, r3, [r5, #520]	; 0x208
			fp->id = fp->fs->id;
 80061fe:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->dsect = 0;
 8006202:	f8c5 4218 	str.w	r4, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8006206:	f8c5 4224 	str.w	r4, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800620a:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 800620e:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8006212:	e778      	b.n	8006106 <f_open+0x72>
 8006214:	2000821e 	.word	0x2000821e
 8006218:	20008204 	.word	0x20008204

0800621c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800621c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8006222:	2300      	movs	r3, #0
 8006224:	f8ca 3000 	str.w	r3, [sl]
{
 8006228:	4604      	mov	r4, r0
 800622a:	4689      	mov	r9, r1
 800622c:	4617      	mov	r7, r2

	res = validate(fp);							/* Check validity */
 800622e:	f7fe ff84 	bl	800513a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006232:	4605      	mov	r5, r0
 8006234:	bb50      	cbnz	r0, 800628c <f_read+0x70>
	if (fp->err)								/* Check error */
 8006236:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
 800623a:	bb3d      	cbnz	r5, 800628c <f_read+0x70>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800623c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006240:	f013 0301 	ands.w	r3, r3, #1
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	f000 80ae 	beq.w	80063a6 <f_read+0x18a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800624a:	e9d4 2682 	ldrd	r2, r6, [r4, #520]	; 0x208
 800624e:	1ab6      	subs	r6, r6, r2
 8006250:	42be      	cmp	r6, r7
 8006252:	bf28      	it	cs
 8006254:	463e      	movcs	r6, r7
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8006256:	b1ce      	cbz	r6, 800628c <f_read+0x70>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006258:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800625c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8091 	bne.w	8006388 <f_read+0x16c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006266:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800626a:	f890 8202 	ldrb.w	r8, [r0, #514]	; 0x202
 800626e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006272:	ea08 2851 	and.w	r8, r8, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8006276:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800627a:	d120      	bne.n	80062be <f_read+0xa2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800627c:	b951      	cbnz	r1, 8006294 <f_read+0x78>
					clst = fp->sclust;			/* Follow from the origin */
 800627e:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006282:	2801      	cmp	r0, #1
 8006284:	d812      	bhi.n	80062ac <f_read+0x90>
 8006286:	2502      	movs	r5, #2
 8006288:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 800628c:	4628      	mov	r0, r5
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 8006294:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8006298:	b11b      	cbz	r3, 80062a2 <f_read+0x86>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800629a:	4620      	mov	r0, r4
 800629c:	f7fe ff12 	bl	80050c4 <clmt_clust>
 80062a0:	e7ef      	b.n	8006282 <f_read+0x66>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80062a2:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80062a6:	f7ff f949 	bl	800553c <get_fat>
 80062aa:	e7ea      	b.n	8006282 <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80062ac:	1c42      	adds	r2, r0, #1
 80062ae:	d104      	bne.n	80062ba <f_read+0x9e>
 80062b0:	2301      	movs	r3, #1
 80062b2:	9d00      	ldr	r5, [sp, #0]
 80062b4:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
 80062b8:	e7e8      	b.n	800628c <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 80062ba:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80062be:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
 80062c2:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80062c6:	4658      	mov	r0, fp
 80062c8:	f7ff f92a 	bl	8005520 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d0da      	beq.n	8006286 <f_read+0x6a>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80062d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80062d4:	eb00 0708 	add.w	r7, r0, r8
			if (cc) {							/* Read maximum contiguous sectors directly */
 80062d8:	d333      	bcc.n	8006342 <f_read+0x126>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80062da:	f89b 2202 	ldrb.w	r2, [fp, #514]	; 0x202
 80062de:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 80062e2:	4291      	cmp	r1, r2
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80062e4:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80062e8:	4649      	mov	r1, r9
					cc = fp->fs->csize - csect;
 80062ea:	bf88      	it	hi
 80062ec:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80062f0:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 80062f4:	463a      	mov	r2, r7
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f7fe fdee 	bl	8004ed8 <disk_read>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d1d7      	bne.n	80062b0 <f_read+0x94>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006300:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	f012 0f40 	tst.w	r2, #64	; 0x40
 800630a:	d00c      	beq.n	8006326 <f_read+0x10a>
 800630c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8006310:	1bc0      	subs	r0, r0, r7
 8006312:	4283      	cmp	r3, r0
 8006314:	d907      	bls.n	8006326 <f_read+0x10a>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	4621      	mov	r1, r4
 800631c:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8006320:	f7fe fe02 	bl	8004f28 <mem_cpy>
 8006324:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006326:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006328:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800632c:	44b9      	add	r9, r7
 800632e:	443b      	add	r3, r7
 8006330:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8006334:	f8da 3000 	ldr.w	r3, [sl]
 8006338:	1bf6      	subs	r6, r6, r7
 800633a:	443b      	add	r3, r7
 800633c:	f8ca 3000 	str.w	r3, [sl]
 8006340:	e789      	b.n	8006256 <f_read+0x3a>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006342:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8006346:	4297      	cmp	r7, r2
 8006348:	d01c      	beq.n	8006384 <f_read+0x168>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800634a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800634e:	065b      	lsls	r3, r3, #25
 8006350:	d50d      	bpl.n	800636e <f_read+0x152>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006352:	2301      	movs	r3, #1
 8006354:	4621      	mov	r1, r4
 8006356:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 800635a:	f7fe fdcb 	bl	8004ef4 <disk_write>
 800635e:	2800      	cmp	r0, #0
 8006360:	d1a6      	bne.n	80062b0 <f_read+0x94>
					fp->flag &= ~FA__DIRTY;
 8006362:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800636e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006372:	2301      	movs	r3, #1
 8006374:	463a      	mov	r2, r7
 8006376:	4621      	mov	r1, r4
 8006378:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800637c:	f7fe fdac 	bl	8004ed8 <disk_read>
 8006380:	2800      	cmp	r0, #0
 8006382:	d195      	bne.n	80062b0 <f_read+0x94>
			fp->dsect = sect;
 8006384:	f8c4 7218 	str.w	r7, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006388:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800638c:	4648      	mov	r0, r9
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800638e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006392:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 8006396:	42b7      	cmp	r7, r6
 8006398:	bf28      	it	cs
 800639a:	4637      	movcs	r7, r6
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800639c:	4421      	add	r1, r4
 800639e:	463a      	mov	r2, r7
 80063a0:	f7fe fdc2 	bl	8004f28 <mem_cpy>
 80063a4:	e7c0      	b.n	8006328 <f_read+0x10c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80063a6:	2507      	movs	r5, #7
 80063a8:	e770      	b.n	800628c <f_read+0x70>

080063aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80063aa:	b570      	push	{r4, r5, r6, lr}
 80063ac:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80063ae:	f7fe fec4 	bl	800513a <validate>
	if (res == FR_OK) {
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d159      	bne.n	800646a <f_sync+0xc0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80063b6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80063ba:	f013 0020 	ands.w	r0, r3, #32
 80063be:	d054      	beq.n	800646a <f_sync+0xc0>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80063c0:	065b      	lsls	r3, r3, #25
 80063c2:	d511      	bpl.n	80063e8 <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80063c4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80063c8:	2301      	movs	r3, #1
 80063ca:	4621      	mov	r1, r4
 80063cc:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80063d0:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80063d4:	f7fe fd8e 	bl	8004ef4 <disk_write>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d145      	bne.n	8006468 <f_sync+0xbe>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80063dc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80063e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80063e8:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80063ec:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80063f0:	f7fe feeb 	bl	80051ca <move_window>
 80063f4:	4606      	mov	r6, r0
			if (res == FR_OK) {
 80063f6:	bbc0      	cbnz	r0, 800646a <f_sync+0xc0>
				dir = fp->dir_ptr;
 80063f8:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80063fc:	7aeb      	ldrb	r3, [r5, #11]
 80063fe:	f043 0320 	orr.w	r3, r3, #32
 8006402:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006404:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8006408:	772b      	strb	r3, [r5, #28]
 800640a:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	776b      	strb	r3, [r5, #29]
 8006412:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8006416:	77ab      	strb	r3, [r5, #30]
 8006418:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800641c:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800641e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006422:	76ab      	strb	r3, [r5, #26]
 8006424:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	752b      	strb	r3, [r5, #20]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006430:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8006432:	f7fe fcdd 	bl	8004df0 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006436:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800643a:	75eb      	strb	r3, [r5, #23]
 800643c:	0c03      	lsrs	r3, r0, #16
 800643e:	762b      	strb	r3, [r5, #24]
 8006440:	0e03      	lsrs	r3, r0, #24
 8006442:	75a8      	strb	r0, [r5, #22]
 8006444:	766b      	strb	r3, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006446:	74ae      	strb	r6, [r5, #18]
 8006448:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800644a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800644e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8006452:	f023 0320 	bic.w	r3, r3, #32
 8006456:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800645a:	2301      	movs	r3, #1
 800645c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8006460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8006464:	f7ff b812 	b.w	800548c <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006468:	2001      	movs	r0, #1
}
 800646a:	bd70      	pop	{r4, r5, r6, pc}

0800646c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800646c:	b510      	push	{r4, lr}
 800646e:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006470:	f7ff ff9b 	bl	80063aa <f_sync>
	if (res == FR_OK)
 8006474:	b950      	cbnz	r0, 800648c <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006476:	4620      	mov	r0, r4
 8006478:	f7fe fe5f 	bl	800513a <validate>
		if (res == FR_OK) {
 800647c:	b930      	cbnz	r0, 800648c <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800647e:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8006482:	f7fe fdf1 	bl	8005068 <dec_lock>
			if (res == FR_OK)
 8006486:	b908      	cbnz	r0, 800648c <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006488:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800648c:	bd10      	pop	{r4, pc}
	...

08006490 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006490:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <FATFS_LinkDriverEx+0x40>)
{
 8006494:	4605      	mov	r5, r0
  if(disk.nbr <= _VOLUMES)
 8006496:	7a58      	ldrb	r0, [r3, #9]
 8006498:	2801      	cmp	r0, #1
 800649a:	d816      	bhi.n	80064ca <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800649c:	2000      	movs	r0, #0
 800649e:	7a5c      	ldrb	r4, [r3, #9]
 80064a0:	b2e4      	uxtb	r4, r4
 80064a2:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 80064a4:	7a5c      	ldrb	r4, [r3, #9]
 80064a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064aa:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;  
 80064ac:	7a5c      	ldrb	r4, [r3, #9]
 80064ae:	441c      	add	r4, r3
 80064b0:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80064b2:	7a5a      	ldrb	r2, [r3, #9]
 80064b4:	1c54      	adds	r4, r2, #1
 80064b6:	b2e4      	uxtb	r4, r4
 80064b8:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80064ba:	233a      	movs	r3, #58	; 0x3a
 80064bc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80064be:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80064c0:	3230      	adds	r2, #48	; 0x30
 80064c2:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80064c4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80064c6:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 80064c8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80064ca:	2001      	movs	r0, #1
 80064cc:	e7fc      	b.n	80064c8 <FATFS_LinkDriverEx+0x38>
 80064ce:	bf00      	nop
 80064d0:	20008420 	.word	0x20008420

080064d4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80064d4:	2200      	movs	r2, #0
 80064d6:	f7ff bfdb 	b.w	8006490 <FATFS_LinkDriverEx>
	...

080064dc <SD_initialize>:
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 80064dc:	2301      	movs	r3, #1
{
 80064de:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80064e0:	4c05      	ldr	r4, [pc, #20]	; (80064f8 <SD_initialize+0x1c>)
 80064e2:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80064e4:	f7fe fcc4 	bl	8004e70 <BSP_SD_Init>
 80064e8:	b918      	cbnz	r0, 80064f2 <SD_initialize+0x16>
  {
    Stat &= ~STA_NOINIT;
 80064ea:	7823      	ldrb	r3, [r4, #0]
 80064ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80064f0:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 80064f2:	7820      	ldrb	r0, [r4, #0]
}
 80064f4:	bd10      	pop	{r4, pc}
 80064f6:	bf00      	nop
 80064f8:	2000002c 	.word	0x2000002c

080064fc <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  Stat = STA_NOINIT;
 80064fc:	2301      	movs	r3, #1
{
 80064fe:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006500:	4c05      	ldr	r4, [pc, #20]	; (8006518 <SD_status+0x1c>)
 8006502:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006504:	f7fe fc96 	bl	8004e34 <BSP_SD_GetCardState>
 8006508:	b918      	cbnz	r0, 8006512 <SD_status+0x16>
  {
    Stat &= ~STA_NOINIT;
 800650a:	7823      	ldrb	r3, [r4, #0]
 800650c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006510:	7023      	strb	r3, [r4, #0]
  }
  
  return Stat;
 8006512:	7820      	ldrb	r0, [r4, #0]
}
 8006514:	bd10      	pop	{r4, pc}
 8006516:	bf00      	nop
 8006518:	2000002c 	.word	0x2000002c

0800651c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800651c:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <SD_ioctl+0x50>)
{
 8006520:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006522:	781c      	ldrb	r4, [r3, #0]
{
 8006524:	b089      	sub	sp, #36	; 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006526:	f014 0401 	ands.w	r4, r4, #1
 800652a:	d11a      	bne.n	8006562 <SD_ioctl+0x46>
  
  switch (cmd)
 800652c:	2903      	cmp	r1, #3
 800652e:	d803      	bhi.n	8006538 <SD_ioctl+0x1c>
 8006530:	e8df f001 	tbb	[pc, r1]
 8006534:	120c0619 	.word	0x120c0619
 8006538:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 800653a:	4620      	mov	r0, r4
 800653c:	b009      	add	sp, #36	; 0x24
 800653e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006540:	4668      	mov	r0, sp
 8006542:	f7fe fc81 	bl	8004e48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006546:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8006548:	602b      	str	r3, [r5, #0]
    break;
 800654a:	e7f6      	b.n	800653a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800654c:	4668      	mov	r0, sp
 800654e:	f7fe fc7b 	bl	8004e48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006552:	9b07      	ldr	r3, [sp, #28]
 8006554:	802b      	strh	r3, [r5, #0]
    break;
 8006556:	e7f0      	b.n	800653a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8006558:	4668      	mov	r0, sp
 800655a:	f7fe fc75 	bl	8004e48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800655e:	9b07      	ldr	r3, [sp, #28]
 8006560:	e7f2      	b.n	8006548 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006562:	2403      	movs	r4, #3
 8006564:	e7e9      	b.n	800653a <SD_ioctl+0x1e>
    res = RES_OK;
 8006566:	460c      	mov	r4, r1
 8006568:	e7e7      	b.n	800653a <SD_ioctl+0x1e>
 800656a:	bf00      	nop
 800656c:	2000002c 	.word	0x2000002c

08006570 <SD_write>:
{
 8006570:	4608      	mov	r0, r1
 8006572:	b510      	push	{r4, lr}
 8006574:	4611      	mov	r1, r2
 8006576:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <SD_write+0x28>)
 800657a:	f7fe fc4b 	bl	8004e14 <BSP_SD_WriteBlocks>
 800657e:	b140      	cbz	r0, 8006592 <SD_write+0x22>
  DRESULT res = RES_ERROR;
 8006580:	2001      	movs	r0, #1
}
 8006582:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 8006584:	3c01      	subs	r4, #1
 8006586:	d0fb      	beq.n	8006580 <SD_write+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006588:	f7fe fc54 	bl	8004e34 <BSP_SD_GetCardState>
 800658c:	2800      	cmp	r0, #0
 800658e:	d1f9      	bne.n	8006584 <SD_write+0x14>
 8006590:	e7f7      	b.n	8006582 <SD_write+0x12>
 8006592:	4c02      	ldr	r4, [pc, #8]	; (800659c <SD_write+0x2c>)
 8006594:	e7f8      	b.n	8006588 <SD_write+0x18>
 8006596:	bf00      	nop
 8006598:	05f5e100 	.word	0x05f5e100
 800659c:	000186a1 	.word	0x000186a1

080065a0 <SD_read>:
{
 80065a0:	4608      	mov	r0, r1
 80065a2:	b510      	push	{r4, lr}
 80065a4:	4611      	mov	r1, r2
 80065a6:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <SD_read+0x28>)
 80065aa:	f7fe fc23 	bl	8004df4 <BSP_SD_ReadBlocks>
 80065ae:	b140      	cbz	r0, 80065c2 <SD_read+0x22>
  DRESULT res = RES_ERROR;
 80065b0:	2001      	movs	r0, #1
}
 80065b2:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 80065b4:	3c01      	subs	r4, #1
 80065b6:	d0fb      	beq.n	80065b0 <SD_read+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80065b8:	f7fe fc3c 	bl	8004e34 <BSP_SD_GetCardState>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1f9      	bne.n	80065b4 <SD_read+0x14>
 80065c0:	e7f7      	b.n	80065b2 <SD_read+0x12>
 80065c2:	4c02      	ldr	r4, [pc, #8]	; (80065cc <SD_read+0x2c>)
 80065c4:	e7f8      	b.n	80065b8 <SD_read+0x18>
 80065c6:	bf00      	nop
 80065c8:	05f5e100 	.word	0x05f5e100
 80065cc:	000186a1 	.word	0x000186a1

080065d0 <ff_convert>:
          if (wch < 0x80) {
                    return wch;
          }

          // we are not supporting unicode
          return 0;
 80065d0:	2880      	cmp	r0, #128	; 0x80
}
 80065d2:	bf28      	it	cs
 80065d4:	2000      	movcs	r0, #0
 80065d6:	4770      	bx	lr

080065d8 <ff_wtoupper>:

WCHAR ff_wtoupper (WCHAR wch)
{
          if (wch < 0x80) {
 80065d8:	287f      	cmp	r0, #127	; 0x7f
 80065da:	d807      	bhi.n	80065ec <ff_wtoupper+0x14>
                    if (wch >= 'a' && wch <= 'z') {
 80065dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80065e0:	2b19      	cmp	r3, #25
 80065e2:	d804      	bhi.n	80065ee <ff_wtoupper+0x16>
                              wch &= ~0x20;
 80065e4:	f020 0020 	bic.w	r0, r0, #32
 80065e8:	b280      	uxth	r0, r0
 80065ea:	4770      	bx	lr
                     }
                      return wch;
          }

          // we are not supporting unicode
          return 0;
 80065ec:	2000      	movs	r0, #0
}
 80065ee:	4770      	bx	lr

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000030 	.word	0x20000030

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	2600      	movs	r6, #0
 8006600:	4d0c      	ldr	r5, [pc, #48]	; (8006634 <__libc_init_array+0x38>)
 8006602:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006604:	1b64      	subs	r4, r4, r5
 8006606:	10a4      	asrs	r4, r4, #2
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	f002 f9d2 	bl	80089b4 <_init>
 8006610:	2600      	movs	r6, #0
 8006612:	4d0a      	ldr	r5, [pc, #40]	; (800663c <__libc_init_array+0x40>)
 8006614:	4c0a      	ldr	r4, [pc, #40]	; (8006640 <__libc_init_array+0x44>)
 8006616:	1b64      	subs	r4, r4, r5
 8006618:	10a4      	asrs	r4, r4, #2
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	0800aab8 	.word	0x0800aab8
 8006638:	0800aab8 	.word	0x0800aab8
 800663c:	0800aab8 	.word	0x0800aab8
 8006640:	0800aabc 	.word	0x0800aabc

08006644 <malloc>:
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <malloc+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f000 b889 	b.w	8006760 <_malloc_r>
 800664e:	bf00      	nop
 8006650:	20000030 	.word	0x20000030

08006654 <free>:
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <free+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f000 b819 	b.w	8006690 <_free_r>
 800665e:	bf00      	nop
 8006660:	20000030 	.word	0x20000030

08006664 <memcpy>:
 8006664:	440a      	add	r2, r1
 8006666:	4291      	cmp	r1, r2
 8006668:	f100 33ff 	add.w	r3, r0, #4294967295
 800666c:	d100      	bne.n	8006670 <memcpy+0xc>
 800666e:	4770      	bx	lr
 8006670:	b510      	push	{r4, lr}
 8006672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006676:	4291      	cmp	r1, r2
 8006678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800667c:	d1f9      	bne.n	8006672 <memcpy+0xe>
 800667e:	bd10      	pop	{r4, pc}

08006680 <memset>:
 8006680:	4603      	mov	r3, r0
 8006682:	4402      	add	r2, r0
 8006684:	4293      	cmp	r3, r2
 8006686:	d100      	bne.n	800668a <memset+0xa>
 8006688:	4770      	bx	lr
 800668a:	f803 1b01 	strb.w	r1, [r3], #1
 800668e:	e7f9      	b.n	8006684 <memset+0x4>

08006690 <_free_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4605      	mov	r5, r0
 8006694:	2900      	cmp	r1, #0
 8006696:	d040      	beq.n	800671a <_free_r+0x8a>
 8006698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669c:	1f0c      	subs	r4, r1, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bfb8      	it	lt
 80066a2:	18e4      	addlt	r4, r4, r3
 80066a4:	f000 fa1a 	bl	8006adc <__malloc_lock>
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <_free_r+0x8c>)
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	b933      	cbnz	r3, 80066bc <_free_r+0x2c>
 80066ae:	6063      	str	r3, [r4, #4]
 80066b0:	6014      	str	r4, [r2, #0]
 80066b2:	4628      	mov	r0, r5
 80066b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066b8:	f000 ba16 	b.w	8006ae8 <__malloc_unlock>
 80066bc:	42a3      	cmp	r3, r4
 80066be:	d908      	bls.n	80066d2 <_free_r+0x42>
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	1821      	adds	r1, r4, r0
 80066c4:	428b      	cmp	r3, r1
 80066c6:	bf01      	itttt	eq
 80066c8:	6819      	ldreq	r1, [r3, #0]
 80066ca:	685b      	ldreq	r3, [r3, #4]
 80066cc:	1809      	addeq	r1, r1, r0
 80066ce:	6021      	streq	r1, [r4, #0]
 80066d0:	e7ed      	b.n	80066ae <_free_r+0x1e>
 80066d2:	461a      	mov	r2, r3
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	b10b      	cbz	r3, 80066dc <_free_r+0x4c>
 80066d8:	42a3      	cmp	r3, r4
 80066da:	d9fa      	bls.n	80066d2 <_free_r+0x42>
 80066dc:	6811      	ldr	r1, [r2, #0]
 80066de:	1850      	adds	r0, r2, r1
 80066e0:	42a0      	cmp	r0, r4
 80066e2:	d10b      	bne.n	80066fc <_free_r+0x6c>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	4401      	add	r1, r0
 80066e8:	1850      	adds	r0, r2, r1
 80066ea:	4283      	cmp	r3, r0
 80066ec:	6011      	str	r1, [r2, #0]
 80066ee:	d1e0      	bne.n	80066b2 <_free_r+0x22>
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4401      	add	r1, r0
 80066f6:	6011      	str	r1, [r2, #0]
 80066f8:	6053      	str	r3, [r2, #4]
 80066fa:	e7da      	b.n	80066b2 <_free_r+0x22>
 80066fc:	d902      	bls.n	8006704 <_free_r+0x74>
 80066fe:	230c      	movs	r3, #12
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	e7d6      	b.n	80066b2 <_free_r+0x22>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	1821      	adds	r1, r4, r0
 8006708:	428b      	cmp	r3, r1
 800670a:	bf01      	itttt	eq
 800670c:	6819      	ldreq	r1, [r3, #0]
 800670e:	685b      	ldreq	r3, [r3, #4]
 8006710:	1809      	addeq	r1, r1, r0
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	6054      	str	r4, [r2, #4]
 8006718:	e7cb      	b.n	80066b2 <_free_r+0x22>
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	2000842c 	.word	0x2000842c

08006720 <sbrk_aligned>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4e0e      	ldr	r6, [pc, #56]	; (800675c <sbrk_aligned+0x3c>)
 8006724:	460c      	mov	r4, r1
 8006726:	6831      	ldr	r1, [r6, #0]
 8006728:	4605      	mov	r5, r0
 800672a:	b911      	cbnz	r1, 8006732 <sbrk_aligned+0x12>
 800672c:	f000 f88c 	bl	8006848 <_sbrk_r>
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	4621      	mov	r1, r4
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f887 	bl	8006848 <_sbrk_r>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d00a      	beq.n	8006754 <sbrk_aligned+0x34>
 800673e:	1cc4      	adds	r4, r0, #3
 8006740:	f024 0403 	bic.w	r4, r4, #3
 8006744:	42a0      	cmp	r0, r4
 8006746:	d007      	beq.n	8006758 <sbrk_aligned+0x38>
 8006748:	1a21      	subs	r1, r4, r0
 800674a:	4628      	mov	r0, r5
 800674c:	f000 f87c 	bl	8006848 <_sbrk_r>
 8006750:	3001      	adds	r0, #1
 8006752:	d101      	bne.n	8006758 <sbrk_aligned+0x38>
 8006754:	f04f 34ff 	mov.w	r4, #4294967295
 8006758:	4620      	mov	r0, r4
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	20008430 	.word	0x20008430

08006760 <_malloc_r>:
 8006760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006764:	1ccd      	adds	r5, r1, #3
 8006766:	f025 0503 	bic.w	r5, r5, #3
 800676a:	3508      	adds	r5, #8
 800676c:	2d0c      	cmp	r5, #12
 800676e:	bf38      	it	cc
 8006770:	250c      	movcc	r5, #12
 8006772:	2d00      	cmp	r5, #0
 8006774:	4607      	mov	r7, r0
 8006776:	db01      	blt.n	800677c <_malloc_r+0x1c>
 8006778:	42a9      	cmp	r1, r5
 800677a:	d905      	bls.n	8006788 <_malloc_r+0x28>
 800677c:	230c      	movs	r3, #12
 800677e:	2600      	movs	r6, #0
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	4630      	mov	r0, r6
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006788:	4e2e      	ldr	r6, [pc, #184]	; (8006844 <_malloc_r+0xe4>)
 800678a:	f000 f9a7 	bl	8006adc <__malloc_lock>
 800678e:	6833      	ldr	r3, [r6, #0]
 8006790:	461c      	mov	r4, r3
 8006792:	bb34      	cbnz	r4, 80067e2 <_malloc_r+0x82>
 8006794:	4629      	mov	r1, r5
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff ffc2 	bl	8006720 <sbrk_aligned>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	4604      	mov	r4, r0
 80067a0:	d14d      	bne.n	800683e <_malloc_r+0xde>
 80067a2:	6834      	ldr	r4, [r6, #0]
 80067a4:	4626      	mov	r6, r4
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d140      	bne.n	800682c <_malloc_r+0xcc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	4631      	mov	r1, r6
 80067ae:	4638      	mov	r0, r7
 80067b0:	eb04 0803 	add.w	r8, r4, r3
 80067b4:	f000 f848 	bl	8006848 <_sbrk_r>
 80067b8:	4580      	cmp	r8, r0
 80067ba:	d13a      	bne.n	8006832 <_malloc_r+0xd2>
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	3503      	adds	r5, #3
 80067c0:	1a6d      	subs	r5, r5, r1
 80067c2:	f025 0503 	bic.w	r5, r5, #3
 80067c6:	3508      	adds	r5, #8
 80067c8:	2d0c      	cmp	r5, #12
 80067ca:	bf38      	it	cc
 80067cc:	250c      	movcc	r5, #12
 80067ce:	4638      	mov	r0, r7
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7ff ffa5 	bl	8006720 <sbrk_aligned>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d02b      	beq.n	8006832 <_malloc_r+0xd2>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	442b      	add	r3, r5
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	e00e      	b.n	8006800 <_malloc_r+0xa0>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	1b52      	subs	r2, r2, r5
 80067e6:	d41e      	bmi.n	8006826 <_malloc_r+0xc6>
 80067e8:	2a0b      	cmp	r2, #11
 80067ea:	d916      	bls.n	800681a <_malloc_r+0xba>
 80067ec:	1961      	adds	r1, r4, r5
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	6025      	str	r5, [r4, #0]
 80067f2:	bf18      	it	ne
 80067f4:	6059      	strne	r1, [r3, #4]
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	bf08      	it	eq
 80067fa:	6031      	streq	r1, [r6, #0]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4638      	mov	r0, r7
 8006802:	f104 060b 	add.w	r6, r4, #11
 8006806:	f000 f96f 	bl	8006ae8 <__malloc_unlock>
 800680a:	f026 0607 	bic.w	r6, r6, #7
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	1af2      	subs	r2, r6, r3
 8006812:	d0b6      	beq.n	8006782 <_malloc_r+0x22>
 8006814:	1b9b      	subs	r3, r3, r6
 8006816:	50a3      	str	r3, [r4, r2]
 8006818:	e7b3      	b.n	8006782 <_malloc_r+0x22>
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	42a3      	cmp	r3, r4
 800681e:	bf0c      	ite	eq
 8006820:	6032      	streq	r2, [r6, #0]
 8006822:	605a      	strne	r2, [r3, #4]
 8006824:	e7ec      	b.n	8006800 <_malloc_r+0xa0>
 8006826:	4623      	mov	r3, r4
 8006828:	6864      	ldr	r4, [r4, #4]
 800682a:	e7b2      	b.n	8006792 <_malloc_r+0x32>
 800682c:	4634      	mov	r4, r6
 800682e:	6876      	ldr	r6, [r6, #4]
 8006830:	e7b9      	b.n	80067a6 <_malloc_r+0x46>
 8006832:	230c      	movs	r3, #12
 8006834:	4638      	mov	r0, r7
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	f000 f956 	bl	8006ae8 <__malloc_unlock>
 800683c:	e7a1      	b.n	8006782 <_malloc_r+0x22>
 800683e:	6025      	str	r5, [r4, #0]
 8006840:	e7de      	b.n	8006800 <_malloc_r+0xa0>
 8006842:	bf00      	nop
 8006844:	2000842c 	.word	0x2000842c

08006848 <_sbrk_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	2300      	movs	r3, #0
 800684c:	4d05      	ldr	r5, [pc, #20]	; (8006864 <_sbrk_r+0x1c>)
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fc fd7c 	bl	8003350 <_sbrk>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_sbrk_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_sbrk_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20008434 	.word	0x20008434

08006868 <siprintf>:
 8006868:	b40e      	push	{r1, r2, r3}
 800686a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800686e:	b500      	push	{lr}
 8006870:	b09c      	sub	sp, #112	; 0x70
 8006872:	ab1d      	add	r3, sp, #116	; 0x74
 8006874:	9002      	str	r0, [sp, #8]
 8006876:	9006      	str	r0, [sp, #24]
 8006878:	9107      	str	r1, [sp, #28]
 800687a:	9104      	str	r1, [sp, #16]
 800687c:	4808      	ldr	r0, [pc, #32]	; (80068a0 <siprintf+0x38>)
 800687e:	4909      	ldr	r1, [pc, #36]	; (80068a4 <siprintf+0x3c>)
 8006880:	f853 2b04 	ldr.w	r2, [r3], #4
 8006884:	9105      	str	r1, [sp, #20]
 8006886:	6800      	ldr	r0, [r0, #0]
 8006888:	a902      	add	r1, sp, #8
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	f000 f98e 	bl	8006bac <_svfiprintf_r>
 8006890:	2200      	movs	r2, #0
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	b01c      	add	sp, #112	; 0x70
 8006898:	f85d eb04 	ldr.w	lr, [sp], #4
 800689c:	b003      	add	sp, #12
 800689e:	4770      	bx	lr
 80068a0:	20000030 	.word	0x20000030
 80068a4:	ffff0208 	.word	0xffff0208

080068a8 <strcpy>:
 80068a8:	4603      	mov	r3, r0
 80068aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ae:	f803 2b01 	strb.w	r2, [r3], #1
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d1f9      	bne.n	80068aa <strcpy+0x2>
 80068b6:	4770      	bx	lr

080068b8 <strtok>:
 80068b8:	4b16      	ldr	r3, [pc, #88]	; (8006914 <strtok+0x5c>)
 80068ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	681f      	ldr	r7, [r3, #0]
 80068c0:	4605      	mov	r5, r0
 80068c2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80068c4:	460e      	mov	r6, r1
 80068c6:	b9ec      	cbnz	r4, 8006904 <strtok+0x4c>
 80068c8:	2050      	movs	r0, #80	; 0x50
 80068ca:	f7ff febb 	bl	8006644 <malloc>
 80068ce:	4602      	mov	r2, r0
 80068d0:	65b8      	str	r0, [r7, #88]	; 0x58
 80068d2:	b920      	cbnz	r0, 80068de <strtok+0x26>
 80068d4:	2157      	movs	r1, #87	; 0x57
 80068d6:	4b10      	ldr	r3, [pc, #64]	; (8006918 <strtok+0x60>)
 80068d8:	4810      	ldr	r0, [pc, #64]	; (800691c <strtok+0x64>)
 80068da:	f000 f8cf 	bl	8006a7c <__assert_func>
 80068de:	e9c0 4400 	strd	r4, r4, [r0]
 80068e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80068ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80068f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80068f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80068fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80068fe:	6184      	str	r4, [r0, #24]
 8006900:	7704      	strb	r4, [r0, #28]
 8006902:	6244      	str	r4, [r0, #36]	; 0x24
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800690a:	2301      	movs	r3, #1
 800690c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	f000 b806 	b.w	8006920 <__strtok_r>
 8006914:	20000030 	.word	0x20000030
 8006918:	0800a944 	.word	0x0800a944
 800691c:	0800a95b 	.word	0x0800a95b

08006920 <__strtok_r>:
 8006920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006922:	b908      	cbnz	r0, 8006928 <__strtok_r+0x8>
 8006924:	6810      	ldr	r0, [r2, #0]
 8006926:	b188      	cbz	r0, 800694c <__strtok_r+0x2c>
 8006928:	4604      	mov	r4, r0
 800692a:	460f      	mov	r7, r1
 800692c:	4620      	mov	r0, r4
 800692e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006932:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006936:	b91e      	cbnz	r6, 8006940 <__strtok_r+0x20>
 8006938:	b965      	cbnz	r5, 8006954 <__strtok_r+0x34>
 800693a:	4628      	mov	r0, r5
 800693c:	6015      	str	r5, [r2, #0]
 800693e:	e005      	b.n	800694c <__strtok_r+0x2c>
 8006940:	42b5      	cmp	r5, r6
 8006942:	d1f6      	bne.n	8006932 <__strtok_r+0x12>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f0      	bne.n	800692a <__strtok_r+0xa>
 8006948:	6014      	str	r4, [r2, #0]
 800694a:	7003      	strb	r3, [r0, #0]
 800694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800694e:	461c      	mov	r4, r3
 8006950:	e00c      	b.n	800696c <__strtok_r+0x4c>
 8006952:	b915      	cbnz	r5, 800695a <__strtok_r+0x3a>
 8006954:	460e      	mov	r6, r1
 8006956:	f814 3b01 	ldrb.w	r3, [r4], #1
 800695a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800695e:	42ab      	cmp	r3, r5
 8006960:	d1f7      	bne.n	8006952 <__strtok_r+0x32>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f3      	beq.n	800694e <__strtok_r+0x2e>
 8006966:	2300      	movs	r3, #0
 8006968:	f804 3c01 	strb.w	r3, [r4, #-1]
 800696c:	6014      	str	r4, [r2, #0]
 800696e:	e7ed      	b.n	800694c <__strtok_r+0x2c>

08006970 <_strtol_l.constprop.0>:
 8006970:	2b01      	cmp	r3, #1
 8006972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006976:	4680      	mov	r8, r0
 8006978:	d001      	beq.n	800697e <_strtol_l.constprop.0+0xe>
 800697a:	2b24      	cmp	r3, #36	; 0x24
 800697c:	d906      	bls.n	800698c <_strtol_l.constprop.0+0x1c>
 800697e:	f7ff fe37 	bl	80065f0 <__errno>
 8006982:	2316      	movs	r3, #22
 8006984:	6003      	str	r3, [r0, #0]
 8006986:	2000      	movs	r0, #0
 8006988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698c:	460d      	mov	r5, r1
 800698e:	4f35      	ldr	r7, [pc, #212]	; (8006a64 <_strtol_l.constprop.0+0xf4>)
 8006990:	4628      	mov	r0, r5
 8006992:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006996:	5de6      	ldrb	r6, [r4, r7]
 8006998:	f016 0608 	ands.w	r6, r6, #8
 800699c:	d1f8      	bne.n	8006990 <_strtol_l.constprop.0+0x20>
 800699e:	2c2d      	cmp	r4, #45	; 0x2d
 80069a0:	d12f      	bne.n	8006a02 <_strtol_l.constprop.0+0x92>
 80069a2:	2601      	movs	r6, #1
 80069a4:	782c      	ldrb	r4, [r5, #0]
 80069a6:	1c85      	adds	r5, r0, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d057      	beq.n	8006a5c <_strtol_l.constprop.0+0xec>
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d109      	bne.n	80069c4 <_strtol_l.constprop.0+0x54>
 80069b0:	2c30      	cmp	r4, #48	; 0x30
 80069b2:	d107      	bne.n	80069c4 <_strtol_l.constprop.0+0x54>
 80069b4:	7828      	ldrb	r0, [r5, #0]
 80069b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80069ba:	2858      	cmp	r0, #88	; 0x58
 80069bc:	d149      	bne.n	8006a52 <_strtol_l.constprop.0+0xe2>
 80069be:	2310      	movs	r3, #16
 80069c0:	786c      	ldrb	r4, [r5, #1]
 80069c2:	3502      	adds	r5, #2
 80069c4:	2700      	movs	r7, #0
 80069c6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80069ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80069ce:	fbbe f9f3 	udiv	r9, lr, r3
 80069d2:	4638      	mov	r0, r7
 80069d4:	fb03 ea19 	mls	sl, r3, r9, lr
 80069d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80069dc:	f1bc 0f09 	cmp.w	ip, #9
 80069e0:	d814      	bhi.n	8006a0c <_strtol_l.constprop.0+0x9c>
 80069e2:	4664      	mov	r4, ip
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	dd22      	ble.n	8006a2e <_strtol_l.constprop.0+0xbe>
 80069e8:	2f00      	cmp	r7, #0
 80069ea:	db1d      	blt.n	8006a28 <_strtol_l.constprop.0+0xb8>
 80069ec:	4581      	cmp	r9, r0
 80069ee:	d31b      	bcc.n	8006a28 <_strtol_l.constprop.0+0xb8>
 80069f0:	d101      	bne.n	80069f6 <_strtol_l.constprop.0+0x86>
 80069f2:	45a2      	cmp	sl, r4
 80069f4:	db18      	blt.n	8006a28 <_strtol_l.constprop.0+0xb8>
 80069f6:	2701      	movs	r7, #1
 80069f8:	fb00 4003 	mla	r0, r0, r3, r4
 80069fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a00:	e7ea      	b.n	80069d8 <_strtol_l.constprop.0+0x68>
 8006a02:	2c2b      	cmp	r4, #43	; 0x2b
 8006a04:	bf04      	itt	eq
 8006a06:	782c      	ldrbeq	r4, [r5, #0]
 8006a08:	1c85      	addeq	r5, r0, #2
 8006a0a:	e7cd      	b.n	80069a8 <_strtol_l.constprop.0+0x38>
 8006a0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a10:	f1bc 0f19 	cmp.w	ip, #25
 8006a14:	d801      	bhi.n	8006a1a <_strtol_l.constprop.0+0xaa>
 8006a16:	3c37      	subs	r4, #55	; 0x37
 8006a18:	e7e4      	b.n	80069e4 <_strtol_l.constprop.0+0x74>
 8006a1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a1e:	f1bc 0f19 	cmp.w	ip, #25
 8006a22:	d804      	bhi.n	8006a2e <_strtol_l.constprop.0+0xbe>
 8006a24:	3c57      	subs	r4, #87	; 0x57
 8006a26:	e7dd      	b.n	80069e4 <_strtol_l.constprop.0+0x74>
 8006a28:	f04f 37ff 	mov.w	r7, #4294967295
 8006a2c:	e7e6      	b.n	80069fc <_strtol_l.constprop.0+0x8c>
 8006a2e:	2f00      	cmp	r7, #0
 8006a30:	da07      	bge.n	8006a42 <_strtol_l.constprop.0+0xd2>
 8006a32:	2322      	movs	r3, #34	; 0x22
 8006a34:	4670      	mov	r0, lr
 8006a36:	f8c8 3000 	str.w	r3, [r8]
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d0a4      	beq.n	8006988 <_strtol_l.constprop.0+0x18>
 8006a3e:	1e69      	subs	r1, r5, #1
 8006a40:	e005      	b.n	8006a4e <_strtol_l.constprop.0+0xde>
 8006a42:	b106      	cbz	r6, 8006a46 <_strtol_l.constprop.0+0xd6>
 8006a44:	4240      	negs	r0, r0
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	d09e      	beq.n	8006988 <_strtol_l.constprop.0+0x18>
 8006a4a:	2f00      	cmp	r7, #0
 8006a4c:	d1f7      	bne.n	8006a3e <_strtol_l.constprop.0+0xce>
 8006a4e:	6011      	str	r1, [r2, #0]
 8006a50:	e79a      	b.n	8006988 <_strtol_l.constprop.0+0x18>
 8006a52:	2430      	movs	r4, #48	; 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1b5      	bne.n	80069c4 <_strtol_l.constprop.0+0x54>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	e7b3      	b.n	80069c4 <_strtol_l.constprop.0+0x54>
 8006a5c:	2c30      	cmp	r4, #48	; 0x30
 8006a5e:	d0a9      	beq.n	80069b4 <_strtol_l.constprop.0+0x44>
 8006a60:	230a      	movs	r3, #10
 8006a62:	e7af      	b.n	80069c4 <_strtol_l.constprop.0+0x54>
 8006a64:	0800a83d 	.word	0x0800a83d

08006a68 <strtol>:
 8006a68:	4613      	mov	r3, r2
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4802      	ldr	r0, [pc, #8]	; (8006a78 <strtol+0x10>)
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f7ff bf7d 	b.w	8006970 <_strtol_l.constprop.0>
 8006a76:	bf00      	nop
 8006a78:	20000030 	.word	0x20000030

08006a7c <__assert_func>:
 8006a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a7e:	4614      	mov	r4, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <__assert_func+0x2c>)
 8006a84:	4605      	mov	r5, r0
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68d8      	ldr	r0, [r3, #12]
 8006a8a:	b14c      	cbz	r4, 8006aa0 <__assert_func+0x24>
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <__assert_func+0x30>)
 8006a8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a92:	9100      	str	r1, [sp, #0]
 8006a94:	462b      	mov	r3, r5
 8006a96:	4906      	ldr	r1, [pc, #24]	; (8006ab0 <__assert_func+0x34>)
 8006a98:	f000 f80e 	bl	8006ab8 <fiprintf>
 8006a9c:	f000 fd34 	bl	8007508 <abort>
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <__assert_func+0x38>)
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	e7f3      	b.n	8006a8e <__assert_func+0x12>
 8006aa6:	bf00      	nop
 8006aa8:	20000030 	.word	0x20000030
 8006aac:	0800a9b8 	.word	0x0800a9b8
 8006ab0:	0800a9c5 	.word	0x0800a9c5
 8006ab4:	080093d2 	.word	0x080093d2

08006ab8 <fiprintf>:
 8006ab8:	b40e      	push	{r1, r2, r3}
 8006aba:	b503      	push	{r0, r1, lr}
 8006abc:	4601      	mov	r1, r0
 8006abe:	ab03      	add	r3, sp, #12
 8006ac0:	4805      	ldr	r0, [pc, #20]	; (8006ad8 <fiprintf+0x20>)
 8006ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	f000 f997 	bl	8006dfc <_vfiprintf_r>
 8006ace:	b002      	add	sp, #8
 8006ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad4:	b003      	add	sp, #12
 8006ad6:	4770      	bx	lr
 8006ad8:	20000030 	.word	0x20000030

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f000 becf 	b.w	8007880 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20008438 	.word	0x20008438

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f000 beca 	b.w	8007882 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	20008438 	.word	0x20008438

08006af4 <__ssputs_r>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	688e      	ldr	r6, [r1, #8]
 8006afa:	4682      	mov	sl, r0
 8006afc:	429e      	cmp	r6, r3
 8006afe:	460c      	mov	r4, r1
 8006b00:	4690      	mov	r8, r2
 8006b02:	461f      	mov	r7, r3
 8006b04:	d838      	bhi.n	8006b78 <__ssputs_r+0x84>
 8006b06:	898a      	ldrh	r2, [r1, #12]
 8006b08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b0c:	d032      	beq.n	8006b74 <__ssputs_r+0x80>
 8006b0e:	6825      	ldr	r5, [r4, #0]
 8006b10:	6909      	ldr	r1, [r1, #16]
 8006b12:	3301      	adds	r3, #1
 8006b14:	eba5 0901 	sub.w	r9, r5, r1
 8006b18:	6965      	ldr	r5, [r4, #20]
 8006b1a:	444b      	add	r3, r9
 8006b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b24:	106d      	asrs	r5, r5, #1
 8006b26:	429d      	cmp	r5, r3
 8006b28:	bf38      	it	cc
 8006b2a:	461d      	movcc	r5, r3
 8006b2c:	0553      	lsls	r3, r2, #21
 8006b2e:	d531      	bpl.n	8006b94 <__ssputs_r+0xa0>
 8006b30:	4629      	mov	r1, r5
 8006b32:	f7ff fe15 	bl	8006760 <_malloc_r>
 8006b36:	4606      	mov	r6, r0
 8006b38:	b950      	cbnz	r0, 8006b50 <__ssputs_r+0x5c>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	f8ca 3000 	str.w	r3, [sl]
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b50:	464a      	mov	r2, r9
 8006b52:	6921      	ldr	r1, [r4, #16]
 8006b54:	f7ff fd86 	bl	8006664 <memcpy>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	6126      	str	r6, [r4, #16]
 8006b66:	444e      	add	r6, r9
 8006b68:	6026      	str	r6, [r4, #0]
 8006b6a:	463e      	mov	r6, r7
 8006b6c:	6165      	str	r5, [r4, #20]
 8006b6e:	eba5 0509 	sub.w	r5, r5, r9
 8006b72:	60a5      	str	r5, [r4, #8]
 8006b74:	42be      	cmp	r6, r7
 8006b76:	d900      	bls.n	8006b7a <__ssputs_r+0x86>
 8006b78:	463e      	mov	r6, r7
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	f000 fef4 	bl	800796c <memmove>
 8006b84:	68a3      	ldr	r3, [r4, #8]
 8006b86:	2000      	movs	r0, #0
 8006b88:	1b9b      	subs	r3, r3, r6
 8006b8a:	60a3      	str	r3, [r4, #8]
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	4433      	add	r3, r6
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	e7db      	b.n	8006b4c <__ssputs_r+0x58>
 8006b94:	462a      	mov	r2, r5
 8006b96:	f000 ff03 	bl	80079a0 <_realloc_r>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d1e1      	bne.n	8006b64 <__ssputs_r+0x70>
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	6921      	ldr	r1, [r4, #16]
 8006ba4:	f7ff fd74 	bl	8006690 <_free_r>
 8006ba8:	e7c7      	b.n	8006b3a <__ssputs_r+0x46>
	...

08006bac <_svfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	4698      	mov	r8, r3
 8006bb2:	898b      	ldrh	r3, [r1, #12]
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	061b      	lsls	r3, r3, #24
 8006bb8:	460d      	mov	r5, r1
 8006bba:	4614      	mov	r4, r2
 8006bbc:	b09d      	sub	sp, #116	; 0x74
 8006bbe:	d50e      	bpl.n	8006bde <_svfiprintf_r+0x32>
 8006bc0:	690b      	ldr	r3, [r1, #16]
 8006bc2:	b963      	cbnz	r3, 8006bde <_svfiprintf_r+0x32>
 8006bc4:	2140      	movs	r1, #64	; 0x40
 8006bc6:	f7ff fdcb 	bl	8006760 <_malloc_r>
 8006bca:	6028      	str	r0, [r5, #0]
 8006bcc:	6128      	str	r0, [r5, #16]
 8006bce:	b920      	cbnz	r0, 8006bda <_svfiprintf_r+0x2e>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e0d1      	b.n	8006d7e <_svfiprintf_r+0x1d2>
 8006bda:	2340      	movs	r3, #64	; 0x40
 8006bdc:	616b      	str	r3, [r5, #20]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9309      	str	r3, [sp, #36]	; 0x24
 8006be2:	2320      	movs	r3, #32
 8006be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006be8:	2330      	movs	r3, #48	; 0x30
 8006bea:	f04f 0901 	mov.w	r9, #1
 8006bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d98 <_svfiprintf_r+0x1ec>
 8006bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c02:	b10a      	cbz	r2, 8006c08 <_svfiprintf_r+0x5c>
 8006c04:	2a25      	cmp	r2, #37	; 0x25
 8006c06:	d1f9      	bne.n	8006bfc <_svfiprintf_r+0x50>
 8006c08:	ebba 0b04 	subs.w	fp, sl, r4
 8006c0c:	d00b      	beq.n	8006c26 <_svfiprintf_r+0x7a>
 8006c0e:	465b      	mov	r3, fp
 8006c10:	4622      	mov	r2, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff ff6d 	bl	8006af4 <__ssputs_r>
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f000 80aa 	beq.w	8006d74 <_svfiprintf_r+0x1c8>
 8006c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c22:	445a      	add	r2, fp
 8006c24:	9209      	str	r2, [sp, #36]	; 0x24
 8006c26:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 80a2 	beq.w	8006d74 <_svfiprintf_r+0x1c8>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3a:	f10a 0a01 	add.w	sl, sl, #1
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	9307      	str	r3, [sp, #28]
 8006c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c46:	931a      	str	r3, [sp, #104]	; 0x68
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2205      	movs	r2, #5
 8006c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c50:	4851      	ldr	r0, [pc, #324]	; (8006d98 <_svfiprintf_r+0x1ec>)
 8006c52:	f000 fe7d 	bl	8007950 <memchr>
 8006c56:	9a04      	ldr	r2, [sp, #16]
 8006c58:	b9d8      	cbnz	r0, 8006c92 <_svfiprintf_r+0xe6>
 8006c5a:	06d0      	lsls	r0, r2, #27
 8006c5c:	bf44      	itt	mi
 8006c5e:	2320      	movmi	r3, #32
 8006c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c64:	0711      	lsls	r1, r2, #28
 8006c66:	bf44      	itt	mi
 8006c68:	232b      	movmi	r3, #43	; 0x2b
 8006c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c72:	2b2a      	cmp	r3, #42	; 0x2a
 8006c74:	d015      	beq.n	8006ca2 <_svfiprintf_r+0xf6>
 8006c76:	4654      	mov	r4, sl
 8006c78:	2000      	movs	r0, #0
 8006c7a:	f04f 0c0a 	mov.w	ip, #10
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	4621      	mov	r1, r4
 8006c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c86:	3b30      	subs	r3, #48	; 0x30
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d94e      	bls.n	8006d2a <_svfiprintf_r+0x17e>
 8006c8c:	b1b0      	cbz	r0, 8006cbc <_svfiprintf_r+0x110>
 8006c8e:	9207      	str	r2, [sp, #28]
 8006c90:	e014      	b.n	8006cbc <_svfiprintf_r+0x110>
 8006c92:	eba0 0308 	sub.w	r3, r0, r8
 8006c96:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	46a2      	mov	sl, r4
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	e7d2      	b.n	8006c48 <_svfiprintf_r+0x9c>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	1d19      	adds	r1, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	9103      	str	r1, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfbb      	ittet	lt
 8006cae:	425b      	neglt	r3, r3
 8006cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb4:	9307      	strge	r3, [sp, #28]
 8006cb6:	9307      	strlt	r3, [sp, #28]
 8006cb8:	bfb8      	it	lt
 8006cba:	9204      	strlt	r2, [sp, #16]
 8006cbc:	7823      	ldrb	r3, [r4, #0]
 8006cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc0:	d10c      	bne.n	8006cdc <_svfiprintf_r+0x130>
 8006cc2:	7863      	ldrb	r3, [r4, #1]
 8006cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc6:	d135      	bne.n	8006d34 <_svfiprintf_r+0x188>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	3402      	adds	r4, #2
 8006ccc:	1d1a      	adds	r2, r3, #4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	9203      	str	r2, [sp, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bfb8      	it	lt
 8006cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006d9c <_svfiprintf_r+0x1f0>
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	7821      	ldrb	r1, [r4, #0]
 8006ce6:	f000 fe33 	bl	8007950 <memchr>
 8006cea:	b140      	cbz	r0, 8006cfe <_svfiprintf_r+0x152>
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	eba0 000a 	sub.w	r0, r0, sl
 8006cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	4303      	orrs	r3, r0
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d02:	2206      	movs	r2, #6
 8006d04:	4826      	ldr	r0, [pc, #152]	; (8006da0 <_svfiprintf_r+0x1f4>)
 8006d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d0a:	f000 fe21 	bl	8007950 <memchr>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d038      	beq.n	8006d84 <_svfiprintf_r+0x1d8>
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <_svfiprintf_r+0x1f8>)
 8006d14:	bb1b      	cbnz	r3, 8006d5e <_svfiprintf_r+0x1b2>
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	3307      	adds	r3, #7
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	3308      	adds	r3, #8
 8006d20:	9303      	str	r3, [sp, #12]
 8006d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d24:	4433      	add	r3, r6
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
 8006d28:	e767      	b.n	8006bfa <_svfiprintf_r+0x4e>
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	2001      	movs	r0, #1
 8006d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d32:	e7a5      	b.n	8006c80 <_svfiprintf_r+0xd4>
 8006d34:	2300      	movs	r3, #0
 8006d36:	f04f 0c0a 	mov.w	ip, #10
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	3401      	adds	r4, #1
 8006d3e:	9305      	str	r3, [sp, #20]
 8006d40:	4620      	mov	r0, r4
 8006d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d46:	3a30      	subs	r2, #48	; 0x30
 8006d48:	2a09      	cmp	r2, #9
 8006d4a:	d903      	bls.n	8006d54 <_svfiprintf_r+0x1a8>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0c5      	beq.n	8006cdc <_svfiprintf_r+0x130>
 8006d50:	9105      	str	r1, [sp, #20]
 8006d52:	e7c3      	b.n	8006cdc <_svfiprintf_r+0x130>
 8006d54:	4604      	mov	r4, r0
 8006d56:	2301      	movs	r3, #1
 8006d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d5c:	e7f0      	b.n	8006d40 <_svfiprintf_r+0x194>
 8006d5e:	ab03      	add	r3, sp, #12
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	462a      	mov	r2, r5
 8006d64:	4638      	mov	r0, r7
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <_svfiprintf_r+0x1fc>)
 8006d68:	a904      	add	r1, sp, #16
 8006d6a:	f3af 8000 	nop.w
 8006d6e:	1c42      	adds	r2, r0, #1
 8006d70:	4606      	mov	r6, r0
 8006d72:	d1d6      	bne.n	8006d22 <_svfiprintf_r+0x176>
 8006d74:	89ab      	ldrh	r3, [r5, #12]
 8006d76:	065b      	lsls	r3, r3, #25
 8006d78:	f53f af2c 	bmi.w	8006bd4 <_svfiprintf_r+0x28>
 8006d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d7e:	b01d      	add	sp, #116	; 0x74
 8006d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d84:	ab03      	add	r3, sp, #12
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	462a      	mov	r2, r5
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <_svfiprintf_r+0x1fc>)
 8006d8e:	a904      	add	r1, sp, #16
 8006d90:	f000 f9d4 	bl	800713c <_printf_i>
 8006d94:	e7eb      	b.n	8006d6e <_svfiprintf_r+0x1c2>
 8006d96:	bf00      	nop
 8006d98:	0800a9f4 	.word	0x0800a9f4
 8006d9c:	0800a9fa 	.word	0x0800a9fa
 8006da0:	0800a9fe 	.word	0x0800a9fe
 8006da4:	00000000 	.word	0x00000000
 8006da8:	08006af5 	.word	0x08006af5

08006dac <__sfputc_r>:
 8006dac:	6893      	ldr	r3, [r2, #8]
 8006dae:	b410      	push	{r4}
 8006db0:	3b01      	subs	r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	6093      	str	r3, [r2, #8]
 8006db6:	da07      	bge.n	8006dc8 <__sfputc_r+0x1c>
 8006db8:	6994      	ldr	r4, [r2, #24]
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	db01      	blt.n	8006dc2 <__sfputc_r+0x16>
 8006dbe:	290a      	cmp	r1, #10
 8006dc0:	d102      	bne.n	8006dc8 <__sfputc_r+0x1c>
 8006dc2:	bc10      	pop	{r4}
 8006dc4:	f000 bae0 	b.w	8007388 <__swbuf_r>
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	1c58      	adds	r0, r3, #1
 8006dcc:	6010      	str	r0, [r2, #0]
 8006dce:	7019      	strb	r1, [r3, #0]
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	bc10      	pop	{r4}
 8006dd4:	4770      	bx	lr

08006dd6 <__sfputs_r>:
 8006dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd8:	4606      	mov	r6, r0
 8006dda:	460f      	mov	r7, r1
 8006ddc:	4614      	mov	r4, r2
 8006dde:	18d5      	adds	r5, r2, r3
 8006de0:	42ac      	cmp	r4, r5
 8006de2:	d101      	bne.n	8006de8 <__sfputs_r+0x12>
 8006de4:	2000      	movs	r0, #0
 8006de6:	e007      	b.n	8006df8 <__sfputs_r+0x22>
 8006de8:	463a      	mov	r2, r7
 8006dea:	4630      	mov	r0, r6
 8006dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df0:	f7ff ffdc 	bl	8006dac <__sfputc_r>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d1f3      	bne.n	8006de0 <__sfputs_r+0xa>
 8006df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dfc <_vfiprintf_r>:
 8006dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	460d      	mov	r5, r1
 8006e02:	4614      	mov	r4, r2
 8006e04:	4698      	mov	r8, r3
 8006e06:	4606      	mov	r6, r0
 8006e08:	b09d      	sub	sp, #116	; 0x74
 8006e0a:	b118      	cbz	r0, 8006e14 <_vfiprintf_r+0x18>
 8006e0c:	6983      	ldr	r3, [r0, #24]
 8006e0e:	b90b      	cbnz	r3, 8006e14 <_vfiprintf_r+0x18>
 8006e10:	f000 fc98 	bl	8007744 <__sinit>
 8006e14:	4b89      	ldr	r3, [pc, #548]	; (800703c <_vfiprintf_r+0x240>)
 8006e16:	429d      	cmp	r5, r3
 8006e18:	d11b      	bne.n	8006e52 <_vfiprintf_r+0x56>
 8006e1a:	6875      	ldr	r5, [r6, #4]
 8006e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	d405      	bmi.n	8006e2e <_vfiprintf_r+0x32>
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	059a      	lsls	r2, r3, #22
 8006e26:	d402      	bmi.n	8006e2e <_vfiprintf_r+0x32>
 8006e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e2a:	f000 fd29 	bl	8007880 <__retarget_lock_acquire_recursive>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	071b      	lsls	r3, r3, #28
 8006e32:	d501      	bpl.n	8006e38 <_vfiprintf_r+0x3c>
 8006e34:	692b      	ldr	r3, [r5, #16]
 8006e36:	b9eb      	cbnz	r3, 8006e74 <_vfiprintf_r+0x78>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f000 faf6 	bl	800742c <__swsetup_r>
 8006e40:	b1c0      	cbz	r0, 8006e74 <_vfiprintf_r+0x78>
 8006e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e44:	07dc      	lsls	r4, r3, #31
 8006e46:	d50e      	bpl.n	8006e66 <_vfiprintf_r+0x6a>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	b01d      	add	sp, #116	; 0x74
 8006e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e52:	4b7b      	ldr	r3, [pc, #492]	; (8007040 <_vfiprintf_r+0x244>)
 8006e54:	429d      	cmp	r5, r3
 8006e56:	d101      	bne.n	8006e5c <_vfiprintf_r+0x60>
 8006e58:	68b5      	ldr	r5, [r6, #8]
 8006e5a:	e7df      	b.n	8006e1c <_vfiprintf_r+0x20>
 8006e5c:	4b79      	ldr	r3, [pc, #484]	; (8007044 <_vfiprintf_r+0x248>)
 8006e5e:	429d      	cmp	r5, r3
 8006e60:	bf08      	it	eq
 8006e62:	68f5      	ldreq	r5, [r6, #12]
 8006e64:	e7da      	b.n	8006e1c <_vfiprintf_r+0x20>
 8006e66:	89ab      	ldrh	r3, [r5, #12]
 8006e68:	0598      	lsls	r0, r3, #22
 8006e6a:	d4ed      	bmi.n	8006e48 <_vfiprintf_r+0x4c>
 8006e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e6e:	f000 fd08 	bl	8007882 <__retarget_lock_release_recursive>
 8006e72:	e7e9      	b.n	8006e48 <_vfiprintf_r+0x4c>
 8006e74:	2300      	movs	r3, #0
 8006e76:	9309      	str	r3, [sp, #36]	; 0x24
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e7e:	2330      	movs	r3, #48	; 0x30
 8006e80:	f04f 0901 	mov.w	r9, #1
 8006e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007048 <_vfiprintf_r+0x24c>
 8006e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e90:	4623      	mov	r3, r4
 8006e92:	469a      	mov	sl, r3
 8006e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e98:	b10a      	cbz	r2, 8006e9e <_vfiprintf_r+0xa2>
 8006e9a:	2a25      	cmp	r2, #37	; 0x25
 8006e9c:	d1f9      	bne.n	8006e92 <_vfiprintf_r+0x96>
 8006e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea2:	d00b      	beq.n	8006ebc <_vfiprintf_r+0xc0>
 8006ea4:	465b      	mov	r3, fp
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7ff ff93 	bl	8006dd6 <__sfputs_r>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f000 80aa 	beq.w	800700a <_vfiprintf_r+0x20e>
 8006eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb8:	445a      	add	r2, fp
 8006eba:	9209      	str	r2, [sp, #36]	; 0x24
 8006ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80a2 	beq.w	800700a <_vfiprintf_r+0x20e>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed0:	f10a 0a01 	add.w	sl, sl, #1
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006edc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ede:	4654      	mov	r4, sl
 8006ee0:	2205      	movs	r2, #5
 8006ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee6:	4858      	ldr	r0, [pc, #352]	; (8007048 <_vfiprintf_r+0x24c>)
 8006ee8:	f000 fd32 	bl	8007950 <memchr>
 8006eec:	9a04      	ldr	r2, [sp, #16]
 8006eee:	b9d8      	cbnz	r0, 8006f28 <_vfiprintf_r+0x12c>
 8006ef0:	06d1      	lsls	r1, r2, #27
 8006ef2:	bf44      	itt	mi
 8006ef4:	2320      	movmi	r3, #32
 8006ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006efa:	0713      	lsls	r3, r2, #28
 8006efc:	bf44      	itt	mi
 8006efe:	232b      	movmi	r3, #43	; 0x2b
 8006f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f04:	f89a 3000 	ldrb.w	r3, [sl]
 8006f08:	2b2a      	cmp	r3, #42	; 0x2a
 8006f0a:	d015      	beq.n	8006f38 <_vfiprintf_r+0x13c>
 8006f0c:	4654      	mov	r4, sl
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f04f 0c0a 	mov.w	ip, #10
 8006f14:	9a07      	ldr	r2, [sp, #28]
 8006f16:	4621      	mov	r1, r4
 8006f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f1c:	3b30      	subs	r3, #48	; 0x30
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d94e      	bls.n	8006fc0 <_vfiprintf_r+0x1c4>
 8006f22:	b1b0      	cbz	r0, 8006f52 <_vfiprintf_r+0x156>
 8006f24:	9207      	str	r2, [sp, #28]
 8006f26:	e014      	b.n	8006f52 <_vfiprintf_r+0x156>
 8006f28:	eba0 0308 	sub.w	r3, r0, r8
 8006f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	46a2      	mov	sl, r4
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	e7d2      	b.n	8006ede <_vfiprintf_r+0xe2>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1d19      	adds	r1, r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	9103      	str	r1, [sp, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bfbb      	ittet	lt
 8006f44:	425b      	neglt	r3, r3
 8006f46:	f042 0202 	orrlt.w	r2, r2, #2
 8006f4a:	9307      	strge	r3, [sp, #28]
 8006f4c:	9307      	strlt	r3, [sp, #28]
 8006f4e:	bfb8      	it	lt
 8006f50:	9204      	strlt	r2, [sp, #16]
 8006f52:	7823      	ldrb	r3, [r4, #0]
 8006f54:	2b2e      	cmp	r3, #46	; 0x2e
 8006f56:	d10c      	bne.n	8006f72 <_vfiprintf_r+0x176>
 8006f58:	7863      	ldrb	r3, [r4, #1]
 8006f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5c:	d135      	bne.n	8006fca <_vfiprintf_r+0x1ce>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	3402      	adds	r4, #2
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	9203      	str	r2, [sp, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bfb8      	it	lt
 8006f6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800704c <_vfiprintf_r+0x250>
 8006f76:	2203      	movs	r2, #3
 8006f78:	4650      	mov	r0, sl
 8006f7a:	7821      	ldrb	r1, [r4, #0]
 8006f7c:	f000 fce8 	bl	8007950 <memchr>
 8006f80:	b140      	cbz	r0, 8006f94 <_vfiprintf_r+0x198>
 8006f82:	2340      	movs	r3, #64	; 0x40
 8006f84:	eba0 000a 	sub.w	r0, r0, sl
 8006f88:	fa03 f000 	lsl.w	r0, r3, r0
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	3401      	adds	r4, #1
 8006f90:	4303      	orrs	r3, r0
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f98:	2206      	movs	r2, #6
 8006f9a:	482d      	ldr	r0, [pc, #180]	; (8007050 <_vfiprintf_r+0x254>)
 8006f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa0:	f000 fcd6 	bl	8007950 <memchr>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d03f      	beq.n	8007028 <_vfiprintf_r+0x22c>
 8006fa8:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <_vfiprintf_r+0x258>)
 8006faa:	bb1b      	cbnz	r3, 8006ff4 <_vfiprintf_r+0x1f8>
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	3307      	adds	r3, #7
 8006fb0:	f023 0307 	bic.w	r3, r3, #7
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fba:	443b      	add	r3, r7
 8006fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fbe:	e767      	b.n	8006e90 <_vfiprintf_r+0x94>
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc8:	e7a5      	b.n	8006f16 <_vfiprintf_r+0x11a>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f04f 0c0a 	mov.w	ip, #10
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	3401      	adds	r4, #1
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fdc:	3a30      	subs	r2, #48	; 0x30
 8006fde:	2a09      	cmp	r2, #9
 8006fe0:	d903      	bls.n	8006fea <_vfiprintf_r+0x1ee>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0c5      	beq.n	8006f72 <_vfiprintf_r+0x176>
 8006fe6:	9105      	str	r1, [sp, #20]
 8006fe8:	e7c3      	b.n	8006f72 <_vfiprintf_r+0x176>
 8006fea:	4604      	mov	r4, r0
 8006fec:	2301      	movs	r3, #1
 8006fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ff2:	e7f0      	b.n	8006fd6 <_vfiprintf_r+0x1da>
 8006ff4:	ab03      	add	r3, sp, #12
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <_vfiprintf_r+0x25c>)
 8006ffe:	a904      	add	r1, sp, #16
 8007000:	f3af 8000 	nop.w
 8007004:	4607      	mov	r7, r0
 8007006:	1c78      	adds	r0, r7, #1
 8007008:	d1d6      	bne.n	8006fb8 <_vfiprintf_r+0x1bc>
 800700a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800700c:	07d9      	lsls	r1, r3, #31
 800700e:	d405      	bmi.n	800701c <_vfiprintf_r+0x220>
 8007010:	89ab      	ldrh	r3, [r5, #12]
 8007012:	059a      	lsls	r2, r3, #22
 8007014:	d402      	bmi.n	800701c <_vfiprintf_r+0x220>
 8007016:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007018:	f000 fc33 	bl	8007882 <__retarget_lock_release_recursive>
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	065b      	lsls	r3, r3, #25
 8007020:	f53f af12 	bmi.w	8006e48 <_vfiprintf_r+0x4c>
 8007024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007026:	e711      	b.n	8006e4c <_vfiprintf_r+0x50>
 8007028:	ab03      	add	r3, sp, #12
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	462a      	mov	r2, r5
 800702e:	4630      	mov	r0, r6
 8007030:	4b09      	ldr	r3, [pc, #36]	; (8007058 <_vfiprintf_r+0x25c>)
 8007032:	a904      	add	r1, sp, #16
 8007034:	f000 f882 	bl	800713c <_printf_i>
 8007038:	e7e4      	b.n	8007004 <_vfiprintf_r+0x208>
 800703a:	bf00      	nop
 800703c:	0800aa48 	.word	0x0800aa48
 8007040:	0800aa68 	.word	0x0800aa68
 8007044:	0800aa28 	.word	0x0800aa28
 8007048:	0800a9f4 	.word	0x0800a9f4
 800704c:	0800a9fa 	.word	0x0800a9fa
 8007050:	0800a9fe 	.word	0x0800a9fe
 8007054:	00000000 	.word	0x00000000
 8007058:	08006dd7 	.word	0x08006dd7

0800705c <_printf_common>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4616      	mov	r6, r2
 8007062:	4699      	mov	r9, r3
 8007064:	688a      	ldr	r2, [r1, #8]
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	4607      	mov	r7, r0
 800706a:	4293      	cmp	r3, r2
 800706c:	bfb8      	it	lt
 800706e:	4613      	movlt	r3, r2
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007076:	460c      	mov	r4, r1
 8007078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800707c:	b10a      	cbz	r2, 8007082 <_printf_common+0x26>
 800707e:	3301      	adds	r3, #1
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	6833      	ldrmi	r3, [r6, #0]
 800708a:	3302      	addmi	r3, #2
 800708c:	6033      	strmi	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d106      	bne.n	80070a4 <_printf_common+0x48>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	6832      	ldr	r2, [r6, #0]
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc28      	bgt.n	80070f6 <_printf_common+0x9a>
 80070a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a8:	1e13      	subs	r3, r2, #0
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	bf18      	it	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	0692      	lsls	r2, r2, #26
 80070b2:	d42d      	bmi.n	8007110 <_printf_common+0xb4>
 80070b4:	4649      	mov	r1, r9
 80070b6:	4638      	mov	r0, r7
 80070b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070bc:	47c0      	blx	r8
 80070be:	3001      	adds	r0, #1
 80070c0:	d020      	beq.n	8007104 <_printf_common+0xa8>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	68e5      	ldr	r5, [r4, #12]
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	bf18      	it	ne
 80070ce:	2500      	movne	r5, #0
 80070d0:	6832      	ldr	r2, [r6, #0]
 80070d2:	f04f 0600 	mov.w	r6, #0
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	bf08      	it	eq
 80070da:	1aad      	subeq	r5, r5, r2
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	bf08      	it	eq
 80070e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e4:	4293      	cmp	r3, r2
 80070e6:	bfc4      	itt	gt
 80070e8:	1a9b      	subgt	r3, r3, r2
 80070ea:	18ed      	addgt	r5, r5, r3
 80070ec:	341a      	adds	r4, #26
 80070ee:	42b5      	cmp	r5, r6
 80070f0:	d11a      	bne.n	8007128 <_printf_common+0xcc>
 80070f2:	2000      	movs	r0, #0
 80070f4:	e008      	b.n	8007108 <_printf_common+0xac>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4652      	mov	r2, sl
 80070fa:	4649      	mov	r1, r9
 80070fc:	4638      	mov	r0, r7
 80070fe:	47c0      	blx	r8
 8007100:	3001      	adds	r0, #1
 8007102:	d103      	bne.n	800710c <_printf_common+0xb0>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710c:	3501      	adds	r5, #1
 800710e:	e7c4      	b.n	800709a <_printf_common+0x3e>
 8007110:	2030      	movs	r0, #48	; 0x30
 8007112:	18e1      	adds	r1, r4, r3
 8007114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800711e:	4422      	add	r2, r4
 8007120:	3302      	adds	r3, #2
 8007122:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007126:	e7c5      	b.n	80070b4 <_printf_common+0x58>
 8007128:	2301      	movs	r3, #1
 800712a:	4622      	mov	r2, r4
 800712c:	4649      	mov	r1, r9
 800712e:	4638      	mov	r0, r7
 8007130:	47c0      	blx	r8
 8007132:	3001      	adds	r0, #1
 8007134:	d0e6      	beq.n	8007104 <_printf_common+0xa8>
 8007136:	3601      	adds	r6, #1
 8007138:	e7d9      	b.n	80070ee <_printf_common+0x92>
	...

0800713c <_printf_i>:
 800713c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	7e0f      	ldrb	r7, [r1, #24]
 8007142:	4691      	mov	r9, r2
 8007144:	2f78      	cmp	r7, #120	; 0x78
 8007146:	4680      	mov	r8, r0
 8007148:	460c      	mov	r4, r1
 800714a:	469a      	mov	sl, r3
 800714c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800714e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007152:	d807      	bhi.n	8007164 <_printf_i+0x28>
 8007154:	2f62      	cmp	r7, #98	; 0x62
 8007156:	d80a      	bhi.n	800716e <_printf_i+0x32>
 8007158:	2f00      	cmp	r7, #0
 800715a:	f000 80d9 	beq.w	8007310 <_printf_i+0x1d4>
 800715e:	2f58      	cmp	r7, #88	; 0x58
 8007160:	f000 80a4 	beq.w	80072ac <_printf_i+0x170>
 8007164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800716c:	e03a      	b.n	80071e4 <_printf_i+0xa8>
 800716e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007172:	2b15      	cmp	r3, #21
 8007174:	d8f6      	bhi.n	8007164 <_printf_i+0x28>
 8007176:	a101      	add	r1, pc, #4	; (adr r1, 800717c <_printf_i+0x40>)
 8007178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071e9 	.word	0x080071e9
 8007184:	08007165 	.word	0x08007165
 8007188:	08007165 	.word	0x08007165
 800718c:	08007165 	.word	0x08007165
 8007190:	08007165 	.word	0x08007165
 8007194:	080071e9 	.word	0x080071e9
 8007198:	08007165 	.word	0x08007165
 800719c:	08007165 	.word	0x08007165
 80071a0:	08007165 	.word	0x08007165
 80071a4:	08007165 	.word	0x08007165
 80071a8:	080072f7 	.word	0x080072f7
 80071ac:	08007219 	.word	0x08007219
 80071b0:	080072d9 	.word	0x080072d9
 80071b4:	08007165 	.word	0x08007165
 80071b8:	08007165 	.word	0x08007165
 80071bc:	08007319 	.word	0x08007319
 80071c0:	08007165 	.word	0x08007165
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007165 	.word	0x08007165
 80071cc:	08007165 	.word	0x08007165
 80071d0:	080072e1 	.word	0x080072e1
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	1d1a      	adds	r2, r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	602a      	str	r2, [r5, #0]
 80071dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0a4      	b.n	8007332 <_printf_i+0x1f6>
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	6829      	ldr	r1, [r5, #0]
 80071ec:	0606      	lsls	r6, r0, #24
 80071ee:	f101 0304 	add.w	r3, r1, #4
 80071f2:	d50a      	bpl.n	800720a <_printf_i+0xce>
 80071f4:	680e      	ldr	r6, [r1, #0]
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	da03      	bge.n	8007204 <_printf_i+0xc8>
 80071fc:	232d      	movs	r3, #45	; 0x2d
 80071fe:	4276      	negs	r6, r6
 8007200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007204:	230a      	movs	r3, #10
 8007206:	485e      	ldr	r0, [pc, #376]	; (8007380 <_printf_i+0x244>)
 8007208:	e019      	b.n	800723e <_printf_i+0x102>
 800720a:	680e      	ldr	r6, [r1, #0]
 800720c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	bf18      	it	ne
 8007214:	b236      	sxthne	r6, r6
 8007216:	e7ef      	b.n	80071f8 <_printf_i+0xbc>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	6029      	str	r1, [r5, #0]
 8007220:	0601      	lsls	r1, r0, #24
 8007222:	d501      	bpl.n	8007228 <_printf_i+0xec>
 8007224:	681e      	ldr	r6, [r3, #0]
 8007226:	e002      	b.n	800722e <_printf_i+0xf2>
 8007228:	0646      	lsls	r6, r0, #25
 800722a:	d5fb      	bpl.n	8007224 <_printf_i+0xe8>
 800722c:	881e      	ldrh	r6, [r3, #0]
 800722e:	2f6f      	cmp	r7, #111	; 0x6f
 8007230:	bf0c      	ite	eq
 8007232:	2308      	moveq	r3, #8
 8007234:	230a      	movne	r3, #10
 8007236:	4852      	ldr	r0, [pc, #328]	; (8007380 <_printf_i+0x244>)
 8007238:	2100      	movs	r1, #0
 800723a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800723e:	6865      	ldr	r5, [r4, #4]
 8007240:	2d00      	cmp	r5, #0
 8007242:	bfa8      	it	ge
 8007244:	6821      	ldrge	r1, [r4, #0]
 8007246:	60a5      	str	r5, [r4, #8]
 8007248:	bfa4      	itt	ge
 800724a:	f021 0104 	bicge.w	r1, r1, #4
 800724e:	6021      	strge	r1, [r4, #0]
 8007250:	b90e      	cbnz	r6, 8007256 <_printf_i+0x11a>
 8007252:	2d00      	cmp	r5, #0
 8007254:	d04d      	beq.n	80072f2 <_printf_i+0x1b6>
 8007256:	4615      	mov	r5, r2
 8007258:	fbb6 f1f3 	udiv	r1, r6, r3
 800725c:	fb03 6711 	mls	r7, r3, r1, r6
 8007260:	5dc7      	ldrb	r7, [r0, r7]
 8007262:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007266:	4637      	mov	r7, r6
 8007268:	42bb      	cmp	r3, r7
 800726a:	460e      	mov	r6, r1
 800726c:	d9f4      	bls.n	8007258 <_printf_i+0x11c>
 800726e:	2b08      	cmp	r3, #8
 8007270:	d10b      	bne.n	800728a <_printf_i+0x14e>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	07de      	lsls	r6, r3, #31
 8007276:	d508      	bpl.n	800728a <_printf_i+0x14e>
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	6861      	ldr	r1, [r4, #4]
 800727c:	4299      	cmp	r1, r3
 800727e:	bfde      	ittt	le
 8007280:	2330      	movle	r3, #48	; 0x30
 8007282:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007286:	f105 35ff 	addle.w	r5, r5, #4294967295
 800728a:	1b52      	subs	r2, r2, r5
 800728c:	6122      	str	r2, [r4, #16]
 800728e:	464b      	mov	r3, r9
 8007290:	4621      	mov	r1, r4
 8007292:	4640      	mov	r0, r8
 8007294:	f8cd a000 	str.w	sl, [sp]
 8007298:	aa03      	add	r2, sp, #12
 800729a:	f7ff fedf 	bl	800705c <_printf_common>
 800729e:	3001      	adds	r0, #1
 80072a0:	d14c      	bne.n	800733c <_printf_i+0x200>
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	b004      	add	sp, #16
 80072a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ac:	4834      	ldr	r0, [pc, #208]	; (8007380 <_printf_i+0x244>)
 80072ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b2:	6829      	ldr	r1, [r5, #0]
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80072ba:	6029      	str	r1, [r5, #0]
 80072bc:	061d      	lsls	r5, r3, #24
 80072be:	d514      	bpl.n	80072ea <_printf_i+0x1ae>
 80072c0:	07df      	lsls	r7, r3, #31
 80072c2:	bf44      	itt	mi
 80072c4:	f043 0320 	orrmi.w	r3, r3, #32
 80072c8:	6023      	strmi	r3, [r4, #0]
 80072ca:	b91e      	cbnz	r6, 80072d4 <_printf_i+0x198>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	f023 0320 	bic.w	r3, r3, #32
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	2310      	movs	r3, #16
 80072d6:	e7af      	b.n	8007238 <_printf_i+0xfc>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	f043 0320 	orr.w	r3, r3, #32
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	2378      	movs	r3, #120	; 0x78
 80072e2:	4828      	ldr	r0, [pc, #160]	; (8007384 <_printf_i+0x248>)
 80072e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072e8:	e7e3      	b.n	80072b2 <_printf_i+0x176>
 80072ea:	0659      	lsls	r1, r3, #25
 80072ec:	bf48      	it	mi
 80072ee:	b2b6      	uxthmi	r6, r6
 80072f0:	e7e6      	b.n	80072c0 <_printf_i+0x184>
 80072f2:	4615      	mov	r5, r2
 80072f4:	e7bb      	b.n	800726e <_printf_i+0x132>
 80072f6:	682b      	ldr	r3, [r5, #0]
 80072f8:	6826      	ldr	r6, [r4, #0]
 80072fa:	1d18      	adds	r0, r3, #4
 80072fc:	6961      	ldr	r1, [r4, #20]
 80072fe:	6028      	str	r0, [r5, #0]
 8007300:	0635      	lsls	r5, r6, #24
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	d501      	bpl.n	800730a <_printf_i+0x1ce>
 8007306:	6019      	str	r1, [r3, #0]
 8007308:	e002      	b.n	8007310 <_printf_i+0x1d4>
 800730a:	0670      	lsls	r0, r6, #25
 800730c:	d5fb      	bpl.n	8007306 <_printf_i+0x1ca>
 800730e:	8019      	strh	r1, [r3, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	4615      	mov	r5, r2
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	e7ba      	b.n	800728e <_printf_i+0x152>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	2100      	movs	r1, #0
 800731c:	1d1a      	adds	r2, r3, #4
 800731e:	602a      	str	r2, [r5, #0]
 8007320:	681d      	ldr	r5, [r3, #0]
 8007322:	6862      	ldr	r2, [r4, #4]
 8007324:	4628      	mov	r0, r5
 8007326:	f000 fb13 	bl	8007950 <memchr>
 800732a:	b108      	cbz	r0, 8007330 <_printf_i+0x1f4>
 800732c:	1b40      	subs	r0, r0, r5
 800732e:	6060      	str	r0, [r4, #4]
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	2300      	movs	r3, #0
 8007336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800733a:	e7a8      	b.n	800728e <_printf_i+0x152>
 800733c:	462a      	mov	r2, r5
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	47d0      	blx	sl
 8007346:	3001      	adds	r0, #1
 8007348:	d0ab      	beq.n	80072a2 <_printf_i+0x166>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	079b      	lsls	r3, r3, #30
 800734e:	d413      	bmi.n	8007378 <_printf_i+0x23c>
 8007350:	68e0      	ldr	r0, [r4, #12]
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	4298      	cmp	r0, r3
 8007356:	bfb8      	it	lt
 8007358:	4618      	movlt	r0, r3
 800735a:	e7a4      	b.n	80072a6 <_printf_i+0x16a>
 800735c:	2301      	movs	r3, #1
 800735e:	4632      	mov	r2, r6
 8007360:	4649      	mov	r1, r9
 8007362:	4640      	mov	r0, r8
 8007364:	47d0      	blx	sl
 8007366:	3001      	adds	r0, #1
 8007368:	d09b      	beq.n	80072a2 <_printf_i+0x166>
 800736a:	3501      	adds	r5, #1
 800736c:	68e3      	ldr	r3, [r4, #12]
 800736e:	9903      	ldr	r1, [sp, #12]
 8007370:	1a5b      	subs	r3, r3, r1
 8007372:	42ab      	cmp	r3, r5
 8007374:	dcf2      	bgt.n	800735c <_printf_i+0x220>
 8007376:	e7eb      	b.n	8007350 <_printf_i+0x214>
 8007378:	2500      	movs	r5, #0
 800737a:	f104 0619 	add.w	r6, r4, #25
 800737e:	e7f5      	b.n	800736c <_printf_i+0x230>
 8007380:	0800aa05 	.word	0x0800aa05
 8007384:	0800aa16 	.word	0x0800aa16

08007388 <__swbuf_r>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	460e      	mov	r6, r1
 800738c:	4614      	mov	r4, r2
 800738e:	4605      	mov	r5, r0
 8007390:	b118      	cbz	r0, 800739a <__swbuf_r+0x12>
 8007392:	6983      	ldr	r3, [r0, #24]
 8007394:	b90b      	cbnz	r3, 800739a <__swbuf_r+0x12>
 8007396:	f000 f9d5 	bl	8007744 <__sinit>
 800739a:	4b21      	ldr	r3, [pc, #132]	; (8007420 <__swbuf_r+0x98>)
 800739c:	429c      	cmp	r4, r3
 800739e:	d12b      	bne.n	80073f8 <__swbuf_r+0x70>
 80073a0:	686c      	ldr	r4, [r5, #4]
 80073a2:	69a3      	ldr	r3, [r4, #24]
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	071a      	lsls	r2, r3, #28
 80073aa:	d52f      	bpl.n	800740c <__swbuf_r+0x84>
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	b36b      	cbz	r3, 800740c <__swbuf_r+0x84>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	6820      	ldr	r0, [r4, #0]
 80073b4:	b2f6      	uxtb	r6, r6
 80073b6:	1ac0      	subs	r0, r0, r3
 80073b8:	6963      	ldr	r3, [r4, #20]
 80073ba:	4637      	mov	r7, r6
 80073bc:	4283      	cmp	r3, r0
 80073be:	dc04      	bgt.n	80073ca <__swbuf_r+0x42>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f92a 	bl	800761c <_fflush_r>
 80073c8:	bb30      	cbnz	r0, 8007418 <__swbuf_r+0x90>
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	3001      	adds	r0, #1
 80073ce:	3b01      	subs	r3, #1
 80073d0:	60a3      	str	r3, [r4, #8]
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	701e      	strb	r6, [r3, #0]
 80073da:	6963      	ldr	r3, [r4, #20]
 80073dc:	4283      	cmp	r3, r0
 80073de:	d004      	beq.n	80073ea <__swbuf_r+0x62>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	07db      	lsls	r3, r3, #31
 80073e4:	d506      	bpl.n	80073f4 <__swbuf_r+0x6c>
 80073e6:	2e0a      	cmp	r6, #10
 80073e8:	d104      	bne.n	80073f4 <__swbuf_r+0x6c>
 80073ea:	4621      	mov	r1, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 f915 	bl	800761c <_fflush_r>
 80073f2:	b988      	cbnz	r0, 8007418 <__swbuf_r+0x90>
 80073f4:	4638      	mov	r0, r7
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <__swbuf_r+0x9c>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d101      	bne.n	8007402 <__swbuf_r+0x7a>
 80073fe:	68ac      	ldr	r4, [r5, #8]
 8007400:	e7cf      	b.n	80073a2 <__swbuf_r+0x1a>
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <__swbuf_r+0xa0>)
 8007404:	429c      	cmp	r4, r3
 8007406:	bf08      	it	eq
 8007408:	68ec      	ldreq	r4, [r5, #12]
 800740a:	e7ca      	b.n	80073a2 <__swbuf_r+0x1a>
 800740c:	4621      	mov	r1, r4
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f80c 	bl	800742c <__swsetup_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	d0cb      	beq.n	80073b0 <__swbuf_r+0x28>
 8007418:	f04f 37ff 	mov.w	r7, #4294967295
 800741c:	e7ea      	b.n	80073f4 <__swbuf_r+0x6c>
 800741e:	bf00      	nop
 8007420:	0800aa48 	.word	0x0800aa48
 8007424:	0800aa68 	.word	0x0800aa68
 8007428:	0800aa28 	.word	0x0800aa28

0800742c <__swsetup_r>:
 800742c:	4b32      	ldr	r3, [pc, #200]	; (80074f8 <__swsetup_r+0xcc>)
 800742e:	b570      	push	{r4, r5, r6, lr}
 8007430:	681d      	ldr	r5, [r3, #0]
 8007432:	4606      	mov	r6, r0
 8007434:	460c      	mov	r4, r1
 8007436:	b125      	cbz	r5, 8007442 <__swsetup_r+0x16>
 8007438:	69ab      	ldr	r3, [r5, #24]
 800743a:	b913      	cbnz	r3, 8007442 <__swsetup_r+0x16>
 800743c:	4628      	mov	r0, r5
 800743e:	f000 f981 	bl	8007744 <__sinit>
 8007442:	4b2e      	ldr	r3, [pc, #184]	; (80074fc <__swsetup_r+0xd0>)
 8007444:	429c      	cmp	r4, r3
 8007446:	d10f      	bne.n	8007468 <__swsetup_r+0x3c>
 8007448:	686c      	ldr	r4, [r5, #4]
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007450:	0719      	lsls	r1, r3, #28
 8007452:	d42c      	bmi.n	80074ae <__swsetup_r+0x82>
 8007454:	06dd      	lsls	r5, r3, #27
 8007456:	d411      	bmi.n	800747c <__swsetup_r+0x50>
 8007458:	2309      	movs	r3, #9
 800745a:	6033      	str	r3, [r6, #0]
 800745c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	e03e      	b.n	80074e6 <__swsetup_r+0xba>
 8007468:	4b25      	ldr	r3, [pc, #148]	; (8007500 <__swsetup_r+0xd4>)
 800746a:	429c      	cmp	r4, r3
 800746c:	d101      	bne.n	8007472 <__swsetup_r+0x46>
 800746e:	68ac      	ldr	r4, [r5, #8]
 8007470:	e7eb      	b.n	800744a <__swsetup_r+0x1e>
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <__swsetup_r+0xd8>)
 8007474:	429c      	cmp	r4, r3
 8007476:	bf08      	it	eq
 8007478:	68ec      	ldreq	r4, [r5, #12]
 800747a:	e7e6      	b.n	800744a <__swsetup_r+0x1e>
 800747c:	0758      	lsls	r0, r3, #29
 800747e:	d512      	bpl.n	80074a6 <__swsetup_r+0x7a>
 8007480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007482:	b141      	cbz	r1, 8007496 <__swsetup_r+0x6a>
 8007484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007488:	4299      	cmp	r1, r3
 800748a:	d002      	beq.n	8007492 <__swsetup_r+0x66>
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff f8ff 	bl	8006690 <_free_r>
 8007492:	2300      	movs	r3, #0
 8007494:	6363      	str	r3, [r4, #52]	; 0x34
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	2300      	movs	r3, #0
 80074a0:	6063      	str	r3, [r4, #4]
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f043 0308 	orr.w	r3, r3, #8
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	b94b      	cbnz	r3, 80074c6 <__swsetup_r+0x9a>
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074bc:	d003      	beq.n	80074c6 <__swsetup_r+0x9a>
 80074be:	4621      	mov	r1, r4
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 fa05 	bl	80078d0 <__smakebuf_r>
 80074c6:	89a0      	ldrh	r0, [r4, #12]
 80074c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074cc:	f010 0301 	ands.w	r3, r0, #1
 80074d0:	d00a      	beq.n	80074e8 <__swsetup_r+0xbc>
 80074d2:	2300      	movs	r3, #0
 80074d4:	60a3      	str	r3, [r4, #8]
 80074d6:	6963      	ldr	r3, [r4, #20]
 80074d8:	425b      	negs	r3, r3
 80074da:	61a3      	str	r3, [r4, #24]
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	b943      	cbnz	r3, 80074f2 <__swsetup_r+0xc6>
 80074e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074e4:	d1ba      	bne.n	800745c <__swsetup_r+0x30>
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	0781      	lsls	r1, r0, #30
 80074ea:	bf58      	it	pl
 80074ec:	6963      	ldrpl	r3, [r4, #20]
 80074ee:	60a3      	str	r3, [r4, #8]
 80074f0:	e7f4      	b.n	80074dc <__swsetup_r+0xb0>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e7f7      	b.n	80074e6 <__swsetup_r+0xba>
 80074f6:	bf00      	nop
 80074f8:	20000030 	.word	0x20000030
 80074fc:	0800aa48 	.word	0x0800aa48
 8007500:	0800aa68 	.word	0x0800aa68
 8007504:	0800aa28 	.word	0x0800aa28

08007508 <abort>:
 8007508:	2006      	movs	r0, #6
 800750a:	b508      	push	{r3, lr}
 800750c:	f000 faa0 	bl	8007a50 <raise>
 8007510:	2001      	movs	r0, #1
 8007512:	f7fb feef 	bl	80032f4 <_exit>
	...

08007518 <__sflush_r>:
 8007518:	898a      	ldrh	r2, [r1, #12]
 800751a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751c:	4605      	mov	r5, r0
 800751e:	0710      	lsls	r0, r2, #28
 8007520:	460c      	mov	r4, r1
 8007522:	d457      	bmi.n	80075d4 <__sflush_r+0xbc>
 8007524:	684b      	ldr	r3, [r1, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	dc04      	bgt.n	8007534 <__sflush_r+0x1c>
 800752a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	dc01      	bgt.n	8007534 <__sflush_r+0x1c>
 8007530:	2000      	movs	r0, #0
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007536:	2e00      	cmp	r6, #0
 8007538:	d0fa      	beq.n	8007530 <__sflush_r+0x18>
 800753a:	2300      	movs	r3, #0
 800753c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007540:	682f      	ldr	r7, [r5, #0]
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	d032      	beq.n	80075ac <__sflush_r+0x94>
 8007546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	075a      	lsls	r2, r3, #29
 800754c:	d505      	bpl.n	800755a <__sflush_r+0x42>
 800754e:	6863      	ldr	r3, [r4, #4]
 8007550:	1ac0      	subs	r0, r0, r3
 8007552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007554:	b10b      	cbz	r3, 800755a <__sflush_r+0x42>
 8007556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007558:	1ac0      	subs	r0, r0, r3
 800755a:	2300      	movs	r3, #0
 800755c:	4602      	mov	r2, r0
 800755e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007560:	4628      	mov	r0, r5
 8007562:	6a21      	ldr	r1, [r4, #32]
 8007564:	47b0      	blx	r6
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	d106      	bne.n	800757a <__sflush_r+0x62>
 800756c:	6829      	ldr	r1, [r5, #0]
 800756e:	291d      	cmp	r1, #29
 8007570:	d82c      	bhi.n	80075cc <__sflush_r+0xb4>
 8007572:	4a29      	ldr	r2, [pc, #164]	; (8007618 <__sflush_r+0x100>)
 8007574:	40ca      	lsrs	r2, r1
 8007576:	07d6      	lsls	r6, r2, #31
 8007578:	d528      	bpl.n	80075cc <__sflush_r+0xb4>
 800757a:	2200      	movs	r2, #0
 800757c:	6062      	str	r2, [r4, #4]
 800757e:	6922      	ldr	r2, [r4, #16]
 8007580:	04d9      	lsls	r1, r3, #19
 8007582:	6022      	str	r2, [r4, #0]
 8007584:	d504      	bpl.n	8007590 <__sflush_r+0x78>
 8007586:	1c42      	adds	r2, r0, #1
 8007588:	d101      	bne.n	800758e <__sflush_r+0x76>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	b903      	cbnz	r3, 8007590 <__sflush_r+0x78>
 800758e:	6560      	str	r0, [r4, #84]	; 0x54
 8007590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007592:	602f      	str	r7, [r5, #0]
 8007594:	2900      	cmp	r1, #0
 8007596:	d0cb      	beq.n	8007530 <__sflush_r+0x18>
 8007598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800759c:	4299      	cmp	r1, r3
 800759e:	d002      	beq.n	80075a6 <__sflush_r+0x8e>
 80075a0:	4628      	mov	r0, r5
 80075a2:	f7ff f875 	bl	8006690 <_free_r>
 80075a6:	2000      	movs	r0, #0
 80075a8:	6360      	str	r0, [r4, #52]	; 0x34
 80075aa:	e7c2      	b.n	8007532 <__sflush_r+0x1a>
 80075ac:	6a21      	ldr	r1, [r4, #32]
 80075ae:	2301      	movs	r3, #1
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b0      	blx	r6
 80075b4:	1c41      	adds	r1, r0, #1
 80075b6:	d1c7      	bne.n	8007548 <__sflush_r+0x30>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0c4      	beq.n	8007548 <__sflush_r+0x30>
 80075be:	2b1d      	cmp	r3, #29
 80075c0:	d001      	beq.n	80075c6 <__sflush_r+0xae>
 80075c2:	2b16      	cmp	r3, #22
 80075c4:	d101      	bne.n	80075ca <__sflush_r+0xb2>
 80075c6:	602f      	str	r7, [r5, #0]
 80075c8:	e7b2      	b.n	8007530 <__sflush_r+0x18>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	e7ae      	b.n	8007532 <__sflush_r+0x1a>
 80075d4:	690f      	ldr	r7, [r1, #16]
 80075d6:	2f00      	cmp	r7, #0
 80075d8:	d0aa      	beq.n	8007530 <__sflush_r+0x18>
 80075da:	0793      	lsls	r3, r2, #30
 80075dc:	bf18      	it	ne
 80075de:	2300      	movne	r3, #0
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	bf08      	it	eq
 80075e4:	694b      	ldreq	r3, [r1, #20]
 80075e6:	1bf6      	subs	r6, r6, r7
 80075e8:	600f      	str	r7, [r1, #0]
 80075ea:	608b      	str	r3, [r1, #8]
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	dd9f      	ble.n	8007530 <__sflush_r+0x18>
 80075f0:	4633      	mov	r3, r6
 80075f2:	463a      	mov	r2, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	6a21      	ldr	r1, [r4, #32]
 80075f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80075fc:	47e0      	blx	ip
 80075fe:	2800      	cmp	r0, #0
 8007600:	dc06      	bgt.n	8007610 <__sflush_r+0xf8>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	e790      	b.n	8007532 <__sflush_r+0x1a>
 8007610:	4407      	add	r7, r0
 8007612:	1a36      	subs	r6, r6, r0
 8007614:	e7ea      	b.n	80075ec <__sflush_r+0xd4>
 8007616:	bf00      	nop
 8007618:	20400001 	.word	0x20400001

0800761c <_fflush_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	690b      	ldr	r3, [r1, #16]
 8007620:	4605      	mov	r5, r0
 8007622:	460c      	mov	r4, r1
 8007624:	b913      	cbnz	r3, 800762c <_fflush_r+0x10>
 8007626:	2500      	movs	r5, #0
 8007628:	4628      	mov	r0, r5
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	b118      	cbz	r0, 8007636 <_fflush_r+0x1a>
 800762e:	6983      	ldr	r3, [r0, #24]
 8007630:	b90b      	cbnz	r3, 8007636 <_fflush_r+0x1a>
 8007632:	f000 f887 	bl	8007744 <__sinit>
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <_fflush_r+0x6c>)
 8007638:	429c      	cmp	r4, r3
 800763a:	d11b      	bne.n	8007674 <_fflush_r+0x58>
 800763c:	686c      	ldr	r4, [r5, #4]
 800763e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0ef      	beq.n	8007626 <_fflush_r+0xa>
 8007646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007648:	07d0      	lsls	r0, r2, #31
 800764a:	d404      	bmi.n	8007656 <_fflush_r+0x3a>
 800764c:	0599      	lsls	r1, r3, #22
 800764e:	d402      	bmi.n	8007656 <_fflush_r+0x3a>
 8007650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007652:	f000 f915 	bl	8007880 <__retarget_lock_acquire_recursive>
 8007656:	4628      	mov	r0, r5
 8007658:	4621      	mov	r1, r4
 800765a:	f7ff ff5d 	bl	8007518 <__sflush_r>
 800765e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007660:	4605      	mov	r5, r0
 8007662:	07da      	lsls	r2, r3, #31
 8007664:	d4e0      	bmi.n	8007628 <_fflush_r+0xc>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	059b      	lsls	r3, r3, #22
 800766a:	d4dd      	bmi.n	8007628 <_fflush_r+0xc>
 800766c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766e:	f000 f908 	bl	8007882 <__retarget_lock_release_recursive>
 8007672:	e7d9      	b.n	8007628 <_fflush_r+0xc>
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <_fflush_r+0x70>)
 8007676:	429c      	cmp	r4, r3
 8007678:	d101      	bne.n	800767e <_fflush_r+0x62>
 800767a:	68ac      	ldr	r4, [r5, #8]
 800767c:	e7df      	b.n	800763e <_fflush_r+0x22>
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <_fflush_r+0x74>)
 8007680:	429c      	cmp	r4, r3
 8007682:	bf08      	it	eq
 8007684:	68ec      	ldreq	r4, [r5, #12]
 8007686:	e7da      	b.n	800763e <_fflush_r+0x22>
 8007688:	0800aa48 	.word	0x0800aa48
 800768c:	0800aa68 	.word	0x0800aa68
 8007690:	0800aa28 	.word	0x0800aa28

08007694 <std>:
 8007694:	2300      	movs	r3, #0
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	e9c0 3300 	strd	r3, r3, [r0]
 800769e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076a2:	6083      	str	r3, [r0, #8]
 80076a4:	8181      	strh	r1, [r0, #12]
 80076a6:	6643      	str	r3, [r0, #100]	; 0x64
 80076a8:	81c2      	strh	r2, [r0, #14]
 80076aa:	6183      	str	r3, [r0, #24]
 80076ac:	4619      	mov	r1, r3
 80076ae:	2208      	movs	r2, #8
 80076b0:	305c      	adds	r0, #92	; 0x5c
 80076b2:	f7fe ffe5 	bl	8006680 <memset>
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <std+0x38>)
 80076b8:	6224      	str	r4, [r4, #32]
 80076ba:	6263      	str	r3, [r4, #36]	; 0x24
 80076bc:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <std+0x3c>)
 80076be:	62a3      	str	r3, [r4, #40]	; 0x28
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <std+0x40>)
 80076c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <std+0x44>)
 80076c6:	6323      	str	r3, [r4, #48]	; 0x30
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	08007a89 	.word	0x08007a89
 80076d0:	08007aab 	.word	0x08007aab
 80076d4:	08007ae3 	.word	0x08007ae3
 80076d8:	08007b07 	.word	0x08007b07

080076dc <_cleanup_r>:
 80076dc:	4901      	ldr	r1, [pc, #4]	; (80076e4 <_cleanup_r+0x8>)
 80076de:	f000 b8af 	b.w	8007840 <_fwalk_reent>
 80076e2:	bf00      	nop
 80076e4:	0800761d 	.word	0x0800761d

080076e8 <__sfmoreglue>:
 80076e8:	2268      	movs	r2, #104	; 0x68
 80076ea:	b570      	push	{r4, r5, r6, lr}
 80076ec:	1e4d      	subs	r5, r1, #1
 80076ee:	4355      	muls	r5, r2
 80076f0:	460e      	mov	r6, r1
 80076f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076f6:	f7ff f833 	bl	8006760 <_malloc_r>
 80076fa:	4604      	mov	r4, r0
 80076fc:	b140      	cbz	r0, 8007710 <__sfmoreglue+0x28>
 80076fe:	2100      	movs	r1, #0
 8007700:	e9c0 1600 	strd	r1, r6, [r0]
 8007704:	300c      	adds	r0, #12
 8007706:	60a0      	str	r0, [r4, #8]
 8007708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800770c:	f7fe ffb8 	bl	8006680 <memset>
 8007710:	4620      	mov	r0, r4
 8007712:	bd70      	pop	{r4, r5, r6, pc}

08007714 <__sfp_lock_acquire>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__sfp_lock_acquire+0x8>)
 8007716:	f000 b8b3 	b.w	8007880 <__retarget_lock_acquire_recursive>
 800771a:	bf00      	nop
 800771c:	20008439 	.word	0x20008439

08007720 <__sfp_lock_release>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__sfp_lock_release+0x8>)
 8007722:	f000 b8ae 	b.w	8007882 <__retarget_lock_release_recursive>
 8007726:	bf00      	nop
 8007728:	20008439 	.word	0x20008439

0800772c <__sinit_lock_acquire>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sinit_lock_acquire+0x8>)
 800772e:	f000 b8a7 	b.w	8007880 <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	2000843a 	.word	0x2000843a

08007738 <__sinit_lock_release>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__sinit_lock_release+0x8>)
 800773a:	f000 b8a2 	b.w	8007882 <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	2000843a 	.word	0x2000843a

08007744 <__sinit>:
 8007744:	b510      	push	{r4, lr}
 8007746:	4604      	mov	r4, r0
 8007748:	f7ff fff0 	bl	800772c <__sinit_lock_acquire>
 800774c:	69a3      	ldr	r3, [r4, #24]
 800774e:	b11b      	cbz	r3, 8007758 <__sinit+0x14>
 8007750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007754:	f7ff bff0 	b.w	8007738 <__sinit_lock_release>
 8007758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800775c:	6523      	str	r3, [r4, #80]	; 0x50
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <__sinit+0x68>)
 8007760:	4a13      	ldr	r2, [pc, #76]	; (80077b0 <__sinit+0x6c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	62a2      	str	r2, [r4, #40]	; 0x28
 8007766:	42a3      	cmp	r3, r4
 8007768:	bf08      	it	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	4620      	mov	r0, r4
 800776e:	bf08      	it	eq
 8007770:	61a3      	streq	r3, [r4, #24]
 8007772:	f000 f81f 	bl	80077b4 <__sfp>
 8007776:	6060      	str	r0, [r4, #4]
 8007778:	4620      	mov	r0, r4
 800777a:	f000 f81b 	bl	80077b4 <__sfp>
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	4620      	mov	r0, r4
 8007782:	f000 f817 	bl	80077b4 <__sfp>
 8007786:	2200      	movs	r2, #0
 8007788:	2104      	movs	r1, #4
 800778a:	60e0      	str	r0, [r4, #12]
 800778c:	6860      	ldr	r0, [r4, #4]
 800778e:	f7ff ff81 	bl	8007694 <std>
 8007792:	2201      	movs	r2, #1
 8007794:	2109      	movs	r1, #9
 8007796:	68a0      	ldr	r0, [r4, #8]
 8007798:	f7ff ff7c 	bl	8007694 <std>
 800779c:	2202      	movs	r2, #2
 800779e:	2112      	movs	r1, #18
 80077a0:	68e0      	ldr	r0, [r4, #12]
 80077a2:	f7ff ff77 	bl	8007694 <std>
 80077a6:	2301      	movs	r3, #1
 80077a8:	61a3      	str	r3, [r4, #24]
 80077aa:	e7d1      	b.n	8007750 <__sinit+0xc>
 80077ac:	0800a940 	.word	0x0800a940
 80077b0:	080076dd 	.word	0x080076dd

080077b4 <__sfp>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	4607      	mov	r7, r0
 80077b8:	f7ff ffac 	bl	8007714 <__sfp_lock_acquire>
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <__sfp+0x84>)
 80077be:	681e      	ldr	r6, [r3, #0]
 80077c0:	69b3      	ldr	r3, [r6, #24]
 80077c2:	b913      	cbnz	r3, 80077ca <__sfp+0x16>
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff ffbd 	bl	8007744 <__sinit>
 80077ca:	3648      	adds	r6, #72	; 0x48
 80077cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	d503      	bpl.n	80077dc <__sfp+0x28>
 80077d4:	6833      	ldr	r3, [r6, #0]
 80077d6:	b30b      	cbz	r3, 800781c <__sfp+0x68>
 80077d8:	6836      	ldr	r6, [r6, #0]
 80077da:	e7f7      	b.n	80077cc <__sfp+0x18>
 80077dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077e0:	b9d5      	cbnz	r5, 8007818 <__sfp+0x64>
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <__sfp+0x88>)
 80077e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077e8:	60e3      	str	r3, [r4, #12]
 80077ea:	6665      	str	r5, [r4, #100]	; 0x64
 80077ec:	f000 f847 	bl	800787e <__retarget_lock_init_recursive>
 80077f0:	f7ff ff96 	bl	8007720 <__sfp_lock_release>
 80077f4:	2208      	movs	r2, #8
 80077f6:	4629      	mov	r1, r5
 80077f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007800:	6025      	str	r5, [r4, #0]
 8007802:	61a5      	str	r5, [r4, #24]
 8007804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007808:	f7fe ff3a 	bl	8006680 <memset>
 800780c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007814:	4620      	mov	r0, r4
 8007816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007818:	3468      	adds	r4, #104	; 0x68
 800781a:	e7d9      	b.n	80077d0 <__sfp+0x1c>
 800781c:	2104      	movs	r1, #4
 800781e:	4638      	mov	r0, r7
 8007820:	f7ff ff62 	bl	80076e8 <__sfmoreglue>
 8007824:	4604      	mov	r4, r0
 8007826:	6030      	str	r0, [r6, #0]
 8007828:	2800      	cmp	r0, #0
 800782a:	d1d5      	bne.n	80077d8 <__sfp+0x24>
 800782c:	f7ff ff78 	bl	8007720 <__sfp_lock_release>
 8007830:	230c      	movs	r3, #12
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	e7ee      	b.n	8007814 <__sfp+0x60>
 8007836:	bf00      	nop
 8007838:	0800a940 	.word	0x0800a940
 800783c:	ffff0001 	.word	0xffff0001

08007840 <_fwalk_reent>:
 8007840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007844:	4606      	mov	r6, r0
 8007846:	4688      	mov	r8, r1
 8007848:	2700      	movs	r7, #0
 800784a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800784e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007852:	f1b9 0901 	subs.w	r9, r9, #1
 8007856:	d505      	bpl.n	8007864 <_fwalk_reent+0x24>
 8007858:	6824      	ldr	r4, [r4, #0]
 800785a:	2c00      	cmp	r4, #0
 800785c:	d1f7      	bne.n	800784e <_fwalk_reent+0xe>
 800785e:	4638      	mov	r0, r7
 8007860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007864:	89ab      	ldrh	r3, [r5, #12]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d907      	bls.n	800787a <_fwalk_reent+0x3a>
 800786a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800786e:	3301      	adds	r3, #1
 8007870:	d003      	beq.n	800787a <_fwalk_reent+0x3a>
 8007872:	4629      	mov	r1, r5
 8007874:	4630      	mov	r0, r6
 8007876:	47c0      	blx	r8
 8007878:	4307      	orrs	r7, r0
 800787a:	3568      	adds	r5, #104	; 0x68
 800787c:	e7e9      	b.n	8007852 <_fwalk_reent+0x12>

0800787e <__retarget_lock_init_recursive>:
 800787e:	4770      	bx	lr

08007880 <__retarget_lock_acquire_recursive>:
 8007880:	4770      	bx	lr

08007882 <__retarget_lock_release_recursive>:
 8007882:	4770      	bx	lr

08007884 <__swhatbuf_r>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	460e      	mov	r6, r1
 8007888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788c:	4614      	mov	r4, r2
 800788e:	2900      	cmp	r1, #0
 8007890:	461d      	mov	r5, r3
 8007892:	b096      	sub	sp, #88	; 0x58
 8007894:	da08      	bge.n	80078a8 <__swhatbuf_r+0x24>
 8007896:	2200      	movs	r2, #0
 8007898:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800789c:	602a      	str	r2, [r5, #0]
 800789e:	061a      	lsls	r2, r3, #24
 80078a0:	d410      	bmi.n	80078c4 <__swhatbuf_r+0x40>
 80078a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a6:	e00e      	b.n	80078c6 <__swhatbuf_r+0x42>
 80078a8:	466a      	mov	r2, sp
 80078aa:	f000 f953 	bl	8007b54 <_fstat_r>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	dbf1      	blt.n	8007896 <__swhatbuf_r+0x12>
 80078b2:	9a01      	ldr	r2, [sp, #4]
 80078b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078bc:	425a      	negs	r2, r3
 80078be:	415a      	adcs	r2, r3
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	e7ee      	b.n	80078a2 <__swhatbuf_r+0x1e>
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	2000      	movs	r0, #0
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	b016      	add	sp, #88	; 0x58
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080078d0 <__smakebuf_r>:
 80078d0:	898b      	ldrh	r3, [r1, #12]
 80078d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078d4:	079d      	lsls	r5, r3, #30
 80078d6:	4606      	mov	r6, r0
 80078d8:	460c      	mov	r4, r1
 80078da:	d507      	bpl.n	80078ec <__smakebuf_r+0x1c>
 80078dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	2301      	movs	r3, #1
 80078e6:	6163      	str	r3, [r4, #20]
 80078e8:	b002      	add	sp, #8
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	466a      	mov	r2, sp
 80078ee:	ab01      	add	r3, sp, #4
 80078f0:	f7ff ffc8 	bl	8007884 <__swhatbuf_r>
 80078f4:	9900      	ldr	r1, [sp, #0]
 80078f6:	4605      	mov	r5, r0
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7fe ff31 	bl	8006760 <_malloc_r>
 80078fe:	b948      	cbnz	r0, 8007914 <__smakebuf_r+0x44>
 8007900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007904:	059a      	lsls	r2, r3, #22
 8007906:	d4ef      	bmi.n	80078e8 <__smakebuf_r+0x18>
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	f043 0302 	orr.w	r3, r3, #2
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	e7e3      	b.n	80078dc <__smakebuf_r+0xc>
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <__smakebuf_r+0x7c>)
 8007916:	62b3      	str	r3, [r6, #40]	; 0x28
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	6020      	str	r0, [r4, #0]
 800791c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	6120      	str	r0, [r4, #16]
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	b15b      	cbz	r3, 8007944 <__smakebuf_r+0x74>
 800792c:	4630      	mov	r0, r6
 800792e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007932:	f000 f921 	bl	8007b78 <_isatty_r>
 8007936:	b128      	cbz	r0, 8007944 <__smakebuf_r+0x74>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	89a0      	ldrh	r0, [r4, #12]
 8007946:	4305      	orrs	r5, r0
 8007948:	81a5      	strh	r5, [r4, #12]
 800794a:	e7cd      	b.n	80078e8 <__smakebuf_r+0x18>
 800794c:	080076dd 	.word	0x080076dd

08007950 <memchr>:
 8007950:	4603      	mov	r3, r0
 8007952:	b510      	push	{r4, lr}
 8007954:	b2c9      	uxtb	r1, r1
 8007956:	4402      	add	r2, r0
 8007958:	4293      	cmp	r3, r2
 800795a:	4618      	mov	r0, r3
 800795c:	d101      	bne.n	8007962 <memchr+0x12>
 800795e:	2000      	movs	r0, #0
 8007960:	e003      	b.n	800796a <memchr+0x1a>
 8007962:	7804      	ldrb	r4, [r0, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	428c      	cmp	r4, r1
 8007968:	d1f6      	bne.n	8007958 <memchr+0x8>
 800796a:	bd10      	pop	{r4, pc}

0800796c <memmove>:
 800796c:	4288      	cmp	r0, r1
 800796e:	b510      	push	{r4, lr}
 8007970:	eb01 0402 	add.w	r4, r1, r2
 8007974:	d902      	bls.n	800797c <memmove+0x10>
 8007976:	4284      	cmp	r4, r0
 8007978:	4623      	mov	r3, r4
 800797a:	d807      	bhi.n	800798c <memmove+0x20>
 800797c:	1e43      	subs	r3, r0, #1
 800797e:	42a1      	cmp	r1, r4
 8007980:	d008      	beq.n	8007994 <memmove+0x28>
 8007982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800798a:	e7f8      	b.n	800797e <memmove+0x12>
 800798c:	4601      	mov	r1, r0
 800798e:	4402      	add	r2, r0
 8007990:	428a      	cmp	r2, r1
 8007992:	d100      	bne.n	8007996 <memmove+0x2a>
 8007994:	bd10      	pop	{r4, pc}
 8007996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800799a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799e:	e7f7      	b.n	8007990 <memmove+0x24>

080079a0 <_realloc_r>:
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	4680      	mov	r8, r0
 80079a6:	4614      	mov	r4, r2
 80079a8:	460e      	mov	r6, r1
 80079aa:	b921      	cbnz	r1, 80079b6 <_realloc_r+0x16>
 80079ac:	4611      	mov	r1, r2
 80079ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	f7fe bed5 	b.w	8006760 <_malloc_r>
 80079b6:	b92a      	cbnz	r2, 80079c4 <_realloc_r+0x24>
 80079b8:	f7fe fe6a 	bl	8006690 <_free_r>
 80079bc:	4625      	mov	r5, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	f000 f8fa 	bl	8007bbc <_malloc_usable_size_r>
 80079c8:	4284      	cmp	r4, r0
 80079ca:	4607      	mov	r7, r0
 80079cc:	d802      	bhi.n	80079d4 <_realloc_r+0x34>
 80079ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079d2:	d812      	bhi.n	80079fa <_realloc_r+0x5a>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4640      	mov	r0, r8
 80079d8:	f7fe fec2 	bl	8006760 <_malloc_r>
 80079dc:	4605      	mov	r5, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0ed      	beq.n	80079be <_realloc_r+0x1e>
 80079e2:	42bc      	cmp	r4, r7
 80079e4:	4622      	mov	r2, r4
 80079e6:	4631      	mov	r1, r6
 80079e8:	bf28      	it	cs
 80079ea:	463a      	movcs	r2, r7
 80079ec:	f7fe fe3a 	bl	8006664 <memcpy>
 80079f0:	4631      	mov	r1, r6
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7fe fe4c 	bl	8006690 <_free_r>
 80079f8:	e7e1      	b.n	80079be <_realloc_r+0x1e>
 80079fa:	4635      	mov	r5, r6
 80079fc:	e7df      	b.n	80079be <_realloc_r+0x1e>

080079fe <_raise_r>:
 80079fe:	291f      	cmp	r1, #31
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	460d      	mov	r5, r1
 8007a06:	d904      	bls.n	8007a12 <_raise_r+0x14>
 8007a08:	2316      	movs	r3, #22
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	bd38      	pop	{r3, r4, r5, pc}
 8007a12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a14:	b112      	cbz	r2, 8007a1c <_raise_r+0x1e>
 8007a16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a1a:	b94b      	cbnz	r3, 8007a30 <_raise_r+0x32>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f831 	bl	8007a84 <_getpid_r>
 8007a22:	462a      	mov	r2, r5
 8007a24:	4601      	mov	r1, r0
 8007a26:	4620      	mov	r0, r4
 8007a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a2c:	f000 b818 	b.w	8007a60 <_kill_r>
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d00a      	beq.n	8007a4a <_raise_r+0x4c>
 8007a34:	1c59      	adds	r1, r3, #1
 8007a36:	d103      	bne.n	8007a40 <_raise_r+0x42>
 8007a38:	2316      	movs	r3, #22
 8007a3a:	6003      	str	r3, [r0, #0]
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	e7e7      	b.n	8007a10 <_raise_r+0x12>
 8007a40:	2400      	movs	r4, #0
 8007a42:	4628      	mov	r0, r5
 8007a44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a48:	4798      	blx	r3
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e7e0      	b.n	8007a10 <_raise_r+0x12>
	...

08007a50 <raise>:
 8007a50:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <raise+0xc>)
 8007a52:	4601      	mov	r1, r0
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	f7ff bfd2 	b.w	80079fe <_raise_r>
 8007a5a:	bf00      	nop
 8007a5c:	20000030 	.word	0x20000030

08007a60 <_kill_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	2300      	movs	r3, #0
 8007a64:	4d06      	ldr	r5, [pc, #24]	; (8007a80 <_kill_r+0x20>)
 8007a66:	4604      	mov	r4, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	f7fb fc39 	bl	80032e4 <_kill>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d102      	bne.n	8007a7c <_kill_r+0x1c>
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	b103      	cbz	r3, 8007a7c <_kill_r+0x1c>
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	bd38      	pop	{r3, r4, r5, pc}
 8007a7e:	bf00      	nop
 8007a80:	20008434 	.word	0x20008434

08007a84 <_getpid_r>:
 8007a84:	f7fb bc2c 	b.w	80032e0 <_getpid>

08007a88 <__sread>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	f000 f89c 	bl	8007bcc <_read_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	bfab      	itete	ge
 8007a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a9c:	181b      	addge	r3, r3, r0
 8007a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aa2:	bfac      	ite	ge
 8007aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aa6:	81a3      	strhlt	r3, [r4, #12]
 8007aa8:	bd10      	pop	{r4, pc}

08007aaa <__swrite>:
 8007aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aae:	461f      	mov	r7, r3
 8007ab0:	898b      	ldrh	r3, [r1, #12]
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	05db      	lsls	r3, r3, #23
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	4616      	mov	r6, r2
 8007aba:	d505      	bpl.n	8007ac8 <__swrite+0x1e>
 8007abc:	2302      	movs	r3, #2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	f000 f868 	bl	8007b98 <_lseek_r>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	4632      	mov	r2, r6
 8007acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	463b      	mov	r3, r7
 8007ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ade:	f000 b817 	b.w	8007b10 <_write_r>

08007ae2 <__sseek>:
 8007ae2:	b510      	push	{r4, lr}
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aea:	f000 f855 	bl	8007b98 <_lseek_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	bf15      	itete	ne
 8007af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007afe:	81a3      	strheq	r3, [r4, #12]
 8007b00:	bf18      	it	ne
 8007b02:	81a3      	strhne	r3, [r4, #12]
 8007b04:	bd10      	pop	{r4, pc}

08007b06 <__sclose>:
 8007b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0a:	f000 b813 	b.w	8007b34 <_close_r>
	...

08007b10 <_write_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4d05      	ldr	r5, [pc, #20]	; (8007b30 <_write_r+0x20>)
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7fb fbfc 	bl	800331c <_write>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_write_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_write_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20008434 	.word	0x20008434

08007b34 <_close_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	2300      	movs	r3, #0
 8007b38:	4d05      	ldr	r5, [pc, #20]	; (8007b50 <_close_r+0x1c>)
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	f7fb fbfa 	bl	8003338 <_close>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_close_r+0x1a>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_close_r+0x1a>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	20008434 	.word	0x20008434

08007b54 <_fstat_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	2300      	movs	r3, #0
 8007b58:	4d06      	ldr	r5, [pc, #24]	; (8007b74 <_fstat_r+0x20>)
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	4611      	mov	r1, r2
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	f7fb fbec 	bl	800333e <_fstat>
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	d102      	bne.n	8007b70 <_fstat_r+0x1c>
 8007b6a:	682b      	ldr	r3, [r5, #0]
 8007b6c:	b103      	cbz	r3, 8007b70 <_fstat_r+0x1c>
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	bf00      	nop
 8007b74:	20008434 	.word	0x20008434

08007b78 <_isatty_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4d05      	ldr	r5, [pc, #20]	; (8007b94 <_isatty_r+0x1c>)
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	f7fb fbe0 	bl	8003348 <_isatty>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_isatty_r+0x1a>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_isatty_r+0x1a>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20008434 	.word	0x20008434

08007b98 <_lseek_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4d05      	ldr	r5, [pc, #20]	; (8007bb8 <_lseek_r+0x20>)
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f7fb fbd0 	bl	800334c <_lseek>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d102      	bne.n	8007bb6 <_lseek_r+0x1e>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b103      	cbz	r3, 8007bb6 <_lseek_r+0x1e>
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	20008434 	.word	0x20008434

08007bbc <_malloc_usable_size_r>:
 8007bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc0:	1f18      	subs	r0, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfbc      	itt	lt
 8007bc6:	580b      	ldrlt	r3, [r1, r0]
 8007bc8:	18c0      	addlt	r0, r0, r3
 8007bca:	4770      	bx	lr

08007bcc <_read_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4d05      	ldr	r5, [pc, #20]	; (8007bec <_read_r+0x20>)
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7fb fb90 	bl	8003300 <_read>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_read_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_read_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	20008434 	.word	0x20008434

08007bf0 <pow>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4614      	mov	r4, r2
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4689      	mov	r9, r1
 8007bfc:	f000 f860 	bl	8007cc0 <__ieee754_pow>
 8007c00:	4622      	mov	r2, r4
 8007c02:	4606      	mov	r6, r0
 8007c04:	460f      	mov	r7, r1
 8007c06:	462b      	mov	r3, r5
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	f7f8 ff74 	bl	8000af8 <__aeabi_dcmpun>
 8007c10:	bbc8      	cbnz	r0, 8007c86 <pow+0x96>
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 ff3b 	bl	8000a94 <__aeabi_dcmpeq>
 8007c1e:	b1b8      	cbz	r0, 8007c50 <pow+0x60>
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 ff34 	bl	8000a94 <__aeabi_dcmpeq>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d141      	bne.n	8007cb4 <pow+0xc4>
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f000 fe39 	bl	80088aa <finite>
 8007c38:	b328      	cbz	r0, 8007c86 <pow+0x96>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 ff31 	bl	8000aa8 <__aeabi_dcmplt>
 8007c46:	b1f0      	cbz	r0, 8007c86 <pow+0x96>
 8007c48:	f7fe fcd2 	bl	80065f0 <__errno>
 8007c4c:	2322      	movs	r3, #34	; 0x22
 8007c4e:	e019      	b.n	8007c84 <pow+0x94>
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f000 fe29 	bl	80088aa <finite>
 8007c58:	b9c8      	cbnz	r0, 8007c8e <pow+0x9e>
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	f000 fe24 	bl	80088aa <finite>
 8007c62:	b1a0      	cbz	r0, 8007c8e <pow+0x9e>
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f000 fe1f 	bl	80088aa <finite>
 8007c6c:	b178      	cbz	r0, 8007c8e <pow+0x9e>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	f7f8 ff3f 	bl	8000af8 <__aeabi_dcmpun>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0e4      	beq.n	8007c48 <pow+0x58>
 8007c7e:	f7fe fcb7 	bl	80065f0 <__errno>
 8007c82:	2321      	movs	r3, #33	; 0x21
 8007c84:	6003      	str	r3, [r0, #0]
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 fefd 	bl	8000a94 <__aeabi_dcmpeq>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d0f3      	beq.n	8007c86 <pow+0x96>
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f000 fe02 	bl	80088aa <finite>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d0ed      	beq.n	8007c86 <pow+0x96>
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	f000 fdfc 	bl	80088aa <finite>
 8007cb2:	e7c8      	b.n	8007c46 <pow+0x56>
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	4f01      	ldr	r7, [pc, #4]	; (8007cbc <pow+0xcc>)
 8007cb8:	e7e5      	b.n	8007c86 <pow+0x96>
 8007cba:	bf00      	nop
 8007cbc:	3ff00000 	.word	0x3ff00000

08007cc0 <__ieee754_pow>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b093      	sub	sp, #76	; 0x4c
 8007cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007cce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	ea56 0102 	orrs.w	r1, r6, r2
 8007cd8:	4680      	mov	r8, r0
 8007cda:	d111      	bne.n	8007d00 <__ieee754_pow+0x40>
 8007cdc:	1803      	adds	r3, r0, r0
 8007cde:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007ce2:	4152      	adcs	r2, r2
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	4b82      	ldr	r3, [pc, #520]	; (8007ef0 <__ieee754_pow+0x230>)
 8007ce8:	4193      	sbcs	r3, r2
 8007cea:	f080 84b9 	bcs.w	8008660 <__ieee754_pow+0x9a0>
 8007cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 faaf 	bl	8000258 <__adddf3>
 8007cfa:	4683      	mov	fp, r0
 8007cfc:	468c      	mov	ip, r1
 8007cfe:	e06f      	b.n	8007de0 <__ieee754_pow+0x120>
 8007d00:	4b7c      	ldr	r3, [pc, #496]	; (8007ef4 <__ieee754_pow+0x234>)
 8007d02:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007d06:	429c      	cmp	r4, r3
 8007d08:	464d      	mov	r5, r9
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	dc06      	bgt.n	8007d1c <__ieee754_pow+0x5c>
 8007d0e:	d101      	bne.n	8007d14 <__ieee754_pow+0x54>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d1ec      	bne.n	8007cee <__ieee754_pow+0x2e>
 8007d14:	429e      	cmp	r6, r3
 8007d16:	dc01      	bgt.n	8007d1c <__ieee754_pow+0x5c>
 8007d18:	d10f      	bne.n	8007d3a <__ieee754_pow+0x7a>
 8007d1a:	b172      	cbz	r2, 8007d3a <__ieee754_pow+0x7a>
 8007d1c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007d20:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007d24:	ea55 050a 	orrs.w	r5, r5, sl
 8007d28:	d1e1      	bne.n	8007cee <__ieee754_pow+0x2e>
 8007d2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007d2e:	18db      	adds	r3, r3, r3
 8007d30:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007d34:	4152      	adcs	r2, r2
 8007d36:	429d      	cmp	r5, r3
 8007d38:	e7d5      	b.n	8007ce6 <__ieee754_pow+0x26>
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	da39      	bge.n	8007db2 <__ieee754_pow+0xf2>
 8007d3e:	4b6e      	ldr	r3, [pc, #440]	; (8007ef8 <__ieee754_pow+0x238>)
 8007d40:	429e      	cmp	r6, r3
 8007d42:	dc52      	bgt.n	8007dea <__ieee754_pow+0x12a>
 8007d44:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	f340 849c 	ble.w	8008686 <__ieee754_pow+0x9c6>
 8007d4e:	1533      	asrs	r3, r6, #20
 8007d50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d54:	2b14      	cmp	r3, #20
 8007d56:	dd0f      	ble.n	8007d78 <__ieee754_pow+0xb8>
 8007d58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007d5c:	fa22 f103 	lsr.w	r1, r2, r3
 8007d60:	fa01 f303 	lsl.w	r3, r1, r3
 8007d64:	4293      	cmp	r3, r2
 8007d66:	f040 848e 	bne.w	8008686 <__ieee754_pow+0x9c6>
 8007d6a:	f001 0101 	and.w	r1, r1, #1
 8007d6e:	f1c1 0302 	rsb	r3, r1, #2
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	b182      	cbz	r2, 8007d98 <__ieee754_pow+0xd8>
 8007d76:	e05d      	b.n	8007e34 <__ieee754_pow+0x174>
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d159      	bne.n	8007e30 <__ieee754_pow+0x170>
 8007d7c:	f1c3 0314 	rsb	r3, r3, #20
 8007d80:	fa46 f103 	asr.w	r1, r6, r3
 8007d84:	fa01 f303 	lsl.w	r3, r1, r3
 8007d88:	42b3      	cmp	r3, r6
 8007d8a:	f040 8479 	bne.w	8008680 <__ieee754_pow+0x9c0>
 8007d8e:	f001 0101 	and.w	r1, r1, #1
 8007d92:	f1c1 0302 	rsb	r3, r1, #2
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4b58      	ldr	r3, [pc, #352]	; (8007efc <__ieee754_pow+0x23c>)
 8007d9a:	429e      	cmp	r6, r3
 8007d9c:	d132      	bne.n	8007e04 <__ieee754_pow+0x144>
 8007d9e:	2f00      	cmp	r7, #0
 8007da0:	f280 846a 	bge.w	8008678 <__ieee754_pow+0x9b8>
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	2000      	movs	r0, #0
 8007daa:	4954      	ldr	r1, [pc, #336]	; (8007efc <__ieee754_pow+0x23c>)
 8007dac:	f7f8 fd34 	bl	8000818 <__aeabi_ddiv>
 8007db0:	e7a3      	b.n	8007cfa <__ieee754_pow+0x3a>
 8007db2:	2300      	movs	r3, #0
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	d13c      	bne.n	8007e34 <__ieee754_pow+0x174>
 8007dba:	4b4e      	ldr	r3, [pc, #312]	; (8007ef4 <__ieee754_pow+0x234>)
 8007dbc:	429e      	cmp	r6, r3
 8007dbe:	d1eb      	bne.n	8007d98 <__ieee754_pow+0xd8>
 8007dc0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007dc4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dc8:	ea53 030a 	orrs.w	r3, r3, sl
 8007dcc:	f000 8448 	beq.w	8008660 <__ieee754_pow+0x9a0>
 8007dd0:	4b4b      	ldr	r3, [pc, #300]	; (8007f00 <__ieee754_pow+0x240>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	dd0b      	ble.n	8007dee <__ieee754_pow+0x12e>
 8007dd6:	2f00      	cmp	r7, #0
 8007dd8:	f2c0 8448 	blt.w	800866c <__ieee754_pow+0x9ac>
 8007ddc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007de0:	4658      	mov	r0, fp
 8007de2:	4661      	mov	r1, ip
 8007de4:	b013      	add	sp, #76	; 0x4c
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dea:	2302      	movs	r3, #2
 8007dec:	e7e2      	b.n	8007db4 <__ieee754_pow+0xf4>
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	f04f 0b00 	mov.w	fp, #0
 8007df4:	f04f 0c00 	mov.w	ip, #0
 8007df8:	daf2      	bge.n	8007de0 <__ieee754_pow+0x120>
 8007dfa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007dfe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007e02:	e7ed      	b.n	8007de0 <__ieee754_pow+0x120>
 8007e04:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007e08:	d106      	bne.n	8007e18 <__ieee754_pow+0x158>
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 fbd7 	bl	80005c4 <__aeabi_dmul>
 8007e16:	e770      	b.n	8007cfa <__ieee754_pow+0x3a>
 8007e18:	4b3a      	ldr	r3, [pc, #232]	; (8007f04 <__ieee754_pow+0x244>)
 8007e1a:	429f      	cmp	r7, r3
 8007e1c:	d10a      	bne.n	8007e34 <__ieee754_pow+0x174>
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	db08      	blt.n	8007e34 <__ieee754_pow+0x174>
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	b013      	add	sp, #76	; 0x4c
 8007e28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	f000 bc5e 	b.w	80086ec <__ieee754_sqrt>
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4640      	mov	r0, r8
 8007e36:	4649      	mov	r1, r9
 8007e38:	f000 fd34 	bl	80088a4 <fabs>
 8007e3c:	4683      	mov	fp, r0
 8007e3e:	468c      	mov	ip, r1
 8007e40:	f1ba 0f00 	cmp.w	sl, #0
 8007e44:	d128      	bne.n	8007e98 <__ieee754_pow+0x1d8>
 8007e46:	b124      	cbz	r4, 8007e52 <__ieee754_pow+0x192>
 8007e48:	4b2c      	ldr	r3, [pc, #176]	; (8007efc <__ieee754_pow+0x23c>)
 8007e4a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d122      	bne.n	8007e98 <__ieee754_pow+0x1d8>
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	da07      	bge.n	8007e66 <__ieee754_pow+0x1a6>
 8007e56:	465a      	mov	r2, fp
 8007e58:	4663      	mov	r3, ip
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	4927      	ldr	r1, [pc, #156]	; (8007efc <__ieee754_pow+0x23c>)
 8007e5e:	f7f8 fcdb 	bl	8000818 <__aeabi_ddiv>
 8007e62:	4683      	mov	fp, r0
 8007e64:	468c      	mov	ip, r1
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	daba      	bge.n	8007de0 <__ieee754_pow+0x120>
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e74:	4323      	orrs	r3, r4
 8007e76:	d108      	bne.n	8007e8a <__ieee754_pow+0x1ca>
 8007e78:	465a      	mov	r2, fp
 8007e7a:	4663      	mov	r3, ip
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	4661      	mov	r1, ip
 8007e80:	f7f8 f9e8 	bl	8000254 <__aeabi_dsub>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	e790      	b.n	8007dac <__ieee754_pow+0xec>
 8007e8a:	9b00      	ldr	r3, [sp, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d1a7      	bne.n	8007de0 <__ieee754_pow+0x120>
 8007e90:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007e94:	469c      	mov	ip, r3
 8007e96:	e7a3      	b.n	8007de0 <__ieee754_pow+0x120>
 8007e98:	0feb      	lsrs	r3, r5, #31
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	d104      	bne.n	8007eb0 <__ieee754_pow+0x1f0>
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	e7e7      	b.n	8007e80 <__ieee754_pow+0x1c0>
 8007eb0:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <__ieee754_pow+0x248>)
 8007eb2:	429e      	cmp	r6, r3
 8007eb4:	f340 80f6 	ble.w	80080a4 <__ieee754_pow+0x3e4>
 8007eb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ebc:	429e      	cmp	r6, r3
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <__ieee754_pow+0x240>)
 8007ec0:	dd09      	ble.n	8007ed6 <__ieee754_pow+0x216>
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	dc0c      	bgt.n	8007ee0 <__ieee754_pow+0x220>
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	da0c      	bge.n	8007ee4 <__ieee754_pow+0x224>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	b013      	add	sp, #76	; 0x4c
 8007ece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed2:	f000 bce2 	b.w	800889a <__math_oflow>
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	dbf5      	blt.n	8007ec6 <__ieee754_pow+0x206>
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <__ieee754_pow+0x23c>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	dd15      	ble.n	8007f0c <__ieee754_pow+0x24c>
 8007ee0:	2f00      	cmp	r7, #0
 8007ee2:	dcf2      	bgt.n	8007eca <__ieee754_pow+0x20a>
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	b013      	add	sp, #76	; 0x4c
 8007ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	f000 bcd0 	b.w	8008890 <__math_uflow>
 8007ef0:	fff00000 	.word	0xfff00000
 8007ef4:	7ff00000 	.word	0x7ff00000
 8007ef8:	433fffff 	.word	0x433fffff
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	3fefffff 	.word	0x3fefffff
 8007f04:	3fe00000 	.word	0x3fe00000
 8007f08:	41e00000 	.word	0x41e00000
 8007f0c:	4661      	mov	r1, ip
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4658      	mov	r0, fp
 8007f12:	4b5f      	ldr	r3, [pc, #380]	; (8008090 <__ieee754_pow+0x3d0>)
 8007f14:	f7f8 f99e 	bl	8000254 <__aeabi_dsub>
 8007f18:	a355      	add	r3, pc, #340	; (adr r3, 8008070 <__ieee754_pow+0x3b0>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	4604      	mov	r4, r0
 8007f20:	460d      	mov	r5, r1
 8007f22:	f7f8 fb4f 	bl	80005c4 <__aeabi_dmul>
 8007f26:	a354      	add	r3, pc, #336	; (adr r3, 8008078 <__ieee754_pow+0x3b8>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	460f      	mov	r7, r1
 8007f30:	4620      	mov	r0, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7f8 fb46 	bl	80005c4 <__aeabi_dmul>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4682      	mov	sl, r0
 8007f3c:	468b      	mov	fp, r1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	4b54      	ldr	r3, [pc, #336]	; (8008094 <__ieee754_pow+0x3d4>)
 8007f44:	f7f8 fb3e 	bl	80005c4 <__aeabi_dmul>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	a14c      	add	r1, pc, #304	; (adr r1, 8008080 <__ieee754_pow+0x3c0>)
 8007f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f52:	f7f8 f97f 	bl	8000254 <__aeabi_dsub>
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	f7f8 fb33 	bl	80005c4 <__aeabi_dmul>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	2000      	movs	r0, #0
 8007f64:	494c      	ldr	r1, [pc, #304]	; (8008098 <__ieee754_pow+0x3d8>)
 8007f66:	f7f8 f975 	bl	8000254 <__aeabi_dsub>
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fb25 	bl	80005c4 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4649      	mov	r1, r9
 8007f82:	f7f8 fb1f 	bl	80005c4 <__aeabi_dmul>
 8007f86:	a340      	add	r3, pc, #256	; (adr r3, 8008088 <__ieee754_pow+0x3c8>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fb1a 	bl	80005c4 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4650      	mov	r0, sl
 8007f96:	4659      	mov	r1, fp
 8007f98:	f7f8 f95c 	bl	8000254 <__aeabi_dsub>
 8007f9c:	f04f 0a00 	mov.w	sl, #0
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 f954 	bl	8000258 <__adddf3>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	f7f8 f94c 	bl	8000254 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	f7f8 f946 	bl	8000254 <__aeabi_dsub>
 8007fc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fcc:	9b00      	ldr	r3, [sp, #0]
 8007fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f04f 0600 	mov.w	r6, #0
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	bf0c      	ite	eq
 8007fde:	4b2f      	ldreq	r3, [pc, #188]	; (800809c <__ieee754_pow+0x3dc>)
 8007fe0:	4b2b      	ldrne	r3, [pc, #172]	; (8008090 <__ieee754_pow+0x3d0>)
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fea:	e9cd 2300 	strd	r2, r3, [sp]
 8007fee:	4632      	mov	r2, r6
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	f7f8 f92f 	bl	8000254 <__aeabi_dsub>
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	f7f8 fae3 	bl	80005c4 <__aeabi_dmul>
 8007ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008002:	4680      	mov	r8, r0
 8008004:	4689      	mov	r9, r1
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fadb 	bl	80005c4 <__aeabi_dmul>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	f7f8 f91f 	bl	8000258 <__adddf3>
 800801a:	4632      	mov	r2, r6
 800801c:	463b      	mov	r3, r7
 800801e:	4680      	mov	r8, r0
 8008020:	4689      	mov	r9, r1
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 facd 	bl	80005c4 <__aeabi_dmul>
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	460b      	mov	r3, r1
 8008030:	4602      	mov	r2, r0
 8008032:	4649      	mov	r1, r9
 8008034:	4640      	mov	r0, r8
 8008036:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800803a:	f7f8 f90d 	bl	8000258 <__adddf3>
 800803e:	4b18      	ldr	r3, [pc, #96]	; (80080a0 <__ieee754_pow+0x3e0>)
 8008040:	4682      	mov	sl, r0
 8008042:	4299      	cmp	r1, r3
 8008044:	460f      	mov	r7, r1
 8008046:	460e      	mov	r6, r1
 8008048:	f340 82e5 	ble.w	8008616 <__ieee754_pow+0x956>
 800804c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008050:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008054:	4303      	orrs	r3, r0
 8008056:	f000 81df 	beq.w	8008418 <__ieee754_pow+0x758>
 800805a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	f7f8 fd21 	bl	8000aa8 <__aeabi_dcmplt>
 8008066:	3800      	subs	r0, #0
 8008068:	bf18      	it	ne
 800806a:	2001      	movne	r0, #1
 800806c:	e72e      	b.n	8007ecc <__ieee754_pow+0x20c>
 800806e:	bf00      	nop
 8008070:	60000000 	.word	0x60000000
 8008074:	3ff71547 	.word	0x3ff71547
 8008078:	f85ddf44 	.word	0xf85ddf44
 800807c:	3e54ae0b 	.word	0x3e54ae0b
 8008080:	55555555 	.word	0x55555555
 8008084:	3fd55555 	.word	0x3fd55555
 8008088:	652b82fe 	.word	0x652b82fe
 800808c:	3ff71547 	.word	0x3ff71547
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	3fd00000 	.word	0x3fd00000
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	bff00000 	.word	0xbff00000
 80080a0:	408fffff 	.word	0x408fffff
 80080a4:	4bd2      	ldr	r3, [pc, #840]	; (80083f0 <__ieee754_pow+0x730>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	402b      	ands	r3, r5
 80080aa:	b943      	cbnz	r3, 80080be <__ieee754_pow+0x3fe>
 80080ac:	4658      	mov	r0, fp
 80080ae:	4661      	mov	r1, ip
 80080b0:	4bd0      	ldr	r3, [pc, #832]	; (80083f4 <__ieee754_pow+0x734>)
 80080b2:	f7f8 fa87 	bl	80005c4 <__aeabi_dmul>
 80080b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080ba:	4683      	mov	fp, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	1523      	asrs	r3, r4, #20
 80080c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080c4:	4413      	add	r3, r2
 80080c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c8:	4bcb      	ldr	r3, [pc, #812]	; (80083f8 <__ieee754_pow+0x738>)
 80080ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80080ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80080d2:	429c      	cmp	r4, r3
 80080d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080d8:	dd08      	ble.n	80080ec <__ieee754_pow+0x42c>
 80080da:	4bc8      	ldr	r3, [pc, #800]	; (80083fc <__ieee754_pow+0x73c>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	f340 8199 	ble.w	8008414 <__ieee754_pow+0x754>
 80080e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80080e8:	3301      	adds	r3, #1
 80080ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ec:	2600      	movs	r6, #0
 80080ee:	00f3      	lsls	r3, r6, #3
 80080f0:	930d      	str	r3, [sp, #52]	; 0x34
 80080f2:	4bc3      	ldr	r3, [pc, #780]	; (8008400 <__ieee754_pow+0x740>)
 80080f4:	4658      	mov	r0, fp
 80080f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080fe:	4629      	mov	r1, r5
 8008100:	461a      	mov	r2, r3
 8008102:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008106:	4623      	mov	r3, r4
 8008108:	f7f8 f8a4 	bl	8000254 <__aeabi_dsub>
 800810c:	46da      	mov	sl, fp
 800810e:	462b      	mov	r3, r5
 8008110:	4652      	mov	r2, sl
 8008112:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800811a:	f7f8 f89d 	bl	8000258 <__adddf3>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	2000      	movs	r0, #0
 8008124:	49b7      	ldr	r1, [pc, #732]	; (8008404 <__ieee754_pow+0x744>)
 8008126:	f7f8 fb77 	bl	8000818 <__aeabi_ddiv>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008132:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008136:	f7f8 fa45 	bl	80005c4 <__aeabi_dmul>
 800813a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800813e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008142:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008146:	2300      	movs	r3, #0
 8008148:	2200      	movs	r2, #0
 800814a:	46ab      	mov	fp, r5
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008158:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800815c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	4614      	mov	r4, r2
 8008166:	461d      	mov	r5, r3
 8008168:	f7f8 fa2c 	bl	80005c4 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008174:	f7f8 f86e 	bl	8000254 <__aeabi_dsub>
 8008178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f8 f866 	bl	8000254 <__aeabi_dsub>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4650      	mov	r0, sl
 800818e:	4659      	mov	r1, fp
 8008190:	f7f8 f860 	bl	8000254 <__aeabi_dsub>
 8008194:	4642      	mov	r2, r8
 8008196:	464b      	mov	r3, r9
 8008198:	f7f8 fa14 	bl	80005c4 <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f8 f856 	bl	8000254 <__aeabi_dsub>
 80081a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081ac:	f7f8 fa0a 	bl	80005c4 <__aeabi_dmul>
 80081b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081b8:	4610      	mov	r0, r2
 80081ba:	4619      	mov	r1, r3
 80081bc:	f7f8 fa02 	bl	80005c4 <__aeabi_dmul>
 80081c0:	a379      	add	r3, pc, #484	; (adr r3, 80083a8 <__ieee754_pow+0x6e8>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	4604      	mov	r4, r0
 80081c8:	460d      	mov	r5, r1
 80081ca:	f7f8 f9fb 	bl	80005c4 <__aeabi_dmul>
 80081ce:	a378      	add	r3, pc, #480	; (adr r3, 80083b0 <__ieee754_pow+0x6f0>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f8 f840 	bl	8000258 <__adddf3>
 80081d8:	4622      	mov	r2, r4
 80081da:	462b      	mov	r3, r5
 80081dc:	f7f8 f9f2 	bl	80005c4 <__aeabi_dmul>
 80081e0:	a375      	add	r3, pc, #468	; (adr r3, 80083b8 <__ieee754_pow+0x6f8>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f8 f837 	bl	8000258 <__adddf3>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	f7f8 f9e9 	bl	80005c4 <__aeabi_dmul>
 80081f2:	a373      	add	r3, pc, #460	; (adr r3, 80083c0 <__ieee754_pow+0x700>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 f82e 	bl	8000258 <__adddf3>
 80081fc:	4622      	mov	r2, r4
 80081fe:	462b      	mov	r3, r5
 8008200:	f7f8 f9e0 	bl	80005c4 <__aeabi_dmul>
 8008204:	a370      	add	r3, pc, #448	; (adr r3, 80083c8 <__ieee754_pow+0x708>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f8 f825 	bl	8000258 <__adddf3>
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	f7f8 f9d7 	bl	80005c4 <__aeabi_dmul>
 8008216:	a36e      	add	r3, pc, #440	; (adr r3, 80083d0 <__ieee754_pow+0x710>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f81c 	bl	8000258 <__adddf3>
 8008220:	4622      	mov	r2, r4
 8008222:	4606      	mov	r6, r0
 8008224:	460f      	mov	r7, r1
 8008226:	462b      	mov	r3, r5
 8008228:	4620      	mov	r0, r4
 800822a:	4629      	mov	r1, r5
 800822c:	f7f8 f9ca 	bl	80005c4 <__aeabi_dmul>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f7f8 f9c4 	bl	80005c4 <__aeabi_dmul>
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	f7f8 f806 	bl	8000258 <__adddf3>
 800824c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008250:	f7f8 f9b8 	bl	80005c4 <__aeabi_dmul>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	f7f7 fffe 	bl	8000258 <__adddf3>
 800825c:	4642      	mov	r2, r8
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	464b      	mov	r3, r9
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 f9ac 	bl	80005c4 <__aeabi_dmul>
 800826c:	2200      	movs	r2, #0
 800826e:	4b66      	ldr	r3, [pc, #408]	; (8008408 <__ieee754_pow+0x748>)
 8008270:	4682      	mov	sl, r0
 8008272:	468b      	mov	fp, r1
 8008274:	f7f7 fff0 	bl	8000258 <__adddf3>
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	f7f7 ffec 	bl	8000258 <__adddf3>
 8008280:	2400      	movs	r4, #0
 8008282:	460d      	mov	r5, r1
 8008284:	4622      	mov	r2, r4
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 f99a 	bl	80005c4 <__aeabi_dmul>
 8008290:	2200      	movs	r2, #0
 8008292:	4680      	mov	r8, r0
 8008294:	4689      	mov	r9, r1
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	4b5b      	ldr	r3, [pc, #364]	; (8008408 <__ieee754_pow+0x748>)
 800829c:	f7f7 ffda 	bl	8000254 <__aeabi_dsub>
 80082a0:	4652      	mov	r2, sl
 80082a2:	465b      	mov	r3, fp
 80082a4:	f7f7 ffd6 	bl	8000254 <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f7 ffd0 	bl	8000254 <__aeabi_dsub>
 80082b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b8:	f7f8 f984 	bl	80005c4 <__aeabi_dmul>
 80082bc:	4622      	mov	r2, r4
 80082be:	4606      	mov	r6, r0
 80082c0:	460f      	mov	r7, r1
 80082c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082c6:	462b      	mov	r3, r5
 80082c8:	f7f8 f97c 	bl	80005c4 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4630      	mov	r0, r6
 80082d2:	4639      	mov	r1, r7
 80082d4:	f7f7 ffc0 	bl	8000258 <__adddf3>
 80082d8:	2400      	movs	r4, #0
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f7 ffb7 	bl	8000258 <__adddf3>
 80082ea:	a33b      	add	r3, pc, #236	; (adr r3, 80083d8 <__ieee754_pow+0x718>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	4620      	mov	r0, r4
 80082f2:	460d      	mov	r5, r1
 80082f4:	f7f8 f966 	bl	80005c4 <__aeabi_dmul>
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008300:	4620      	mov	r0, r4
 8008302:	4629      	mov	r1, r5
 8008304:	f7f7 ffa6 	bl	8000254 <__aeabi_dsub>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f7 ffa0 	bl	8000254 <__aeabi_dsub>
 8008314:	a332      	add	r3, pc, #200	; (adr r3, 80083e0 <__ieee754_pow+0x720>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f8 f953 	bl	80005c4 <__aeabi_dmul>
 800831e:	a332      	add	r3, pc, #200	; (adr r3, 80083e8 <__ieee754_pow+0x728>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	4620      	mov	r0, r4
 800832a:	4629      	mov	r1, r5
 800832c:	f7f8 f94a 	bl	80005c4 <__aeabi_dmul>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f7 ff8e 	bl	8000258 <__adddf3>
 800833c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800833e:	4b33      	ldr	r3, [pc, #204]	; (800840c <__ieee754_pow+0x74c>)
 8008340:	f04f 0a00 	mov.w	sl, #0
 8008344:	4413      	add	r3, r2
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ff85 	bl	8000258 <__adddf3>
 800834e:	4680      	mov	r8, r0
 8008350:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008352:	4689      	mov	r9, r1
 8008354:	f7f8 f8cc 	bl	80004f0 <__aeabi_i2d>
 8008358:	4604      	mov	r4, r0
 800835a:	460d      	mov	r5, r1
 800835c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800835e:	4b2c      	ldr	r3, [pc, #176]	; (8008410 <__ieee754_pow+0x750>)
 8008360:	4413      	add	r3, r2
 8008362:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008366:	4642      	mov	r2, r8
 8008368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800836c:	464b      	mov	r3, r9
 800836e:	f7f7 ff73 	bl	8000258 <__adddf3>
 8008372:	4632      	mov	r2, r6
 8008374:	463b      	mov	r3, r7
 8008376:	f7f7 ff6f 	bl	8000258 <__adddf3>
 800837a:	4622      	mov	r2, r4
 800837c:	462b      	mov	r3, r5
 800837e:	f7f7 ff6b 	bl	8000258 <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	4650      	mov	r0, sl
 8008388:	468b      	mov	fp, r1
 800838a:	f7f7 ff63 	bl	8000254 <__aeabi_dsub>
 800838e:	4632      	mov	r2, r6
 8008390:	463b      	mov	r3, r7
 8008392:	f7f7 ff5f 	bl	8000254 <__aeabi_dsub>
 8008396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800839a:	f7f7 ff5b 	bl	8000254 <__aeabi_dsub>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4640      	mov	r0, r8
 80083a4:	4649      	mov	r1, r9
 80083a6:	e60d      	b.n	8007fc4 <__ieee754_pow+0x304>
 80083a8:	4a454eef 	.word	0x4a454eef
 80083ac:	3fca7e28 	.word	0x3fca7e28
 80083b0:	93c9db65 	.word	0x93c9db65
 80083b4:	3fcd864a 	.word	0x3fcd864a
 80083b8:	a91d4101 	.word	0xa91d4101
 80083bc:	3fd17460 	.word	0x3fd17460
 80083c0:	518f264d 	.word	0x518f264d
 80083c4:	3fd55555 	.word	0x3fd55555
 80083c8:	db6fabff 	.word	0xdb6fabff
 80083cc:	3fdb6db6 	.word	0x3fdb6db6
 80083d0:	33333303 	.word	0x33333303
 80083d4:	3fe33333 	.word	0x3fe33333
 80083d8:	e0000000 	.word	0xe0000000
 80083dc:	3feec709 	.word	0x3feec709
 80083e0:	dc3a03fd 	.word	0xdc3a03fd
 80083e4:	3feec709 	.word	0x3feec709
 80083e8:	145b01f5 	.word	0x145b01f5
 80083ec:	be3e2fe0 	.word	0xbe3e2fe0
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	43400000 	.word	0x43400000
 80083f8:	0003988e 	.word	0x0003988e
 80083fc:	000bb679 	.word	0x000bb679
 8008400:	0800aa88 	.word	0x0800aa88
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	40080000 	.word	0x40080000
 800840c:	0800aaa8 	.word	0x0800aaa8
 8008410:	0800aa98 	.word	0x0800aa98
 8008414:	2601      	movs	r6, #1
 8008416:	e66a      	b.n	80080ee <__ieee754_pow+0x42e>
 8008418:	a39d      	add	r3, pc, #628	; (adr r3, 8008690 <__ieee754_pow+0x9d0>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	4640      	mov	r0, r8
 8008420:	4649      	mov	r1, r9
 8008422:	f7f7 ff19 	bl	8000258 <__adddf3>
 8008426:	4622      	mov	r2, r4
 8008428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800842c:	462b      	mov	r3, r5
 800842e:	4650      	mov	r0, sl
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 ff0f 	bl	8000254 <__aeabi_dsub>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843e:	f7f8 fb51 	bl	8000ae4 <__aeabi_dcmpgt>
 8008442:	2800      	cmp	r0, #0
 8008444:	f47f ae09 	bne.w	800805a <__ieee754_pow+0x39a>
 8008448:	4aa3      	ldr	r2, [pc, #652]	; (80086d8 <__ieee754_pow+0xa18>)
 800844a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800844e:	4293      	cmp	r3, r2
 8008450:	f340 8101 	ble.w	8008656 <__ieee754_pow+0x996>
 8008454:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008458:	2000      	movs	r0, #0
 800845a:	151b      	asrs	r3, r3, #20
 800845c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008460:	fa4a f303 	asr.w	r3, sl, r3
 8008464:	4433      	add	r3, r6
 8008466:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800846a:	4f9c      	ldr	r7, [pc, #624]	; (80086dc <__ieee754_pow+0xa1c>)
 800846c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008470:	4117      	asrs	r7, r2
 8008472:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008476:	ea23 0107 	bic.w	r1, r3, r7
 800847a:	f1c2 0214 	rsb	r2, r2, #20
 800847e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008482:	460b      	mov	r3, r1
 8008484:	fa4a fa02 	asr.w	sl, sl, r2
 8008488:	2e00      	cmp	r6, #0
 800848a:	4602      	mov	r2, r0
 800848c:	4629      	mov	r1, r5
 800848e:	4620      	mov	r0, r4
 8008490:	bfb8      	it	lt
 8008492:	f1ca 0a00 	rsblt	sl, sl, #0
 8008496:	f7f7 fedd 	bl	8000254 <__aeabi_dsub>
 800849a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800849e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a2:	2400      	movs	r4, #0
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	f7f7 fed6 	bl	8000258 <__adddf3>
 80084ac:	a37a      	add	r3, pc, #488	; (adr r3, 8008698 <__ieee754_pow+0x9d8>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	4620      	mov	r0, r4
 80084b4:	460d      	mov	r5, r1
 80084b6:	f7f8 f885 	bl	80005c4 <__aeabi_dmul>
 80084ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	4620      	mov	r0, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	f7f7 fec5 	bl	8000254 <__aeabi_dsub>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f7f7 febf 	bl	8000254 <__aeabi_dsub>
 80084d6:	a372      	add	r3, pc, #456	; (adr r3, 80086a0 <__ieee754_pow+0x9e0>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f8 f872 	bl	80005c4 <__aeabi_dmul>
 80084e0:	a371      	add	r3, pc, #452	; (adr r3, 80086a8 <__ieee754_pow+0x9e8>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	4680      	mov	r8, r0
 80084e8:	4689      	mov	r9, r1
 80084ea:	4620      	mov	r0, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	f7f8 f869 	bl	80005c4 <__aeabi_dmul>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f7 fead 	bl	8000258 <__adddf3>
 80084fe:	4604      	mov	r4, r0
 8008500:	460d      	mov	r5, r1
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4630      	mov	r0, r6
 8008508:	4639      	mov	r1, r7
 800850a:	f7f7 fea5 	bl	8000258 <__adddf3>
 800850e:	4632      	mov	r2, r6
 8008510:	463b      	mov	r3, r7
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	f7f7 fe9d 	bl	8000254 <__aeabi_dsub>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f7 fe97 	bl	8000254 <__aeabi_dsub>
 8008526:	4642      	mov	r2, r8
 8008528:	4606      	mov	r6, r0
 800852a:	460f      	mov	r7, r1
 800852c:	464b      	mov	r3, r9
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f8 f847 	bl	80005c4 <__aeabi_dmul>
 8008536:	a35e      	add	r3, pc, #376	; (adr r3, 80086b0 <__ieee754_pow+0x9f0>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4604      	mov	r4, r0
 800853e:	460d      	mov	r5, r1
 8008540:	f7f8 f840 	bl	80005c4 <__aeabi_dmul>
 8008544:	a35c      	add	r3, pc, #368	; (adr r3, 80086b8 <__ieee754_pow+0x9f8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fe83 	bl	8000254 <__aeabi_dsub>
 800854e:	4622      	mov	r2, r4
 8008550:	462b      	mov	r3, r5
 8008552:	f7f8 f837 	bl	80005c4 <__aeabi_dmul>
 8008556:	a35a      	add	r3, pc, #360	; (adr r3, 80086c0 <__ieee754_pow+0xa00>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe7c 	bl	8000258 <__adddf3>
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	f7f8 f82e 	bl	80005c4 <__aeabi_dmul>
 8008568:	a357      	add	r3, pc, #348	; (adr r3, 80086c8 <__ieee754_pow+0xa08>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f7 fe71 	bl	8000254 <__aeabi_dsub>
 8008572:	4622      	mov	r2, r4
 8008574:	462b      	mov	r3, r5
 8008576:	f7f8 f825 	bl	80005c4 <__aeabi_dmul>
 800857a:	a355      	add	r3, pc, #340	; (adr r3, 80086d0 <__ieee754_pow+0xa10>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f7f7 fe6a 	bl	8000258 <__adddf3>
 8008584:	4622      	mov	r2, r4
 8008586:	462b      	mov	r3, r5
 8008588:	f7f8 f81c 	bl	80005c4 <__aeabi_dmul>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 fe5e 	bl	8000254 <__aeabi_dsub>
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f8 f80e 	bl	80005c4 <__aeabi_dmul>
 80085a8:	2200      	movs	r2, #0
 80085aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085b2:	4620      	mov	r0, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f7 fe4d 	bl	8000254 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c2:	f7f8 f929 	bl	8000818 <__aeabi_ddiv>
 80085c6:	4632      	mov	r2, r6
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	463b      	mov	r3, r7
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 fff7 	bl	80005c4 <__aeabi_dmul>
 80085d6:	4632      	mov	r2, r6
 80085d8:	463b      	mov	r3, r7
 80085da:	f7f7 fe3d 	bl	8000258 <__adddf3>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4620      	mov	r0, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7f7 fe35 	bl	8000254 <__aeabi_dsub>
 80085ea:	4642      	mov	r2, r8
 80085ec:	464b      	mov	r3, r9
 80085ee:	f7f7 fe31 	bl	8000254 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	2000      	movs	r0, #0
 80085f8:	4939      	ldr	r1, [pc, #228]	; (80086e0 <__ieee754_pow+0xa20>)
 80085fa:	f7f7 fe2b 	bl	8000254 <__aeabi_dsub>
 80085fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008602:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008606:	da29      	bge.n	800865c <__ieee754_pow+0x99c>
 8008608:	4652      	mov	r2, sl
 800860a:	f000 f955 	bl	80088b8 <scalbn>
 800860e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008612:	f7ff bbfe 	b.w	8007e12 <__ieee754_pow+0x152>
 8008616:	4b33      	ldr	r3, [pc, #204]	; (80086e4 <__ieee754_pow+0xa24>)
 8008618:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800861c:	429f      	cmp	r7, r3
 800861e:	f77f af13 	ble.w	8008448 <__ieee754_pow+0x788>
 8008622:	4b31      	ldr	r3, [pc, #196]	; (80086e8 <__ieee754_pow+0xa28>)
 8008624:	440b      	add	r3, r1
 8008626:	4303      	orrs	r3, r0
 8008628:	d009      	beq.n	800863e <__ieee754_pow+0x97e>
 800862a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862e:	2200      	movs	r2, #0
 8008630:	2300      	movs	r3, #0
 8008632:	f7f8 fa39 	bl	8000aa8 <__aeabi_dcmplt>
 8008636:	3800      	subs	r0, #0
 8008638:	bf18      	it	ne
 800863a:	2001      	movne	r0, #1
 800863c:	e453      	b.n	8007ee6 <__ieee754_pow+0x226>
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	f7f7 fe07 	bl	8000254 <__aeabi_dsub>
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	f7f8 fa41 	bl	8000ad0 <__aeabi_dcmpge>
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f aefa 	beq.w	8008448 <__ieee754_pow+0x788>
 8008654:	e7e9      	b.n	800862a <__ieee754_pow+0x96a>
 8008656:	f04f 0a00 	mov.w	sl, #0
 800865a:	e720      	b.n	800849e <__ieee754_pow+0x7de>
 800865c:	4621      	mov	r1, r4
 800865e:	e7d6      	b.n	800860e <__ieee754_pow+0x94e>
 8008660:	f04f 0b00 	mov.w	fp, #0
 8008664:	f8df c078 	ldr.w	ip, [pc, #120]	; 80086e0 <__ieee754_pow+0xa20>
 8008668:	f7ff bbba 	b.w	8007de0 <__ieee754_pow+0x120>
 800866c:	f04f 0b00 	mov.w	fp, #0
 8008670:	f04f 0c00 	mov.w	ip, #0
 8008674:	f7ff bbb4 	b.w	8007de0 <__ieee754_pow+0x120>
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7ff bb3d 	b.w	8007cfa <__ieee754_pow+0x3a>
 8008680:	9200      	str	r2, [sp, #0]
 8008682:	f7ff bb89 	b.w	8007d98 <__ieee754_pow+0xd8>
 8008686:	2300      	movs	r3, #0
 8008688:	f7ff bb73 	b.w	8007d72 <__ieee754_pow+0xb2>
 800868c:	f3af 8000 	nop.w
 8008690:	652b82fe 	.word	0x652b82fe
 8008694:	3c971547 	.word	0x3c971547
 8008698:	00000000 	.word	0x00000000
 800869c:	3fe62e43 	.word	0x3fe62e43
 80086a0:	fefa39ef 	.word	0xfefa39ef
 80086a4:	3fe62e42 	.word	0x3fe62e42
 80086a8:	0ca86c39 	.word	0x0ca86c39
 80086ac:	be205c61 	.word	0xbe205c61
 80086b0:	72bea4d0 	.word	0x72bea4d0
 80086b4:	3e663769 	.word	0x3e663769
 80086b8:	c5d26bf1 	.word	0xc5d26bf1
 80086bc:	3ebbbd41 	.word	0x3ebbbd41
 80086c0:	af25de2c 	.word	0xaf25de2c
 80086c4:	3f11566a 	.word	0x3f11566a
 80086c8:	16bebd93 	.word	0x16bebd93
 80086cc:	3f66c16c 	.word	0x3f66c16c
 80086d0:	5555553e 	.word	0x5555553e
 80086d4:	3fc55555 	.word	0x3fc55555
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	000fffff 	.word	0x000fffff
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	4090cbff 	.word	0x4090cbff
 80086e8:	3f6f3400 	.word	0x3f6f3400

080086ec <__ieee754_sqrt>:
 80086ec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008848 <__ieee754_sqrt+0x15c>
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80086f8:	4606      	mov	r6, r0
 80086fa:	460d      	mov	r5, r1
 80086fc:	460c      	mov	r4, r1
 80086fe:	460a      	mov	r2, r1
 8008700:	4607      	mov	r7, r0
 8008702:	4603      	mov	r3, r0
 8008704:	d10f      	bne.n	8008726 <__ieee754_sqrt+0x3a>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	f7f7 ff5b 	bl	80005c4 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4630      	mov	r0, r6
 8008714:	4629      	mov	r1, r5
 8008716:	f7f7 fd9f 	bl	8000258 <__adddf3>
 800871a:	4606      	mov	r6, r0
 800871c:	460d      	mov	r5, r1
 800871e:	4630      	mov	r0, r6
 8008720:	4629      	mov	r1, r5
 8008722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008726:	2900      	cmp	r1, #0
 8008728:	dc0e      	bgt.n	8008748 <__ieee754_sqrt+0x5c>
 800872a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800872e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008732:	d0f4      	beq.n	800871e <__ieee754_sqrt+0x32>
 8008734:	b141      	cbz	r1, 8008748 <__ieee754_sqrt+0x5c>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	f7f7 fd8b 	bl	8000254 <__aeabi_dsub>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	f7f8 f869 	bl	8000818 <__aeabi_ddiv>
 8008746:	e7e8      	b.n	800871a <__ieee754_sqrt+0x2e>
 8008748:	1521      	asrs	r1, r4, #20
 800874a:	d075      	beq.n	8008838 <__ieee754_sqrt+0x14c>
 800874c:	07cc      	lsls	r4, r1, #31
 800874e:	f04f 0400 	mov.w	r4, #0
 8008752:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008756:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800875a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800875e:	bf5e      	ittt	pl
 8008760:	0fd9      	lsrpl	r1, r3, #31
 8008762:	005b      	lslpl	r3, r3, #1
 8008764:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008768:	0fd9      	lsrs	r1, r3, #31
 800876a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800876e:	2516      	movs	r5, #22
 8008770:	4620      	mov	r0, r4
 8008772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008776:	107f      	asrs	r7, r7, #1
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	1846      	adds	r6, r0, r1
 800877c:	4296      	cmp	r6, r2
 800877e:	bfde      	ittt	le
 8008780:	1b92      	suble	r2, r2, r6
 8008782:	1870      	addle	r0, r6, r1
 8008784:	1864      	addle	r4, r4, r1
 8008786:	0052      	lsls	r2, r2, #1
 8008788:	3d01      	subs	r5, #1
 800878a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800878e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008796:	d1f0      	bne.n	800877a <__ieee754_sqrt+0x8e>
 8008798:	4629      	mov	r1, r5
 800879a:	f04f 0e20 	mov.w	lr, #32
 800879e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087a2:	4282      	cmp	r2, r0
 80087a4:	eb06 0c05 	add.w	ip, r6, r5
 80087a8:	dc02      	bgt.n	80087b0 <__ieee754_sqrt+0xc4>
 80087aa:	d113      	bne.n	80087d4 <__ieee754_sqrt+0xe8>
 80087ac:	459c      	cmp	ip, r3
 80087ae:	d811      	bhi.n	80087d4 <__ieee754_sqrt+0xe8>
 80087b0:	f1bc 0f00 	cmp.w	ip, #0
 80087b4:	eb0c 0506 	add.w	r5, ip, r6
 80087b8:	da43      	bge.n	8008842 <__ieee754_sqrt+0x156>
 80087ba:	2d00      	cmp	r5, #0
 80087bc:	db41      	blt.n	8008842 <__ieee754_sqrt+0x156>
 80087be:	f100 0801 	add.w	r8, r0, #1
 80087c2:	1a12      	subs	r2, r2, r0
 80087c4:	4640      	mov	r0, r8
 80087c6:	459c      	cmp	ip, r3
 80087c8:	bf88      	it	hi
 80087ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80087ce:	eba3 030c 	sub.w	r3, r3, ip
 80087d2:	4431      	add	r1, r6
 80087d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087d8:	f1be 0e01 	subs.w	lr, lr, #1
 80087dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80087e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80087e8:	d1db      	bne.n	80087a2 <__ieee754_sqrt+0xb6>
 80087ea:	4313      	orrs	r3, r2
 80087ec:	d006      	beq.n	80087fc <__ieee754_sqrt+0x110>
 80087ee:	1c48      	adds	r0, r1, #1
 80087f0:	bf0b      	itete	eq
 80087f2:	4671      	moveq	r1, lr
 80087f4:	3101      	addne	r1, #1
 80087f6:	3401      	addeq	r4, #1
 80087f8:	f021 0101 	bicne.w	r1, r1, #1
 80087fc:	1063      	asrs	r3, r4, #1
 80087fe:	0849      	lsrs	r1, r1, #1
 8008800:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008804:	07e2      	lsls	r2, r4, #31
 8008806:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800880a:	bf48      	it	mi
 800880c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008810:	460e      	mov	r6, r1
 8008812:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008816:	e782      	b.n	800871e <__ieee754_sqrt+0x32>
 8008818:	0ada      	lsrs	r2, r3, #11
 800881a:	3815      	subs	r0, #21
 800881c:	055b      	lsls	r3, r3, #21
 800881e:	2a00      	cmp	r2, #0
 8008820:	d0fa      	beq.n	8008818 <__ieee754_sqrt+0x12c>
 8008822:	02d5      	lsls	r5, r2, #11
 8008824:	d50a      	bpl.n	800883c <__ieee754_sqrt+0x150>
 8008826:	f1c1 0420 	rsb	r4, r1, #32
 800882a:	fa23 f404 	lsr.w	r4, r3, r4
 800882e:	1e4d      	subs	r5, r1, #1
 8008830:	408b      	lsls	r3, r1
 8008832:	4322      	orrs	r2, r4
 8008834:	1b41      	subs	r1, r0, r5
 8008836:	e789      	b.n	800874c <__ieee754_sqrt+0x60>
 8008838:	4608      	mov	r0, r1
 800883a:	e7f0      	b.n	800881e <__ieee754_sqrt+0x132>
 800883c:	0052      	lsls	r2, r2, #1
 800883e:	3101      	adds	r1, #1
 8008840:	e7ef      	b.n	8008822 <__ieee754_sqrt+0x136>
 8008842:	4680      	mov	r8, r0
 8008844:	e7bd      	b.n	80087c2 <__ieee754_sqrt+0xd6>
 8008846:	bf00      	nop
 8008848:	7ff00000 	.word	0x7ff00000

0800884c <with_errno>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4604      	mov	r4, r0
 8008850:	460d      	mov	r5, r1
 8008852:	4616      	mov	r6, r2
 8008854:	f7fd fecc 	bl	80065f0 <__errno>
 8008858:	4629      	mov	r1, r5
 800885a:	6006      	str	r6, [r0, #0]
 800885c:	4620      	mov	r0, r4
 800885e:	bd70      	pop	{r4, r5, r6, pc}

08008860 <xflow>:
 8008860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008862:	4615      	mov	r5, r2
 8008864:	461c      	mov	r4, r3
 8008866:	b180      	cbz	r0, 800888a <xflow+0x2a>
 8008868:	4610      	mov	r0, r2
 800886a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800886e:	e9cd 0100 	strd	r0, r1, [sp]
 8008872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008876:	4628      	mov	r0, r5
 8008878:	4621      	mov	r1, r4
 800887a:	f7f7 fea3 	bl	80005c4 <__aeabi_dmul>
 800887e:	2222      	movs	r2, #34	; 0x22
 8008880:	b003      	add	sp, #12
 8008882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008886:	f7ff bfe1 	b.w	800884c <with_errno>
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	e7ee      	b.n	800886e <xflow+0xe>

08008890 <__math_uflow>:
 8008890:	2200      	movs	r2, #0
 8008892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008896:	f7ff bfe3 	b.w	8008860 <xflow>

0800889a <__math_oflow>:
 800889a:	2200      	movs	r2, #0
 800889c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80088a0:	f7ff bfde 	b.w	8008860 <xflow>

080088a4 <fabs>:
 80088a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088a8:	4770      	bx	lr

080088aa <finite>:
 80088aa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80088ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80088b2:	0fc0      	lsrs	r0, r0, #31
 80088b4:	4770      	bx	lr
	...

080088b8 <scalbn>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	4617      	mov	r7, r2
 80088c4:	460b      	mov	r3, r1
 80088c6:	b996      	cbnz	r6, 80088ee <scalbn+0x36>
 80088c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088cc:	4303      	orrs	r3, r0
 80088ce:	d039      	beq.n	8008944 <scalbn+0x8c>
 80088d0:	4b33      	ldr	r3, [pc, #204]	; (80089a0 <scalbn+0xe8>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fe76 	bl	80005c4 <__aeabi_dmul>
 80088d8:	4b32      	ldr	r3, [pc, #200]	; (80089a4 <scalbn+0xec>)
 80088da:	4604      	mov	r4, r0
 80088dc:	429f      	cmp	r7, r3
 80088de:	460d      	mov	r5, r1
 80088e0:	da0f      	bge.n	8008902 <scalbn+0x4a>
 80088e2:	a32b      	add	r3, pc, #172	; (adr r3, 8008990 <scalbn+0xd8>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f7f7 fe6c 	bl	80005c4 <__aeabi_dmul>
 80088ec:	e006      	b.n	80088fc <scalbn+0x44>
 80088ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80088f2:	4296      	cmp	r6, r2
 80088f4:	d10a      	bne.n	800890c <scalbn+0x54>
 80088f6:	4602      	mov	r2, r0
 80088f8:	f7f7 fcae 	bl	8000258 <__adddf3>
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	e020      	b.n	8008944 <scalbn+0x8c>
 8008902:	460b      	mov	r3, r1
 8008904:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008908:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800890c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008910:	19b9      	adds	r1, r7, r6
 8008912:	4291      	cmp	r1, r2
 8008914:	dd0e      	ble.n	8008934 <scalbn+0x7c>
 8008916:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800891a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800891e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008922:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008926:	4820      	ldr	r0, [pc, #128]	; (80089a8 <scalbn+0xf0>)
 8008928:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800892c:	a31a      	add	r3, pc, #104	; (adr r3, 8008998 <scalbn+0xe0>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	e7d9      	b.n	80088e8 <scalbn+0x30>
 8008934:	2900      	cmp	r1, #0
 8008936:	dd08      	ble.n	800894a <scalbn+0x92>
 8008938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800893c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008940:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800894e:	da12      	bge.n	8008976 <scalbn+0xbe>
 8008950:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008954:	429f      	cmp	r7, r3
 8008956:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800895a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800895e:	dcdc      	bgt.n	800891a <scalbn+0x62>
 8008960:	a30b      	add	r3, pc, #44	; (adr r3, 8008990 <scalbn+0xd8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800896a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800896e:	480f      	ldr	r0, [pc, #60]	; (80089ac <scalbn+0xf4>)
 8008970:	f041 011f 	orr.w	r1, r1, #31
 8008974:	e7b8      	b.n	80088e8 <scalbn+0x30>
 8008976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800897a:	3136      	adds	r1, #54	; 0x36
 800897c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008980:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	2200      	movs	r2, #0
 800898a:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <scalbn+0xf8>)
 800898c:	e7ac      	b.n	80088e8 <scalbn+0x30>
 800898e:	bf00      	nop
 8008990:	c2f8f359 	.word	0xc2f8f359
 8008994:	01a56e1f 	.word	0x01a56e1f
 8008998:	8800759c 	.word	0x8800759c
 800899c:	7e37e43c 	.word	0x7e37e43c
 80089a0:	43500000 	.word	0x43500000
 80089a4:	ffff3cb0 	.word	0xffff3cb0
 80089a8:	8800759c 	.word	0x8800759c
 80089ac:	c2f8f359 	.word	0xc2f8f359
 80089b0:	3c900000 	.word	0x3c900000

080089b4 <_init>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr

080089c0 <_fini>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr
