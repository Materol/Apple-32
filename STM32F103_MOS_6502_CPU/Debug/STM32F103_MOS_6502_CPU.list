
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ec4  08000ec4  00010ec4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f04  08000f04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f04  08000f04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f04  08000f04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f04  08000f04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f08  08000f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08000f18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000f18  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094e5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  0002951a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000594e  00000000  00000000  0002ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  000306a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  00030e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a18  00000000  00000000  000318e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af8c  00000000  00000000  0004a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009078b  00000000  00000000  0005528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e5a17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014a4  00000000  00000000  000e5a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08000eac 	.word	0x08000eac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08000eac 	.word	0x08000eac

08000224 <reset6502>:
    read6502(0x00ff);
    read6502(0x00ff);
    read6502(0x0100);
    read6502(0x01ff);
    read6502(0x01fe);
    pc = mem_6502_read16(0xfffc);
 8000224:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <reset6502+0x1c>)
 800022a:	801a      	strh	r2, [r3, #0]
    sp = 0xfd;
 800022c:	22fd      	movs	r2, #253	; 0xfd
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <reset6502+0x20>)
 8000230:	701a      	strb	r2, [r3, #0]
    status |= FLAG_CONSTANT | FLAG_INTERRUPT;
 8000232:	4a05      	ldr	r2, [pc, #20]	; (8000248 <reset6502+0x24>)
 8000234:	7813      	ldrb	r3, [r2, #0]
 8000236:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800023a:	7013      	strb	r3, [r2, #0]
}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20000070 	.word	0x20000070
 8000244:	20000072 	.word	0x20000072
 8000248:	20000073 	.word	0x20000073

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b510      	push	{r4, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	2214      	movs	r2, #20
 8000252:	2100      	movs	r1, #0
 8000254:	a808      	add	r0, sp, #32
 8000256:	f000 fe21 	bl	8000e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	2214      	movs	r2, #20
 800025c:	2100      	movs	r1, #0
 800025e:	a801      	add	r0, sp, #4
 8000260:	f000 fe1c 	bl	8000e9c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000270:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f000 fa81 	bl	8000784 <HAL_RCC_OscConfig>
 8000282:	b108      	cbz	r0, 8000288 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000284:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000286:	e7fe      	b.n	8000286 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	4621      	mov	r1, r4
 800029a:	a801      	add	r0, sp, #4
 800029c:	f000 fc34 	bl	8000b08 <HAL_RCC_ClockConfig>
 80002a0:	b108      	cbz	r0, 80002a6 <SystemClock_Config+0x5a>
 80002a2:	b672      	cpsid	i
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <SystemClock_Config+0x58>
}
 80002a6:	b010      	add	sp, #64	; 0x40
 80002a8:	bd10      	pop	{r4, pc}
	...

080002ac <main>:
{
 80002ac:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80002ae:	f000 f8f3 	bl	8000498 <HAL_Init>
  SystemClock_Config();
 80002b2:	f7ff ffcb 	bl	800024c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <main+0x74>)
  huart1.Instance = USART1;
 80002b8:	4c1a      	ldr	r4, [pc, #104]	; (8000324 <main+0x78>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ba:	699a      	ldr	r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002bc:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002be:	f042 0210 	orr.w	r2, r2, #16
 80002c2:	619a      	str	r2, [r3, #24]
 80002c4:	699a      	ldr	r2, [r3, #24]
 80002c6:	f002 0210 	and.w	r2, r2, #16
 80002ca:	9200      	str	r2, [sp, #0]
 80002cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	699a      	ldr	r2, [r3, #24]
 80002d0:	f042 0204 	orr.w	r2, r2, #4
 80002d4:	619a      	str	r2, [r3, #24]
 80002d6:	699b      	ldr	r3, [r3, #24]
  huart1.Init.BaudRate = 115200;
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <main+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	f003 0304 	and.w	r3, r3, #4
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b01      	ldr	r3, [sp, #4]
  huart1.Init.BaudRate = 115200;
 80002e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002e6:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002ec:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ee:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	6123      	str	r3, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	61e3      	str	r3, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fa:	f000 fd31 	bl	8000d60 <HAL_UART_Init>
 80002fe:	b108      	cbz	r0, 8000304 <main+0x58>
 8000300:	b672      	cpsid	i
  while (1)
 8000302:	e7fe      	b.n	8000302 <main+0x56>
  reset6502();
 8000304:	f7ff ff8e 	bl	8000224 <reset6502>
    HAL_UART_Transmit(&huart1, (uint8_t *)"Apple I Emulator\r\n", 18, 1000);
 8000308:	4d08      	ldr	r5, [pc, #32]	; (800032c <main+0x80>)
 800030a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030e:	2212      	movs	r2, #18
 8000310:	4629      	mov	r1, r5
 8000312:	4620      	mov	r0, r4
 8000314:	f000 fd53 	bl	8000dbe <HAL_UART_Transmit>
    HAL_Delay(100);
 8000318:	2064      	movs	r0, #100	; 0x64
 800031a:	f000 f8e1 	bl	80004e0 <HAL_Delay>
  while (1)
 800031e:	e7f4      	b.n	800030a <main+0x5e>
 8000320:	40021000 	.word	0x40021000
 8000324:	20000028 	.word	0x20000028
 8000328:	40013800 	.word	0x40013800
 800032c:	08000ec4 	.word	0x08000ec4

08000330 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <HAL_MspInit+0x3c>)
{
 8000332:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000334:	699a      	ldr	r2, [r3, #24]
 8000336:	f042 0201 	orr.w	r2, r2, #1
 800033a:	619a      	str	r2, [r3, #24]
 800033c:	699a      	ldr	r2, [r3, #24]
 800033e:	f002 0201 	and.w	r2, r2, #1
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000346:	69da      	ldr	r2, [r3, #28]
 8000348:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800034c:	61da      	str	r2, [r3, #28]
 800034e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800035a:	6853      	ldr	r3, [r2, #4]
 800035c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	b002      	add	sp, #8
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40010000 	.word	0x40010000

08000374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000374:	b510      	push	{r4, lr}
 8000376:	4604      	mov	r4, r0
 8000378:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	2210      	movs	r2, #16
 800037c:	2100      	movs	r1, #0
 800037e:	a802      	add	r0, sp, #8
 8000380:	f000 fd8c 	bl	8000e9c <memset>
  if(huart->Instance==USART1)
 8000384:	6822      	ldr	r2, [r4, #0]
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <HAL_UART_MspInit+0x70>)
 8000388:	429a      	cmp	r2, r3
 800038a:	d128      	bne.n	80003de <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800038c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000390:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	4815      	ldr	r0, [pc, #84]	; (80003e8 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000398:	619a      	str	r2, [r3, #24]
 800039a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800039e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80003a2:	9200      	str	r2, [sp, #0]
 80003a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	699a      	ldr	r2, [r3, #24]
 80003a8:	f042 0204 	orr.w	r2, r2, #4
 80003ac:	619a      	str	r2, [r3, #24]
 80003ae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003bc:	2302      	movs	r3, #2
 80003be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	2303      	movs	r3, #3
 80003c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f000 f8f5 	bl	80005b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ce:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f000 f8eb 	bl	80005b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003de:	b006      	add	sp, #24
 80003e0:	bd10      	pop	{r4, pc}
 80003e2:	bf00      	nop
 80003e4:	40013800 	.word	0x40013800
 80003e8:	40010800 	.word	0x40010800

080003ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <NMI_Handler>

080003ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler>

080003f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler>

080003f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler>

080003f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <UsageFault_Handler>

080003f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f6:	4770      	bx	lr

080003f8 <DebugMon_Handler>:
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:
 80003fa:	4770      	bx	lr

080003fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 b85e 	b.w	80004bc <HAL_IncTick>

08000400 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000400:	4770      	bx	lr
	...

08000404 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000404:	f7ff fffc 	bl	8000400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480b      	ldr	r0, [pc, #44]	; (8000438 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800040a:	490c      	ldr	r1, [pc, #48]	; (800043c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <LoopFillZerobss+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a09      	ldr	r2, [pc, #36]	; (8000444 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000420:	4c09      	ldr	r4, [pc, #36]	; (8000448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800042e:	f000 fd11 	bl	8000e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff ff3b 	bl	80002ac <main>
  bx lr
 8000436:	4770      	bx	lr
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000440:	08000f0c 	.word	0x08000f0c
  ldr r2, =_sbss
 8000444:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000448:	20000078 	.word	0x20000078

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000450:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_InitTick+0x3c>)
{
 8000454:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000456:	7818      	ldrb	r0, [r3, #0]
 8000458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000460:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <HAL_InitTick+0x40>)
 8000462:	6810      	ldr	r0, [r2, #0]
 8000464:	fbb0 f0f3 	udiv	r0, r0, r3
 8000468:	f000 f890 	bl	800058c <HAL_SYSTICK_Config>
 800046c:	4604      	mov	r4, r0
 800046e:	b958      	cbnz	r0, 8000488 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000470:	2d0f      	cmp	r5, #15
 8000472:	d809      	bhi.n	8000488 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000474:	4602      	mov	r2, r0
 8000476:	4629      	mov	r1, r5
 8000478:	f04f 30ff 	mov.w	r0, #4294967295
 800047c:	f000 f854 	bl	8000528 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000480:	4620      	mov	r0, r4
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <HAL_InitTick+0x44>)
 8000484:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000486:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000488:	2001      	movs	r0, #1
 800048a:	e7fc      	b.n	8000486 <HAL_InitTick+0x36>
 800048c:	20000004 	.word	0x20000004
 8000490:	20000000 	.word	0x20000000
 8000494:	20000008 	.word	0x20000008

08000498 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <HAL_Init+0x20>)
{
 800049a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800049c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800049e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a0:	f043 0310 	orr.w	r3, r3, #16
 80004a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a6:	f000 f82d 	bl	8000504 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80004aa:	200f      	movs	r0, #15
 80004ac:	f7ff ffd0 	bl	8000450 <HAL_InitTick>
  HAL_MspInit();
 80004b0:	f7ff ff3e 	bl	8000330 <HAL_MspInit>
}
 80004b4:	2000      	movs	r0, #0
 80004b6:	bd08      	pop	{r3, pc}
 80004b8:	40022000 	.word	0x40022000

080004bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004bc:	4a03      	ldr	r2, [pc, #12]	; (80004cc <HAL_IncTick+0x10>)
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <HAL_IncTick+0x14>)
 80004c0:	6811      	ldr	r1, [r2, #0]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	440b      	add	r3, r1
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000074 	.word	0x20000074
 80004d0:	20000004 	.word	0x20000004

080004d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <HAL_GetTick+0x8>)
 80004d6:	6818      	ldr	r0, [r3, #0]
}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000074 	.word	0x20000074

080004e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004e0:	b538      	push	{r3, r4, r5, lr}
 80004e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004e4:	f7ff fff6 	bl	80004d4 <HAL_GetTick>
 80004e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80004ec:	bf1e      	ittt	ne
 80004ee:	4b04      	ldrne	r3, [pc, #16]	; (8000500 <HAL_Delay+0x20>)
 80004f0:	781b      	ldrbne	r3, [r3, #0]
 80004f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004f4:	f7ff ffee 	bl	80004d4 <HAL_GetTick>
 80004f8:	1b43      	subs	r3, r0, r5
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d3fa      	bcc.n	80004f4 <HAL_Delay+0x14>
  {
  }
}
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
 8000500:	20000004 	.word	0x20000004

08000504 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000506:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000508:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800050a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000512:	0412      	lsls	r2, r2, #16
 8000514:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000520:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000522:	4770      	bx	lr
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	68dc      	ldr	r4, [r3, #12]
 800052e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000532:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000536:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000538:	2b04      	cmp	r3, #4
 800053a:	bf28      	it	cs
 800053c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800053e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000540:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000544:	bf98      	it	ls
 8000546:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000548:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054c:	bf88      	it	hi
 800054e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	ea21 0303 	bic.w	r3, r1, r3
 8000554:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000556:	fa05 f404 	lsl.w	r4, r5, r4
 800055a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800055e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000560:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000564:	bfac      	ite	ge
 8000566:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056a:	4a07      	ldrlt	r2, [pc, #28]	; (8000588 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000570:	b2db      	uxtb	r3, r3
 8000572:	bfab      	itete	ge
 8000574:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000578:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	e000ed14 	.word	0xe000ed14

0800058c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800058c:	3801      	subs	r0, #1
 800058e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000592:	d20b      	bcs.n	80005ac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000594:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	21f0      	movs	r1, #240	; 0xf0
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800059c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005a4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005a8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005aa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005ac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005b8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80005ba:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005bc:	4f6a      	ldr	r7, [pc, #424]	; (8000768 <HAL_GPIO_Init+0x1b4>)
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005c0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000770 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 80005c4:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8000774 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005c8:	680c      	ldr	r4, [r1, #0]
 80005ca:	fa34 f506 	lsrs.w	r5, r4, r6
 80005ce:	d102      	bne.n	80005d6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80005d0:	b003      	add	sp, #12
 80005d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80005d6:	f04f 0801 	mov.w	r8, #1
 80005da:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005de:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 80005e2:	ea38 0404 	bics.w	r4, r8, r4
 80005e6:	f040 8081 	bne.w	80006ec <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 80005ea:	684c      	ldr	r4, [r1, #4]
 80005ec:	2c03      	cmp	r4, #3
 80005ee:	d807      	bhi.n	8000600 <HAL_GPIO_Init+0x4c>
 80005f0:	3c01      	subs	r4, #1
 80005f2:	2c02      	cmp	r4, #2
 80005f4:	f200 808c 	bhi.w	8000710 <HAL_GPIO_Init+0x15c>
 80005f8:	e8df f004 	tbb	[pc, r4]
 80005fc:	a29d      	.short	0xa29d
 80005fe:	a8          	.byte	0xa8
 80005ff:	00          	.byte	0x00
 8000600:	2c12      	cmp	r4, #18
 8000602:	f000 80a0 	beq.w	8000746 <HAL_GPIO_Init+0x192>
 8000606:	d873      	bhi.n	80006f0 <HAL_GPIO_Init+0x13c>
 8000608:	2c11      	cmp	r4, #17
 800060a:	f000 8096 	beq.w	800073a <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800060e:	2dff      	cmp	r5, #255	; 0xff
 8000610:	bf98      	it	ls
 8000612:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000614:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000618:	bf88      	it	hi
 800061a:	f100 0a04 	addhi.w	sl, r0, #4
 800061e:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000622:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000626:	bf88      	it	hi
 8000628:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800062a:	fa09 fb04 	lsl.w	fp, r9, r4
 800062e:	ea28 080b 	bic.w	r8, r8, fp
 8000632:	fa02 f404 	lsl.w	r4, r2, r4
 8000636:	ea48 0404 	orr.w	r4, r8, r4
 800063a:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800063e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000642:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000646:	d051      	beq.n	80006ec <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000648:	69bc      	ldr	r4, [r7, #24]
 800064a:	f026 0803 	bic.w	r8, r6, #3
 800064e:	f044 0401 	orr.w	r4, r4, #1
 8000652:	61bc      	str	r4, [r7, #24]
 8000654:	69bc      	ldr	r4, [r7, #24]
 8000656:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800065a:	f004 0401 	and.w	r4, r4, #1
 800065e:	9401      	str	r4, [sp, #4]
 8000660:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000664:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000668:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800066a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800066e:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000672:	fa09 f90b 	lsl.w	r9, r9, fp
 8000676:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800067a:	4c3f      	ldr	r4, [pc, #252]	; (8000778 <HAL_GPIO_Init+0x1c4>)
 800067c:	42a0      	cmp	r0, r4
 800067e:	d069      	beq.n	8000754 <HAL_GPIO_Init+0x1a0>
 8000680:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000684:	42a0      	cmp	r0, r4
 8000686:	d067      	beq.n	8000758 <HAL_GPIO_Init+0x1a4>
 8000688:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800068c:	42a0      	cmp	r0, r4
 800068e:	d065      	beq.n	800075c <HAL_GPIO_Init+0x1a8>
 8000690:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000694:	42a0      	cmp	r0, r4
 8000696:	d063      	beq.n	8000760 <HAL_GPIO_Init+0x1ac>
 8000698:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800069c:	42a0      	cmp	r0, r4
 800069e:	d061      	beq.n	8000764 <HAL_GPIO_Init+0x1b0>
 80006a0:	4560      	cmp	r0, ip
 80006a2:	bf0c      	ite	eq
 80006a4:	2405      	moveq	r4, #5
 80006a6:	2406      	movne	r4, #6
 80006a8:	fa04 f40b 	lsl.w	r4, r4, fp
 80006ac:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80006b0:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80006b4:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80006ba:	bf14      	ite	ne
 80006bc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006be:	43ac      	biceq	r4, r5
 80006c0:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80006c2:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006c4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80006c8:	bf14      	ite	ne
 80006ca:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006cc:	43ac      	biceq	r4, r5
 80006ce:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80006d0:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80006d6:	bf14      	ite	ne
 80006d8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006da:	43ac      	biceq	r4, r5
 80006dc:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80006de:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80006e4:	bf14      	ite	ne
 80006e6:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006e8:	43ac      	biceq	r4, r5
 80006ea:	601c      	str	r4, [r3, #0]
	position++;
 80006ec:	3601      	adds	r6, #1
 80006ee:	e76b      	b.n	80005c8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80006f0:	4574      	cmp	r4, lr
 80006f2:	d00d      	beq.n	8000710 <HAL_GPIO_Init+0x15c>
 80006f4:	d818      	bhi.n	8000728 <HAL_GPIO_Init+0x174>
 80006f6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800077c <HAL_GPIO_Init+0x1c8>
 80006fa:	454c      	cmp	r4, r9
 80006fc:	d008      	beq.n	8000710 <HAL_GPIO_Init+0x15c>
 80006fe:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000702:	454c      	cmp	r4, r9
 8000704:	d004      	beq.n	8000710 <HAL_GPIO_Init+0x15c>
 8000706:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800070a:	454c      	cmp	r4, r9
 800070c:	f47f af7f 	bne.w	800060e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000710:	688a      	ldr	r2, [r1, #8]
 8000712:	b1ea      	cbz	r2, 8000750 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000714:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000716:	bf08      	it	eq
 8000718:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800071c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000720:	bf18      	it	ne
 8000722:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000726:	e772      	b.n	800060e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8000728:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8000780 <HAL_GPIO_Init+0x1cc>
 800072c:	454c      	cmp	r4, r9
 800072e:	d0ef      	beq.n	8000710 <HAL_GPIO_Init+0x15c>
 8000730:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000734:	e7e9      	b.n	800070a <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000736:	68ca      	ldr	r2, [r1, #12]
          break;
 8000738:	e769      	b.n	800060e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800073a:	68ca      	ldr	r2, [r1, #12]
 800073c:	3204      	adds	r2, #4
          break;
 800073e:	e766      	b.n	800060e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000740:	68ca      	ldr	r2, [r1, #12]
 8000742:	3208      	adds	r2, #8
          break;
 8000744:	e763      	b.n	800060e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000746:	68ca      	ldr	r2, [r1, #12]
 8000748:	320c      	adds	r2, #12
          break;
 800074a:	e760      	b.n	800060e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800074c:	2200      	movs	r2, #0
 800074e:	e75e      	b.n	800060e <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000750:	2204      	movs	r2, #4
 8000752:	e75c      	b.n	800060e <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000754:	2400      	movs	r4, #0
 8000756:	e7a7      	b.n	80006a8 <HAL_GPIO_Init+0xf4>
 8000758:	2401      	movs	r4, #1
 800075a:	e7a5      	b.n	80006a8 <HAL_GPIO_Init+0xf4>
 800075c:	2402      	movs	r4, #2
 800075e:	e7a3      	b.n	80006a8 <HAL_GPIO_Init+0xf4>
 8000760:	2403      	movs	r4, #3
 8000762:	e7a1      	b.n	80006a8 <HAL_GPIO_Init+0xf4>
 8000764:	2404      	movs	r4, #4
 8000766:	e79f      	b.n	80006a8 <HAL_GPIO_Init+0xf4>
 8000768:	40021000 	.word	0x40021000
 800076c:	40010400 	.word	0x40010400
 8000770:	40011c00 	.word	0x40011c00
 8000774:	10220000 	.word	0x10220000
 8000778:	40010800 	.word	0x40010800
 800077c:	10120000 	.word	0x10120000
 8000780:	10310000 	.word	0x10310000

08000784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000788:	4605      	mov	r5, r0
 800078a:	b338      	cbz	r0, 80007dc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800078c:	6803      	ldr	r3, [r0, #0]
 800078e:	07db      	lsls	r3, r3, #31
 8000790:	d410      	bmi.n	80007b4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000792:	682b      	ldr	r3, [r5, #0]
 8000794:	079f      	lsls	r7, r3, #30
 8000796:	d45e      	bmi.n	8000856 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000798:	682b      	ldr	r3, [r5, #0]
 800079a:	0719      	lsls	r1, r3, #28
 800079c:	f100 8095 	bmi.w	80008ca <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	075a      	lsls	r2, r3, #29
 80007a4:	f100 80c1 	bmi.w	800092a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007a8:	69e8      	ldr	r0, [r5, #28]
 80007aa:	2800      	cmp	r0, #0
 80007ac:	f040 812c 	bne.w	8000a08 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80007b0:	2000      	movs	r0, #0
 80007b2:	e029      	b.n	8000808 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007b4:	4c90      	ldr	r4, [pc, #576]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d007      	beq.n	80007d0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007c0:	6863      	ldr	r3, [r4, #4]
 80007c2:	f003 030c 	and.w	r3, r3, #12
 80007c6:	2b08      	cmp	r3, #8
 80007c8:	d10a      	bne.n	80007e0 <HAL_RCC_OscConfig+0x5c>
 80007ca:	6863      	ldr	r3, [r4, #4]
 80007cc:	03de      	lsls	r6, r3, #15
 80007ce:	d507      	bpl.n	80007e0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	039c      	lsls	r4, r3, #14
 80007d4:	d5dd      	bpl.n	8000792 <HAL_RCC_OscConfig+0xe>
 80007d6:	686b      	ldr	r3, [r5, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1da      	bne.n	8000792 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80007dc:	2001      	movs	r0, #1
 80007de:	e013      	b.n	8000808 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e0:	686b      	ldr	r3, [r5, #4]
 80007e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e6:	d112      	bne.n	800080e <HAL_RCC_OscConfig+0x8a>
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007f0:	f7ff fe70 	bl	80004d4 <HAL_GetTick>
 80007f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	0398      	lsls	r0, r3, #14
 80007fa:	d4ca      	bmi.n	8000792 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007fc:	f7ff fe6a 	bl	80004d4 <HAL_GetTick>
 8000800:	1b80      	subs	r0, r0, r6
 8000802:	2864      	cmp	r0, #100	; 0x64
 8000804:	d9f7      	bls.n	80007f6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000806:	2003      	movs	r0, #3
}
 8000808:	b002      	add	sp, #8
 800080a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800080e:	b99b      	cbnz	r3, 8000838 <HAL_RCC_OscConfig+0xb4>
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000816:	6023      	str	r3, [r4, #0]
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000820:	f7ff fe58 	bl	80004d4 <HAL_GetTick>
 8000824:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	0399      	lsls	r1, r3, #14
 800082a:	d5b2      	bpl.n	8000792 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800082c:	f7ff fe52 	bl	80004d4 <HAL_GetTick>
 8000830:	1b80      	subs	r0, r0, r6
 8000832:	2864      	cmp	r0, #100	; 0x64
 8000834:	d9f7      	bls.n	8000826 <HAL_RCC_OscConfig+0xa2>
 8000836:	e7e6      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	d103      	bne.n	8000848 <HAL_RCC_OscConfig+0xc4>
 8000840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000844:	6023      	str	r3, [r4, #0]
 8000846:	e7cf      	b.n	80007e8 <HAL_RCC_OscConfig+0x64>
 8000848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084c:	6023      	str	r3, [r4, #0]
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000854:	e7cb      	b.n	80007ee <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000856:	4c68      	ldr	r4, [pc, #416]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 8000858:	6863      	ldr	r3, [r4, #4]
 800085a:	f013 0f0c 	tst.w	r3, #12
 800085e:	d007      	beq.n	8000870 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000860:	6863      	ldr	r3, [r4, #4]
 8000862:	f003 030c 	and.w	r3, r3, #12
 8000866:	2b08      	cmp	r3, #8
 8000868:	d110      	bne.n	800088c <HAL_RCC_OscConfig+0x108>
 800086a:	6863      	ldr	r3, [r4, #4]
 800086c:	03da      	lsls	r2, r3, #15
 800086e:	d40d      	bmi.n	800088c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	079b      	lsls	r3, r3, #30
 8000874:	d502      	bpl.n	800087c <HAL_RCC_OscConfig+0xf8>
 8000876:	692b      	ldr	r3, [r5, #16]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d1af      	bne.n	80007dc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	696a      	ldr	r2, [r5, #20]
 8000880:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000888:	6023      	str	r3, [r4, #0]
 800088a:	e785      	b.n	8000798 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088c:	692a      	ldr	r2, [r5, #16]
 800088e:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <HAL_RCC_OscConfig+0x278>)
 8000890:	b16a      	cbz	r2, 80008ae <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000896:	f7ff fe1d 	bl	80004d4 <HAL_GetTick>
 800089a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	079f      	lsls	r7, r3, #30
 80008a0:	d4ec      	bmi.n	800087c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008a2:	f7ff fe17 	bl	80004d4 <HAL_GetTick>
 80008a6:	1b80      	subs	r0, r0, r6
 80008a8:	2802      	cmp	r0, #2
 80008aa:	d9f7      	bls.n	800089c <HAL_RCC_OscConfig+0x118>
 80008ac:	e7ab      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80008ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008b0:	f7ff fe10 	bl	80004d4 <HAL_GetTick>
 80008b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	0798      	lsls	r0, r3, #30
 80008ba:	f57f af6d 	bpl.w	8000798 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008be:	f7ff fe09 	bl	80004d4 <HAL_GetTick>
 80008c2:	1b80      	subs	r0, r0, r6
 80008c4:	2802      	cmp	r0, #2
 80008c6:	d9f6      	bls.n	80008b6 <HAL_RCC_OscConfig+0x132>
 80008c8:	e79d      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008ca:	69aa      	ldr	r2, [r5, #24]
 80008cc:	4e4a      	ldr	r6, [pc, #296]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 80008ce:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <HAL_RCC_OscConfig+0x278>)
 80008d0:	b1e2      	cbz	r2, 800090c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80008d2:	2201      	movs	r2, #1
 80008d4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80008d8:	f7ff fdfc 	bl	80004d4 <HAL_GetTick>
 80008dc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80008e0:	079b      	lsls	r3, r3, #30
 80008e2:	d50d      	bpl.n	8000900 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80008e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008e8:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <HAL_RCC_OscConfig+0x27c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80008f2:	bf00      	nop
  }
  while (Delay --);
 80008f4:	9b01      	ldr	r3, [sp, #4]
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1f9      	bne.n	80008f2 <HAL_RCC_OscConfig+0x16e>
 80008fe:	e74f      	b.n	80007a0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000900:	f7ff fde8 	bl	80004d4 <HAL_GetTick>
 8000904:	1b00      	subs	r0, r0, r4
 8000906:	2802      	cmp	r0, #2
 8000908:	d9e9      	bls.n	80008de <HAL_RCC_OscConfig+0x15a>
 800090a:	e77c      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800090c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000910:	f7ff fde0 	bl	80004d4 <HAL_GetTick>
 8000914:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000916:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000918:	079f      	lsls	r7, r3, #30
 800091a:	f57f af41 	bpl.w	80007a0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800091e:	f7ff fdd9 	bl	80004d4 <HAL_GetTick>
 8000922:	1b00      	subs	r0, r0, r4
 8000924:	2802      	cmp	r0, #2
 8000926:	d9f6      	bls.n	8000916 <HAL_RCC_OscConfig+0x192>
 8000928:	e76d      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800092a:	4c33      	ldr	r4, [pc, #204]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 800092c:	69e3      	ldr	r3, [r4, #28]
 800092e:	00d8      	lsls	r0, r3, #3
 8000930:	d424      	bmi.n	800097c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8000932:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	69e3      	ldr	r3, [r4, #28]
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	61e3      	str	r3, [r4, #28]
 800093c:	69e3      	ldr	r3, [r4, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000946:	4e2f      	ldr	r6, [pc, #188]	; (8000a04 <HAL_RCC_OscConfig+0x280>)
 8000948:	6833      	ldr	r3, [r6, #0]
 800094a:	05d9      	lsls	r1, r3, #23
 800094c:	d518      	bpl.n	8000980 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800094e:	68eb      	ldr	r3, [r5, #12]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d126      	bne.n	80009a2 <HAL_RCC_OscConfig+0x21e>
 8000954:	6a23      	ldr	r3, [r4, #32]
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800095c:	f7ff fdba 	bl	80004d4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000960:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000964:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000966:	6a23      	ldr	r3, [r4, #32]
 8000968:	079b      	lsls	r3, r3, #30
 800096a:	d53f      	bpl.n	80009ec <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800096c:	2f00      	cmp	r7, #0
 800096e:	f43f af1b 	beq.w	80007a8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000972:	69e3      	ldr	r3, [r4, #28]
 8000974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000978:	61e3      	str	r3, [r4, #28]
 800097a:	e715      	b.n	80007a8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800097c:	2700      	movs	r7, #0
 800097e:	e7e2      	b.n	8000946 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000980:	6833      	ldr	r3, [r6, #0]
 8000982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000986:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000988:	f7ff fda4 	bl	80004d4 <HAL_GetTick>
 800098c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098e:	6833      	ldr	r3, [r6, #0]
 8000990:	05da      	lsls	r2, r3, #23
 8000992:	d4dc      	bmi.n	800094e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000994:	f7ff fd9e 	bl	80004d4 <HAL_GetTick>
 8000998:	eba0 0008 	sub.w	r0, r0, r8
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f6      	bls.n	800098e <HAL_RCC_OscConfig+0x20a>
 80009a0:	e731      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a2:	b9ab      	cbnz	r3, 80009d0 <HAL_RCC_OscConfig+0x24c>
 80009a4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009a6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	6223      	str	r3, [r4, #32]
 80009b0:	6a23      	ldr	r3, [r4, #32]
 80009b2:	f023 0304 	bic.w	r3, r3, #4
 80009b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009b8:	f7ff fd8c 	bl	80004d4 <HAL_GetTick>
 80009bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009be:	6a23      	ldr	r3, [r4, #32]
 80009c0:	0798      	lsls	r0, r3, #30
 80009c2:	d5d3      	bpl.n	800096c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009c4:	f7ff fd86 	bl	80004d4 <HAL_GetTick>
 80009c8:	1b80      	subs	r0, r0, r6
 80009ca:	4540      	cmp	r0, r8
 80009cc:	d9f7      	bls.n	80009be <HAL_RCC_OscConfig+0x23a>
 80009ce:	e71a      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	6a23      	ldr	r3, [r4, #32]
 80009d4:	d103      	bne.n	80009de <HAL_RCC_OscConfig+0x25a>
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6223      	str	r3, [r4, #32]
 80009dc:	e7ba      	b.n	8000954 <HAL_RCC_OscConfig+0x1d0>
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	6223      	str	r3, [r4, #32]
 80009e4:	6a23      	ldr	r3, [r4, #32]
 80009e6:	f023 0304 	bic.w	r3, r3, #4
 80009ea:	e7b6      	b.n	800095a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009ec:	f7ff fd72 	bl	80004d4 <HAL_GetTick>
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	4540      	cmp	r0, r8
 80009f4:	d9b7      	bls.n	8000966 <HAL_RCC_OscConfig+0x1e2>
 80009f6:	e706      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
 80009f8:	40021000 	.word	0x40021000
 80009fc:	42420000 	.word	0x42420000
 8000a00:	20000000 	.word	0x20000000
 8000a04:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a08:	4c2a      	ldr	r4, [pc, #168]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000a0a:	6863      	ldr	r3, [r4, #4]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
 8000a10:	2b08      	cmp	r3, #8
 8000a12:	d03e      	beq.n	8000a92 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a14:	2200      	movs	r2, #0
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <HAL_RCC_OscConfig+0x334>)
 8000a18:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a1a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a1c:	d12c      	bne.n	8000a78 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fd59 	bl	80004d4 <HAL_GetTick>
 8000a22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	0199      	lsls	r1, r3, #6
 8000a28:	d420      	bmi.n	8000a6c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a2a:	6a2b      	ldr	r3, [r5, #32]
 8000a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a30:	d105      	bne.n	8000a3e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a32:	6862      	ldr	r2, [r4, #4]
 8000a34:	68a9      	ldr	r1, [r5, #8]
 8000a36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000a40:	6862      	ldr	r2, [r4, #4]
 8000a42:	430b      	orrs	r3, r1
 8000a44:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a48:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8000a4a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a4c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_RCC_OscConfig+0x334>)
 8000a50:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000a52:	f7ff fd3f 	bl	80004d4 <HAL_GetTick>
 8000a56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	019a      	lsls	r2, r3, #6
 8000a5c:	f53f aea8 	bmi.w	80007b0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a60:	f7ff fd38 	bl	80004d4 <HAL_GetTick>
 8000a64:	1b40      	subs	r0, r0, r5
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x2d4>
 8000a6a:	e6cc      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a6c:	f7ff fd32 	bl	80004d4 <HAL_GetTick>
 8000a70:	1b80      	subs	r0, r0, r6
 8000a72:	2802      	cmp	r0, #2
 8000a74:	d9d6      	bls.n	8000a24 <HAL_RCC_OscConfig+0x2a0>
 8000a76:	e6c6      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000a78:	f7ff fd2c 	bl	80004d4 <HAL_GetTick>
 8000a7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	f57f ae95 	bpl.w	80007b0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a86:	f7ff fd25 	bl	80004d4 <HAL_GetTick>
 8000a8a:	1b40      	subs	r0, r0, r5
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x2fa>
 8000a90:	e6b9      	b.n	8000806 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a92:	2801      	cmp	r0, #1
 8000a94:	f43f aeb8 	beq.w	8000808 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8000a98:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a9a:	6a2a      	ldr	r2, [r5, #32]
 8000a9c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000aa0:	4291      	cmp	r1, r2
 8000aa2:	f47f ae9b 	bne.w	80007dc <HAL_RCC_OscConfig+0x58>
 8000aa6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000aa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000aac:	4293      	cmp	r3, r2
 8000aae:	f43f ae7f 	beq.w	80007b0 <HAL_RCC_OscConfig+0x2c>
 8000ab2:	e693      	b.n	80007dc <HAL_RCC_OscConfig+0x58>
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	42420000 	.word	0x42420000

08000abc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_RCC_GetSysClockFreq+0x38>)
 8000abe:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ac0:	f003 010c 	and.w	r1, r3, #12
 8000ac4:	2908      	cmp	r1, #8
 8000ac6:	d112      	bne.n	8000aee <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000aca:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ace:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ad0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ad2:	d509      	bpl.n	8000ae8 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ad4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ad8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000adc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_RCC_GetSysClockFreq+0x44>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ae2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ae6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_RCC_GetSysClockFreq+0x48>)
 8000aea:	4358      	muls	r0, r3
 8000aec:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <HAL_RCC_GetSysClockFreq+0x40>)
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	08000eef 	.word	0x08000eef
 8000afc:	007a1200 	.word	0x007a1200
 8000b00:	08000eff 	.word	0x08000eff
 8000b04:	003d0900 	.word	0x003d0900

08000b08 <HAL_RCC_ClockConfig>:
{
 8000b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b0c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b910      	cbnz	r0, 8000b18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b12:	2001      	movs	r0, #1
}
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b18:	4a44      	ldr	r2, [pc, #272]	; (8000c2c <HAL_RCC_ClockConfig+0x124>)
 8000b1a:	6813      	ldr	r3, [r2, #0]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d328      	bcc.n	8000b76 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b24:	6821      	ldr	r1, [r4, #0]
 8000b26:	078e      	lsls	r6, r1, #30
 8000b28:	d430      	bmi.n	8000b8c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b2a:	07ca      	lsls	r2, r1, #31
 8000b2c:	d443      	bmi.n	8000bb6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <HAL_RCC_ClockConfig+0x124>)
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	42ab      	cmp	r3, r5
 8000b38:	d865      	bhi.n	8000c06 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	4d3c      	ldr	r5, [pc, #240]	; (8000c30 <HAL_RCC_ClockConfig+0x128>)
 8000b3e:	f012 0f04 	tst.w	r2, #4
 8000b42:	d16c      	bne.n	8000c1e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b44:	0713      	lsls	r3, r2, #28
 8000b46:	d506      	bpl.n	8000b56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b48:	686b      	ldr	r3, [r5, #4]
 8000b4a:	6922      	ldr	r2, [r4, #16]
 8000b4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b54:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b56:	f7ff ffb1 	bl	8000abc <HAL_RCC_GetSysClockFreq>
 8000b5a:	686b      	ldr	r3, [r5, #4]
 8000b5c:	4a35      	ldr	r2, [pc, #212]	; (8000c34 <HAL_RCC_ClockConfig+0x12c>)
 8000b5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b62:	5cd3      	ldrb	r3, [r2, r3]
 8000b64:	40d8      	lsrs	r0, r3
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <HAL_RCC_ClockConfig+0x130>)
 8000b68:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <HAL_RCC_ClockConfig+0x134>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	f7ff fc6f 	bl	8000450 <HAL_InitTick>
  return HAL_OK;
 8000b72:	2000      	movs	r0, #0
 8000b74:	e7ce      	b.n	8000b14 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	f023 0307 	bic.w	r3, r3, #7
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d1c3      	bne.n	8000b12 <HAL_RCC_ClockConfig+0xa>
 8000b8a:	e7cb      	b.n	8000b24 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_RCC_ClockConfig+0x128>)
 8000b8e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b92:	bf1e      	ittt	ne
 8000b94:	685a      	ldrne	r2, [r3, #4]
 8000b96:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b9a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b9c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b9e:	bf42      	ittt	mi
 8000ba0:	685a      	ldrmi	r2, [r3, #4]
 8000ba2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000ba6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	68a0      	ldr	r0, [r4, #8]
 8000bac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bb0:	4302      	orrs	r2, r0
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	e7b9      	b.n	8000b2a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb6:	6862      	ldr	r2, [r4, #4]
 8000bb8:	4e1d      	ldr	r6, [pc, #116]	; (8000c30 <HAL_RCC_ClockConfig+0x128>)
 8000bba:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bbe:	d11a      	bne.n	8000bf6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc4:	d0a5      	beq.n	8000b12 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bcc:	f023 0303 	bic.w	r3, r3, #3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000bd4:	f7ff fc7e 	bl	80004d4 <HAL_GetTick>
 8000bd8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bda:	6873      	ldr	r3, [r6, #4]
 8000bdc:	6862      	ldr	r2, [r4, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000be6:	d0a2      	beq.n	8000b2e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be8:	f7ff fc74 	bl	80004d4 <HAL_GetTick>
 8000bec:	1bc0      	subs	r0, r0, r7
 8000bee:	4540      	cmp	r0, r8
 8000bf0:	d9f3      	bls.n	8000bda <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	e78e      	b.n	8000b14 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bf6:	2a02      	cmp	r2, #2
 8000bf8:	d102      	bne.n	8000c00 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bfe:	e7e1      	b.n	8000bc4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c00:	f013 0f02 	tst.w	r3, #2
 8000c04:	e7de      	b.n	8000bc4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f023 0307 	bic.w	r3, r3, #7
 8000c0c:	432b      	orrs	r3, r5
 8000c0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	f47f af7b 	bne.w	8000b12 <HAL_RCC_ClockConfig+0xa>
 8000c1c:	e78d      	b.n	8000b3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c1e:	686b      	ldr	r3, [r5, #4]
 8000c20:	68e1      	ldr	r1, [r4, #12]
 8000c22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c26:	430b      	orrs	r3, r1
 8000c28:	606b      	str	r3, [r5, #4]
 8000c2a:	e78b      	b.n	8000b44 <HAL_RCC_ClockConfig+0x3c>
 8000c2c:	40022000 	.word	0x40022000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	08000ed7 	.word	0x08000ed7
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008

08000c40 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c4e:	6810      	ldr	r0, [r2, #0]
}
 8000c50:	40d8      	lsrs	r0, r3
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	08000ee7 	.word	0x08000ee7
 8000c5c:	20000000 	.word	0x20000000

08000c60 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c6e:	6810      	ldr	r0, [r2, #0]
}
 8000c70:	40d8      	lsrs	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	08000ee7 	.word	0x08000ee7
 8000c7c:	20000000 	.word	0x20000000

08000c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c80:	b510      	push	{r4, lr}
 8000c82:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c84:	6803      	ldr	r3, [r0, #0]
 8000c86:	68c1      	ldr	r1, [r0, #12]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c92:	6882      	ldr	r2, [r0, #8]
 8000c94:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000c96:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000c9c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000ca0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ca4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	69a1      	ldr	r1, [r4, #24]
 8000cae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <UART_SetConfig+0x70>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d115      	bne.n	8000ce8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000cbc:	f7ff ffd0 	bl	8000c60 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000cc0:	2319      	movs	r3, #25
 8000cc2:	4343      	muls	r3, r0
 8000cc4:	6862      	ldr	r2, [r4, #4]
 8000cc6:	6820      	ldr	r0, [r4, #0]
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cce:	2264      	movs	r2, #100	; 0x64
 8000cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cd4:	fb02 3311 	mls	r3, r2, r1, r3
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	3332      	adds	r3, #50	; 0x32
 8000cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ce0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000ce4:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8000ce6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000ce8:	f7ff ffaa 	bl	8000c40 <HAL_RCC_GetPCLK1Freq>
 8000cec:	e7e8      	b.n	8000cc0 <UART_SetConfig+0x40>
 8000cee:	bf00      	nop
 8000cf0:	40013800 	.word	0x40013800

08000cf4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	460e      	mov	r6, r1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000cfe:	6822      	ldr	r2, [r4, #0]
 8000d00:	6813      	ldr	r3, [r2, #0]
 8000d02:	ea36 0303 	bics.w	r3, r6, r3
 8000d06:	d101      	bne.n	8000d0c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8000d08:	2000      	movs	r0, #0
 8000d0a:	e028      	b.n	8000d5e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8000d0c:	1c6b      	adds	r3, r5, #1
 8000d0e:	d0f7      	beq.n	8000d00 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d10:	b125      	cbz	r5, 8000d1c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8000d12:	f7ff fbdf 	bl	80004d4 <HAL_GetTick>
 8000d16:	1bc0      	subs	r0, r0, r7
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	d2f0      	bcs.n	8000cfe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d1c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d1e:	f102 030c 	add.w	r3, r2, #12
 8000d22:	e853 3f00 	ldrex	r3, [r3]
 8000d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d2a:	320c      	adds	r2, #12
 8000d2c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8000d30:	6821      	ldr	r1, [r4, #0]
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d1f2      	bne.n	8000d1c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d36:	f101 0314 	add.w	r3, r1, #20
 8000d3a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d3e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d42:	f101 0014 	add.w	r0, r1, #20
 8000d46:	e840 3200 	strex	r2, r3, [r0]
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d1f3      	bne.n	8000d36 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8000d4e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8000d50:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8000d52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8000d56:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8000d5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8000d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d60 <HAL_UART_Init>:
{
 8000d60:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000d62:	4604      	mov	r4, r0
 8000d64:	b348      	cbz	r0, 8000dba <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000d66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d6e:	b91b      	cbnz	r3, 8000d78 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000d70:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8000d74:	f7ff fafe 	bl	8000374 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000d78:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000d7a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000d7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8000d80:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d82:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d88:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000d8a:	f7ff ff79 	bl	8000c80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d8e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d90:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d9a:	695a      	ldr	r2, [r3, #20]
 8000d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000da0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000da8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000daa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dac:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000dae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000db2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000db6:	6360      	str	r0, [r4, #52]	; 0x34
}
 8000db8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
 8000dbc:	e7fc      	b.n	8000db8 <HAL_UART_Init+0x58>

08000dbe <HAL_UART_Transmit>:
{
 8000dbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dc2:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000dc8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000dca:	2b20      	cmp	r3, #32
{
 8000dcc:	460e      	mov	r6, r1
 8000dce:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000dd0:	d13c      	bne.n	8000e4c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d03c      	beq.n	8000e50 <HAL_UART_Transmit+0x92>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d03a      	beq.n	8000e50 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000dda:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ddc:	2500      	movs	r5, #0
 8000dde:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000de0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8000de4:	f7ff fb76 	bl	80004d4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000de8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000dea:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8000df0:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000df2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000df4:	d103      	bne.n	8000dfe <HAL_UART_Transmit+0x40>
 8000df6:	6923      	ldr	r3, [r4, #16]
 8000df8:	b90b      	cbnz	r3, 8000dfe <HAL_UART_Transmit+0x40>
 8000dfa:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8000dfc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8000dfe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b953      	cbnz	r3, 8000e1a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e04:	464b      	mov	r3, r9
 8000e06:	4642      	mov	r2, r8
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ff72 	bl	8000cf4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8000e10:	b950      	cbnz	r0, 8000e28 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8000e12:	2320      	movs	r3, #32
 8000e14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8000e18:	e007      	b.n	8000e2a <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	4642      	mov	r2, r8
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff ff67 	bl	8000cf4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8000e26:	b110      	cbz	r0, 8000e2e <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8000e28:	2003      	movs	r0, #3
}
 8000e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e2e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8000e30:	b94e      	cbnz	r6, 8000e46 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e32:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000e3a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8000e3c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8000e3e:	3901      	subs	r1, #1
 8000e40:	b289      	uxth	r1, r1
 8000e42:	84e1      	strh	r1, [r4, #38]	; 0x26
 8000e44:	e7db      	b.n	8000dfe <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000e46:	f816 3b01 	ldrb.w	r3, [r6], #1
 8000e4a:	e7f6      	b.n	8000e3a <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	e7ec      	b.n	8000e2a <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
 8000e52:	e7ea      	b.n	8000e2a <HAL_UART_Transmit+0x6c>

08000e54 <__libc_init_array>:
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	2600      	movs	r6, #0
 8000e58:	4d0c      	ldr	r5, [pc, #48]	; (8000e8c <__libc_init_array+0x38>)
 8000e5a:	4c0d      	ldr	r4, [pc, #52]	; (8000e90 <__libc_init_array+0x3c>)
 8000e5c:	1b64      	subs	r4, r4, r5
 8000e5e:	10a4      	asrs	r4, r4, #2
 8000e60:	42a6      	cmp	r6, r4
 8000e62:	d109      	bne.n	8000e78 <__libc_init_array+0x24>
 8000e64:	f000 f822 	bl	8000eac <_init>
 8000e68:	2600      	movs	r6, #0
 8000e6a:	4d0a      	ldr	r5, [pc, #40]	; (8000e94 <__libc_init_array+0x40>)
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <__libc_init_array+0x44>)
 8000e6e:	1b64      	subs	r4, r4, r5
 8000e70:	10a4      	asrs	r4, r4, #2
 8000e72:	42a6      	cmp	r6, r4
 8000e74:	d105      	bne.n	8000e82 <__libc_init_array+0x2e>
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7c:	4798      	blx	r3
 8000e7e:	3601      	adds	r6, #1
 8000e80:	e7ee      	b.n	8000e60 <__libc_init_array+0xc>
 8000e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e86:	4798      	blx	r3
 8000e88:	3601      	adds	r6, #1
 8000e8a:	e7f2      	b.n	8000e72 <__libc_init_array+0x1e>
 8000e8c:	08000f04 	.word	0x08000f04
 8000e90:	08000f04 	.word	0x08000f04
 8000e94:	08000f04 	.word	0x08000f04
 8000e98:	08000f08 	.word	0x08000f08

08000e9c <memset>:
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4402      	add	r2, r0
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <memset+0xa>
 8000ea4:	4770      	bx	lr
 8000ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8000eaa:	e7f9      	b.n	8000ea0 <memset+0x4>

08000eac <_init>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr

08000eb8 <_fini>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr
