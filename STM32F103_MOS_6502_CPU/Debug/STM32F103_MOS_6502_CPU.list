
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011ac  080028bc  080028bc  000128bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a68  08003a68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a68  08003a68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a68  08003a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000808c  2000000c  08003a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008098  08003a7c  00028098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0f1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a2  00000000  00000000  0002d126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000059e5  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a10  00000000  00000000  00034c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186f3  00000000  00000000  00035690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1a0  00000000  00000000  0004dd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9ce  00000000  00000000  00058f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e88f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001434  00000000  00000000  000e8944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080028a4 	.word	0x080028a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080028a4 	.word	0x080028a4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000238:	f7ff fff4 	bl	8000224 <strlen>
 800023c:	4d08      	ldr	r5, [pc, #32]	; (8000260 <writelineTerminal+0x2c>)
 800023e:	4621      	mov	r1, r4
 8000240:	b282      	uxth	r2, r0
 8000242:	f04f 33ff 	mov.w	r3, #4294967295
 8000246:	4628      	mov	r0, r5
 8000248:	f002 fa61 	bl	800270e <HAL_UART_Transmit>
 800024c:	4628      	mov	r0, r5
}
 800024e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2202      	movs	r2, #2
 8000258:	4902      	ldr	r1, [pc, #8]	; (8000264 <writelineTerminal+0x30>)
 800025a:	f002 ba58 	b.w	800270e <HAL_UART_Transmit>
 800025e:	bf00      	nop
 8000260:	20008028 	.word	0x20008028
 8000264:	080028bc 	.word	0x080028bc

08000268 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800026c:	f7ff ffda 	bl	8000224 <strlen>
 8000270:	4621      	mov	r1, r4
}
 8000272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000276:	b282      	uxth	r2, r0
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <writeTerminal+0x1c>)
 800027e:	f002 ba46 	b.w	800270e <HAL_UART_Transmit>
 8000282:	bf00      	nop
 8000284:	20008028 	.word	0x20008028

08000288 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 8000288:	b507      	push	{r0, r1, r2, lr}
  if (value == 13) {
 800028a:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 800028c:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	bf0b      	itete	eq
 8000296:	2202      	moveq	r2, #2
  }
  else {
    HAL_UART_Transmit(&huart1, (uint8_t *)&value, 1, HAL_MAX_DELAY);
 8000298:	2201      	movne	r2, #1
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 800029a:	4904      	ldreq	r1, [pc, #16]	; (80002ac <handleOutput+0x24>)
    HAL_UART_Transmit(&huart1, (uint8_t *)&value, 1, HAL_MAX_DELAY);
 800029c:	f10d 0107 	addne.w	r1, sp, #7
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <handleOutput+0x28>)
 80002a2:	f002 fa34 	bl	800270e <HAL_UART_Transmit>
  }
}
 80002a6:	b003      	add	sp, #12
 80002a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ac:	080028bc 	.word	0x080028bc
 80002b0:	20008028 	.word	0x20008028

080002b4 <write6502>:
  if (address < RAM_SIZE) {
 80002b4:	0403      	lsls	r3, r0, #16
 80002b6:	d402      	bmi.n	80002be <write6502+0xa>
    RAM[address] = value;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <write6502+0x20>)
 80002ba:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 80002bc:	4770      	bx	lr
 80002be:	f24d 0312 	movw	r3, #53266	; 0xd012
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d105      	bne.n	80002d2 <write6502+0x1e>
    pia.display_register = value;
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <write6502+0x24>)
    handleOutput(value);
 80002c8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 80002cc:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 80002ce:	f7ff bfdb 	b.w	8000288 <handleOutput>
}
 80002d2:	4770      	bx	lr
 80002d4:	20000028 	.word	0x20000028
 80002d8:	20008071 	.word	0x20008071

080002dc <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 80002dc:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 80002de:	4c18      	ldr	r4, [pc, #96]	; (8000340 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 80002e0:	4d18      	ldr	r5, [pc, #96]	; (8000344 <initApple1+0x68>)
    HAL_Delay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f001 fda3 	bl	8001e30 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 80002ea:	4620      	mov	r0, r4
 80002ec:	f7ff ffa2 	bl	8000234 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 80002f0:	4814      	ldr	r0, [pc, #80]	; (8000344 <initApple1+0x68>)
 80002f2:	f000 f835 	bl	8000360 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 80002f6:	782b      	ldrb	r3, [r5, #0]
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	d1f2      	bne.n	80002e2 <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 80002fc:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 8000300:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 8000302:	f7ff ffb1 	bl	8000268 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 8000306:	f000 f96f 	bl	80005e8 <reset6502>
 800030a:	4810      	ldr	r0, [pc, #64]	; (800034c <initApple1+0x70>)
 800030c:	f7ff ff92 	bl	8000234 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 8000310:	480f      	ldr	r0, [pc, #60]	; (8000350 <initApple1+0x74>)
 8000312:	f7ff ffa9 	bl	8000268 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 8000316:	4621      	mov	r1, r4
 8000318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <initApple1+0x78>)
 800031e:	f002 fab9 	bl	8002894 <memset>
  }
  writelineTerminal(" Complete");
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <initApple1+0x70>)
 8000324:	f7ff ff86 	bl	8000234 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <initApple1+0x7c>)
 800032a:	f7ff ff9d 	bl	8000268 <writeTerminal>
  pia.keyboard_register = 0x00;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 8000332:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 8000334:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 8000336:	709c      	strb	r4, [r3, #2]
}
 8000338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 800033c:	f7ff bf7a 	b.w	8000234 <writelineTerminal>
 8000340:	080028bf 	.word	0x080028bf
 8000344:	20008070 	.word	0x20008070
 8000348:	080028dd 	.word	0x080028dd
 800034c:	080028f1 	.word	0x080028f1
 8000350:	080028fb 	.word	0x080028fb
 8000354:	20000028 	.word	0x20000028
 8000358:	0800290f 	.word	0x0800290f
 800035c:	20008071 	.word	0x20008071

08000360 <handleInput>:
void handleInput(char *buffer) {
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 8000364:	230a      	movs	r3, #10
 8000366:	2201      	movs	r2, #1
 8000368:	4601      	mov	r1, r0
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <handleInput+0x5c>)
 800036c:	f002 fa1a 	bl	80027a4 <HAL_UART_Receive>
  buffer[0] &= 0x7F; // Mask out MSB
 8000370:	7823      	ldrb	r3, [r4, #0]
 8000372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8000376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800037a:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 800037c:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800037e:	d802      	bhi.n	8000386 <handleInput+0x26>
    buffer[0] -= 0x20;
 8000380:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 8000382:	7023      	strb	r3, [r4, #0]
}
 8000384:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 8000386:	2b0a      	cmp	r3, #10
 8000388:	d101      	bne.n	800038e <handleInput+0x2e>
    buffer[0] = '\r';
 800038a:	230d      	movs	r3, #13
 800038c:	e7f9      	b.n	8000382 <handleInput+0x22>
  else if (buffer[0] == '\b') {
 800038e:	2b08      	cmp	r3, #8
 8000390:	d101      	bne.n	8000396 <handleInput+0x36>
    buffer[0] = 0x5F;
 8000392:	235f      	movs	r3, #95	; 0x5f
 8000394:	e7f5      	b.n	8000382 <handleInput+0x22>
  else if (buffer[0] == 0x7F) {
 8000396:	2b7f      	cmp	r3, #127	; 0x7f
 8000398:	d0fb      	beq.n	8000392 <handleInput+0x32>
  else if (buffer[0] == 0x03) {
 800039a:	2b03      	cmp	r3, #3
 800039c:	d1f2      	bne.n	8000384 <handleInput+0x24>
    writelineTerminal("Resetting in 5 seconds...");
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <handleInput+0x60>)
 80003a0:	f7ff ff48 	bl	8000234 <writelineTerminal>
    HAL_Delay(5000);
 80003a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80003a8:	f001 fd42 	bl	8001e30 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 80003ac:	2220      	movs	r2, #32
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <handleInput+0x64>)
 80003b0:	701a      	strb	r2, [r3, #0]
}
 80003b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 80003b6:	f7ff bf91 	b.w	80002dc <initApple1>
 80003ba:	bf00      	nop
 80003bc:	20008028 	.word	0x20008028
 80003c0:	08002923 	.word	0x08002923
 80003c4:	20008070 	.word	0x20008070

080003c8 <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 80003c8:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 80003ca:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 80003cc:	d402      	bmi.n	80003d4 <read6502+0xc>
 80003ce:	4b16      	ldr	r3, [pc, #88]	; (8000428 <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80003d0:	5c18      	ldrb	r0, [r3, r0]
 80003d2:	e005      	b.n	80003e0 <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 80003d4:	f24d 0310 	movw	r3, #53264	; 0xd010
 80003d8:	4298      	cmp	r0, r3
 80003da:	d102      	bne.n	80003e2 <read6502+0x1a>
    return pia.keyboard_register;
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <read6502+0x64>)
 80003de:	7818      	ldrb	r0, [r3, #0]
}
 80003e0:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 80003e2:	f24d 0311 	movw	r3, #53265	; 0xd011
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d10f      	bne.n	800040a <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 80003ea:	4c11      	ldr	r4, [pc, #68]	; (8000430 <read6502+0x68>)
 80003ec:	4620      	mov	r0, r4
 80003ee:	f7ff ffb7 	bl	8000360 <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 80003f2:	7823      	ldrb	r3, [r4, #0]
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <read6502+0x64>)
 80003f6:	f063 017f 	orn	r1, r3, #127	; 0x7f
 80003fa:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 80003fc:	b90b      	cbnz	r3, 8000402 <read6502+0x3a>
      return 0x00;
 80003fe:	2000      	movs	r0, #0
 8000400:	e7ee      	b.n	80003e0 <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 8000402:	2300      	movs	r3, #0
      return 0x80;
 8000404:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 8000406:	7023      	strb	r3, [r4, #0]
      return 0x80;
 8000408:	e7ea      	b.n	80003e0 <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 800040a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800040e:	b29b      	uxth	r3, r3
 8000410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000414:	d202      	bcs.n	800041c <read6502+0x54>
      return BASIC[BASIC_addr];
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <read6502+0x6c>)
 8000418:	5cd0      	ldrb	r0, [r2, r3]
 800041a:	e7e1      	b.n	80003e0 <read6502+0x18>
  if (address >= 0xF000) {
 800041c:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 8000420:	d3ed      	bcc.n	80003fe <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <read6502+0x70>)
 8000424:	b2c0      	uxtb	r0, r0
 8000426:	e7d3      	b.n	80003d0 <read6502+0x8>
 8000428:	20000028 	.word	0x20000028
 800042c:	20008071 	.word	0x20008071
 8000430:	20008070 	.word	0x20008070
 8000434:	0800293d 	.word	0x0800293d
 8000438:	0800393d 	.word	0x0800393d

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b510      	push	{r4, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000440:	2214      	movs	r2, #20
 8000442:	2100      	movs	r1, #0
 8000444:	a808      	add	r0, sp, #32
 8000446:	f002 fa25 	bl	8002894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	2214      	movs	r2, #20
 800044c:	2100      	movs	r1, #0
 800044e:	a801      	add	r0, sp, #4
 8000450:	f002 fa20 	bl	8002894 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000460:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f001 fe31 	bl	80020d4 <HAL_RCC_OscConfig>
 8000472:	b108      	cbz	r0, 8000478 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000476:	e7fe      	b.n	8000476 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000488:	4621      	mov	r1, r4
 800048a:	a801      	add	r0, sp, #4
 800048c:	f001 ffe4 	bl	8002458 <HAL_RCC_ClockConfig>
 8000490:	b108      	cbz	r0, 8000496 <SystemClock_Config+0x5a>
 8000492:	b672      	cpsid	i
  while (1)
 8000494:	e7fe      	b.n	8000494 <SystemClock_Config+0x58>
}
 8000496:	b010      	add	sp, #64	; 0x40
 8000498:	bd10      	pop	{r4, pc}
	...

0800049c <main>:
{
 800049c:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 800049e:	f001 fca3 	bl	8001de8 <HAL_Init>
  SystemClock_Config();
 80004a2:	f7ff ffcb 	bl	800043c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <main+0x64>)
  huart1.Instance = USART1;
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <main+0x68>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	699a      	ldr	r2, [r3, #24]
 80004ac:	f042 0210 	orr.w	r2, r2, #16
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	f002 0210 	and.w	r2, r2, #16
 80004b8:	9200      	str	r2, [sp, #0]
 80004ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	f042 0204 	orr.w	r2, r2, #4
 80004c2:	619a      	str	r2, [r3, #24]
 80004c4:	699b      	ldr	r3, [r3, #24]
  huart1.Init.BaudRate = 115200;
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <main+0x6c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	9b01      	ldr	r3, [sp, #4]
  huart1.Init.BaudRate = 115200;
 80004d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004d4:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004d8:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004da:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004e4:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e6:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e8:	f002 f8e2 	bl	80026b0 <HAL_UART_Init>
 80004ec:	b108      	cbz	r0, 80004f2 <main+0x56>
 80004ee:	b672      	cpsid	i
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x54>
  initApple1(); // Initialize Apple I
 80004f2:	f7ff fef3 	bl	80002dc <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 80004f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004fa:	f000 ffd9 	bl	80014b0 <exec6502>
  while (1)
 80004fe:	e7fa      	b.n	80004f6 <main+0x5a>
 8000500:	40021000 	.word	0x40021000
 8000504:	20008028 	.word	0x20008028
 8000508:	40013800 	.word	0x40013800

0800050c <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 800050c:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <getvalue+0x1c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b113      	cbz	r3, 800051a <getvalue+0xe>
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <getvalue+0x20>)
 8000516:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 8000518:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <getvalue+0x24>)
 800051c:	8818      	ldrh	r0, [r3, #0]
 800051e:	f7ff ff53 	bl	80003c8 <read6502>
 8000522:	b280      	uxth	r0, r0
 8000524:	e7f8      	b.n	8000518 <getvalue+0xc>
 8000526:	bf00      	nop
 8000528:	2000808f 	.word	0x2000808f
 800052c:	20008075 	.word	0x20008075
 8000530:	2000807e 	.word	0x2000807e

08000534 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <bcc.part.0+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3302      	adds	r3, #2
 800053a:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20008078 	.word	0x20008078

08000544 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 8000544:	4a02      	ldr	r2, [pc, #8]	; (8000550 <dex.part.0+0xc>)
 8000546:	7813      	ldrb	r3, [r2, #0]
 8000548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800054c:	7013      	strb	r3, [r2, #0]
}
 800054e:	4770      	bx	lr
 8000550:	2000807c 	.word	0x2000807c

08000554 <push16>:
void push16(uint16_t pushval) {
 8000554:	b538      	push	{r3, r4, r5, lr}
 8000556:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 8000558:	4c09      	ldr	r4, [pc, #36]	; (8000580 <push16+0x2c>)
 800055a:	0a29      	lsrs	r1, r5, #8
 800055c:	7820      	ldrb	r0, [r4, #0]
 800055e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000562:	f7ff fea7 	bl	80002b4 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 8000566:	7823      	ldrb	r3, [r4, #0]
 8000568:	b2e9      	uxtb	r1, r5
 800056a:	3b01      	subs	r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000572:	f7ff fe9f 	bl	80002b4 <write6502>
    sp -= 2;
 8000576:	7823      	ldrb	r3, [r4, #0]
 8000578:	3b02      	subs	r3, #2
 800057a:	7023      	strb	r3, [r4, #0]
}
 800057c:	bd38      	pop	{r3, r4, r5, pc}
 800057e:	bf00      	nop
 8000580:	2000808e 	.word	0x2000808e

08000584 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <push8+0x14>)
void push8(uint8_t pushval) {
 8000586:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 8000588:	7813      	ldrb	r3, [r2, #0]
 800058a:	1e58      	subs	r0, r3, #1
 800058c:	7010      	strb	r0, [r2, #0]
 800058e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000592:	f7ff be8f 	b.w	80002b4 <write6502>
 8000596:	bf00      	nop
 8000598:	2000808e 	.word	0x2000808e

0800059c <pull16>:
uint16_t pull16() {
 800059c:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 800059e:	4d0b      	ldr	r5, [pc, #44]	; (80005cc <pull16+0x30>)
 80005a0:	7828      	ldrb	r0, [r5, #0]
 80005a2:	3001      	adds	r0, #1
 80005a4:	b2c0      	uxtb	r0, r0
 80005a6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80005aa:	f7ff ff0d 	bl	80003c8 <read6502>
 80005ae:	4604      	mov	r4, r0
 80005b0:	7828      	ldrb	r0, [r5, #0]
 80005b2:	3002      	adds	r0, #2
 80005b4:	b2c0      	uxtb	r0, r0
 80005b6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80005ba:	f7ff ff05 	bl	80003c8 <read6502>
    sp += 2;
 80005be:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 80005c0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 80005c4:	3302      	adds	r3, #2
 80005c6:	702b      	strb	r3, [r5, #0]
}
 80005c8:	b280      	uxth	r0, r0
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	2000808e 	.word	0x2000808e

080005d0 <pull8>:
    return (read6502(BASE_STACK + ++sp));
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <pull8+0x14>)
 80005d2:	7818      	ldrb	r0, [r3, #0]
 80005d4:	3001      	adds	r0, #1
 80005d6:	b2c0      	uxtb	r0, r0
 80005d8:	7018      	strb	r0, [r3, #0]
 80005da:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80005de:	f7ff bef3 	b.w	80003c8 <read6502>
 80005e2:	bf00      	nop
 80005e4:	2000808e 	.word	0x2000808e

080005e8 <reset6502>:
void reset6502() {
 80005e8:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 80005ea:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 80005ee:	f7ff feeb 	bl	80003c8 <read6502>
 80005f2:	4604      	mov	r4, r0
 80005f4:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 80005f8:	f7ff fee6 	bl	80003c8 <read6502>
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <reset6502+0x3c>)
 80005fe:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000602:	801c      	strh	r4, [r3, #0]
    a = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <reset6502+0x40>)
 8000608:	7013      	strb	r3, [r2, #0]
    x = 0;
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <reset6502+0x44>)
 800060c:	7013      	strb	r3, [r2, #0]
    y = 0;
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <reset6502+0x48>)
 8000610:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 8000612:	22fd      	movs	r2, #253	; 0xfd
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <reset6502+0x4c>)
 8000616:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <reset6502+0x50>)
 800061a:	7813      	ldrb	r3, [r2, #0]
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	7013      	strb	r3, [r2, #0]
}
 8000622:	bd10      	pop	{r4, pc}
 8000624:	20008088 	.word	0x20008088
 8000628:	20008075 	.word	0x20008075
 800062c:	20008092 	.word	0x20008092
 8000630:	20008093 	.word	0x20008093
 8000634:	2000808e 	.word	0x2000808e
 8000638:	2000807c 	.word	0x2000807c

0800063c <imm>:
    ea = pc++;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <imm+0x10>)
 800063e:	8813      	ldrh	r3, [r2, #0]
 8000640:	1c59      	adds	r1, r3, #1
 8000642:	8011      	strh	r1, [r2, #0]
 8000644:	4a02      	ldr	r2, [pc, #8]	; (8000650 <imm+0x14>)
 8000646:	8013      	strh	r3, [r2, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20008088 	.word	0x20008088
 8000650:	2000807e 	.word	0x2000807e

08000654 <zp>:
void zp() { // zero-page
 8000654:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <zp+0x14>)
 8000658:	8818      	ldrh	r0, [r3, #0]
 800065a:	1c42      	adds	r2, r0, #1
 800065c:	801a      	strh	r2, [r3, #0]
 800065e:	f7ff feb3 	bl	80003c8 <read6502>
 8000662:	4b02      	ldr	r3, [pc, #8]	; (800066c <zp+0x18>)
 8000664:	8018      	strh	r0, [r3, #0]
}
 8000666:	bd08      	pop	{r3, pc}
 8000668:	20008088 	.word	0x20008088
 800066c:	2000807e 	.word	0x2000807e

08000670 <zpx>:
void zpx() { // zero-page,X
 8000670:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <zpx+0x1c>)
 8000674:	8818      	ldrh	r0, [r3, #0]
 8000676:	1c42      	adds	r2, r0, #1
 8000678:	801a      	strh	r2, [r3, #0]
 800067a:	f7ff fea5 	bl	80003c8 <read6502>
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <zpx+0x20>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4418      	add	r0, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <zpx+0x24>)
 8000686:	b2c0      	uxtb	r0, r0
 8000688:	8018      	strh	r0, [r3, #0]
}
 800068a:	bd08      	pop	{r3, pc}
 800068c:	20008088 	.word	0x20008088
 8000690:	20008092 	.word	0x20008092
 8000694:	2000807e 	.word	0x2000807e

08000698 <zpy>:
void zpy() { // zero-page,Y
 8000698:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <zpy+0x1c>)
 800069c:	8818      	ldrh	r0, [r3, #0]
 800069e:	1c42      	adds	r2, r0, #1
 80006a0:	801a      	strh	r2, [r3, #0]
 80006a2:	f7ff fe91 	bl	80003c8 <read6502>
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <zpy+0x20>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4418      	add	r0, r3
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <zpy+0x24>)
 80006ae:	b2c0      	uxtb	r0, r0
 80006b0:	8018      	strh	r0, [r3, #0]
}
 80006b2:	bd08      	pop	{r3, pc}
 80006b4:	20008088 	.word	0x20008088
 80006b8:	20008093 	.word	0x20008093
 80006bc:	2000807e 	.word	0x2000807e

080006c0 <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 80006c0:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <rel+0x20>)
 80006c4:	8818      	ldrh	r0, [r3, #0]
 80006c6:	1c42      	adds	r2, r0, #1
 80006c8:	801a      	strh	r2, [r3, #0]
 80006ca:	f7ff fe7d 	bl	80003c8 <read6502>
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <rel+0x24>)
 80006d0:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 80006d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80006d6:	bf18      	it	ne
 80006d8:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 80006dc:	8013      	strh	r3, [r2, #0]
}
 80006de:	bd08      	pop	{r3, pc}
 80006e0:	20008088 	.word	0x20008088
 80006e4:	2000808a 	.word	0x2000808a

080006e8 <abso>:
void abso() { // absolute
 80006e8:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 80006ea:	4d09      	ldr	r5, [pc, #36]	; (8000710 <abso+0x28>)
 80006ec:	8828      	ldrh	r0, [r5, #0]
 80006ee:	f7ff fe6b 	bl	80003c8 <read6502>
 80006f2:	4604      	mov	r4, r0
 80006f4:	8828      	ldrh	r0, [r5, #0]
 80006f6:	3001      	adds	r0, #1
 80006f8:	b280      	uxth	r0, r0
 80006fa:	f7ff fe65 	bl	80003c8 <read6502>
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <abso+0x2c>)
 8000700:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000704:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000706:	882b      	ldrh	r3, [r5, #0]
 8000708:	3302      	adds	r3, #2
 800070a:	802b      	strh	r3, [r5, #0]
}
 800070c:	bd38      	pop	{r3, r4, r5, pc}
 800070e:	bf00      	nop
 8000710:	20008088 	.word	0x20008088
 8000714:	2000807e 	.word	0x2000807e

08000718 <absx>:
void absx() { // absolute,X
 8000718:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 800071a:	4d0a      	ldr	r5, [pc, #40]	; (8000744 <absx+0x2c>)
 800071c:	8828      	ldrh	r0, [r5, #0]
 800071e:	f7ff fe53 	bl	80003c8 <read6502>
 8000722:	4604      	mov	r4, r0
 8000724:	8828      	ldrh	r0, [r5, #0]
 8000726:	3001      	adds	r0, #1
 8000728:	b280      	uxth	r0, r0
 800072a:	f7ff fe4d 	bl	80003c8 <read6502>
    ea += (uint16_t)x;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000730:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 8000734:	7818      	ldrb	r0, [r3, #0]
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <absx+0x34>)
 8000738:	4404      	add	r4, r0
 800073a:	801c      	strh	r4, [r3, #0]
    pc += 2;
 800073c:	882b      	ldrh	r3, [r5, #0]
 800073e:	3302      	adds	r3, #2
 8000740:	802b      	strh	r3, [r5, #0]
}
 8000742:	bd38      	pop	{r3, r4, r5, pc}
 8000744:	20008088 	.word	0x20008088
 8000748:	20008092 	.word	0x20008092
 800074c:	2000807e 	.word	0x2000807e

08000750 <absy>:
void absy() { // absolute,Y
 8000750:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000752:	4d0a      	ldr	r5, [pc, #40]	; (800077c <absy+0x2c>)
 8000754:	8828      	ldrh	r0, [r5, #0]
 8000756:	f7ff fe37 	bl	80003c8 <read6502>
 800075a:	4604      	mov	r4, r0
 800075c:	8828      	ldrh	r0, [r5, #0]
 800075e:	3001      	adds	r0, #1
 8000760:	b280      	uxth	r0, r0
 8000762:	f7ff fe31 	bl	80003c8 <read6502>
    ea += (uint16_t)y;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000768:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 800076c:	7818      	ldrb	r0, [r3, #0]
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <absy+0x34>)
 8000770:	4404      	add	r4, r0
 8000772:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000774:	882b      	ldrh	r3, [r5, #0]
 8000776:	3302      	adds	r3, #2
 8000778:	802b      	strh	r3, [r5, #0]
}
 800077a:	bd38      	pop	{r3, r4, r5, pc}
 800077c:	20008088 	.word	0x20008088
 8000780:	20008093 	.word	0x20008093
 8000784:	2000807e 	.word	0x2000807e

08000788 <ind>:
void ind() { // indirect
 8000788:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 800078a:	4e10      	ldr	r6, [pc, #64]	; (80007cc <ind+0x44>)
 800078c:	8830      	ldrh	r0, [r6, #0]
 800078e:	f7ff fe1b 	bl	80003c8 <read6502>
 8000792:	4604      	mov	r4, r0
 8000794:	8830      	ldrh	r0, [r6, #0]
 8000796:	3001      	adds	r0, #1
 8000798:	b280      	uxth	r0, r0
 800079a:	f7ff fe15 	bl	80003c8 <read6502>
 800079e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80007a2:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80007a4:	4620      	mov	r0, r4
 80007a6:	f7ff fe0f 	bl	80003c8 <read6502>
 80007aa:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 80007ac:	1c60      	adds	r0, r4, #1
 80007ae:	b2c0      	uxtb	r0, r0
 80007b0:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80007b4:	4320      	orrs	r0, r4
 80007b6:	f7ff fe07 	bl	80003c8 <read6502>
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <ind+0x48>)
 80007bc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80007c0:	801d      	strh	r5, [r3, #0]
    pc += 2;
 80007c2:	8833      	ldrh	r3, [r6, #0]
 80007c4:	3302      	adds	r3, #2
 80007c6:	8033      	strh	r3, [r6, #0]
}
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	bf00      	nop
 80007cc:	20008088 	.word	0x20008088
 80007d0:	2000807e 	.word	0x2000807e

080007d4 <indx>:
void indx() { //  (indirect,X)
 80007d4:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <indx+0x30>)
 80007d8:	8818      	ldrh	r0, [r3, #0]
 80007da:	1c42      	adds	r2, r0, #1
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	f7ff fdf3 	bl	80003c8 <read6502>
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <indx+0x34>)
 80007e4:	781c      	ldrb	r4, [r3, #0]
 80007e6:	4404      	add	r4, r0
 80007e8:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff fdec 	bl	80003c8 <read6502>
 80007f0:	3401      	adds	r4, #1
 80007f2:	4605      	mov	r5, r0
 80007f4:	b2e0      	uxtb	r0, r4
 80007f6:	f7ff fde7 	bl	80003c8 <read6502>
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <indx+0x38>)
 80007fc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000800:	801d      	strh	r5, [r3, #0]
}
 8000802:	bd38      	pop	{r3, r4, r5, pc}
 8000804:	20008088 	.word	0x20008088
 8000808:	20008092 	.word	0x20008092
 800080c:	2000807e 	.word	0x2000807e

08000810 <indy>:
void indy() { //  (indirect),Y
 8000810:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <indy+0x30>)
 8000814:	8818      	ldrh	r0, [r3, #0]
 8000816:	1c42      	adds	r2, r0, #1
 8000818:	801a      	strh	r2, [r3, #0]
 800081a:	f7ff fdd5 	bl	80003c8 <read6502>
 800081e:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000820:	4620      	mov	r0, r4
 8000822:	f7ff fdd1 	bl	80003c8 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 8000826:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000828:	4605      	mov	r5, r0
 800082a:	b2e0      	uxtb	r0, r4
 800082c:	f7ff fdcc 	bl	80003c8 <read6502>
    ea += (uint16_t)y;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000832:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 8000836:	7818      	ldrb	r0, [r3, #0]
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <indy+0x38>)
 800083a:	4405      	add	r5, r0
 800083c:	801d      	strh	r5, [r3, #0]
}
 800083e:	bd38      	pop	{r3, r4, r5, pc}
 8000840:	20008088 	.word	0x20008088
 8000844:	20008093 	.word	0x20008093
 8000848:	2000807e 	.word	0x2000807e

0800084c <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <putvalue+0x18>)
 800084e:	b2c1      	uxtb	r1, r0
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b113      	cbz	r3, 800085a <putvalue+0xe>
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <putvalue+0x1c>)
 8000856:	7019      	strb	r1, [r3, #0]
}
 8000858:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <putvalue+0x20>)
 800085c:	8818      	ldrh	r0, [r3, #0]
 800085e:	f7ff bd29 	b.w	80002b4 <write6502>
 8000862:	bf00      	nop
 8000864:	2000808f 	.word	0x2000808f
 8000868:	20008075 	.word	0x20008075
 800086c:	2000807e 	.word	0x2000807e

08000870 <adc>:
void adc() {
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 8000872:	f7ff fe4b 	bl	800050c <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000876:	4d24      	ldr	r5, [pc, #144]	; (8000908 <adc+0x98>)
    value = getvalue();
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800087a:	4c25      	ldr	r4, [pc, #148]	; (8000910 <adc+0xa0>)
    value = getvalue();
 800087c:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800087e:	782b      	ldrb	r3, [r5, #0]
 8000880:	7821      	ldrb	r1, [r4, #0]
 8000882:	f003 0201 	and.w	r2, r3, #1
 8000886:	440a      	add	r2, r1
 8000888:	4e22      	ldr	r6, [pc, #136]	; (8000914 <adc+0xa4>)
 800088a:	4402      	add	r2, r0
 800088c:	b292      	uxth	r2, r2
    carrycalc(result);
 800088e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000892:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8000894:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8000896:	bf14      	ite	ne
 8000898:	f043 0301 	orrne.w	r3, r3, #1
 800089c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80008a0:	b1c6      	cbz	r6, 80008d4 <adc+0x64>
 80008a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 80008a6:	ea81 0602 	eor.w	r6, r1, r2
 80008aa:	ea80 0702 	eor.w	r7, r0, r2
 80008ae:	4630      	mov	r0, r6
 80008b0:	4038      	ands	r0, r7
 80008b2:	0607      	lsls	r7, r0, #24
 80008b4:	bf4c      	ite	mi
 80008b6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80008ba:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 80008be:	0616      	lsls	r6, r2, #24
 80008c0:	bf4c      	ite	mi
 80008c2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80008c6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 80008ca:	0718      	lsls	r0, r3, #28
 80008cc:	d405      	bmi.n	80008da <adc+0x6a>
 80008ce:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 80008d0:	7022      	strb	r2, [r4, #0]
}
 80008d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	e7e5      	b.n	80008a6 <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 80008da:	f001 000f 	and.w	r0, r1, #15
 80008de:	2809      	cmp	r0, #9
            a += 0x06;
 80008e0:	bf84      	itt	hi
 80008e2:	3106      	addhi	r1, #6
 80008e4:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80008e6:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80008e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80008ec:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80008f0:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80008f2:	4909      	ldr	r1, [pc, #36]	; (8000918 <adc+0xa8>)
        clearcarry();
 80008f4:	702b      	strb	r3, [r5, #0]
            setcarry();
 80008f6:	bf84      	itt	hi
 80008f8:	f043 0301 	orrhi.w	r3, r3, #1
 80008fc:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80008fe:	680b      	ldr	r3, [r1, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	600b      	str	r3, [r1, #0]
 8000904:	e7e4      	b.n	80008d0 <adc+0x60>
 8000906:	bf00      	nop
 8000908:	2000807c 	.word	0x2000807c
 800090c:	20008090 	.word	0x20008090
 8000910:	20008075 	.word	0x20008075
 8000914:	2000808c 	.word	0x2000808c
 8000918:	20008078 	.word	0x20008078

0800091c <op_and>:
void op_and() {
 800091c:	b508      	push	{r3, lr}
    value = getvalue();
 800091e:	f7ff fdf5 	bl	800050c <getvalue>
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <op_and+0x40>)
    result = (uint16_t)a & value;
 8000924:	490e      	ldr	r1, [pc, #56]	; (8000960 <op_and+0x44>)
    value = getvalue();
 8000926:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000928:	780b      	ldrb	r3, [r1, #0]
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <op_and+0x48>)
 800092c:	4018      	ands	r0, r3
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <op_and+0x4c>)
 8000930:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000932:	7813      	ldrb	r3, [r2, #0]
 8000934:	b148      	cbz	r0, 800094a <op_and+0x2e>
 8000936:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800093a:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 800093e:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000940:	d107      	bne.n	8000952 <op_and+0x36>
 8000942:	7813      	ldrb	r3, [r2, #0]
 8000944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000948:	e005      	b.n	8000956 <op_and+0x3a>
    zerocalc(result);
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000950:	e7f7      	b.n	8000942 <op_and+0x26>
 8000952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000956:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8000958:	7008      	strb	r0, [r1, #0]
}
 800095a:	bd08      	pop	{r3, pc}
 800095c:	20008090 	.word	0x20008090
 8000960:	20008075 	.word	0x20008075
 8000964:	2000807c 	.word	0x2000807c
 8000968:	2000808c 	.word	0x2000808c

0800096c <asl>:
void asl() {
 800096c:	b508      	push	{r3, lr}
    value = getvalue();
 800096e:	f7ff fdcd 	bl	800050c <getvalue>
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <asl+0x48>)
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <asl+0x4c>)
 8000976:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <asl+0x50>)
 800097a:	0040      	lsls	r0, r0, #1
 800097c:	b280      	uxth	r0, r0
 800097e:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8000980:	7813      	ldrb	r3, [r2, #0]
 8000982:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8000986:	bf14      	ite	ne
 8000988:	f043 0301 	orrne.w	r3, r3, #1
 800098c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000990:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 8000994:	bf14      	ite	ne
 8000996:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800099a:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 800099e:	0601      	lsls	r1, r0, #24
 80009a0:	bf4c      	ite	mi
 80009a2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80009a6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80009aa:	7013      	strb	r3, [r2, #0]
}
 80009ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80009b0:	f7ff bf4c 	b.w	800084c <putvalue>
 80009b4:	20008090 	.word	0x20008090
 80009b8:	2000807c 	.word	0x2000807c
 80009bc:	2000808c 	.word	0x2000808c

080009c0 <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <bcc+0x30>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	07db      	lsls	r3, r3, #31
 80009c6:	d412      	bmi.n	80009ee <bcc+0x2e>
        oldpc = pc;
 80009c8:	490a      	ldr	r1, [pc, #40]	; (80009f4 <bcc+0x34>)
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <bcc+0x38>)
 80009cc:	880a      	ldrh	r2, [r1, #0]
 80009ce:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <bcc+0x3c>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 80009da:	4053      	eors	r3, r2
 80009dc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80009e0:	d001      	beq.n	80009e6 <bcc+0x26>
 80009e2:	f7ff bda7 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 80009e6:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <bcc+0x40>)
 80009e8:	6813      	ldr	r3, [r2, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	4770      	bx	lr
 80009f0:	2000807c 	.word	0x2000807c
 80009f4:	20008088 	.word	0x20008088
 80009f8:	20008084 	.word	0x20008084
 80009fc:	2000808a 	.word	0x2000808a
 8000a00:	20008078 	.word	0x20008078

08000a04 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <bcs+0x30>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	07db      	lsls	r3, r3, #31
 8000a0a:	d512      	bpl.n	8000a32 <bcs+0x2e>
        oldpc = pc;
 8000a0c:	490a      	ldr	r1, [pc, #40]	; (8000a38 <bcs+0x34>)
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <bcs+0x38>)
 8000a10:	880a      	ldrh	r2, [r1, #0]
 8000a12:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <bcs+0x3c>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000a1e:	4053      	eors	r3, r2
 8000a20:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000a24:	d001      	beq.n	8000a2a <bcs+0x26>
 8000a26:	f7ff bd85 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <bcs+0x40>)
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	4770      	bx	lr
 8000a34:	2000807c 	.word	0x2000807c
 8000a38:	20008088 	.word	0x20008088
 8000a3c:	20008084 	.word	0x20008084
 8000a40:	2000808a 	.word	0x2000808a
 8000a44:	20008078 	.word	0x20008078

08000a48 <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <beq+0x30>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	079b      	lsls	r3, r3, #30
 8000a4e:	d512      	bpl.n	8000a76 <beq+0x2e>
        oldpc = pc;
 8000a50:	490a      	ldr	r1, [pc, #40]	; (8000a7c <beq+0x34>)
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <beq+0x38>)
 8000a54:	880a      	ldrh	r2, [r1, #0]
 8000a56:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <beq+0x3c>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000a62:	4053      	eors	r3, r2
 8000a64:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000a68:	d001      	beq.n	8000a6e <beq+0x26>
 8000a6a:	f7ff bd63 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <beq+0x40>)
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	4770      	bx	lr
 8000a78:	2000807c 	.word	0x2000807c
 8000a7c:	20008088 	.word	0x20008088
 8000a80:	20008084 	.word	0x20008084
 8000a84:	2000808a 	.word	0x2000808a
 8000a88:	20008078 	.word	0x20008078

08000a8c <op_bit>:
void op_bit() {
 8000a8c:	b508      	push	{r3, lr}
    value = getvalue();
 8000a8e:	f7ff fd3d 	bl	800050c <getvalue>
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <op_bit+0x34>)
    result = (uint16_t)a & value;
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <op_bit+0x38>)
    value = getvalue();
 8000a96:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <op_bit+0x3c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4003      	ands	r3, r0
 8000a9e:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <op_bit+0x40>)
 8000aa2:	b14b      	cbz	r3, 8000ab8 <op_bit+0x2c>
 8000aa4:	7813      	ldrb	r3, [r2, #0]
 8000aa6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8000aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aae:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	7013      	strb	r3, [r2, #0]
}
 8000ab6:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000ab8:	7813      	ldrb	r3, [r2, #0]
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	e7f4      	b.n	8000aaa <op_bit+0x1e>
 8000ac0:	20008090 	.word	0x20008090
 8000ac4:	2000808c 	.word	0x2000808c
 8000ac8:	20008075 	.word	0x20008075
 8000acc:	2000807c 	.word	0x2000807c

08000ad0 <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <bmi+0x34>)
 8000ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da12      	bge.n	8000b00 <bmi+0x30>
        oldpc = pc;
 8000ada:	490b      	ldr	r1, [pc, #44]	; (8000b08 <bmi+0x38>)
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <bmi+0x3c>)
 8000ade:	880a      	ldrh	r2, [r1, #0]
 8000ae0:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <bmi+0x40>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000aec:	4053      	eors	r3, r2
 8000aee:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000af2:	d001      	beq.n	8000af8 <bmi+0x28>
 8000af4:	f7ff bd1e 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <bmi+0x44>)
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	2000807c 	.word	0x2000807c
 8000b08:	20008088 	.word	0x20008088
 8000b0c:	20008084 	.word	0x20008084
 8000b10:	2000808a 	.word	0x2000808a
 8000b14:	20008078 	.word	0x20008078

08000b18 <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <bne+0x30>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	079b      	lsls	r3, r3, #30
 8000b1e:	d412      	bmi.n	8000b46 <bne+0x2e>
        oldpc = pc;
 8000b20:	490a      	ldr	r1, [pc, #40]	; (8000b4c <bne+0x34>)
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <bne+0x38>)
 8000b24:	880a      	ldrh	r2, [r1, #0]
 8000b26:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <bne+0x3c>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000b32:	4053      	eors	r3, r2
 8000b34:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000b38:	d001      	beq.n	8000b3e <bne+0x26>
 8000b3a:	f7ff bcfb 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000b3e:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <bne+0x40>)
 8000b40:	6813      	ldr	r3, [r2, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	4770      	bx	lr
 8000b48:	2000807c 	.word	0x2000807c
 8000b4c:	20008088 	.word	0x20008088
 8000b50:	20008084 	.word	0x20008084
 8000b54:	2000808a 	.word	0x2000808a
 8000b58:	20008078 	.word	0x20008078

08000b5c <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <bpl+0x34>)
 8000b5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db12      	blt.n	8000b8c <bpl+0x30>
        oldpc = pc;
 8000b66:	490b      	ldr	r1, [pc, #44]	; (8000b94 <bpl+0x38>)
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <bpl+0x3c>)
 8000b6a:	880a      	ldrh	r2, [r1, #0]
 8000b6c:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <bpl+0x40>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000b78:	4053      	eors	r3, r2
 8000b7a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000b7e:	d001      	beq.n	8000b84 <bpl+0x28>
 8000b80:	f7ff bcd8 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <bpl+0x44>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2000807c 	.word	0x2000807c
 8000b94:	20008088 	.word	0x20008088
 8000b98:	20008084 	.word	0x20008084
 8000b9c:	2000808a 	.word	0x2000808a
 8000ba0:	20008078 	.word	0x20008078

08000ba4 <brk>:
void brk() {
 8000ba4:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8000ba6:	4d0f      	ldr	r5, [pc, #60]	; (8000be4 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8000ba8:	4c0f      	ldr	r4, [pc, #60]	; (8000be8 <brk+0x44>)
    pc++;
 8000baa:	8828      	ldrh	r0, [r5, #0]
 8000bac:	3001      	adds	r0, #1
 8000bae:	b280      	uxth	r0, r0
 8000bb0:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8000bb2:	f7ff fccf 	bl	8000554 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8000bb6:	7820      	ldrb	r0, [r4, #0]
 8000bb8:	f040 0010 	orr.w	r0, r0, #16
 8000bbc:	f7ff fce2 	bl	8000584 <push8>
    setinterrupt(); // set interrupt flag
 8000bc0:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8000bc2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8000bcc:	f7ff fbfc 	bl	80003c8 <read6502>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bd6:	f7ff fbf7 	bl	80003c8 <read6502>
 8000bda:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000bde:	802c      	strh	r4, [r5, #0]
}
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	20008088 	.word	0x20008088
 8000be8:	2000807c 	.word	0x2000807c

08000bec <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <bvc+0x30>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	065b      	lsls	r3, r3, #25
 8000bf2:	d412      	bmi.n	8000c1a <bvc+0x2e>
        oldpc = pc;
 8000bf4:	490a      	ldr	r1, [pc, #40]	; (8000c20 <bvc+0x34>)
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <bvc+0x38>)
 8000bf8:	880a      	ldrh	r2, [r1, #0]
 8000bfa:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <bvc+0x3c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000c06:	4053      	eors	r3, r2
 8000c08:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000c0c:	d001      	beq.n	8000c12 <bvc+0x26>
 8000c0e:	f7ff bc91 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <bvc+0x40>)
 8000c14:	6813      	ldr	r3, [r2, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000807c 	.word	0x2000807c
 8000c20:	20008088 	.word	0x20008088
 8000c24:	20008084 	.word	0x20008084
 8000c28:	2000808a 	.word	0x2000808a
 8000c2c:	20008078 	.word	0x20008078

08000c30 <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <bvs+0x30>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	065b      	lsls	r3, r3, #25
 8000c36:	d512      	bpl.n	8000c5e <bvs+0x2e>
        oldpc = pc;
 8000c38:	490a      	ldr	r1, [pc, #40]	; (8000c64 <bvs+0x34>)
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <bvs+0x38>)
 8000c3c:	880a      	ldrh	r2, [r1, #0]
 8000c3e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <bvs+0x3c>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000c4a:	4053      	eors	r3, r2
 8000c4c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000c50:	d001      	beq.n	8000c56 <bvs+0x26>
 8000c52:	f7ff bc6f 	b.w	8000534 <bcc.part.0>
            else clockticks6502++;
 8000c56:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <bvs+0x40>)
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	6013      	str	r3, [r2, #0]
}
 8000c5e:	4770      	bx	lr
 8000c60:	2000807c 	.word	0x2000807c
 8000c64:	20008088 	.word	0x20008088
 8000c68:	20008084 	.word	0x20008084
 8000c6c:	2000808a 	.word	0x2000808a
 8000c70:	20008078 	.word	0x20008078

08000c74 <clc>:
    clearcarry();
 8000c74:	4a02      	ldr	r2, [pc, #8]	; (8000c80 <clc+0xc>)
 8000c76:	7813      	ldrb	r3, [r2, #0]
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	7013      	strb	r3, [r2, #0]
}
 8000c7e:	4770      	bx	lr
 8000c80:	2000807c 	.word	0x2000807c

08000c84 <cld>:
    cleardecimal();
 8000c84:	4a02      	ldr	r2, [pc, #8]	; (8000c90 <cld+0xc>)
 8000c86:	7813      	ldrb	r3, [r2, #0]
 8000c88:	f023 0308 	bic.w	r3, r3, #8
 8000c8c:	7013      	strb	r3, [r2, #0]
}
 8000c8e:	4770      	bx	lr
 8000c90:	2000807c 	.word	0x2000807c

08000c94 <cli>:
    clearinterrupt();
 8000c94:	4a02      	ldr	r2, [pc, #8]	; (8000ca0 <cli+0xc>)
 8000c96:	7813      	ldrb	r3, [r2, #0]
 8000c98:	f023 0304 	bic.w	r3, r3, #4
 8000c9c:	7013      	strb	r3, [r2, #0]
}
 8000c9e:	4770      	bx	lr
 8000ca0:	2000807c 	.word	0x2000807c

08000ca4 <clv>:
    clearoverflow();
 8000ca4:	4a02      	ldr	r2, [pc, #8]	; (8000cb0 <clv+0xc>)
 8000ca6:	7813      	ldrb	r3, [r2, #0]
 8000ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cac:	7013      	strb	r3, [r2, #0]
}
 8000cae:	4770      	bx	lr
 8000cb0:	2000807c 	.word	0x2000807c

08000cb4 <cmp>:
void cmp() {
 8000cb4:	b508      	push	{r3, lr}
    value = getvalue();
 8000cb6:	f7ff fc29 	bl	800050c <getvalue>
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <cmp+0x4c>)
    result = (uint16_t)a - value;
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <cmp+0x50>)
    value = getvalue();
 8000cbe:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <cmp+0x54>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	1a19      	subs	r1, r3, r0
 8000cc6:	b289      	uxth	r1, r1
 8000cc8:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8000cca:	b2c0      	uxtb	r0, r0
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <cmp+0x58>)
 8000cce:	4283      	cmp	r3, r0
 8000cd0:	7813      	ldrb	r3, [r2, #0]
 8000cd2:	d307      	bcc.n	8000ce4 <cmp+0x30>
 8000cd4:	f043 0001 	orr.w	r0, r3, #1
 8000cd8:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8000cda:	d007      	beq.n	8000cec <cmp+0x38>
        else clearzero();
 8000cdc:	7813      	ldrb	r3, [r2, #0]
 8000cde:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000ce2:	e005      	b.n	8000cf0 <cmp+0x3c>
        else clearcarry();
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8000cea:	e7f7      	b.n	8000cdc <cmp+0x28>
 8000cec:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000cf0:	0609      	lsls	r1, r1, #24
 8000cf2:	bf4c      	ite	mi
 8000cf4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000cf8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000cfc:	7013      	strb	r3, [r2, #0]
}
 8000cfe:	bd08      	pop	{r3, pc}
 8000d00:	20008090 	.word	0x20008090
 8000d04:	2000808c 	.word	0x2000808c
 8000d08:	20008075 	.word	0x20008075
 8000d0c:	2000807c 	.word	0x2000807c

08000d10 <cpx>:
void cpx() {
 8000d10:	b508      	push	{r3, lr}
    value = getvalue();
 8000d12:	f7ff fbfb 	bl	800050c <getvalue>
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <cpx+0x4c>)
    result = (uint16_t)x - value;
 8000d18:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <cpx+0x50>)
    value = getvalue();
 8000d1a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <cpx+0x54>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	1a19      	subs	r1, r3, r0
 8000d22:	b289      	uxth	r1, r1
 8000d24:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8000d26:	b2c0      	uxtb	r0, r0
 8000d28:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <cpx+0x58>)
 8000d2a:	4283      	cmp	r3, r0
 8000d2c:	7813      	ldrb	r3, [r2, #0]
 8000d2e:	d307      	bcc.n	8000d40 <cpx+0x30>
 8000d30:	f043 0001 	orr.w	r0, r3, #1
 8000d34:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8000d36:	d007      	beq.n	8000d48 <cpx+0x38>
        else clearzero();
 8000d38:	7813      	ldrb	r3, [r2, #0]
 8000d3a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000d3e:	e005      	b.n	8000d4c <cpx+0x3c>
        else clearcarry();
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8000d46:	e7f7      	b.n	8000d38 <cpx+0x28>
 8000d48:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000d4c:	0609      	lsls	r1, r1, #24
 8000d4e:	bf4c      	ite	mi
 8000d50:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000d54:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000d58:	7013      	strb	r3, [r2, #0]
}
 8000d5a:	bd08      	pop	{r3, pc}
 8000d5c:	20008090 	.word	0x20008090
 8000d60:	2000808c 	.word	0x2000808c
 8000d64:	20008092 	.word	0x20008092
 8000d68:	2000807c 	.word	0x2000807c

08000d6c <cpy>:
void cpy() {
 8000d6c:	b508      	push	{r3, lr}
    value = getvalue();
 8000d6e:	f7ff fbcd 	bl	800050c <getvalue>
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <cpy+0x4c>)
    result = (uint16_t)y - value;
 8000d74:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <cpy+0x50>)
    value = getvalue();
 8000d76:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <cpy+0x54>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	1a19      	subs	r1, r3, r0
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 8000d82:	b2c0      	uxtb	r0, r0
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <cpy+0x58>)
 8000d86:	4283      	cmp	r3, r0
 8000d88:	7813      	ldrb	r3, [r2, #0]
 8000d8a:	d307      	bcc.n	8000d9c <cpy+0x30>
 8000d8c:	f043 0001 	orr.w	r0, r3, #1
 8000d90:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8000d92:	d007      	beq.n	8000da4 <cpy+0x38>
        else clearzero();
 8000d94:	7813      	ldrb	r3, [r2, #0]
 8000d96:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000d9a:	e005      	b.n	8000da8 <cpy+0x3c>
        else clearcarry();
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8000da2:	e7f7      	b.n	8000d94 <cpy+0x28>
 8000da4:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000da8:	0609      	lsls	r1, r1, #24
 8000daa:	bf4c      	ite	mi
 8000dac:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000db0:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000db4:	7013      	strb	r3, [r2, #0]
}
 8000db6:	bd08      	pop	{r3, pc}
 8000db8:	20008090 	.word	0x20008090
 8000dbc:	2000808c 	.word	0x2000808c
 8000dc0:	20008093 	.word	0x20008093
 8000dc4:	2000807c 	.word	0x2000807c

08000dc8 <dec>:
void dec() {
 8000dc8:	b508      	push	{r3, lr}
    value = getvalue();
 8000dca:	f7ff fb9f 	bl	800050c <getvalue>
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <dec+0x3c>)
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <dec+0x40>)
 8000dd2:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <dec+0x44>)
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	b280      	uxth	r0, r0
 8000dda:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000ddc:	b2c3      	uxtb	r3, r0
 8000dde:	b16b      	cbz	r3, 8000dfc <dec+0x34>
 8000de0:	7813      	ldrb	r3, [r2, #0]
 8000de2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000de6:	0601      	lsls	r1, r0, #24
 8000de8:	bf4c      	ite	mi
 8000dea:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000dee:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000df2:	7013      	strb	r3, [r2, #0]
}
 8000df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000df8:	f7ff bd28 	b.w	800084c <putvalue>
    zerocalc(result);
 8000dfc:	7813      	ldrb	r3, [r2, #0]
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	e7f0      	b.n	8000de6 <dec+0x1e>
 8000e04:	20008090 	.word	0x20008090
 8000e08:	2000807c 	.word	0x2000807c
 8000e0c:	2000808c 	.word	0x2000808c

08000e10 <dex>:
    x--;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <dex+0x2c>)
    zerocalc(x);
 8000e12:	490b      	ldr	r1, [pc, #44]	; (8000e40 <dex+0x30>)
    x--;
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	3a01      	subs	r2, #1
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000e1c:	780b      	ldrb	r3, [r1, #0]
 8000e1e:	b132      	cbz	r2, 8000e2e <dex+0x1e>
 8000e20:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000e24:	0612      	lsls	r2, r2, #24
 8000e26:	700b      	strb	r3, [r1, #0]
 8000e28:	d504      	bpl.n	8000e34 <dex+0x24>
 8000e2a:	f7ff bb8b 	b.w	8000544 <dex.part.0>
    zerocalc(x);
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	e7f7      	b.n	8000e24 <dex+0x14>
    signcalc(x);
 8000e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e38:	700b      	strb	r3, [r1, #0]
}
 8000e3a:	4770      	bx	lr
 8000e3c:	20008092 	.word	0x20008092
 8000e40:	2000807c 	.word	0x2000807c

08000e44 <dey>:

void dey() {
    y--;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <dey+0x2c>)
   
    zerocalc(y);
 8000e46:	490b      	ldr	r1, [pc, #44]	; (8000e74 <dey+0x30>)
    y--;
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	3a01      	subs	r2, #1
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8000e50:	780b      	ldrb	r3, [r1, #0]
 8000e52:	b132      	cbz	r2, 8000e62 <dey+0x1e>
 8000e54:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000e58:	0612      	lsls	r2, r2, #24
 8000e5a:	700b      	strb	r3, [r1, #0]
 8000e5c:	d504      	bpl.n	8000e68 <dey+0x24>
 8000e5e:	f7ff bb71 	b.w	8000544 <dex.part.0>
    zerocalc(y);
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	e7f7      	b.n	8000e58 <dey+0x14>
    signcalc(y);
 8000e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e6c:	700b      	strb	r3, [r1, #0]
}
 8000e6e:	4770      	bx	lr
 8000e70:	20008093 	.word	0x20008093
 8000e74:	2000807c 	.word	0x2000807c

08000e78 <eor>:

void eor() {
 8000e78:	b508      	push	{r3, lr}
    value = getvalue();
 8000e7a:	f7ff fb47 	bl	800050c <getvalue>
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 8000e80:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <eor+0x40>)
    value = getvalue();
 8000e82:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8000e84:	780b      	ldrb	r3, [r1, #0]
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <eor+0x44>)
 8000e88:	4058      	eors	r0, r3
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <eor+0x48>)
 8000e8c:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8000e8e:	b2c3      	uxtb	r3, r0
 8000e90:	b163      	cbz	r3, 8000eac <eor+0x34>
 8000e92:	7813      	ldrb	r3, [r2, #0]
 8000e94:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000e98:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000e9c:	bf14      	ite	ne
 8000e9e:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8000ea2:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8000ea6:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8000ea8:	7008      	strb	r0, [r1, #0]
}
 8000eaa:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000eac:	7813      	ldrb	r3, [r2, #0]
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	e7f1      	b.n	8000e98 <eor+0x20>
 8000eb4:	20008090 	.word	0x20008090
 8000eb8:	20008075 	.word	0x20008075
 8000ebc:	2000807c 	.word	0x2000807c
 8000ec0:	2000808c 	.word	0x2000808c

08000ec4 <inc>:

void inc() {
 8000ec4:	b508      	push	{r3, lr}
    value = getvalue();
 8000ec6:	f7ff fb21 	bl	800050c <getvalue>
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <inc+0x3c>)
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <inc+0x40>)
 8000ece:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <inc+0x44>)
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8000ed8:	b2c3      	uxtb	r3, r0
 8000eda:	b16b      	cbz	r3, 8000ef8 <inc+0x34>
 8000edc:	7813      	ldrb	r3, [r2, #0]
 8000ede:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000ee2:	0601      	lsls	r1, r0, #24
 8000ee4:	bf4c      	ite	mi
 8000ee6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000eea:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000eee:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8000ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000ef4:	f7ff bcaa 	b.w	800084c <putvalue>
    zerocalc(result);
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	e7f0      	b.n	8000ee2 <inc+0x1e>
 8000f00:	20008090 	.word	0x20008090
 8000f04:	2000807c 	.word	0x2000807c
 8000f08:	2000808c 	.word	0x2000808c

08000f0c <inx>:

void inx() {
    x++;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <inx+0x2c>)
   
    zerocalc(x);
 8000f0e:	490b      	ldr	r1, [pc, #44]	; (8000f3c <inx+0x30>)
    x++;
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	3201      	adds	r2, #1
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000f18:	780b      	ldrb	r3, [r1, #0]
 8000f1a:	b132      	cbz	r2, 8000f2a <inx+0x1e>
 8000f1c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000f20:	0612      	lsls	r2, r2, #24
 8000f22:	700b      	strb	r3, [r1, #0]
 8000f24:	d504      	bpl.n	8000f30 <inx+0x24>
 8000f26:	f7ff bb0d 	b.w	8000544 <dex.part.0>
    zerocalc(x);
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	e7f7      	b.n	8000f20 <inx+0x14>
    signcalc(x);
 8000f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f34:	700b      	strb	r3, [r1, #0]
}
 8000f36:	4770      	bx	lr
 8000f38:	20008092 	.word	0x20008092
 8000f3c:	2000807c 	.word	0x2000807c

08000f40 <iny>:

void iny() {
    y++;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <iny+0x2c>)
   
    zerocalc(y);
 8000f42:	490b      	ldr	r1, [pc, #44]	; (8000f70 <iny+0x30>)
    y++;
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	3201      	adds	r2, #1
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8000f4c:	780b      	ldrb	r3, [r1, #0]
 8000f4e:	b132      	cbz	r2, 8000f5e <iny+0x1e>
 8000f50:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000f54:	0612      	lsls	r2, r2, #24
 8000f56:	700b      	strb	r3, [r1, #0]
 8000f58:	d504      	bpl.n	8000f64 <iny+0x24>
 8000f5a:	f7ff baf3 	b.w	8000544 <dex.part.0>
    zerocalc(y);
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	e7f7      	b.n	8000f54 <iny+0x14>
    signcalc(y);
 8000f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f68:	700b      	strb	r3, [r1, #0]
}
 8000f6a:	4770      	bx	lr
 8000f6c:	20008093 	.word	0x20008093
 8000f70:	2000807c 	.word	0x2000807c

08000f74 <jmp>:

void jmp() {
    pc = ea;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <jmp+0xc>)
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <jmp+0x10>)
 8000f7a:	801a      	strh	r2, [r3, #0]
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000807e 	.word	0x2000807e
 8000f84:	20008088 	.word	0x20008088

08000f88 <jsr>:

void jsr() {
 8000f88:	b510      	push	{r4, lr}
    push16(pc - 1);
 8000f8a:	4c05      	ldr	r4, [pc, #20]	; (8000fa0 <jsr+0x18>)
 8000f8c:	8820      	ldrh	r0, [r4, #0]
 8000f8e:	3801      	subs	r0, #1
 8000f90:	b280      	uxth	r0, r0
 8000f92:	f7ff fadf 	bl	8000554 <push16>
    pc = ea;
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <jsr+0x1c>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	8023      	strh	r3, [r4, #0]
}
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20008088 	.word	0x20008088
 8000fa4:	2000807e 	.word	0x2000807e

08000fa8 <lda>:

void lda() {
 8000fa8:	b508      	push	{r3, lr}
    value = getvalue();
 8000faa:	f7ff faaf 	bl	800050c <getvalue>
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <lda+0x3c>)
    value = getvalue();
 8000fb2:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8000fb4:	b2c3      	uxtb	r3, r0
 8000fb6:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <lda+0x40>)
 8000fba:	b14b      	cbz	r3, 8000fd0 <lda+0x28>
 8000fbc:	7813      	ldrb	r3, [r2, #0]
 8000fbe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8000fc2:	0601      	lsls	r1, r0, #24
 8000fc4:	7013      	strb	r3, [r2, #0]
 8000fc6:	d507      	bpl.n	8000fd8 <lda+0x30>
}
 8000fc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000fcc:	f7ff baba 	b.w	8000544 <dex.part.0>
    zerocalc(a);
 8000fd0:	7813      	ldrb	r3, [r2, #0]
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	e7f4      	b.n	8000fc2 <lda+0x1a>
    signcalc(a);
 8000fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fdc:	7013      	strb	r3, [r2, #0]
}
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	20008090 	.word	0x20008090
 8000fe4:	20008075 	.word	0x20008075
 8000fe8:	2000807c 	.word	0x2000807c

08000fec <ldx>:

void ldx() {
 8000fec:	b508      	push	{r3, lr}
    value = getvalue();
 8000fee:	f7ff fa8d 	bl	800050c <getvalue>
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <ldx+0x3c>)
    value = getvalue();
 8000ff6:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 8000ff8:	b2c3      	uxtb	r3, r0
 8000ffa:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <ldx+0x40>)
 8000ffe:	b14b      	cbz	r3, 8001014 <ldx+0x28>
 8001000:	7813      	ldrb	r3, [r2, #0]
 8001002:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001006:	0601      	lsls	r1, r0, #24
 8001008:	7013      	strb	r3, [r2, #0]
 800100a:	d507      	bpl.n	800101c <ldx+0x30>
}
 800100c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001010:	f7ff ba98 	b.w	8000544 <dex.part.0>
    zerocalc(x);
 8001014:	7813      	ldrb	r3, [r2, #0]
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	e7f4      	b.n	8001006 <ldx+0x1a>
    signcalc(x);
 800101c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001020:	7013      	strb	r3, [r2, #0]
}
 8001022:	bd08      	pop	{r3, pc}
 8001024:	20008090 	.word	0x20008090
 8001028:	20008092 	.word	0x20008092
 800102c:	2000807c 	.word	0x2000807c

08001030 <ldy>:

void ldy() {
 8001030:	b508      	push	{r3, lr}
    value = getvalue();
 8001032:	f7ff fa6b 	bl	800050c <getvalue>
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <ldy+0x3c>)
    value = getvalue();
 800103a:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 800103c:	b2c3      	uxtb	r3, r0
 800103e:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <ldy+0x40>)
 8001042:	b14b      	cbz	r3, 8001058 <ldy+0x28>
 8001044:	7813      	ldrb	r3, [r2, #0]
 8001046:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 800104a:	0601      	lsls	r1, r0, #24
 800104c:	7013      	strb	r3, [r2, #0]
 800104e:	d507      	bpl.n	8001060 <ldy+0x30>
}
 8001050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001054:	f7ff ba76 	b.w	8000544 <dex.part.0>
    zerocalc(y);
 8001058:	7813      	ldrb	r3, [r2, #0]
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	e7f4      	b.n	800104a <ldy+0x1a>
    signcalc(y);
 8001060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001064:	7013      	strb	r3, [r2, #0]
}
 8001066:	bd08      	pop	{r3, pc}
 8001068:	20008090 	.word	0x20008090
 800106c:	20008093 	.word	0x20008093
 8001070:	2000807c 	.word	0x2000807c

08001074 <lsr>:

void lsr() {
 8001074:	b508      	push	{r3, lr}
    value = getvalue();
 8001076:	f7ff fa49 	bl	800050c <getvalue>
 800107a:	4603      	mov	r3, r0
 800107c:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 800107e:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 8001082:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <lsr+0x50>)
 8001086:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800108a:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 800108e:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 8001090:	7813      	ldrb	r3, [r2, #0]
 8001092:	bf14      	ite	ne
 8001094:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 8001098:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800109c:	b161      	cbz	r1, 80010b8 <lsr+0x44>
 800109e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80010a2:	0601      	lsls	r1, r0, #24
 80010a4:	bf4c      	ite	mi
 80010a6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80010aa:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80010ae:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 80010b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80010b4:	f7ff bbca 	b.w	800084c <putvalue>
    zerocalc(result);
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	e7f1      	b.n	80010a2 <lsr+0x2e>
 80010be:	bf00      	nop
 80010c0:	20008090 	.word	0x20008090
 80010c4:	2000808c 	.word	0x2000808c
 80010c8:	2000807c 	.word	0x2000807c

080010cc <ora>:

void nop() {
}

void ora() {
 80010cc:	b508      	push	{r3, lr}
    value = getvalue();
 80010ce:	f7ff fa1d 	bl	800050c <getvalue>
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <ora+0x3c>)
    result = (uint16_t)a | value;
 80010d4:	490d      	ldr	r1, [pc, #52]	; (800110c <ora+0x40>)
    value = getvalue();
 80010d6:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 80010d8:	780b      	ldrb	r3, [r1, #0]
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <ora+0x44>)
 80010dc:	4318      	orrs	r0, r3
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <ora+0x48>)
 80010e0:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 80010e2:	b2c3      	uxtb	r3, r0
 80010e4:	b163      	cbz	r3, 8001100 <ora+0x34>
 80010e6:	7813      	ldrb	r3, [r2, #0]
 80010e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80010ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80010f0:	bf14      	ite	ne
 80010f2:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 80010f6:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 80010fa:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 80010fc:	7008      	strb	r0, [r1, #0]
}
 80010fe:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001100:	7813      	ldrb	r3, [r2, #0]
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	e7f1      	b.n	80010ec <ora+0x20>
 8001108:	20008090 	.word	0x20008090
 800110c:	20008075 	.word	0x20008075
 8001110:	2000807c 	.word	0x2000807c
 8001114:	2000808c 	.word	0x2000808c

08001118 <pha>:

void pha() {
    push8(a);
 8001118:	4b01      	ldr	r3, [pc, #4]	; (8001120 <pha+0x8>)
 800111a:	7818      	ldrb	r0, [r3, #0]
 800111c:	f7ff ba32 	b.w	8000584 <push8>
 8001120:	20008075 	.word	0x20008075

08001124 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <php+0xc>)
 8001126:	7818      	ldrb	r0, [r3, #0]
 8001128:	f040 0010 	orr.w	r0, r0, #16
 800112c:	f7ff ba2a 	b.w	8000584 <push8>
 8001130:	2000807c 	.word	0x2000807c

08001134 <pla>:
}

void pla() {
 8001134:	b508      	push	{r3, lr}
    a = pull8();
 8001136:	f7ff fa4b 	bl	80005d0 <pull8>
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <pla+0x30>)
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <pla+0x34>)
 800113e:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 8001140:	7813      	ldrb	r3, [r2, #0]
 8001142:	b140      	cbz	r0, 8001156 <pla+0x22>
 8001144:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001148:	0601      	lsls	r1, r0, #24
 800114a:	7013      	strb	r3, [r2, #0]
 800114c:	d506      	bpl.n	800115c <pla+0x28>
}
 800114e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001152:	f7ff b9f7 	b.w	8000544 <dex.part.0>
    zerocalc(a);
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	e7f5      	b.n	8001148 <pla+0x14>
    signcalc(a);
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	7013      	strb	r3, [r2, #0]
}
 8001162:	bd08      	pop	{r3, pc}
 8001164:	20008075 	.word	0x20008075
 8001168:	2000807c 	.word	0x2000807c

0800116c <plp>:

void plp() {
 800116c:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 800116e:	f7ff fa2f 	bl	80005d0 <pull8>
 8001172:	4b02      	ldr	r3, [pc, #8]	; (800117c <plp+0x10>)
 8001174:	f040 0020 	orr.w	r0, r0, #32
 8001178:	7018      	strb	r0, [r3, #0]
}
 800117a:	bd08      	pop	{r3, pc}
 800117c:	2000807c 	.word	0x2000807c

08001180 <rol>:

void rol() {
 8001180:	b508      	push	{r3, lr}
    value = getvalue();
 8001182:	f7ff f9c3 	bl	800050c <getvalue>
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001188:	4912      	ldr	r1, [pc, #72]	; (80011d4 <rol+0x54>)
    value = getvalue();
 800118a:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 800118c:	780b      	ldrb	r3, [r1, #0]
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <rol+0x58>)
 8001198:	b280      	uxth	r0, r0
   
    carrycalc(result);
 800119a:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 800119e:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 80011a0:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 80011a2:	bf14      	ite	ne
 80011a4:	f043 0301 	orrne.w	r3, r3, #1
 80011a8:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80011ac:	b162      	cbz	r2, 80011c8 <rol+0x48>
 80011ae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80011b2:	0602      	lsls	r2, r0, #24
 80011b4:	bf4c      	ite	mi
 80011b6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80011ba:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80011be:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 80011c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 80011c4:	f7ff bb42 	b.w	800084c <putvalue>
    zerocalc(result);
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	e7f1      	b.n	80011b2 <rol+0x32>
 80011ce:	bf00      	nop
 80011d0:	20008090 	.word	0x20008090
 80011d4:	2000807c 	.word	0x2000807c
 80011d8:	2000808c 	.word	0x2000808c

080011dc <ror>:

void ror() {
 80011dc:	b510      	push	{r4, lr}
    value = getvalue();
 80011de:	f7ff f995 	bl	800050c <getvalue>
 80011e2:	4601      	mov	r1, r0
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80011e6:	4c12      	ldr	r4, [pc, #72]	; (8001230 <ror+0x54>)
    value = getvalue();
 80011e8:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80011ea:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 80011ec:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80011ee:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <ror+0x58>)
    if (value & 1) setcarry();
 80011fa:	bf48      	it	mi
 80011fc:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001200:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 8001202:	b2c2      	uxtb	r2, r0
        else clearcarry();
 8001204:	bf58      	it	pl
 8001206:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800120a:	b162      	cbz	r2, 8001226 <ror+0x4a>
 800120c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001210:	0602      	lsls	r2, r0, #24
 8001212:	bf4c      	ite	mi
 8001214:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001218:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 800121c:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 800121e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 8001222:	f7ff bb13 	b.w	800084c <putvalue>
    zerocalc(result);
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	e7f1      	b.n	8001210 <ror+0x34>
 800122c:	20008090 	.word	0x20008090
 8001230:	2000807c 	.word	0x2000807c
 8001234:	2000808c 	.word	0x2000808c

08001238 <rti>:

void rti() {
 8001238:	b508      	push	{r3, lr}
    cpustatus = pull8();
 800123a:	f7ff f9c9 	bl	80005d0 <pull8>
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <rti+0x18>)
 8001240:	7018      	strb	r0, [r3, #0]
    value = pull16();
 8001242:	f7ff f9ab 	bl	800059c <pull16>
 8001246:	4b03      	ldr	r3, [pc, #12]	; (8001254 <rti+0x1c>)
 8001248:	8018      	strh	r0, [r3, #0]
    pc = value;
 800124a:	4b03      	ldr	r3, [pc, #12]	; (8001258 <rti+0x20>)
 800124c:	8018      	strh	r0, [r3, #0]
}
 800124e:	bd08      	pop	{r3, pc}
 8001250:	2000807c 	.word	0x2000807c
 8001254:	20008090 	.word	0x20008090
 8001258:	20008088 	.word	0x20008088

0800125c <rts>:

void rts() {
 800125c:	b508      	push	{r3, lr}
    value = pull16();
 800125e:	f7ff f99d 	bl	800059c <pull16>
 8001262:	4b03      	ldr	r3, [pc, #12]	; (8001270 <rts+0x14>)
 8001264:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 8001266:	4b03      	ldr	r3, [pc, #12]	; (8001274 <rts+0x18>)
 8001268:	3001      	adds	r0, #1
 800126a:	8018      	strh	r0, [r3, #0]
}
 800126c:	bd08      	pop	{r3, pc}
 800126e:	bf00      	nop
 8001270:	20008090 	.word	0x20008090
 8001274:	20008088 	.word	0x20008088

08001278 <sbc>:

void sbc() {
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 800127a:	f7ff f947 	bl	800050c <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800127e:	4d27      	ldr	r5, [pc, #156]	; (800131c <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <sbc+0xa8>)
 8001282:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 8001286:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001288:	4c26      	ldr	r4, [pc, #152]	; (8001324 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 800128a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800128c:	782b      	ldrb	r3, [r5, #0]
 800128e:	7821      	ldrb	r1, [r4, #0]
 8001290:	f003 0201 	and.w	r2, r3, #1
 8001294:	440a      	add	r2, r1
 8001296:	4e24      	ldr	r6, [pc, #144]	; (8001328 <sbc+0xb0>)
 8001298:	4402      	add	r2, r0
 800129a:	b292      	uxth	r2, r2
   
    carrycalc(result);
 800129c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80012a0:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 80012a2:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 80012a4:	bf14      	ite	ne
 80012a6:	f043 0301 	orrne.w	r3, r3, #1
 80012aa:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80012ae:	b1c6      	cbz	r6, 80012e2 <sbc+0x6a>
 80012b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 80012b4:	ea81 0602 	eor.w	r6, r1, r2
 80012b8:	ea80 0702 	eor.w	r7, r0, r2
 80012bc:	4630      	mov	r0, r6
 80012be:	4038      	ands	r0, r7
 80012c0:	0607      	lsls	r7, r0, #24
 80012c2:	bf4c      	ite	mi
 80012c4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80012c8:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 80012cc:	0616      	lsls	r6, r2, #24
 80012ce:	bf4c      	ite	mi
 80012d0:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80012d4:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 80012d8:	0718      	lsls	r0, r3, #28
 80012da:	d405      	bmi.n	80012e8 <sbc+0x70>
 80012dc:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 80012de:	7022      	strb	r2, [r4, #0]
}
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	e7e5      	b.n	80012b4 <sbc+0x3c>
        a -= 0x66;
 80012e8:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 80012ec:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 80012ee:	f000 000f 	and.w	r0, r0, #15
 80012f2:	2809      	cmp	r0, #9
            a += 0x06;
 80012f4:	bf8a      	itet	hi
 80012f6:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 80012f8:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 80012fa:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80012fc:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80012fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8001302:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8001306:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8001308:	4908      	ldr	r1, [pc, #32]	; (800132c <sbc+0xb4>)
        clearcarry();
 800130a:	702b      	strb	r3, [r5, #0]
            setcarry();
 800130c:	bf84      	itt	hi
 800130e:	f043 0301 	orrhi.w	r3, r3, #1
 8001312:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8001314:	680b      	ldr	r3, [r1, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	600b      	str	r3, [r1, #0]
 800131a:	e7e0      	b.n	80012de <sbc+0x66>
 800131c:	2000807c 	.word	0x2000807c
 8001320:	20008090 	.word	0x20008090
 8001324:	20008075 	.word	0x20008075
 8001328:	2000808c 	.word	0x2000808c
 800132c:	20008078 	.word	0x20008078

08001330 <sec>:

void sec() {
    setcarry();
 8001330:	4a02      	ldr	r2, [pc, #8]	; (800133c <sec+0xc>)
 8001332:	7813      	ldrb	r3, [r2, #0]
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	7013      	strb	r3, [r2, #0]
}
 800133a:	4770      	bx	lr
 800133c:	2000807c 	.word	0x2000807c

08001340 <sed>:

void sed() {
    setdecimal();
 8001340:	4a02      	ldr	r2, [pc, #8]	; (800134c <sed+0xc>)
 8001342:	7813      	ldrb	r3, [r2, #0]
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	7013      	strb	r3, [r2, #0]
}
 800134a:	4770      	bx	lr
 800134c:	2000807c 	.word	0x2000807c

08001350 <sei>:

void sei() {
    setinterrupt();
 8001350:	4a02      	ldr	r2, [pc, #8]	; (800135c <sei+0xc>)
 8001352:	7813      	ldrb	r3, [r2, #0]
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	7013      	strb	r3, [r2, #0]
}
 800135a:	4770      	bx	lr
 800135c:	2000807c 	.word	0x2000807c

08001360 <sta>:

void sta() {
    putvalue(a);
 8001360:	4b01      	ldr	r3, [pc, #4]	; (8001368 <sta+0x8>)
 8001362:	7818      	ldrb	r0, [r3, #0]
 8001364:	f7ff ba72 	b.w	800084c <putvalue>
 8001368:	20008075 	.word	0x20008075

0800136c <stx>:
}

void stx() {
    putvalue(x);
 800136c:	4b01      	ldr	r3, [pc, #4]	; (8001374 <stx+0x8>)
 800136e:	7818      	ldrb	r0, [r3, #0]
 8001370:	f7ff ba6c 	b.w	800084c <putvalue>
 8001374:	20008092 	.word	0x20008092

08001378 <sty>:
}

void sty() {
    putvalue(y);
 8001378:	4b01      	ldr	r3, [pc, #4]	; (8001380 <sty+0x8>)
 800137a:	7818      	ldrb	r0, [r3, #0]
 800137c:	f7ff ba66 	b.w	800084c <putvalue>
 8001380:	20008093 	.word	0x20008093

08001384 <tax>:
}

void tax() {
    x = a;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <tax+0x2c>)
   
    zerocalc(x);
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <tax+0x30>)
    x = a;
 8001388:	7819      	ldrb	r1, [r3, #0]
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <tax+0x34>)
 800138c:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 800138e:	7813      	ldrb	r3, [r2, #0]
 8001390:	b131      	cbz	r1, 80013a0 <tax+0x1c>
 8001392:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001396:	0609      	lsls	r1, r1, #24
 8001398:	7013      	strb	r3, [r2, #0]
 800139a:	d504      	bpl.n	80013a6 <tax+0x22>
 800139c:	f7ff b8d2 	b.w	8000544 <dex.part.0>
    zerocalc(x);
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	e7f7      	b.n	8001396 <tax+0x12>
    signcalc(x);
 80013a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013aa:	7013      	strb	r3, [r2, #0]
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20008075 	.word	0x20008075
 80013b4:	2000807c 	.word	0x2000807c
 80013b8:	20008092 	.word	0x20008092

080013bc <tay>:

void tay() {
    y = a;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <tay+0x2c>)
   
    zerocalc(y);
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <tay+0x30>)
    y = a;
 80013c0:	7819      	ldrb	r1, [r3, #0]
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <tay+0x34>)
 80013c4:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 80013c6:	7813      	ldrb	r3, [r2, #0]
 80013c8:	b131      	cbz	r1, 80013d8 <tay+0x1c>
 80013ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80013ce:	0609      	lsls	r1, r1, #24
 80013d0:	7013      	strb	r3, [r2, #0]
 80013d2:	d504      	bpl.n	80013de <tay+0x22>
 80013d4:	f7ff b8b6 	b.w	8000544 <dex.part.0>
    zerocalc(y);
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	e7f7      	b.n	80013ce <tay+0x12>
    signcalc(y);
 80013de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013e2:	7013      	strb	r3, [r2, #0]
}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20008075 	.word	0x20008075
 80013ec:	2000807c 	.word	0x2000807c
 80013f0:	20008093 	.word	0x20008093

080013f4 <tsx>:

void tsx() {
    x = sp;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <tsx+0x2c>)
   
    zerocalc(x);
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <tsx+0x30>)
    x = sp;
 80013f8:	7819      	ldrb	r1, [r3, #0]
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <tsx+0x34>)
 80013fc:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80013fe:	7813      	ldrb	r3, [r2, #0]
 8001400:	b131      	cbz	r1, 8001410 <tsx+0x1c>
 8001402:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8001406:	0609      	lsls	r1, r1, #24
 8001408:	7013      	strb	r3, [r2, #0]
 800140a:	d504      	bpl.n	8001416 <tsx+0x22>
 800140c:	f7ff b89a 	b.w	8000544 <dex.part.0>
    zerocalc(x);
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	e7f7      	b.n	8001406 <tsx+0x12>
    signcalc(x);
 8001416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800141a:	7013      	strb	r3, [r2, #0]
}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000808e 	.word	0x2000808e
 8001424:	2000807c 	.word	0x2000807c
 8001428:	20008092 	.word	0x20008092

0800142c <txa>:

void txa() {
    a = x;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <txa+0x2c>)
   
    zerocalc(a);
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <txa+0x30>)
    a = x;
 8001430:	7819      	ldrb	r1, [r3, #0]
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <txa+0x34>)
 8001434:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8001436:	7813      	ldrb	r3, [r2, #0]
 8001438:	b131      	cbz	r1, 8001448 <txa+0x1c>
 800143a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 800143e:	0609      	lsls	r1, r1, #24
 8001440:	7013      	strb	r3, [r2, #0]
 8001442:	d504      	bpl.n	800144e <txa+0x22>
 8001444:	f7ff b87e 	b.w	8000544 <dex.part.0>
    zerocalc(a);
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	e7f7      	b.n	800143e <txa+0x12>
    signcalc(a);
 800144e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001452:	7013      	strb	r3, [r2, #0]
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20008092 	.word	0x20008092
 800145c:	2000807c 	.word	0x2000807c
 8001460:	20008075 	.word	0x20008075

08001464 <txs>:

void txs() {
    sp = x;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <txs+0xc>)
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <txs+0x10>)
 800146a:	701a      	strb	r2, [r3, #0]
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20008092 	.word	0x20008092
 8001474:	2000808e 	.word	0x2000808e

08001478 <tya>:

void tya() {
    a = y;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <tya+0x2c>)
   
    zerocalc(a);
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <tya+0x30>)
    a = y;
 800147c:	7819      	ldrb	r1, [r3, #0]
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <tya+0x34>)
 8001480:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8001482:	7813      	ldrb	r3, [r2, #0]
 8001484:	b131      	cbz	r1, 8001494 <tya+0x1c>
 8001486:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 800148a:	0609      	lsls	r1, r1, #24
 800148c:	7013      	strb	r3, [r2, #0]
 800148e:	d504      	bpl.n	800149a <tya+0x22>
 8001490:	f7ff b858 	b.w	8000544 <dex.part.0>
    zerocalc(a);
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	e7f7      	b.n	800148a <tya+0x12>
    signcalc(a);
 800149a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800149e:	7013      	strb	r3, [r2, #0]
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20008093 	.word	0x20008093
 80014a8:	2000807c 	.word	0x2000807c
 80014ac:	20008075 	.word	0x20008075

080014b0 <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 80014b4:	4e01      	ldr	r6, [pc, #4]	; (80014bc <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 80014b6:	4d02      	ldr	r5, [pc, #8]	; (80014c0 <exec6502+0x10>)
  while (tickcount--) {
 80014b8:	b924      	cbnz	r4, 80014c4 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	20008088 	.word	0x20008088
 80014c0:	2000808f 	.word	0x2000808f
    opcode = read6502(pc++);
 80014c4:	8830      	ldrh	r0, [r6, #0]
 80014c6:	1c43      	adds	r3, r0, #1
 80014c8:	8033      	strh	r3, [r6, #0]
 80014ca:	f7fe ff7d 	bl	80003c8 <read6502>
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <exec6502+0x38>)
    opcode = read6502(pc++);
 80014d2:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	f043 0320 	orr.w	r3, r3, #32
 80014da:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	702b      	strb	r3, [r5, #0]
 80014e0:	e004      	b.n	80014ec <exec6502+0x3c>
 80014e2:	bf00      	nop
 80014e4:	20008086 	.word	0x20008086
 80014e8:	2000807c 	.word	0x2000807c
		switch (opcode) {
 80014ec:	28fe      	cmp	r0, #254	; 0xfe
 80014ee:	f200 8103 	bhi.w	80016f8 <exec6502+0x248>
 80014f2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80014f6:	00ff      	.short	0x00ff
 80014f8:	01010107 	.word	0x01010107
 80014fc:	01010101 	.word	0x01010101
 8001500:	0111010c 	.word	0x0111010c
 8001504:	01160101 	.word	0x01160101
 8001508:	011e0119 	.word	0x011e0119
 800150c:	01010101 	.word	0x01010101
 8001510:	01280123 	.word	0x01280123
 8001514:	012d0101 	.word	0x012d0101
 8001518:	01010132 	.word	0x01010132
 800151c:	01010101 	.word	0x01010101
 8001520:	013c0137 	.word	0x013c0137
 8001524:	01410101 	.word	0x01410101
 8001528:	01010144 	.word	0x01010144
 800152c:	01010101 	.word	0x01010101
 8001530:	014e0149 	.word	0x014e0149
 8001534:	01530101 	.word	0x01530101
 8001538:	01010158 	.word	0x01010158
 800153c:	015d0101 	.word	0x015d0101
 8001540:	01670162 	.word	0x01670162
 8001544:	016c0101 	.word	0x016c0101
 8001548:	0174016f 	.word	0x0174016f
 800154c:	01790101 	.word	0x01790101
 8001550:	0183017e 	.word	0x0183017e
 8001554:	01880101 	.word	0x01880101
 8001558:	0101018d 	.word	0x0101018d
 800155c:	01010101 	.word	0x01010101
 8001560:	01970192 	.word	0x01970192
 8001564:	019c0101 	.word	0x019c0101
 8001568:	0101019f 	.word	0x0101019f
 800156c:	01010101 	.word	0x01010101
 8001570:	01a901a4 	.word	0x01a901a4
 8001574:	01ae0101 	.word	0x01ae0101
 8001578:	010101b1 	.word	0x010101b1
 800157c:	01010101 	.word	0x01010101
 8001580:	01bb01b6 	.word	0x01bb01b6
 8001584:	01c00101 	.word	0x01c00101
 8001588:	01c801c3 	.word	0x01c801c3
 800158c:	01cd0101 	.word	0x01cd0101
 8001590:	01d701d2 	.word	0x01d701d2
 8001594:	01dc0101 	.word	0x01dc0101
 8001598:	010101e1 	.word	0x010101e1
 800159c:	01010101 	.word	0x01010101
 80015a0:	01eb01e6 	.word	0x01eb01e6
 80015a4:	01f00101 	.word	0x01f00101
 80015a8:	010101f3 	.word	0x010101f3
 80015ac:	01010101 	.word	0x01010101
 80015b0:	01fd01f8 	.word	0x01fd01f8
 80015b4:	02020101 	.word	0x02020101
 80015b8:	01010205 	.word	0x01010205
 80015bc:	01010101 	.word	0x01010101
 80015c0:	020f020a 	.word	0x020f020a
 80015c4:	02140101 	.word	0x02140101
 80015c8:	021c0217 	.word	0x021c0217
 80015cc:	02210101 	.word	0x02210101
 80015d0:	022b0226 	.word	0x022b0226
 80015d4:	02300101 	.word	0x02300101
 80015d8:	01010235 	.word	0x01010235
 80015dc:	01010101 	.word	0x01010101
 80015e0:	023f023a 	.word	0x023f023a
 80015e4:	02440101 	.word	0x02440101
 80015e8:	01010247 	.word	0x01010247
 80015ec:	01010101 	.word	0x01010101
 80015f0:	0251024c 	.word	0x0251024c
 80015f4:	01010101 	.word	0x01010101
 80015f8:	01010256 	.word	0x01010256
 80015fc:	025b0101 	.word	0x025b0101
 8001600:	02650260 	.word	0x02650260
 8001604:	026a0101 	.word	0x026a0101
 8001608:	026d0101 	.word	0x026d0101
 800160c:	02700101 	.word	0x02700101
 8001610:	027a0275 	.word	0x027a0275
 8001614:	027f0101 	.word	0x027f0101
 8001618:	01010284 	.word	0x01010284
 800161c:	02890101 	.word	0x02890101
 8001620:	0293028e 	.word	0x0293028e
 8001624:	02980101 	.word	0x02980101
 8001628:	02a3029b 	.word	0x02a3029b
 800162c:	01010101 	.word	0x01010101
 8001630:	010102a6 	.word	0x010102a6
 8001634:	02ab0101 	.word	0x02ab0101
 8001638:	02b502b0 	.word	0x02b502b0
 800163c:	02ba0101 	.word	0x02ba0101
 8001640:	02c402bf 	.word	0x02c402bf
 8001644:	02c90101 	.word	0x02c90101
 8001648:	02d102cc 	.word	0x02d102cc
 800164c:	02d40101 	.word	0x02d40101
 8001650:	02de02d9 	.word	0x02de02d9
 8001654:	02e30101 	.word	0x02e30101
 8001658:	010102e8 	.word	0x010102e8
 800165c:	02ed0101 	.word	0x02ed0101
 8001660:	02f702f2 	.word	0x02f702f2
 8001664:	02fc0101 	.word	0x02fc0101
 8001668:	030402ff 	.word	0x030402ff
 800166c:	03070101 	.word	0x03070101
 8001670:	0311030c 	.word	0x0311030c
 8001674:	03160101 	.word	0x03160101
 8001678:	0101031b 	.word	0x0101031b
 800167c:	03200101 	.word	0x03200101
 8001680:	032a0325 	.word	0x032a0325
 8001684:	032f0101 	.word	0x032f0101
 8001688:	03370332 	.word	0x03370332
 800168c:	033a0101 	.word	0x033a0101
 8001690:	0344033f 	.word	0x0344033f
 8001694:	03490101 	.word	0x03490101
 8001698:	0101034e 	.word	0x0101034e
 800169c:	01010101 	.word	0x01010101
 80016a0:	03580353 	.word	0x03580353
 80016a4:	035d0101 	.word	0x035d0101
 80016a8:	01010360 	.word	0x01010360
 80016ac:	01010101 	.word	0x01010101
 80016b0:	036a0365 	.word	0x036a0365
 80016b4:	036f0101 	.word	0x036f0101
 80016b8:	01010374 	.word	0x01010374
 80016bc:	03790101 	.word	0x03790101
 80016c0:	0383037e 	.word	0x0383037e
 80016c4:	03880101 	.word	0x03880101
 80016c8:	0101038b 	.word	0x0101038b
 80016cc:	0390038b 	.word	0x0390038b
 80016d0:	039a0395 	.word	0x039a0395
 80016d4:	039f0101 	.word	0x039f0101
 80016d8:	010103a4 	.word	0x010103a4
 80016dc:	01010101 	.word	0x01010101
 80016e0:	03ae03a9 	.word	0x03ae03a9
 80016e4:	03b30101 	.word	0x03b30101
 80016e8:	010103b6 	.word	0x010103b6
 80016ec:	01010101 	.word	0x01010101
 80016f0:	03c003bb 	.word	0x03c003bb
			brk();
 80016f4:	f7ff fa56 	bl	8000ba4 <brk>
      instructions++;
 80016f8:	4acf      	ldr	r2, [pc, #828]	; (8001a38 <exec6502+0x588>)
 80016fa:	3c01      	subs	r4, #1
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e6d9      	b.n	80014b8 <exec6502+0x8>
			indx();
 8001704:	f7ff f866 	bl	80007d4 <indx>
			ora();
 8001708:	f7ff fce0 	bl	80010cc <ora>
			break;
 800170c:	e7f4      	b.n	80016f8 <exec6502+0x248>
			zp();
 800170e:	f7fe ffa1 	bl	8000654 <zp>
			ora();
 8001712:	f7ff fcdb 	bl	80010cc <ora>
			break;
 8001716:	e7ef      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001718:	f7fe ff9c 	bl	8000654 <zp>
			asl();
 800171c:	f7ff f926 	bl	800096c <asl>
			break;
 8001720:	e7ea      	b.n	80016f8 <exec6502+0x248>
			php();
 8001722:	f7ff fcff 	bl	8001124 <php>
			break;
 8001726:	e7e7      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001728:	f7fe ff88 	bl	800063c <imm>
			ora();
 800172c:	f7ff fcce 	bl	80010cc <ora>
			break;
 8001730:	e7e2      	b.n	80016f8 <exec6502+0x248>
  useaccum = 1;
 8001732:	2301      	movs	r3, #1
 8001734:	702b      	strb	r3, [r5, #0]
			asl();
 8001736:	f7ff f919 	bl	800096c <asl>
			break;
 800173a:	e7dd      	b.n	80016f8 <exec6502+0x248>
			abso();
 800173c:	f7fe ffd4 	bl	80006e8 <abso>
			ora();
 8001740:	f7ff fcc4 	bl	80010cc <ora>
			break;
 8001744:	e7d8      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001746:	f7fe ffcf 	bl	80006e8 <abso>
			asl();
 800174a:	f7ff f90f 	bl	800096c <asl>
			break;
 800174e:	e7d3      	b.n	80016f8 <exec6502+0x248>
			rel();
 8001750:	f7fe ffb6 	bl	80006c0 <rel>
			bpl();
 8001754:	f7ff fa02 	bl	8000b5c <bpl>
			break;
 8001758:	e7ce      	b.n	80016f8 <exec6502+0x248>
			indy();
 800175a:	f7ff f859 	bl	8000810 <indy>
			ora();
 800175e:	f7ff fcb5 	bl	80010cc <ora>
			break;
 8001762:	e7c9      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001764:	f7fe ff84 	bl	8000670 <zpx>
			ora();
 8001768:	f7ff fcb0 	bl	80010cc <ora>
			break;
 800176c:	e7c4      	b.n	80016f8 <exec6502+0x248>
			zpx();
 800176e:	f7fe ff7f 	bl	8000670 <zpx>
			asl();
 8001772:	f7ff f8fb 	bl	800096c <asl>
			break;
 8001776:	e7bf      	b.n	80016f8 <exec6502+0x248>
			clc();
 8001778:	f7ff fa7c 	bl	8000c74 <clc>
			break;
 800177c:	e7bc      	b.n	80016f8 <exec6502+0x248>
			absy();
 800177e:	f7fe ffe7 	bl	8000750 <absy>
			ora();
 8001782:	f7ff fca3 	bl	80010cc <ora>
			break;
 8001786:	e7b7      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001788:	f7fe ffc6 	bl	8000718 <absx>
			ora();
 800178c:	f7ff fc9e 	bl	80010cc <ora>
			break;
 8001790:	e7b2      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001792:	f7fe ffc1 	bl	8000718 <absx>
			asl();
 8001796:	f7ff f8e9 	bl	800096c <asl>
			break;
 800179a:	e7ad      	b.n	80016f8 <exec6502+0x248>
			abso();
 800179c:	f7fe ffa4 	bl	80006e8 <abso>
			jsr();
 80017a0:	f7ff fbf2 	bl	8000f88 <jsr>
			break;
 80017a4:	e7a8      	b.n	80016f8 <exec6502+0x248>
			indx();
 80017a6:	f7ff f815 	bl	80007d4 <indx>
			op_and();
 80017aa:	f7ff f8b7 	bl	800091c <op_and>
			break;
 80017ae:	e7a3      	b.n	80016f8 <exec6502+0x248>
			zp();
 80017b0:	f7fe ff50 	bl	8000654 <zp>
			op_bit();
 80017b4:	f7ff f96a 	bl	8000a8c <op_bit>
			break;
 80017b8:	e79e      	b.n	80016f8 <exec6502+0x248>
			zp();
 80017ba:	f7fe ff4b 	bl	8000654 <zp>
			op_and();
 80017be:	f7ff f8ad 	bl	800091c <op_and>
			break;
 80017c2:	e799      	b.n	80016f8 <exec6502+0x248>
			zp();
 80017c4:	f7fe ff46 	bl	8000654 <zp>
			rol();
 80017c8:	f7ff fcda 	bl	8001180 <rol>
			break;
 80017cc:	e794      	b.n	80016f8 <exec6502+0x248>
			plp();
 80017ce:	f7ff fccd 	bl	800116c <plp>
			break;
 80017d2:	e791      	b.n	80016f8 <exec6502+0x248>
			imm();
 80017d4:	f7fe ff32 	bl	800063c <imm>
			op_and();
 80017d8:	f7ff f8a0 	bl	800091c <op_and>
			break;
 80017dc:	e78c      	b.n	80016f8 <exec6502+0x248>
  useaccum = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	702b      	strb	r3, [r5, #0]
			rol();
 80017e2:	f7ff fccd 	bl	8001180 <rol>
			break;
 80017e6:	e787      	b.n	80016f8 <exec6502+0x248>
			abso();
 80017e8:	f7fe ff7e 	bl	80006e8 <abso>
			op_bit();
 80017ec:	f7ff f94e 	bl	8000a8c <op_bit>
			break;
 80017f0:	e782      	b.n	80016f8 <exec6502+0x248>
			abso();
 80017f2:	f7fe ff79 	bl	80006e8 <abso>
			op_and();
 80017f6:	f7ff f891 	bl	800091c <op_and>
			break;
 80017fa:	e77d      	b.n	80016f8 <exec6502+0x248>
			abso();
 80017fc:	f7fe ff74 	bl	80006e8 <abso>
			rol();
 8001800:	f7ff fcbe 	bl	8001180 <rol>
			break;
 8001804:	e778      	b.n	80016f8 <exec6502+0x248>
			rel();
 8001806:	f7fe ff5b 	bl	80006c0 <rel>
			bmi();
 800180a:	f7ff f961 	bl	8000ad0 <bmi>
			break;
 800180e:	e773      	b.n	80016f8 <exec6502+0x248>
			indy();
 8001810:	f7fe fffe 	bl	8000810 <indy>
			op_and();
 8001814:	f7ff f882 	bl	800091c <op_and>
			break;
 8001818:	e76e      	b.n	80016f8 <exec6502+0x248>
			zpx();
 800181a:	f7fe ff29 	bl	8000670 <zpx>
			op_and();
 800181e:	f7ff f87d 	bl	800091c <op_and>
			break;
 8001822:	e769      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001824:	f7fe ff24 	bl	8000670 <zpx>
			rol();
 8001828:	f7ff fcaa 	bl	8001180 <rol>
			break;
 800182c:	e764      	b.n	80016f8 <exec6502+0x248>
			sec();
 800182e:	f7ff fd7f 	bl	8001330 <sec>
			break;
 8001832:	e761      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001834:	f7fe ff8c 	bl	8000750 <absy>
			op_and();
 8001838:	f7ff f870 	bl	800091c <op_and>
			break;
 800183c:	e75c      	b.n	80016f8 <exec6502+0x248>
			absx();
 800183e:	f7fe ff6b 	bl	8000718 <absx>
			op_and();
 8001842:	f7ff f86b 	bl	800091c <op_and>
			break;
 8001846:	e757      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001848:	f7fe ff66 	bl	8000718 <absx>
			rol();
 800184c:	f7ff fc98 	bl	8001180 <rol>
			break;
 8001850:	e752      	b.n	80016f8 <exec6502+0x248>
			rti();
 8001852:	f7ff fcf1 	bl	8001238 <rti>
			break;
 8001856:	e74f      	b.n	80016f8 <exec6502+0x248>
			indx();
 8001858:	f7fe ffbc 	bl	80007d4 <indx>
			eor();
 800185c:	f7ff fb0c 	bl	8000e78 <eor>
			break;
 8001860:	e74a      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001862:	f7fe fef7 	bl	8000654 <zp>
			eor();
 8001866:	f7ff fb07 	bl	8000e78 <eor>
			break;
 800186a:	e745      	b.n	80016f8 <exec6502+0x248>
			zp();
 800186c:	f7fe fef2 	bl	8000654 <zp>
			lsr();
 8001870:	f7ff fc00 	bl	8001074 <lsr>
			break;
 8001874:	e740      	b.n	80016f8 <exec6502+0x248>
			pha();
 8001876:	f7ff fc4f 	bl	8001118 <pha>
			break;
 800187a:	e73d      	b.n	80016f8 <exec6502+0x248>
			imm();
 800187c:	f7fe fede 	bl	800063c <imm>
			eor();
 8001880:	f7ff fafa 	bl	8000e78 <eor>
			break;
 8001884:	e738      	b.n	80016f8 <exec6502+0x248>
  useaccum = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	702b      	strb	r3, [r5, #0]
			lsr();
 800188a:	f7ff fbf3 	bl	8001074 <lsr>
			break;
 800188e:	e733      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001890:	f7fe ff2a 	bl	80006e8 <abso>
			jmp();
 8001894:	f7ff fb6e 	bl	8000f74 <jmp>
			break;
 8001898:	e72e      	b.n	80016f8 <exec6502+0x248>
			abso();
 800189a:	f7fe ff25 	bl	80006e8 <abso>
			eor();
 800189e:	f7ff faeb 	bl	8000e78 <eor>
			break;
 80018a2:	e729      	b.n	80016f8 <exec6502+0x248>
			abso();
 80018a4:	f7fe ff20 	bl	80006e8 <abso>
			lsr();
 80018a8:	f7ff fbe4 	bl	8001074 <lsr>
			break;
 80018ac:	e724      	b.n	80016f8 <exec6502+0x248>
			rel();
 80018ae:	f7fe ff07 	bl	80006c0 <rel>
			bvc();
 80018b2:	f7ff f99b 	bl	8000bec <bvc>
			break;
 80018b6:	e71f      	b.n	80016f8 <exec6502+0x248>
			indy();
 80018b8:	f7fe ffaa 	bl	8000810 <indy>
			eor();
 80018bc:	f7ff fadc 	bl	8000e78 <eor>
			break;
 80018c0:	e71a      	b.n	80016f8 <exec6502+0x248>
			zpx();
 80018c2:	f7fe fed5 	bl	8000670 <zpx>
			eor();
 80018c6:	f7ff fad7 	bl	8000e78 <eor>
			break;
 80018ca:	e715      	b.n	80016f8 <exec6502+0x248>
			zpx();
 80018cc:	f7fe fed0 	bl	8000670 <zpx>
			lsr();
 80018d0:	f7ff fbd0 	bl	8001074 <lsr>
			break;
 80018d4:	e710      	b.n	80016f8 <exec6502+0x248>
			cli();
 80018d6:	f7ff f9dd 	bl	8000c94 <cli>
			break;
 80018da:	e70d      	b.n	80016f8 <exec6502+0x248>
			absy();
 80018dc:	f7fe ff38 	bl	8000750 <absy>
			eor();
 80018e0:	f7ff faca 	bl	8000e78 <eor>
			break;
 80018e4:	e708      	b.n	80016f8 <exec6502+0x248>
			absx();
 80018e6:	f7fe ff17 	bl	8000718 <absx>
			eor();
 80018ea:	f7ff fac5 	bl	8000e78 <eor>
			break;
 80018ee:	e703      	b.n	80016f8 <exec6502+0x248>
			absx();
 80018f0:	f7fe ff12 	bl	8000718 <absx>
			lsr();
 80018f4:	f7ff fbbe 	bl	8001074 <lsr>
			break;
 80018f8:	e6fe      	b.n	80016f8 <exec6502+0x248>
			rts();
 80018fa:	f7ff fcaf 	bl	800125c <rts>
			break;
 80018fe:	e6fb      	b.n	80016f8 <exec6502+0x248>
			indx();
 8001900:	f7fe ff68 	bl	80007d4 <indx>
			adc();
 8001904:	f7fe ffb4 	bl	8000870 <adc>
			break;
 8001908:	e6f6      	b.n	80016f8 <exec6502+0x248>
			zp();
 800190a:	f7fe fea3 	bl	8000654 <zp>
			adc();
 800190e:	f7fe ffaf 	bl	8000870 <adc>
			break;
 8001912:	e6f1      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001914:	f7fe fe9e 	bl	8000654 <zp>
			ror();
 8001918:	f7ff fc60 	bl	80011dc <ror>
			break;
 800191c:	e6ec      	b.n	80016f8 <exec6502+0x248>
			pla();
 800191e:	f7ff fc09 	bl	8001134 <pla>
			break;
 8001922:	e6e9      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001924:	f7fe fe8a 	bl	800063c <imm>
			adc();
 8001928:	f7fe ffa2 	bl	8000870 <adc>
			break;
 800192c:	e6e4      	b.n	80016f8 <exec6502+0x248>
  useaccum = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	702b      	strb	r3, [r5, #0]
			ror();
 8001932:	f7ff fc53 	bl	80011dc <ror>
			break;
 8001936:	e6df      	b.n	80016f8 <exec6502+0x248>
			ind();
 8001938:	f7fe ff26 	bl	8000788 <ind>
			jmp();
 800193c:	f7ff fb1a 	bl	8000f74 <jmp>
			break;
 8001940:	e6da      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001942:	f7fe fed1 	bl	80006e8 <abso>
			adc();
 8001946:	f7fe ff93 	bl	8000870 <adc>
			break;
 800194a:	e6d5      	b.n	80016f8 <exec6502+0x248>
			abso();
 800194c:	f7fe fecc 	bl	80006e8 <abso>
			ror();
 8001950:	f7ff fc44 	bl	80011dc <ror>
			break;
 8001954:	e6d0      	b.n	80016f8 <exec6502+0x248>
			rel();
 8001956:	f7fe feb3 	bl	80006c0 <rel>
			bvs();
 800195a:	f7ff f969 	bl	8000c30 <bvs>
			break;
 800195e:	e6cb      	b.n	80016f8 <exec6502+0x248>
			indy();
 8001960:	f7fe ff56 	bl	8000810 <indy>
			adc();
 8001964:	f7fe ff84 	bl	8000870 <adc>
			break;
 8001968:	e6c6      	b.n	80016f8 <exec6502+0x248>
			zpx();
 800196a:	f7fe fe81 	bl	8000670 <zpx>
			adc();
 800196e:	f7fe ff7f 	bl	8000870 <adc>
			break;
 8001972:	e6c1      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001974:	f7fe fe7c 	bl	8000670 <zpx>
			ror();
 8001978:	f7ff fc30 	bl	80011dc <ror>
			break;
 800197c:	e6bc      	b.n	80016f8 <exec6502+0x248>
			sei();
 800197e:	f7ff fce7 	bl	8001350 <sei>
			break;
 8001982:	e6b9      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001984:	f7fe fee4 	bl	8000750 <absy>
			adc();
 8001988:	f7fe ff72 	bl	8000870 <adc>
			break;
 800198c:	e6b4      	b.n	80016f8 <exec6502+0x248>
			absx();
 800198e:	f7fe fec3 	bl	8000718 <absx>
			adc();
 8001992:	f7fe ff6d 	bl	8000870 <adc>
			break;
 8001996:	e6af      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001998:	f7fe febe 	bl	8000718 <absx>
			ror();
 800199c:	f7ff fc1e 	bl	80011dc <ror>
			break;
 80019a0:	e6aa      	b.n	80016f8 <exec6502+0x248>
			indx();
 80019a2:	f7fe ff17 	bl	80007d4 <indx>
			sta();
 80019a6:	f7ff fcdb 	bl	8001360 <sta>
			break;
 80019aa:	e6a5      	b.n	80016f8 <exec6502+0x248>
			zp();
 80019ac:	f7fe fe52 	bl	8000654 <zp>
			sty();
 80019b0:	f7ff fce2 	bl	8001378 <sty>
			break;
 80019b4:	e6a0      	b.n	80016f8 <exec6502+0x248>
			zp();
 80019b6:	f7fe fe4d 	bl	8000654 <zp>
			sta();
 80019ba:	f7ff fcd1 	bl	8001360 <sta>
			break;
 80019be:	e69b      	b.n	80016f8 <exec6502+0x248>
			zp();
 80019c0:	f7fe fe48 	bl	8000654 <zp>
			stx();
 80019c4:	f7ff fcd2 	bl	800136c <stx>
			break;
 80019c8:	e696      	b.n	80016f8 <exec6502+0x248>
			dey();
 80019ca:	f7ff fa3b 	bl	8000e44 <dey>
			break;
 80019ce:	e693      	b.n	80016f8 <exec6502+0x248>
			txa();
 80019d0:	f7ff fd2c 	bl	800142c <txa>
			break;
 80019d4:	e690      	b.n	80016f8 <exec6502+0x248>
			abso();
 80019d6:	f7fe fe87 	bl	80006e8 <abso>
			sty();
 80019da:	f7ff fccd 	bl	8001378 <sty>
			break;
 80019de:	e68b      	b.n	80016f8 <exec6502+0x248>
			abso();
 80019e0:	f7fe fe82 	bl	80006e8 <abso>
			sta();
 80019e4:	f7ff fcbc 	bl	8001360 <sta>
			break;
 80019e8:	e686      	b.n	80016f8 <exec6502+0x248>
			abso();
 80019ea:	f7fe fe7d 	bl	80006e8 <abso>
			stx();
 80019ee:	f7ff fcbd 	bl	800136c <stx>
			break;
 80019f2:	e681      	b.n	80016f8 <exec6502+0x248>
			rel();
 80019f4:	f7fe fe64 	bl	80006c0 <rel>
			bcc();
 80019f8:	f7fe ffe2 	bl	80009c0 <bcc>
			break;
 80019fc:	e67c      	b.n	80016f8 <exec6502+0x248>
			indy();
 80019fe:	f7fe ff07 	bl	8000810 <indy>
			sta();
 8001a02:	f7ff fcad 	bl	8001360 <sta>
			break;
 8001a06:	e677      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001a08:	f7fe fe32 	bl	8000670 <zpx>
			sty();
 8001a0c:	f7ff fcb4 	bl	8001378 <sty>
			break;
 8001a10:	e672      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001a12:	f7fe fe2d 	bl	8000670 <zpx>
			sta();
 8001a16:	f7ff fca3 	bl	8001360 <sta>
			break;
 8001a1a:	e66d      	b.n	80016f8 <exec6502+0x248>
			zpy();
 8001a1c:	f7fe fe3c 	bl	8000698 <zpy>
			stx();
 8001a20:	f7ff fca4 	bl	800136c <stx>
			break;
 8001a24:	e668      	b.n	80016f8 <exec6502+0x248>
			tya();
 8001a26:	f7ff fd27 	bl	8001478 <tya>
			break;
 8001a2a:	e665      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001a2c:	f7fe fe90 	bl	8000750 <absy>
			sta();
 8001a30:	f7ff fc96 	bl	8001360 <sta>
			break;
 8001a34:	e660      	b.n	80016f8 <exec6502+0x248>
 8001a36:	bf00      	nop
 8001a38:	20008080 	.word	0x20008080
			txs();
 8001a3c:	f7ff fd12 	bl	8001464 <txs>
			break;
 8001a40:	e65a      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001a42:	f7fe fe69 	bl	8000718 <absx>
			sta();
 8001a46:	f7ff fc8b 	bl	8001360 <sta>
			break;
 8001a4a:	e655      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001a4c:	f7fe fdf6 	bl	800063c <imm>
			ldy();
 8001a50:	f7ff faee 	bl	8001030 <ldy>
			break;
 8001a54:	e650      	b.n	80016f8 <exec6502+0x248>
			indx();
 8001a56:	f7fe febd 	bl	80007d4 <indx>
			lda();
 8001a5a:	f7ff faa5 	bl	8000fa8 <lda>
			break;
 8001a5e:	e64b      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001a60:	f7fe fdec 	bl	800063c <imm>
			ldx();
 8001a64:	f7ff fac2 	bl	8000fec <ldx>
			break;
 8001a68:	e646      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001a6a:	f7fe fdf3 	bl	8000654 <zp>
			ldy();
 8001a6e:	f7ff fadf 	bl	8001030 <ldy>
			break;
 8001a72:	e641      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001a74:	f7fe fdee 	bl	8000654 <zp>
			lda();
 8001a78:	f7ff fa96 	bl	8000fa8 <lda>
			break;
 8001a7c:	e63c      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001a7e:	f7fe fde9 	bl	8000654 <zp>
			ldx();
 8001a82:	f7ff fab3 	bl	8000fec <ldx>
			break;
 8001a86:	e637      	b.n	80016f8 <exec6502+0x248>
			tay();
 8001a88:	f7ff fc98 	bl	80013bc <tay>
			break;
 8001a8c:	e634      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001a8e:	f7fe fdd5 	bl	800063c <imm>
			lda();
 8001a92:	f7ff fa89 	bl	8000fa8 <lda>
			break;
 8001a96:	e62f      	b.n	80016f8 <exec6502+0x248>
			tax();
 8001a98:	f7ff fc74 	bl	8001384 <tax>
			break;
 8001a9c:	e62c      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001a9e:	f7fe fe23 	bl	80006e8 <abso>
			ldy();
 8001aa2:	f7ff fac5 	bl	8001030 <ldy>
			break;
 8001aa6:	e627      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001aa8:	f7fe fe1e 	bl	80006e8 <abso>
			lda();
 8001aac:	f7ff fa7c 	bl	8000fa8 <lda>
			break;
 8001ab0:	e622      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001ab2:	f7fe fe19 	bl	80006e8 <abso>
			ldx();
 8001ab6:	f7ff fa99 	bl	8000fec <ldx>
			break;
 8001aba:	e61d      	b.n	80016f8 <exec6502+0x248>
			rel();
 8001abc:	f7fe fe00 	bl	80006c0 <rel>
			bcs();
 8001ac0:	f7fe ffa0 	bl	8000a04 <bcs>
			break;
 8001ac4:	e618      	b.n	80016f8 <exec6502+0x248>
			indy();
 8001ac6:	f7fe fea3 	bl	8000810 <indy>
			lda();
 8001aca:	f7ff fa6d 	bl	8000fa8 <lda>
			break;
 8001ace:	e613      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001ad0:	f7fe fdce 	bl	8000670 <zpx>
			ldy();
 8001ad4:	f7ff faac 	bl	8001030 <ldy>
			break;
 8001ad8:	e60e      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001ada:	f7fe fdc9 	bl	8000670 <zpx>
			lda();
 8001ade:	f7ff fa63 	bl	8000fa8 <lda>
			break;
 8001ae2:	e609      	b.n	80016f8 <exec6502+0x248>
			zpy();
 8001ae4:	f7fe fdd8 	bl	8000698 <zpy>
			ldx();
 8001ae8:	f7ff fa80 	bl	8000fec <ldx>
			break;
 8001aec:	e604      	b.n	80016f8 <exec6502+0x248>
			clv();
 8001aee:	f7ff f8d9 	bl	8000ca4 <clv>
			break;
 8001af2:	e601      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001af4:	f7fe fe2c 	bl	8000750 <absy>
			lda();
 8001af8:	f7ff fa56 	bl	8000fa8 <lda>
			break;
 8001afc:	e5fc      	b.n	80016f8 <exec6502+0x248>
			tsx();
 8001afe:	f7ff fc79 	bl	80013f4 <tsx>
			break;
 8001b02:	e5f9      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001b04:	f7fe fe08 	bl	8000718 <absx>
			ldy();
 8001b08:	f7ff fa92 	bl	8001030 <ldy>
			break;
 8001b0c:	e5f4      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001b0e:	f7fe fe03 	bl	8000718 <absx>
			lda();
 8001b12:	f7ff fa49 	bl	8000fa8 <lda>
			break;
 8001b16:	e5ef      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001b18:	f7fe fe1a 	bl	8000750 <absy>
			ldx();
 8001b1c:	f7ff fa66 	bl	8000fec <ldx>
			break;
 8001b20:	e5ea      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001b22:	f7fe fd8b 	bl	800063c <imm>
			cpy();
 8001b26:	f7ff f921 	bl	8000d6c <cpy>
			break;
 8001b2a:	e5e5      	b.n	80016f8 <exec6502+0x248>
			indx();
 8001b2c:	f7fe fe52 	bl	80007d4 <indx>
			cmp();
 8001b30:	f7ff f8c0 	bl	8000cb4 <cmp>
			break;
 8001b34:	e5e0      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001b36:	f7fe fd8d 	bl	8000654 <zp>
			cpy();
 8001b3a:	f7ff f917 	bl	8000d6c <cpy>
			break;
 8001b3e:	e5db      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001b40:	f7fe fd88 	bl	8000654 <zp>
			cmp();
 8001b44:	f7ff f8b6 	bl	8000cb4 <cmp>
			break;
 8001b48:	e5d6      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001b4a:	f7fe fd83 	bl	8000654 <zp>
			dec();
 8001b4e:	f7ff f93b 	bl	8000dc8 <dec>
			break;
 8001b52:	e5d1      	b.n	80016f8 <exec6502+0x248>
			iny();
 8001b54:	f7ff f9f4 	bl	8000f40 <iny>
			break;
 8001b58:	e5ce      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001b5a:	f7fe fd6f 	bl	800063c <imm>
			cmp();
 8001b5e:	f7ff f8a9 	bl	8000cb4 <cmp>
			break;
 8001b62:	e5c9      	b.n	80016f8 <exec6502+0x248>
			dex();
 8001b64:	f7ff f954 	bl	8000e10 <dex>
			break;
 8001b68:	e5c6      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001b6a:	f7fe fdbd 	bl	80006e8 <abso>
			cpy();
 8001b6e:	f7ff f8fd 	bl	8000d6c <cpy>
			break;
 8001b72:	e5c1      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001b74:	f7fe fdb8 	bl	80006e8 <abso>
			cmp();
 8001b78:	f7ff f89c 	bl	8000cb4 <cmp>
			break;
 8001b7c:	e5bc      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001b7e:	f7fe fdb3 	bl	80006e8 <abso>
			dec();
 8001b82:	f7ff f921 	bl	8000dc8 <dec>
			break;
 8001b86:	e5b7      	b.n	80016f8 <exec6502+0x248>
			rel();
 8001b88:	f7fe fd9a 	bl	80006c0 <rel>
			bne();
 8001b8c:	f7fe ffc4 	bl	8000b18 <bne>
			break;
 8001b90:	e5b2      	b.n	80016f8 <exec6502+0x248>
			indy();
 8001b92:	f7fe fe3d 	bl	8000810 <indy>
			cmp();
 8001b96:	f7ff f88d 	bl	8000cb4 <cmp>
			break;
 8001b9a:	e5ad      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001b9c:	f7fe fd68 	bl	8000670 <zpx>
			cmp();
 8001ba0:	f7ff f888 	bl	8000cb4 <cmp>
			break;
 8001ba4:	e5a8      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001ba6:	f7fe fd63 	bl	8000670 <zpx>
			dec();
 8001baa:	f7ff f90d 	bl	8000dc8 <dec>
			break;
 8001bae:	e5a3      	b.n	80016f8 <exec6502+0x248>
			cld();
 8001bb0:	f7ff f868 	bl	8000c84 <cld>
			break;
 8001bb4:	e5a0      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001bb6:	f7fe fdcb 	bl	8000750 <absy>
			cmp();
 8001bba:	f7ff f87b 	bl	8000cb4 <cmp>
			break;
 8001bbe:	e59b      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001bc0:	f7fe fdaa 	bl	8000718 <absx>
			cmp();
 8001bc4:	f7ff f876 	bl	8000cb4 <cmp>
			break;
 8001bc8:	e596      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001bca:	f7fe fda5 	bl	8000718 <absx>
			dec();
 8001bce:	f7ff f8fb 	bl	8000dc8 <dec>
			break;
 8001bd2:	e591      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001bd4:	f7fe fd32 	bl	800063c <imm>
			cpx();
 8001bd8:	f7ff f89a 	bl	8000d10 <cpx>
			break;
 8001bdc:	e58c      	b.n	80016f8 <exec6502+0x248>
			indx();
 8001bde:	f7fe fdf9 	bl	80007d4 <indx>
			sbc();
 8001be2:	f7ff fb49 	bl	8001278 <sbc>
			break;
 8001be6:	e587      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001be8:	f7fe fd34 	bl	8000654 <zp>
			cpx();
 8001bec:	f7ff f890 	bl	8000d10 <cpx>
			break;
 8001bf0:	e582      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001bf2:	f7fe fd2f 	bl	8000654 <zp>
			sbc();
 8001bf6:	f7ff fb3f 	bl	8001278 <sbc>
			break;
 8001bfa:	e57d      	b.n	80016f8 <exec6502+0x248>
			zp();
 8001bfc:	f7fe fd2a 	bl	8000654 <zp>
			inc();
 8001c00:	f7ff f960 	bl	8000ec4 <inc>
			break;
 8001c04:	e578      	b.n	80016f8 <exec6502+0x248>
			inx();
 8001c06:	f7ff f981 	bl	8000f0c <inx>
			break;
 8001c0a:	e575      	b.n	80016f8 <exec6502+0x248>
			imm();
 8001c0c:	f7fe fd16 	bl	800063c <imm>
			sbc();
 8001c10:	f7ff fb32 	bl	8001278 <sbc>
			break;
 8001c14:	e570      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001c16:	f7fe fd67 	bl	80006e8 <abso>
			cpx();
 8001c1a:	f7ff f879 	bl	8000d10 <cpx>
			break;
 8001c1e:	e56b      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001c20:	f7fe fd62 	bl	80006e8 <abso>
			sbc();
 8001c24:	f7ff fb28 	bl	8001278 <sbc>
			break;
 8001c28:	e566      	b.n	80016f8 <exec6502+0x248>
			abso();
 8001c2a:	f7fe fd5d 	bl	80006e8 <abso>
			inc();
 8001c2e:	f7ff f949 	bl	8000ec4 <inc>
			break;
 8001c32:	e561      	b.n	80016f8 <exec6502+0x248>
			rel();
 8001c34:	f7fe fd44 	bl	80006c0 <rel>
			beq();
 8001c38:	f7fe ff06 	bl	8000a48 <beq>
			break;
 8001c3c:	e55c      	b.n	80016f8 <exec6502+0x248>
			indy();
 8001c3e:	f7fe fde7 	bl	8000810 <indy>
			sbc();
 8001c42:	f7ff fb19 	bl	8001278 <sbc>
			break;
 8001c46:	e557      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001c48:	f7fe fd12 	bl	8000670 <zpx>
			sbc();
 8001c4c:	f7ff fb14 	bl	8001278 <sbc>
			break;
 8001c50:	e552      	b.n	80016f8 <exec6502+0x248>
			zpx();
 8001c52:	f7fe fd0d 	bl	8000670 <zpx>
			inc();
 8001c56:	f7ff f935 	bl	8000ec4 <inc>
			break;
 8001c5a:	e54d      	b.n	80016f8 <exec6502+0x248>
			sed();
 8001c5c:	f7ff fb70 	bl	8001340 <sed>
			break;
 8001c60:	e54a      	b.n	80016f8 <exec6502+0x248>
			absy();
 8001c62:	f7fe fd75 	bl	8000750 <absy>
			sbc();
 8001c66:	f7ff fb07 	bl	8001278 <sbc>
			break;
 8001c6a:	e545      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001c6c:	f7fe fd54 	bl	8000718 <absx>
			sbc();
 8001c70:	f7ff fb02 	bl	8001278 <sbc>
			break;
 8001c74:	e540      	b.n	80016f8 <exec6502+0x248>
			absx();
 8001c76:	f7fe fd4f 	bl	8000718 <absx>
			inc();
 8001c7a:	f7ff f923 	bl	8000ec4 <inc>
			break;
 8001c7e:	e53b      	b.n	80016f8 <exec6502+0x248>

08001c80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_MspInit+0x3c>)
{
 8001c82:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	619a      	str	r2, [r3, #24]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	f002 0201 	and.w	r2, r2, #1
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c9c:	61da      	str	r2, [r3, #28]
 8001c9e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001caa:	6853      	ldr	r3, [r2, #4]
 8001cac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	b002      	add	sp, #8
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000

08001cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	2210      	movs	r2, #16
 8001ccc:	2100      	movs	r1, #0
 8001cce:	a802      	add	r0, sp, #8
 8001cd0:	f000 fde0 	bl	8002894 <memset>
  if(huart->Instance==USART1)
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x70>)
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d128      	bne.n	8001d2e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cdc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ce0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	4815      	ldr	r0, [pc, #84]	; (8001d38 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce8:	619a      	str	r2, [r3, #24]
 8001cea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	f042 0204 	orr.w	r2, r2, #4
 8001cfc:	619a      	str	r2, [r3, #24]
 8001cfe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f000 f8f5 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f000 f8eb 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d2e:	b006      	add	sp, #24
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	bf00      	nop
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40010800 	.word	0x40010800

08001d3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler>

08001d3e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler>

08001d40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler>

08001d42 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler>

08001d44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler>

08001d46 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	4770      	bx	lr

08001d48 <DebugMon_Handler>:
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 b85e 	b.w	8001e0c <HAL_IncTick>

08001d50 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	4770      	bx	lr
	...

08001d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d54:	f7ff fffc 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d5a:	490c      	ldr	r1, [pc, #48]	; (8001d8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d70:	4c09      	ldr	r4, [pc, #36]	; (8001d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f000 fd65 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d82:	f7fe fb8b 	bl	800049c <main>
  bx lr
 8001d86:	4770      	bx	lr
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d90:	08003a70 	.word	0x08003a70
  ldr r2, =_sbss
 8001d94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d98:	20008098 	.word	0x20008098

08001d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_2_IRQHandler>
	...

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_InitTick+0x3c>)
{
 8001da4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da6:	7818      	ldrb	r0, [r3, #0]
 8001da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dac:	fbb3 f3f0 	udiv	r3, r3, r0
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_InitTick+0x40>)
 8001db2:	6810      	ldr	r0, [r2, #0]
 8001db4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001db8:	f000 f890 	bl	8001edc <HAL_SYSTICK_Config>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	b958      	cbnz	r0, 8001dd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc0:	2d0f      	cmp	r5, #15
 8001dc2:	d809      	bhi.n	8001dd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 f854 	bl	8001e78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <HAL_InitTick+0x44>)
 8001dd4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e7fc      	b.n	8001dd6 <HAL_InitTick+0x36>
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000008 	.word	0x20000008

08001de8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_Init+0x20>)
{
 8001dea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dee:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	f043 0310 	orr.w	r3, r3, #16
 8001df4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df6:	f000 f82d 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f7ff ffd0 	bl	8001da0 <HAL_InitTick>
  HAL_MspInit();
 8001e00:	f7ff ff3e 	bl	8001c80 <HAL_MspInit>
}
 8001e04:	2000      	movs	r0, #0
 8001e06:	bd08      	pop	{r3, pc}
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e0c:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <HAL_IncTick+0x10>)
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_IncTick+0x14>)
 8001e10:	6811      	ldr	r1, [r2, #0]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	440b      	add	r3, r1
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20008094 	.word	0x20008094
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e24:	4b01      	ldr	r3, [pc, #4]	; (8001e2c <HAL_GetTick+0x8>)
 8001e26:	6818      	ldr	r0, [r3, #0]
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20008094 	.word	0x20008094

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff fff6 	bl	8001e24 <HAL_GetTick>
 8001e38:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3c:	bf1e      	ittt	ne
 8001e3e:	4b04      	ldrne	r3, [pc, #16]	; (8001e50 <HAL_Delay+0x20>)
 8001e40:	781b      	ldrbne	r3, [r3, #0]
 8001e42:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	1b43      	subs	r3, r0, r5
 8001e4a:	42a3      	cmp	r3, r4
 8001e4c:	d3fa      	bcc.n	8001e44 <HAL_Delay+0x14>
  {
  }
}
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e56:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e62:	0412      	lsls	r2, r2, #16
 8001e64:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e70:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b530      	push	{r4, r5, lr}
 8001e7c:	68dc      	ldr	r4, [r3, #12]
 8001e7e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e82:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	bf28      	it	cs
 8001e8c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e94:	bf98      	it	ls
 8001e96:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9c:	bf88      	it	hi
 8001e9e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	ea21 0303 	bic.w	r3, r1, r3
 8001ea4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea6:	fa05 f404 	lsl.w	r4, r5, r4
 8001eaa:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001eae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	bfac      	ite	ge
 8001eb6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	4a07      	ldrlt	r2, [pc, #28]	; (8001ed8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	bfab      	itete	ge
 8001ec4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ed2:	bd30      	pop	{r4, r5, pc}
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	e000ed14 	.word	0xe000ed14

08001edc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	3801      	subs	r0, #1
 8001ede:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001ee2:	d20b      	bcs.n	8001efc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	21f0      	movs	r1, #240	; 0xf0
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001efc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f08:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001f0a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0c:	4f6a      	ldr	r7, [pc, #424]	; (80020b8 <HAL_GPIO_Init+0x1b4>)
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f10:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80020c0 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8001f14:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80020c4 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	680c      	ldr	r4, [r1, #0]
 8001f1a:	fa34 f506 	lsrs.w	r5, r4, r6
 8001f1e:	d102      	bne.n	8001f26 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001f20:	b003      	add	sp, #12
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001f26:	f04f 0801 	mov.w	r8, #1
 8001f2a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8001f32:	ea38 0404 	bics.w	r4, r8, r4
 8001f36:	f040 8081 	bne.w	800203c <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8001f3a:	684c      	ldr	r4, [r1, #4]
 8001f3c:	2c03      	cmp	r4, #3
 8001f3e:	d807      	bhi.n	8001f50 <HAL_GPIO_Init+0x4c>
 8001f40:	3c01      	subs	r4, #1
 8001f42:	2c02      	cmp	r4, #2
 8001f44:	f200 808c 	bhi.w	8002060 <HAL_GPIO_Init+0x15c>
 8001f48:	e8df f004 	tbb	[pc, r4]
 8001f4c:	a29d      	.short	0xa29d
 8001f4e:	a8          	.byte	0xa8
 8001f4f:	00          	.byte	0x00
 8001f50:	2c12      	cmp	r4, #18
 8001f52:	f000 80a0 	beq.w	8002096 <HAL_GPIO_Init+0x192>
 8001f56:	d873      	bhi.n	8002040 <HAL_GPIO_Init+0x13c>
 8001f58:	2c11      	cmp	r4, #17
 8001f5a:	f000 8096 	beq.w	800208a <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f5e:	2dff      	cmp	r5, #255	; 0xff
 8001f60:	bf98      	it	ls
 8001f62:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f64:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f68:	bf88      	it	hi
 8001f6a:	f100 0a04 	addhi.w	sl, r0, #4
 8001f6e:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f72:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f76:	bf88      	it	hi
 8001f78:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f7a:	fa09 fb04 	lsl.w	fp, r9, r4
 8001f7e:	ea28 080b 	bic.w	r8, r8, fp
 8001f82:	fa02 f404 	lsl.w	r4, r2, r4
 8001f86:	ea48 0404 	orr.w	r4, r8, r4
 8001f8a:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001f92:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001f96:	d051      	beq.n	800203c <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f98:	69bc      	ldr	r4, [r7, #24]
 8001f9a:	f026 0803 	bic.w	r8, r6, #3
 8001f9e:	f044 0401 	orr.w	r4, r4, #1
 8001fa2:	61bc      	str	r4, [r7, #24]
 8001fa4:	69bc      	ldr	r4, [r7, #24]
 8001fa6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001faa:	f004 0401 	and.w	r4, r4, #1
 8001fae:	9401      	str	r4, [sp, #4]
 8001fb0:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb8:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001fbe:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc2:	fa09 f90b 	lsl.w	r9, r9, fp
 8001fc6:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fca:	4c3f      	ldr	r4, [pc, #252]	; (80020c8 <HAL_GPIO_Init+0x1c4>)
 8001fcc:	42a0      	cmp	r0, r4
 8001fce:	d069      	beq.n	80020a4 <HAL_GPIO_Init+0x1a0>
 8001fd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fd4:	42a0      	cmp	r0, r4
 8001fd6:	d067      	beq.n	80020a8 <HAL_GPIO_Init+0x1a4>
 8001fd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fdc:	42a0      	cmp	r0, r4
 8001fde:	d065      	beq.n	80020ac <HAL_GPIO_Init+0x1a8>
 8001fe0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fe4:	42a0      	cmp	r0, r4
 8001fe6:	d063      	beq.n	80020b0 <HAL_GPIO_Init+0x1ac>
 8001fe8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fec:	42a0      	cmp	r0, r4
 8001fee:	d061      	beq.n	80020b4 <HAL_GPIO_Init+0x1b0>
 8001ff0:	4560      	cmp	r0, ip
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2405      	moveq	r4, #5
 8001ff6:	2406      	movne	r4, #6
 8001ff8:	fa04 f40b 	lsl.w	r4, r4, fp
 8001ffc:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002000:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002004:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002006:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800200a:	bf14      	ite	ne
 800200c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200e:	43ac      	biceq	r4, r5
 8002010:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002012:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002014:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002018:	bf14      	ite	ne
 800201a:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800201c:	43ac      	biceq	r4, r5
 800201e:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002020:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002022:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002026:	bf14      	ite	ne
 8002028:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	43ac      	biceq	r4, r5
 800202c:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800202e:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002030:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002034:	bf14      	ite	ne
 8002036:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002038:	43ac      	biceq	r4, r5
 800203a:	601c      	str	r4, [r3, #0]
	position++;
 800203c:	3601      	adds	r6, #1
 800203e:	e76b      	b.n	8001f18 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002040:	4574      	cmp	r4, lr
 8002042:	d00d      	beq.n	8002060 <HAL_GPIO_Init+0x15c>
 8002044:	d818      	bhi.n	8002078 <HAL_GPIO_Init+0x174>
 8002046:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80020cc <HAL_GPIO_Init+0x1c8>
 800204a:	454c      	cmp	r4, r9
 800204c:	d008      	beq.n	8002060 <HAL_GPIO_Init+0x15c>
 800204e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002052:	454c      	cmp	r4, r9
 8002054:	d004      	beq.n	8002060 <HAL_GPIO_Init+0x15c>
 8002056:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800205a:	454c      	cmp	r4, r9
 800205c:	f47f af7f 	bne.w	8001f5e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002060:	688a      	ldr	r2, [r1, #8]
 8002062:	b1ea      	cbz	r2, 80020a0 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002064:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002066:	bf08      	it	eq
 8002068:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800206c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002070:	bf18      	it	ne
 8002072:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002076:	e772      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002078:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80020d0 <HAL_GPIO_Init+0x1cc>
 800207c:	454c      	cmp	r4, r9
 800207e:	d0ef      	beq.n	8002060 <HAL_GPIO_Init+0x15c>
 8002080:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002084:	e7e9      	b.n	800205a <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002086:	68ca      	ldr	r2, [r1, #12]
          break;
 8002088:	e769      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800208a:	68ca      	ldr	r2, [r1, #12]
 800208c:	3204      	adds	r2, #4
          break;
 800208e:	e766      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002090:	68ca      	ldr	r2, [r1, #12]
 8002092:	3208      	adds	r2, #8
          break;
 8002094:	e763      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002096:	68ca      	ldr	r2, [r1, #12]
 8002098:	320c      	adds	r2, #12
          break;
 800209a:	e760      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800209c:	2200      	movs	r2, #0
 800209e:	e75e      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020a0:	2204      	movs	r2, #4
 80020a2:	e75c      	b.n	8001f5e <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a4:	2400      	movs	r4, #0
 80020a6:	e7a7      	b.n	8001ff8 <HAL_GPIO_Init+0xf4>
 80020a8:	2401      	movs	r4, #1
 80020aa:	e7a5      	b.n	8001ff8 <HAL_GPIO_Init+0xf4>
 80020ac:	2402      	movs	r4, #2
 80020ae:	e7a3      	b.n	8001ff8 <HAL_GPIO_Init+0xf4>
 80020b0:	2403      	movs	r4, #3
 80020b2:	e7a1      	b.n	8001ff8 <HAL_GPIO_Init+0xf4>
 80020b4:	2404      	movs	r4, #4
 80020b6:	e79f      	b.n	8001ff8 <HAL_GPIO_Init+0xf4>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40011c00 	.word	0x40011c00
 80020c4:	10220000 	.word	0x10220000
 80020c8:	40010800 	.word	0x40010800
 80020cc:	10120000 	.word	0x10120000
 80020d0:	10310000 	.word	0x10310000

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	4605      	mov	r5, r0
 80020da:	b338      	cbz	r0, 800212c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020dc:	6803      	ldr	r3, [r0, #0]
 80020de:	07db      	lsls	r3, r3, #31
 80020e0:	d410      	bmi.n	8002104 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	682b      	ldr	r3, [r5, #0]
 80020e4:	079f      	lsls	r7, r3, #30
 80020e6:	d45e      	bmi.n	80021a6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	0719      	lsls	r1, r3, #28
 80020ec:	f100 8095 	bmi.w	800221a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	075a      	lsls	r2, r3, #29
 80020f4:	f100 80c1 	bmi.w	800227a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	69e8      	ldr	r0, [r5, #28]
 80020fa:	2800      	cmp	r0, #0
 80020fc:	f040 812c 	bne.w	8002358 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002100:	2000      	movs	r0, #0
 8002102:	e029      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002104:	4c90      	ldr	r4, [pc, #576]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002106:	6863      	ldr	r3, [r4, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b04      	cmp	r3, #4
 800210e:	d007      	beq.n	8002120 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002110:	6863      	ldr	r3, [r4, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d10a      	bne.n	8002130 <HAL_RCC_OscConfig+0x5c>
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	03de      	lsls	r6, r3, #15
 800211e:	d507      	bpl.n	8002130 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	039c      	lsls	r4, r3, #14
 8002124:	d5dd      	bpl.n	80020e2 <HAL_RCC_OscConfig+0xe>
 8002126:	686b      	ldr	r3, [r5, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1da      	bne.n	80020e2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800212c:	2001      	movs	r0, #1
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	686b      	ldr	r3, [r5, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d112      	bne.n	800215e <HAL_RCC_OscConfig+0x8a>
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002140:	f7ff fe70 	bl	8001e24 <HAL_GetTick>
 8002144:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	0398      	lsls	r0, r3, #14
 800214a:	d4ca      	bmi.n	80020e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fe6a 	bl	8001e24 <HAL_GetTick>
 8002150:	1b80      	subs	r0, r0, r6
 8002152:	2864      	cmp	r0, #100	; 0x64
 8002154:	d9f7      	bls.n	8002146 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002156:	2003      	movs	r0, #3
}
 8002158:	b002      	add	sp, #8
 800215a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	b99b      	cbnz	r3, 8002188 <HAL_RCC_OscConfig+0xb4>
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6023      	str	r3, [r4, #0]
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002170:	f7ff fe58 	bl	8001e24 <HAL_GetTick>
 8002174:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	0399      	lsls	r1, r3, #14
 800217a:	d5b2      	bpl.n	80020e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fe52 	bl	8001e24 <HAL_GetTick>
 8002180:	1b80      	subs	r0, r0, r6
 8002182:	2864      	cmp	r0, #100	; 0x64
 8002184:	d9f7      	bls.n	8002176 <HAL_RCC_OscConfig+0xa2>
 8002186:	e7e6      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	d103      	bne.n	8002198 <HAL_RCC_OscConfig+0xc4>
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6023      	str	r3, [r4, #0]
 8002196:	e7cf      	b.n	8002138 <HAL_RCC_OscConfig+0x64>
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a4:	e7cb      	b.n	800213e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a6:	4c68      	ldr	r4, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80021a8:	6863      	ldr	r3, [r4, #4]
 80021aa:	f013 0f0c 	tst.w	r3, #12
 80021ae:	d007      	beq.n	80021c0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b0:	6863      	ldr	r3, [r4, #4]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d110      	bne.n	80021dc <HAL_RCC_OscConfig+0x108>
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	03da      	lsls	r2, r3, #15
 80021be:	d40d      	bmi.n	80021dc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	079b      	lsls	r3, r3, #30
 80021c4:	d502      	bpl.n	80021cc <HAL_RCC_OscConfig+0xf8>
 80021c6:	692b      	ldr	r3, [r5, #16]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d1af      	bne.n	800212c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	696a      	ldr	r2, [r5, #20]
 80021d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021d8:	6023      	str	r3, [r4, #0]
 80021da:	e785      	b.n	80020e8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	692a      	ldr	r2, [r5, #16]
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_RCC_OscConfig+0x278>)
 80021e0:	b16a      	cbz	r2, 80021fe <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021e6:	f7ff fe1d 	bl	8001e24 <HAL_GetTick>
 80021ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	079f      	lsls	r7, r3, #30
 80021f0:	d4ec      	bmi.n	80021cc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff fe17 	bl	8001e24 <HAL_GetTick>
 80021f6:	1b80      	subs	r0, r0, r6
 80021f8:	2802      	cmp	r0, #2
 80021fa:	d9f7      	bls.n	80021ec <HAL_RCC_OscConfig+0x118>
 80021fc:	e7ab      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80021fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002200:	f7ff fe10 	bl	8001e24 <HAL_GetTick>
 8002204:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	0798      	lsls	r0, r3, #30
 800220a:	f57f af6d 	bpl.w	80020e8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff fe09 	bl	8001e24 <HAL_GetTick>
 8002212:	1b80      	subs	r0, r0, r6
 8002214:	2802      	cmp	r0, #2
 8002216:	d9f6      	bls.n	8002206 <HAL_RCC_OscConfig+0x132>
 8002218:	e79d      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	69aa      	ldr	r2, [r5, #24]
 800221c:	4e4a      	ldr	r6, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_RCC_OscConfig+0x278>)
 8002220:	b1e2      	cbz	r2, 800225c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002222:	2201      	movs	r2, #1
 8002224:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002228:	f7ff fdfc 	bl	8001e24 <HAL_GetTick>
 800222c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002230:	079b      	lsls	r3, r3, #30
 8002232:	d50d      	bpl.n	8002250 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002238:	4b45      	ldr	r3, [pc, #276]	; (8002350 <HAL_RCC_OscConfig+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002240:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002242:	bf00      	nop
  }
  while (Delay --);
 8002244:	9b01      	ldr	r3, [sp, #4]
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	9201      	str	r2, [sp, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_RCC_OscConfig+0x16e>
 800224e:	e74f      	b.n	80020f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fde8 	bl	8001e24 <HAL_GetTick>
 8002254:	1b00      	subs	r0, r0, r4
 8002256:	2802      	cmp	r0, #2
 8002258:	d9e9      	bls.n	800222e <HAL_RCC_OscConfig+0x15a>
 800225a:	e77c      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800225c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002260:	f7ff fde0 	bl	8001e24 <HAL_GetTick>
 8002264:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002266:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002268:	079f      	lsls	r7, r3, #30
 800226a:	f57f af41 	bpl.w	80020f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226e:	f7ff fdd9 	bl	8001e24 <HAL_GetTick>
 8002272:	1b00      	subs	r0, r0, r4
 8002274:	2802      	cmp	r0, #2
 8002276:	d9f6      	bls.n	8002266 <HAL_RCC_OscConfig+0x192>
 8002278:	e76d      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4c33      	ldr	r4, [pc, #204]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800227c:	69e3      	ldr	r3, [r4, #28]
 800227e:	00d8      	lsls	r0, r3, #3
 8002280:	d424      	bmi.n	80022cc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002282:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	69e3      	ldr	r3, [r4, #28]
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	61e3      	str	r3, [r4, #28]
 800228c:	69e3      	ldr	r3, [r4, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4e2f      	ldr	r6, [pc, #188]	; (8002354 <HAL_RCC_OscConfig+0x280>)
 8002298:	6833      	ldr	r3, [r6, #0]
 800229a:	05d9      	lsls	r1, r3, #23
 800229c:	d518      	bpl.n	80022d0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229e:	68eb      	ldr	r3, [r5, #12]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d126      	bne.n	80022f2 <HAL_RCC_OscConfig+0x21e>
 80022a4:	6a23      	ldr	r3, [r4, #32]
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80022ac:	f7ff fdba 	bl	8001e24 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	6a23      	ldr	r3, [r4, #32]
 80022b8:	079b      	lsls	r3, r3, #30
 80022ba:	d53f      	bpl.n	800233c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80022bc:	2f00      	cmp	r7, #0
 80022be:	f43f af1b 	beq.w	80020f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	69e3      	ldr	r3, [r4, #28]
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	61e3      	str	r3, [r4, #28]
 80022ca:	e715      	b.n	80020f8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80022cc:	2700      	movs	r7, #0
 80022ce:	e7e2      	b.n	8002296 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d0:	6833      	ldr	r3, [r6, #0]
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80022d8:	f7ff fda4 	bl	8001e24 <HAL_GetTick>
 80022dc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	6833      	ldr	r3, [r6, #0]
 80022e0:	05da      	lsls	r2, r3, #23
 80022e2:	d4dc      	bmi.n	800229e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7ff fd9e 	bl	8001e24 <HAL_GetTick>
 80022e8:	eba0 0008 	sub.w	r0, r0, r8
 80022ec:	2864      	cmp	r0, #100	; 0x64
 80022ee:	d9f6      	bls.n	80022de <HAL_RCC_OscConfig+0x20a>
 80022f0:	e731      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	b9ab      	cbnz	r3, 8002320 <HAL_RCC_OscConfig+0x24c>
 80022f4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6223      	str	r3, [r4, #32]
 8002300:	6a23      	ldr	r3, [r4, #32]
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002308:	f7ff fd8c 	bl	8001e24 <HAL_GetTick>
 800230c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	6a23      	ldr	r3, [r4, #32]
 8002310:	0798      	lsls	r0, r3, #30
 8002312:	d5d3      	bpl.n	80022bc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff fd86 	bl	8001e24 <HAL_GetTick>
 8002318:	1b80      	subs	r0, r0, r6
 800231a:	4540      	cmp	r0, r8
 800231c:	d9f7      	bls.n	800230e <HAL_RCC_OscConfig+0x23a>
 800231e:	e71a      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	2b05      	cmp	r3, #5
 8002322:	6a23      	ldr	r3, [r4, #32]
 8002324:	d103      	bne.n	800232e <HAL_RCC_OscConfig+0x25a>
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6223      	str	r3, [r4, #32]
 800232c:	e7ba      	b.n	80022a4 <HAL_RCC_OscConfig+0x1d0>
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	6223      	str	r3, [r4, #32]
 8002334:	6a23      	ldr	r3, [r4, #32]
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	e7b6      	b.n	80022aa <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff fd72 	bl	8001e24 <HAL_GetTick>
 8002340:	1b80      	subs	r0, r0, r6
 8002342:	4540      	cmp	r0, r8
 8002344:	d9b7      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1e2>
 8002346:	e706      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
 8002348:	40021000 	.word	0x40021000
 800234c:	42420000 	.word	0x42420000
 8002350:	20000000 	.word	0x20000000
 8002354:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002358:	4c2a      	ldr	r4, [pc, #168]	; (8002404 <HAL_RCC_OscConfig+0x330>)
 800235a:	6863      	ldr	r3, [r4, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d03e      	beq.n	80023e2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002364:	2200      	movs	r2, #0
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002368:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800236a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	d12c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800236e:	f7ff fd59 	bl	8001e24 <HAL_GetTick>
 8002372:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	0199      	lsls	r1, r3, #6
 8002378:	d420      	bmi.n	80023bc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800237a:	6a2b      	ldr	r3, [r5, #32]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002382:	6862      	ldr	r2, [r4, #4]
 8002384:	68a9      	ldr	r1, [r5, #8]
 8002386:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800238a:	430a      	orrs	r2, r1
 800238c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002390:	6862      	ldr	r2, [r4, #4]
 8002392:	430b      	orrs	r3, r1
 8002394:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002398:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800239a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80023a0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023a2:	f7ff fd3f 	bl	8001e24 <HAL_GetTick>
 80023a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	019a      	lsls	r2, r3, #6
 80023ac:	f53f aea8 	bmi.w	8002100 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff fd38 	bl	8001e24 <HAL_GetTick>
 80023b4:	1b40      	subs	r0, r0, r5
 80023b6:	2802      	cmp	r0, #2
 80023b8:	d9f6      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2d4>
 80023ba:	e6cc      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff fd32 	bl	8001e24 <HAL_GetTick>
 80023c0:	1b80      	subs	r0, r0, r6
 80023c2:	2802      	cmp	r0, #2
 80023c4:	d9d6      	bls.n	8002374 <HAL_RCC_OscConfig+0x2a0>
 80023c6:	e6c6      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80023c8:	f7ff fd2c 	bl	8001e24 <HAL_GetTick>
 80023cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	f57f ae95 	bpl.w	8002100 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fd25 	bl	8001e24 <HAL_GetTick>
 80023da:	1b40      	subs	r0, r0, r5
 80023dc:	2802      	cmp	r0, #2
 80023de:	d9f6      	bls.n	80023ce <HAL_RCC_OscConfig+0x2fa>
 80023e0:	e6b9      	b.n	8002156 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e2:	2801      	cmp	r0, #1
 80023e4:	f43f aeb8 	beq.w	8002158 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80023e8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	6a2a      	ldr	r2, [r5, #32]
 80023ec:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80023f0:	4291      	cmp	r1, r2
 80023f2:	f47f ae9b 	bne.w	800212c <HAL_RCC_OscConfig+0x58>
 80023f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f43f ae7f 	beq.w	8002100 <HAL_RCC_OscConfig+0x2c>
 8002402:	e693      	b.n	800212c <HAL_RCC_OscConfig+0x58>
 8002404:	40021000 	.word	0x40021000
 8002408:	42420000 	.word	0x42420000

0800240c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_RCC_GetSysClockFreq+0x38>)
 800240e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002410:	f003 010c 	and.w	r1, r3, #12
 8002414:	2908      	cmp	r1, #8
 8002416:	d112      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002418:	480b      	ldr	r0, [pc, #44]	; (8002448 <HAL_RCC_GetSysClockFreq+0x3c>)
 800241a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800241e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002420:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002422:	d509      	bpl.n	8002438 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002424:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002428:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800242c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_RCC_GetSysClockFreq+0x44>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002432:	fbb0 f0f3 	udiv	r0, r0, r3
 8002436:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_GetSysClockFreq+0x48>)
 800243a:	4358      	muls	r0, r3
 800243c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	08003a55 	.word	0x08003a55
 800244c:	007a1200 	.word	0x007a1200
 8002450:	08003a65 	.word	0x08003a65
 8002454:	003d0900 	.word	0x003d0900

08002458 <HAL_RCC_ClockConfig>:
{
 8002458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800245c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800245e:	4604      	mov	r4, r0
 8002460:	b910      	cbnz	r0, 8002468 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
}
 8002464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_RCC_ClockConfig+0x124>)
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	428b      	cmp	r3, r1
 8002472:	d328      	bcc.n	80024c6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	6821      	ldr	r1, [r4, #0]
 8002476:	078e      	lsls	r6, r1, #30
 8002478:	d430      	bmi.n	80024dc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	07ca      	lsls	r2, r1, #31
 800247c:	d443      	bmi.n	8002506 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247e:	4a3f      	ldr	r2, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x124>)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	42ab      	cmp	r3, r5
 8002488:	d865      	bhi.n	8002556 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248a:	6822      	ldr	r2, [r4, #0]
 800248c:	4d3c      	ldr	r5, [pc, #240]	; (8002580 <HAL_RCC_ClockConfig+0x128>)
 800248e:	f012 0f04 	tst.w	r2, #4
 8002492:	d16c      	bne.n	800256e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	0713      	lsls	r3, r2, #28
 8002496:	d506      	bpl.n	80024a6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002498:	686b      	ldr	r3, [r5, #4]
 800249a:	6922      	ldr	r2, [r4, #16]
 800249c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80024a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024a4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a6:	f7ff ffb1 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80024aa:	686b      	ldr	r3, [r5, #4]
 80024ac:	4a35      	ldr	r2, [pc, #212]	; (8002584 <HAL_RCC_ClockConfig+0x12c>)
 80024ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	40d8      	lsrs	r0, r3
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_ClockConfig+0x130>)
 80024b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80024ba:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCC_ClockConfig+0x134>)
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	f7ff fc6f 	bl	8001da0 <HAL_InitTick>
  return HAL_OK;
 80024c2:	2000      	movs	r0, #0
 80024c4:	e7ce      	b.n	8002464 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	f023 0307 	bic.w	r3, r3, #7
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	428b      	cmp	r3, r1
 80024d8:	d1c3      	bne.n	8002462 <HAL_RCC_ClockConfig+0xa>
 80024da:	e7cb      	b.n	8002474 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_ClockConfig+0x128>)
 80024de:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e2:	bf1e      	ittt	ne
 80024e4:	685a      	ldrne	r2, [r3, #4]
 80024e6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80024ea:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ee:	bf42      	ittt	mi
 80024f0:	685a      	ldrmi	r2, [r3, #4]
 80024f2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80024f6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68a0      	ldr	r0, [r4, #8]
 80024fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002500:	4302      	orrs	r2, r0
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	e7b9      	b.n	800247a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	6862      	ldr	r2, [r4, #4]
 8002508:	4e1d      	ldr	r6, [pc, #116]	; (8002580 <HAL_RCC_ClockConfig+0x128>)
 800250a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	d11a      	bne.n	8002546 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002510:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	d0a5      	beq.n	8002462 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251c:	f023 0303 	bic.w	r3, r3, #3
 8002520:	4313      	orrs	r3, r2
 8002522:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002524:	f7ff fc7e 	bl	8001e24 <HAL_GetTick>
 8002528:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	6873      	ldr	r3, [r6, #4]
 800252c:	6862      	ldr	r2, [r4, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002536:	d0a2      	beq.n	800247e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff fc74 	bl	8001e24 <HAL_GetTick>
 800253c:	1bc0      	subs	r0, r0, r7
 800253e:	4540      	cmp	r0, r8
 8002540:	d9f3      	bls.n	800252a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002542:	2003      	movs	r0, #3
 8002544:	e78e      	b.n	8002464 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	2a02      	cmp	r2, #2
 8002548:	d102      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800254e:	e7e1      	b.n	8002514 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	f013 0f02 	tst.w	r3, #2
 8002554:	e7de      	b.n	8002514 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	f023 0307 	bic.w	r3, r3, #7
 800255c:	432b      	orrs	r3, r5
 800255e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	6813      	ldr	r3, [r2, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	42ab      	cmp	r3, r5
 8002568:	f47f af7b 	bne.w	8002462 <HAL_RCC_ClockConfig+0xa>
 800256c:	e78d      	b.n	800248a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256e:	686b      	ldr	r3, [r5, #4]
 8002570:	68e1      	ldr	r1, [r4, #12]
 8002572:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002576:	430b      	orrs	r3, r1
 8002578:	606b      	str	r3, [r5, #4]
 800257a:	e78b      	b.n	8002494 <HAL_RCC_ClockConfig+0x3c>
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	08003a3d 	.word	0x08003a3d
 8002588:	20000000 	.word	0x20000000
 800258c:	20000008 	.word	0x20000008

08002590 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800259e:	6810      	ldr	r0, [r2, #0]
}
 80025a0:	40d8      	lsrs	r0, r3
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08003a4d 	.word	0x08003a4d
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025be:	6810      	ldr	r0, [r2, #0]
}
 80025c0:	40d8      	lsrs	r0, r3
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08003a4d 	.word	0x08003a4d
 80025cc:	20000000 	.word	0x20000000

080025d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d4:	6803      	ldr	r3, [r0, #0]
 80025d6:	68c1      	ldr	r1, [r0, #12]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025de:	430a      	orrs	r2, r1
 80025e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025e2:	6882      	ldr	r2, [r0, #8]
 80025e4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80025e6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025e8:	4302      	orrs	r2, r0
 80025ea:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80025ec:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80025f0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025f4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80025f6:	430a      	orrs	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	69a1      	ldr	r1, [r4, #24]
 80025fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002602:	430a      	orrs	r2, r1
 8002604:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <UART_SetConfig+0x70>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d115      	bne.n	8002638 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800260c:	f7ff ffd0 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002610:	2319      	movs	r3, #25
 8002612:	4343      	muls	r3, r0
 8002614:	6862      	ldr	r2, [r4, #4]
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	fbb3 f3f2 	udiv	r3, r3, r2
 800261e:	2264      	movs	r2, #100	; 0x64
 8002620:	fbb3 f1f2 	udiv	r1, r3, r2
 8002624:	fb02 3311 	mls	r3, r2, r1, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002630:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002634:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002636:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002638:	f7ff ffaa 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 800263c:	e7e8      	b.n	8002610 <UART_SetConfig+0x40>
 800263e:	bf00      	nop
 8002640:	40013800 	.word	0x40013800

08002644 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	4604      	mov	r4, r0
 8002648:	460e      	mov	r6, r1
 800264a:	4617      	mov	r7, r2
 800264c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	ea36 0303 	bics.w	r3, r6, r3
 8002656:	d101      	bne.n	800265c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002658:	2000      	movs	r0, #0
 800265a:	e028      	b.n	80026ae <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800265c:	1c6b      	adds	r3, r5, #1
 800265e:	d0f7      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002660:	b125      	cbz	r5, 800266c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002662:	f7ff fbdf 	bl	8001e24 <HAL_GetTick>
 8002666:	1bc0      	subs	r0, r0, r7
 8002668:	4285      	cmp	r5, r0
 800266a:	d2f0      	bcs.n	800264e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	f102 030c 	add.w	r3, r2, #12
 8002672:	e853 3f00 	ldrex	r3, [r3]
 8002676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267a:	320c      	adds	r2, #12
 800267c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002680:	6821      	ldr	r1, [r4, #0]
 8002682:	2800      	cmp	r0, #0
 8002684:	d1f2      	bne.n	800266c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002686:	f101 0314 	add.w	r3, r1, #20
 800268a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	f101 0014 	add.w	r0, r1, #20
 8002696:	e840 3200 	strex	r2, r3, [r0]
 800269a:	2a00      	cmp	r2, #0
 800269c:	d1f3      	bne.n	8002686 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800269e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80026a0:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80026a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80026a6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80026aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026b0 <HAL_UART_Init>:
{
 80026b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80026b2:	4604      	mov	r4, r0
 80026b4:	b348      	cbz	r0, 800270a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80026b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80026ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026be:	b91b      	cbnz	r3, 80026c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026c0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80026c4:	f7ff fafe 	bl	8001cc4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80026c8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80026ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80026d0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80026d2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80026d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026da:	f7ff ff79 	bl	80025d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026de:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002706:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002708:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e7fc      	b.n	8002708 <HAL_UART_Init+0x58>

0800270e <HAL_UART_Transmit>:
{
 800270e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002712:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002714:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002718:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800271a:	2b20      	cmp	r3, #32
{
 800271c:	460e      	mov	r6, r1
 800271e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002720:	d13c      	bne.n	800279c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8002722:	2900      	cmp	r1, #0
 8002724:	d03c      	beq.n	80027a0 <HAL_UART_Transmit+0x92>
 8002726:	2a00      	cmp	r2, #0
 8002728:	d03a      	beq.n	80027a0 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	2500      	movs	r5, #0
 800272e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002730:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002734:	f7ff fb76 	bl	8001e24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800273a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002740:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002742:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	d103      	bne.n	800274e <HAL_UART_Transmit+0x40>
 8002746:	6923      	ldr	r3, [r4, #16]
 8002748:	b90b      	cbnz	r3, 800274e <HAL_UART_Transmit+0x40>
 800274a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800274c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800274e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002750:	b29b      	uxth	r3, r3
 8002752:	b953      	cbnz	r3, 800276a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002754:	464b      	mov	r3, r9
 8002756:	4642      	mov	r2, r8
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ff72 	bl	8002644 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002760:	b950      	cbnz	r0, 8002778 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002762:	2320      	movs	r3, #32
 8002764:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002768:	e007      	b.n	800277a <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276a:	464b      	mov	r3, r9
 800276c:	4642      	mov	r2, r8
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff ff67 	bl	8002644 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002776:	b110      	cbz	r0, 800277e <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
}
 800277a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800277e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002780:	b94e      	cbnz	r6, 8002796 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002782:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002786:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800278c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800278e:	3901      	subs	r1, #1
 8002790:	b289      	uxth	r1, r1
 8002792:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002794:	e7db      	b.n	800274e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002796:	f816 3b01 	ldrb.w	r3, [r6], #1
 800279a:	e7f6      	b.n	800278a <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800279c:	2002      	movs	r0, #2
 800279e:	e7ec      	b.n	800277a <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
 80027a2:	e7ea      	b.n	800277a <HAL_UART_Transmit+0x6c>

080027a4 <HAL_UART_Receive>:
{
 80027a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a8:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80027aa:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 80027ae:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b0:	2b20      	cmp	r3, #32
{
 80027b2:	460e      	mov	r6, r1
 80027b4:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b6:	d143      	bne.n	8002840 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 80027b8:	2900      	cmp	r1, #0
 80027ba:	d043      	beq.n	8002844 <HAL_UART_Receive+0xa0>
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d041      	beq.n	8002844 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	2500      	movs	r5, #0
 80027c4:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ca:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80027cc:	f7ff fb2a 	bl	8001e24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80027d2:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80027d8:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027dc:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	d103      	bne.n	80027ea <HAL_UART_Receive+0x46>
 80027e2:	6923      	ldr	r3, [r4, #16]
 80027e4:	b90b      	cbnz	r3, 80027ea <HAL_UART_Receive+0x46>
 80027e6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80027e8:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 80027ea:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80027ec:	b280      	uxth	r0, r0
 80027ee:	b920      	cbnz	r0, 80027fa <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 80027f0:	2320      	movs	r3, #32
 80027f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80027f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	4642      	mov	r2, r8
 80027fe:	2120      	movs	r1, #32
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff ff1f 	bl	8002644 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002806:	b9f8      	cbnz	r0, 8002848 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002808:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800280a:	b94e      	cbnz	r6, 8002820 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002812:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8002816:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002818:	3b01      	subs	r3, #1
 800281a:	b29b      	uxth	r3, r3
 800281c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800281e:	e7e4      	b.n	80027ea <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002820:	68a2      	ldr	r2, [r4, #8]
 8002822:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002826:	d002      	beq.n	800282e <HAL_UART_Receive+0x8a>
 8002828:	b932      	cbnz	r2, 8002838 <HAL_UART_Receive+0x94>
 800282a:	6922      	ldr	r2, [r4, #16]
 800282c:	b922      	cbnz	r2, 8002838 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	b2c9      	uxtb	r1, r1
 8002832:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 8002836:	e7ee      	b.n	8002816 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800283e:	e7f8      	b.n	8002832 <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 8002840:	2002      	movs	r0, #2
 8002842:	e7d8      	b.n	80027f6 <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8002844:	2001      	movs	r0, #1
 8002846:	e7d6      	b.n	80027f6 <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 8002848:	2003      	movs	r0, #3
 800284a:	e7d4      	b.n	80027f6 <HAL_UART_Receive+0x52>

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2600      	movs	r6, #0
 8002850:	4d0c      	ldr	r5, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1b64      	subs	r4, r4, r5
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a6      	cmp	r6, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	f000 f822 	bl	80028a4 <_init>
 8002860:	2600      	movs	r6, #0
 8002862:	4d0a      	ldr	r5, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a6      	cmp	r6, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f855 3b04 	ldr.w	r3, [r5], #4
 8002874:	4798      	blx	r3
 8002876:	3601      	adds	r6, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	f855 3b04 	ldr.w	r3, [r5], #4
 800287e:	4798      	blx	r3
 8002880:	3601      	adds	r6, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	08003a68 	.word	0x08003a68
 8002888:	08003a68 	.word	0x08003a68
 800288c:	08003a68 	.word	0x08003a68
 8002890:	08003a6c 	.word	0x08003a6c

08002894 <memset>:
 8002894:	4603      	mov	r3, r0
 8002896:	4402      	add	r2, r0
 8002898:	4293      	cmp	r3, r2
 800289a:	d100      	bne.n	800289e <memset+0xa>
 800289c:	4770      	bx	lr
 800289e:	f803 1b01 	strb.w	r1, [r3], #1
 80028a2:	e7f9      	b.n	8002898 <memset+0x4>

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
