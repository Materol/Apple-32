
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000295c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c0  08002b40  08002b40  00012b40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d00  08003d00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d00  08003d00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080d8  2000000c  08003d14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200080e4  08003d14  000280e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f441  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e35  00000000  00000000  0002f476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006d27  00000000  00000000  000312ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  00037fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00038900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018eed  00000000  00000000  00039500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfb9  00000000  00000000  000523ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000929b7  00000000  00000000  0005f3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f1d5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017ec  00000000  00000000  000f1db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002b28 	.word	0x08002b28

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002b28 	.word	0x08002b28

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000238:	f7ff fff4 	bl	8000224 <strlen>
 800023c:	4d08      	ldr	r5, [pc, #32]	; (8000260 <writelineTerminal+0x2c>)
 800023e:	4621      	mov	r1, r4
 8000240:	b282      	uxth	r2, r0
 8000242:	f04f 33ff 	mov.w	r3, #4294967295
 8000246:	4628      	mov	r0, r5
 8000248:	f002 fb35 	bl	80028b6 <HAL_UART_Transmit>
 800024c:	4628      	mov	r0, r5
}
 800024e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2202      	movs	r2, #2
 8000258:	4902      	ldr	r1, [pc, #8]	; (8000264 <writelineTerminal+0x30>)
 800025a:	f002 bb2c 	b.w	80028b6 <HAL_UART_Transmit>
 800025e:	bf00      	nop
 8000260:	20008070 	.word	0x20008070
 8000264:	08002b40 	.word	0x08002b40

08000268 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800026c:	f7ff ffda 	bl	8000224 <strlen>
 8000270:	4621      	mov	r1, r4
}
 8000272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000276:	b282      	uxth	r2, r0
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <writeTerminal+0x1c>)
 800027e:	f002 bb1a 	b.w	80028b6 <HAL_UART_Transmit>
 8000282:	bf00      	nop
 8000284:	20008070 	.word	0x20008070

08000288 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 8000288:	b507      	push	{r0, r1, r2, lr}
  if (value == 13) {
 800028a:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 800028c:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	bf0b      	itete	eq
 8000296:	2202      	moveq	r2, #2
  }
  else {
    HAL_UART_Transmit(&huart1, (uint8_t *)&value, 1, HAL_MAX_DELAY);
 8000298:	2201      	movne	r2, #1
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 800029a:	4904      	ldreq	r1, [pc, #16]	; (80002ac <handleOutput+0x24>)
    HAL_UART_Transmit(&huart1, (uint8_t *)&value, 1, HAL_MAX_DELAY);
 800029c:	f10d 0107 	addne.w	r1, sp, #7
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <handleOutput+0x28>)
 80002a2:	f002 fb08 	bl	80028b6 <HAL_UART_Transmit>
  }
}
 80002a6:	b003      	add	sp, #12
 80002a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ac:	08002b40 	.word	0x08002b40
 80002b0:	20008070 	.word	0x20008070

080002b4 <write6502>:
  if (address < RAM_SIZE) {
 80002b4:	0403      	lsls	r3, r0, #16
 80002b6:	d402      	bmi.n	80002be <write6502+0xa>
    RAM[address] = value;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <write6502+0x20>)
 80002ba:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 80002bc:	4770      	bx	lr
 80002be:	f24d 0312 	movw	r3, #53266	; 0xd012
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d105      	bne.n	80002d2 <write6502+0x1e>
    pia.display_register = value;
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <write6502+0x24>)
    handleOutput(value);
 80002c8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 80002cc:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 80002ce:	f7ff bfdb 	b.w	8000288 <handleOutput>
}
 80002d2:	4770      	bx	lr
 80002d4:	20000028 	.word	0x20000028
 80002d8:	200080b9 	.word	0x200080b9

080002dc <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 80002dc:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 80002de:	4c18      	ldr	r4, [pc, #96]	; (8000340 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 80002e0:	4d18      	ldr	r5, [pc, #96]	; (8000344 <initApple1+0x68>)
    HAL_Delay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f001 fe3f 	bl	8001f68 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 80002ea:	4620      	mov	r0, r4
 80002ec:	f7ff ffa2 	bl	8000234 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 80002f0:	4814      	ldr	r0, [pc, #80]	; (8000344 <initApple1+0x68>)
 80002f2:	f000 f835 	bl	8000360 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 80002f6:	782b      	ldrb	r3, [r5, #0]
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	d1f2      	bne.n	80002e2 <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 80002fc:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 8000300:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 8000302:	f7ff ffb1 	bl	8000268 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 8000306:	f000 f9d9 	bl	80006bc <reset6502>
 800030a:	4810      	ldr	r0, [pc, #64]	; (800034c <initApple1+0x70>)
 800030c:	f7ff ff92 	bl	8000234 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 8000310:	480f      	ldr	r0, [pc, #60]	; (8000350 <initApple1+0x74>)
 8000312:	f7ff ffa9 	bl	8000268 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 8000316:	4621      	mov	r1, r4
 8000318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <initApple1+0x78>)
 800031e:	f002 fbfb 	bl	8002b18 <memset>
  }
  writelineTerminal(" Complete");
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <initApple1+0x70>)
 8000324:	f7ff ff86 	bl	8000234 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <initApple1+0x7c>)
 800032a:	f7ff ff9d 	bl	8000268 <writeTerminal>
  pia.keyboard_register = 0x00;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 8000332:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 8000334:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 8000336:	709c      	strb	r4, [r3, #2]
}
 8000338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 800033c:	f7ff bf7a 	b.w	8000234 <writelineTerminal>
 8000340:	08002b43 	.word	0x08002b43
 8000344:	200080b8 	.word	0x200080b8
 8000348:	08002b61 	.word	0x08002b61
 800034c:	08002b75 	.word	0x08002b75
 8000350:	08002b7f 	.word	0x08002b7f
 8000354:	20000028 	.word	0x20000028
 8000358:	08002b93 	.word	0x08002b93
 800035c:	200080b9 	.word	0x200080b9

08000360 <handleInput>:
void handleInput(char *buffer) {
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 8000364:	230a      	movs	r3, #10
 8000366:	2201      	movs	r2, #1
 8000368:	4601      	mov	r1, r0
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <handleInput+0x5c>)
 800036c:	f002 faee 	bl	800294c <HAL_UART_Receive>
  buffer[0] &= 0x7F; // Mask out MSB
 8000370:	7823      	ldrb	r3, [r4, #0]
 8000372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8000376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800037a:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 800037c:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800037e:	d802      	bhi.n	8000386 <handleInput+0x26>
    buffer[0] -= 0x20;
 8000380:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 8000382:	7023      	strb	r3, [r4, #0]
}
 8000384:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 8000386:	2b0a      	cmp	r3, #10
 8000388:	d101      	bne.n	800038e <handleInput+0x2e>
    buffer[0] = '\r';
 800038a:	230d      	movs	r3, #13
 800038c:	e7f9      	b.n	8000382 <handleInput+0x22>
  else if (buffer[0] == '\b') {
 800038e:	2b08      	cmp	r3, #8
 8000390:	d101      	bne.n	8000396 <handleInput+0x36>
    buffer[0] = 0x5F;
 8000392:	235f      	movs	r3, #95	; 0x5f
 8000394:	e7f5      	b.n	8000382 <handleInput+0x22>
  else if (buffer[0] == 0x7F) {
 8000396:	2b7f      	cmp	r3, #127	; 0x7f
 8000398:	d0fb      	beq.n	8000392 <handleInput+0x32>
  else if (buffer[0] == 0x03) {
 800039a:	2b03      	cmp	r3, #3
 800039c:	d1f2      	bne.n	8000384 <handleInput+0x24>
    writelineTerminal("\n[Ctrl + C detected] Resetting in 5 seconds...");
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <handleInput+0x60>)
 80003a0:	f7ff ff48 	bl	8000234 <writelineTerminal>
    HAL_Delay(5000);
 80003a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80003a8:	f001 fdde 	bl	8001f68 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 80003ac:	2220      	movs	r2, #32
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <handleInput+0x64>)
 80003b0:	701a      	strb	r2, [r3, #0]
}
 80003b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 80003b6:	f7ff bf91 	b.w	80002dc <initApple1>
 80003ba:	bf00      	nop
 80003bc:	20008070 	.word	0x20008070
 80003c0:	08002ba7 	.word	0x08002ba7
 80003c4:	200080b8 	.word	0x200080b8

080003c8 <read6502>:
  if (address < RAM_SIZE) return RAM[address];
 80003c8:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 80003ca:	b510      	push	{r4, lr}
  if (address < RAM_SIZE) return RAM[address];
 80003cc:	d402      	bmi.n	80003d4 <read6502+0xc>
 80003ce:	4b16      	ldr	r3, [pc, #88]	; (8000428 <read6502+0x60>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80003d0:	5c18      	ldrb	r0, [r3, r0]
 80003d2:	e005      	b.n	80003e0 <read6502+0x18>
  if (address == PIA_KEYBOARD_REG) {
 80003d4:	f24d 0310 	movw	r3, #53264	; 0xd010
 80003d8:	4298      	cmp	r0, r3
 80003da:	d102      	bne.n	80003e2 <read6502+0x1a>
    return pia.keyboard_register;
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <read6502+0x64>)
 80003de:	7818      	ldrb	r0, [r3, #0]
}
 80003e0:	bd10      	pop	{r4, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 80003e2:	f24d 0311 	movw	r3, #53265	; 0xd011
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d10f      	bne.n	800040a <read6502+0x42>
    handleInput((char *)keyboardBuffer);
 80003ea:	4c11      	ldr	r4, [pc, #68]	; (8000430 <read6502+0x68>)
 80003ec:	4620      	mov	r0, r4
 80003ee:	f7ff ffb7 	bl	8000360 <handleInput>
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 80003f2:	7823      	ldrb	r3, [r4, #0]
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <read6502+0x64>)
 80003f6:	f063 017f 	orn	r1, r3, #127	; 0x7f
 80003fa:	7011      	strb	r1, [r2, #0]
    if (keyboardBuffer[0] != 0x00) {
 80003fc:	b90b      	cbnz	r3, 8000402 <read6502+0x3a>
      return 0x00;
 80003fe:	2000      	movs	r0, #0
 8000400:	e7ee      	b.n	80003e0 <read6502+0x18>
      keyboardBuffer[0] = 0x00;
 8000402:	2300      	movs	r3, #0
      return 0x80;
 8000404:	2080      	movs	r0, #128	; 0x80
      keyboardBuffer[0] = 0x00;
 8000406:	7023      	strb	r3, [r4, #0]
      return 0x80;
 8000408:	e7ea      	b.n	80003e0 <read6502+0x18>
  if (address >= BASIC_START && address <= 0xEFFF) {
 800040a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800040e:	b29b      	uxth	r3, r3
 8000410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000414:	d202      	bcs.n	800041c <read6502+0x54>
      return BASIC[BASIC_addr];
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <read6502+0x6c>)
 8000418:	5cd0      	ldrb	r0, [r2, r3]
 800041a:	e7e1      	b.n	80003e0 <read6502+0x18>
  if (address >= 0xF000) {
 800041c:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 8000420:	d3ed      	bcc.n	80003fe <read6502+0x36>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <read6502+0x70>)
 8000424:	b2c0      	uxtb	r0, r0
 8000426:	e7d3      	b.n	80003d0 <read6502+0x8>
 8000428:	20000028 	.word	0x20000028
 800042c:	200080b9 	.word	0x200080b9
 8000430:	200080b8 	.word	0x200080b8
 8000434:	08002bd6 	.word	0x08002bd6
 8000438:	08003bd6 	.word	0x08003bd6

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b510      	push	{r4, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000440:	2214      	movs	r2, #20
 8000442:	2100      	movs	r1, #0
 8000444:	a808      	add	r0, sp, #32
 8000446:	f002 fb67 	bl	8002b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	2214      	movs	r2, #20
 800044c:	2100      	movs	r1, #0
 800044e:	a801      	add	r0, sp, #4
 8000450:	f002 fb62 	bl	8002b18 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000460:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f001 fed3 	bl	8002218 <HAL_RCC_OscConfig>
 8000472:	b108      	cbz	r0, 8000478 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000476:	e7fe      	b.n	8000476 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000488:	4621      	mov	r1, r4
 800048a:	a801      	add	r0, sp, #4
 800048c:	f002 f886 	bl	800259c <HAL_RCC_ClockConfig>
 8000490:	b108      	cbz	r0, 8000496 <SystemClock_Config+0x5a>
 8000492:	b672      	cpsid	i
  while (1)
 8000494:	e7fe      	b.n	8000494 <SystemClock_Config+0x58>
}
 8000496:	b010      	add	sp, #64	; 0x40
 8000498:	bd10      	pop	{r4, pc}
	...

0800049c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	2510      	movs	r5, #16
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80004a2:	f001 fd3d 	bl	8001f20 <HAL_Init>
  SystemClock_Config();
 80004a6:	f7ff ffc9 	bl	800043c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	462a      	mov	r2, r5
 80004ac:	2100      	movs	r1, #0
 80004ae:	a805      	add	r0, sp, #20
 80004b0:	f002 fb32 	bl	8002b18 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b4:	4b43      	ldr	r3, [pc, #268]	; (80005c4 <main+0x128>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c0:	432a      	orrs	r2, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80004ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	402a      	ands	r2, r5
 80004d0:	9201      	str	r2, [sp, #4]
 80004d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80004d6:	483c      	ldr	r0, [pc, #240]	; (80005c8 <main+0x12c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004dc:	619a      	str	r2, [r3, #24]
 80004de:	699a      	ldr	r2, [r3, #24]
 80004e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80004e4:	9202      	str	r2, [sp, #8]
 80004e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e8:	699a      	ldr	r2, [r3, #24]
 80004ea:	f042 0220 	orr.w	r2, r2, #32
 80004ee:	619a      	str	r2, [r3, #24]
 80004f0:	699a      	ldr	r2, [r3, #24]
 80004f2:	f002 0220 	and.w	r2, r2, #32
 80004f6:	9203      	str	r2, [sp, #12]
 80004f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	f042 0204 	orr.w	r2, r2, #4
 8000500:	619a      	str	r2, [r3, #24]
 8000502:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	9304      	str	r3, [sp, #16]
 800050c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800050e:	f001 fe7d 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2102      	movs	r1, #2
 8000516:	482d      	ldr	r0, [pc, #180]	; (80005cc <main+0x130>)
 8000518:	f001 fe78 	bl	800220c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800051c:	482a      	ldr	r0, [pc, #168]	; (80005c8 <main+0x12c>)
 800051e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	e9cd 6805 	strd	r6, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000528:	f001 fd88 	bl	800203c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800052c:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800052e:	4827      	ldr	r0, [pc, #156]	; (80005cc <main+0x130>)
 8000530:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	e9cd 3805 	strd	r3, r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800053a:	f001 fd7f 	bl	800203c <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 800053e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <main+0x134>)
  huart1.Init.BaudRate = 115200;
 8000544:	4a23      	ldr	r2, [pc, #140]	; (80005d4 <main+0x138>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000546:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800054a:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800054e:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8000550:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000556:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000558:	f002 f97e 	bl	8002858 <HAL_UART_Init>
 800055c:	4602      	mov	r2, r0
 800055e:	b108      	cbz	r0, 8000564 <main+0xc8>
 8000560:	b672      	cpsid	i
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0xc6>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000564:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000568:	900b      	str	r0, [sp, #44]	; 0x2c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800056a:	481b      	ldr	r0, [pc, #108]	; (80005d8 <main+0x13c>)
  Timing.DataSetupTime = 255;
 800056c:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800056e:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000570:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000574:	e9c0 3201 	strd	r3, r2, [r0, #4]
  Timing.AddressSetupTime = 15;
 8000578:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 800057a:	e9cd 1307 	strd	r1, r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 800057e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Timing.DataLatency = 17;
 8000582:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000584:	a905      	add	r1, sp, #20
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000586:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800058a:	e9c0 5205 	strd	r5, r2, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800058e:	e9c0 2207 	strd	r2, r2, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000592:	e9c0 2609 	strd	r2, r6, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000596:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800059a:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
  Timing.CLKDivision = 16;
 800059e:	9509      	str	r5, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 80005a0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80005a2:	f002 f8b7 	bl	8002714 <HAL_SRAM_Init>
 80005a6:	b108      	cbz	r0, 80005ac <main+0x110>
 80005a8:	b672      	cpsid	i
  while (1)
 80005aa:	e7fe      	b.n	80005aa <main+0x10e>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <main+0x140>)
 80005ae:	69d3      	ldr	r3, [r2, #28]
 80005b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b4:	61d3      	str	r3, [r2, #28]
  initApple1(); // Initialize Apple I
 80005b6:	f7ff fe91 	bl	80002dc <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 80005ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80005be:	f000 ffe1 	bl	8001584 <exec6502>
  while (1)
 80005c2:	e7fa      	b.n	80005ba <main+0x11e>
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40011400 	.word	0x40011400
 80005cc:	40011800 	.word	0x40011800
 80005d0:	20008070 	.word	0x20008070
 80005d4:	40013800 	.word	0x40013800
 80005d8:	20008028 	.word	0x20008028
 80005dc:	40010000 	.word	0x40010000

080005e0 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 80005e0:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <getvalue+0x1c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b113      	cbz	r3, 80005ee <getvalue+0xe>
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <getvalue+0x20>)
 80005ea:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 80005ec:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <getvalue+0x24>)
 80005f0:	8818      	ldrh	r0, [r3, #0]
 80005f2:	f7ff fee9 	bl	80003c8 <read6502>
 80005f6:	b280      	uxth	r0, r0
 80005f8:	e7f8      	b.n	80005ec <getvalue+0xc>
 80005fa:	bf00      	nop
 80005fc:	200080d7 	.word	0x200080d7
 8000600:	200080bd 	.word	0x200080bd
 8000604:	200080c6 	.word	0x200080c6

08000608 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000608:	4a02      	ldr	r2, [pc, #8]	; (8000614 <bcc.part.0+0xc>)
 800060a:	6813      	ldr	r3, [r2, #0]
 800060c:	3302      	adds	r3, #2
 800060e:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200080c0 	.word	0x200080c0

08000618 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 8000618:	4a02      	ldr	r2, [pc, #8]	; (8000624 <dex.part.0+0xc>)
 800061a:	7813      	ldrb	r3, [r2, #0]
 800061c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000620:	7013      	strb	r3, [r2, #0]
}
 8000622:	4770      	bx	lr
 8000624:	200080c4 	.word	0x200080c4

08000628 <push16>:
void push16(uint16_t pushval) {
 8000628:	b538      	push	{r3, r4, r5, lr}
 800062a:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 800062c:	4c09      	ldr	r4, [pc, #36]	; (8000654 <push16+0x2c>)
 800062e:	0a29      	lsrs	r1, r5, #8
 8000630:	7820      	ldrb	r0, [r4, #0]
 8000632:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000636:	f7ff fe3d 	bl	80002b4 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 800063a:	7823      	ldrb	r3, [r4, #0]
 800063c:	b2e9      	uxtb	r1, r5
 800063e:	3b01      	subs	r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000646:	f7ff fe35 	bl	80002b4 <write6502>
    sp -= 2;
 800064a:	7823      	ldrb	r3, [r4, #0]
 800064c:	3b02      	subs	r3, #2
 800064e:	7023      	strb	r3, [r4, #0]
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	200080d6 	.word	0x200080d6

08000658 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <push8+0x14>)
void push8(uint8_t pushval) {
 800065a:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 800065c:	7813      	ldrb	r3, [r2, #0]
 800065e:	1e58      	subs	r0, r3, #1
 8000660:	7010      	strb	r0, [r2, #0]
 8000662:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8000666:	f7ff be25 	b.w	80002b4 <write6502>
 800066a:	bf00      	nop
 800066c:	200080d6 	.word	0x200080d6

08000670 <pull16>:
uint16_t pull16() {
 8000670:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000672:	4d0b      	ldr	r5, [pc, #44]	; (80006a0 <pull16+0x30>)
 8000674:	7828      	ldrb	r0, [r5, #0]
 8000676:	3001      	adds	r0, #1
 8000678:	b2c0      	uxtb	r0, r0
 800067a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800067e:	f7ff fea3 	bl	80003c8 <read6502>
 8000682:	4604      	mov	r4, r0
 8000684:	7828      	ldrb	r0, [r5, #0]
 8000686:	3002      	adds	r0, #2
 8000688:	b2c0      	uxtb	r0, r0
 800068a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800068e:	f7ff fe9b 	bl	80003c8 <read6502>
    sp += 2;
 8000692:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000694:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8000698:	3302      	adds	r3, #2
 800069a:	702b      	strb	r3, [r5, #0]
}
 800069c:	b280      	uxth	r0, r0
 800069e:	bd38      	pop	{r3, r4, r5, pc}
 80006a0:	200080d6 	.word	0x200080d6

080006a4 <pull8>:
    return (read6502(BASE_STACK + ++sp));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <pull8+0x14>)
 80006a6:	7818      	ldrb	r0, [r3, #0]
 80006a8:	3001      	adds	r0, #1
 80006aa:	b2c0      	uxtb	r0, r0
 80006ac:	7018      	strb	r0, [r3, #0]
 80006ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80006b2:	f7ff be89 	b.w	80003c8 <read6502>
 80006b6:	bf00      	nop
 80006b8:	200080d6 	.word	0x200080d6

080006bc <reset6502>:
void reset6502() {
 80006bc:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 80006be:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 80006c2:	f7ff fe81 	bl	80003c8 <read6502>
 80006c6:	4604      	mov	r4, r0
 80006c8:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 80006cc:	f7ff fe7c 	bl	80003c8 <read6502>
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <reset6502+0x3c>)
 80006d2:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80006d6:	801c      	strh	r4, [r3, #0]
    a = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <reset6502+0x40>)
 80006dc:	7013      	strb	r3, [r2, #0]
    x = 0;
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <reset6502+0x44>)
 80006e0:	7013      	strb	r3, [r2, #0]
    y = 0;
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <reset6502+0x48>)
 80006e4:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 80006e6:	22fd      	movs	r2, #253	; 0xfd
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <reset6502+0x4c>)
 80006ea:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <reset6502+0x50>)
 80006ee:	7813      	ldrb	r3, [r2, #0]
 80006f0:	f043 0320 	orr.w	r3, r3, #32
 80006f4:	7013      	strb	r3, [r2, #0]
}
 80006f6:	bd10      	pop	{r4, pc}
 80006f8:	200080d0 	.word	0x200080d0
 80006fc:	200080bd 	.word	0x200080bd
 8000700:	200080da 	.word	0x200080da
 8000704:	200080db 	.word	0x200080db
 8000708:	200080d6 	.word	0x200080d6
 800070c:	200080c4 	.word	0x200080c4

08000710 <imm>:
    ea = pc++;
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <imm+0x10>)
 8000712:	8813      	ldrh	r3, [r2, #0]
 8000714:	1c59      	adds	r1, r3, #1
 8000716:	8011      	strh	r1, [r2, #0]
 8000718:	4a02      	ldr	r2, [pc, #8]	; (8000724 <imm+0x14>)
 800071a:	8013      	strh	r3, [r2, #0]
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200080d0 	.word	0x200080d0
 8000724:	200080c6 	.word	0x200080c6

08000728 <zp>:
void zp() { // zero-page
 8000728:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <zp+0x14>)
 800072c:	8818      	ldrh	r0, [r3, #0]
 800072e:	1c42      	adds	r2, r0, #1
 8000730:	801a      	strh	r2, [r3, #0]
 8000732:	f7ff fe49 	bl	80003c8 <read6502>
 8000736:	4b02      	ldr	r3, [pc, #8]	; (8000740 <zp+0x18>)
 8000738:	8018      	strh	r0, [r3, #0]
}
 800073a:	bd08      	pop	{r3, pc}
 800073c:	200080d0 	.word	0x200080d0
 8000740:	200080c6 	.word	0x200080c6

08000744 <zpx>:
void zpx() { // zero-page,X
 8000744:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <zpx+0x1c>)
 8000748:	8818      	ldrh	r0, [r3, #0]
 800074a:	1c42      	adds	r2, r0, #1
 800074c:	801a      	strh	r2, [r3, #0]
 800074e:	f7ff fe3b 	bl	80003c8 <read6502>
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <zpx+0x20>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4418      	add	r0, r3
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <zpx+0x24>)
 800075a:	b2c0      	uxtb	r0, r0
 800075c:	8018      	strh	r0, [r3, #0]
}
 800075e:	bd08      	pop	{r3, pc}
 8000760:	200080d0 	.word	0x200080d0
 8000764:	200080da 	.word	0x200080da
 8000768:	200080c6 	.word	0x200080c6

0800076c <zpy>:
void zpy() { // zero-page,Y
 800076c:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <zpy+0x1c>)
 8000770:	8818      	ldrh	r0, [r3, #0]
 8000772:	1c42      	adds	r2, r0, #1
 8000774:	801a      	strh	r2, [r3, #0]
 8000776:	f7ff fe27 	bl	80003c8 <read6502>
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <zpy+0x20>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4418      	add	r0, r3
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <zpy+0x24>)
 8000782:	b2c0      	uxtb	r0, r0
 8000784:	8018      	strh	r0, [r3, #0]
}
 8000786:	bd08      	pop	{r3, pc}
 8000788:	200080d0 	.word	0x200080d0
 800078c:	200080db 	.word	0x200080db
 8000790:	200080c6 	.word	0x200080c6

08000794 <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 8000794:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <rel+0x20>)
 8000798:	8818      	ldrh	r0, [r3, #0]
 800079a:	1c42      	adds	r2, r0, #1
 800079c:	801a      	strh	r2, [r3, #0]
 800079e:	f7ff fe13 	bl	80003c8 <read6502>
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <rel+0x24>)
 80007a4:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 80007a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80007aa:	bf18      	it	ne
 80007ac:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 80007b0:	8013      	strh	r3, [r2, #0]
}
 80007b2:	bd08      	pop	{r3, pc}
 80007b4:	200080d0 	.word	0x200080d0
 80007b8:	200080d2 	.word	0x200080d2

080007bc <abso>:
void abso() { // absolute
 80007bc:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 80007be:	4d09      	ldr	r5, [pc, #36]	; (80007e4 <abso+0x28>)
 80007c0:	8828      	ldrh	r0, [r5, #0]
 80007c2:	f7ff fe01 	bl	80003c8 <read6502>
 80007c6:	4604      	mov	r4, r0
 80007c8:	8828      	ldrh	r0, [r5, #0]
 80007ca:	3001      	adds	r0, #1
 80007cc:	b280      	uxth	r0, r0
 80007ce:	f7ff fdfb 	bl	80003c8 <read6502>
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <abso+0x2c>)
 80007d4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80007d8:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80007da:	882b      	ldrh	r3, [r5, #0]
 80007dc:	3302      	adds	r3, #2
 80007de:	802b      	strh	r3, [r5, #0]
}
 80007e0:	bd38      	pop	{r3, r4, r5, pc}
 80007e2:	bf00      	nop
 80007e4:	200080d0 	.word	0x200080d0
 80007e8:	200080c6 	.word	0x200080c6

080007ec <absx>:
void absx() { // absolute,X
 80007ec:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80007ee:	4d0a      	ldr	r5, [pc, #40]	; (8000818 <absx+0x2c>)
 80007f0:	8828      	ldrh	r0, [r5, #0]
 80007f2:	f7ff fde9 	bl	80003c8 <read6502>
 80007f6:	4604      	mov	r4, r0
 80007f8:	8828      	ldrh	r0, [r5, #0]
 80007fa:	3001      	adds	r0, #1
 80007fc:	b280      	uxth	r0, r0
 80007fe:	f7ff fde3 	bl	80003c8 <read6502>
    ea += (uint16_t)x;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000804:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 8000808:	7818      	ldrb	r0, [r3, #0]
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <absx+0x34>)
 800080c:	4404      	add	r4, r0
 800080e:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000810:	882b      	ldrh	r3, [r5, #0]
 8000812:	3302      	adds	r3, #2
 8000814:	802b      	strh	r3, [r5, #0]
}
 8000816:	bd38      	pop	{r3, r4, r5, pc}
 8000818:	200080d0 	.word	0x200080d0
 800081c:	200080da 	.word	0x200080da
 8000820:	200080c6 	.word	0x200080c6

08000824 <absy>:
void absy() { // absolute,Y
 8000824:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000826:	4d0a      	ldr	r5, [pc, #40]	; (8000850 <absy+0x2c>)
 8000828:	8828      	ldrh	r0, [r5, #0]
 800082a:	f7ff fdcd 	bl	80003c8 <read6502>
 800082e:	4604      	mov	r4, r0
 8000830:	8828      	ldrh	r0, [r5, #0]
 8000832:	3001      	adds	r0, #1
 8000834:	b280      	uxth	r0, r0
 8000836:	f7ff fdc7 	bl	80003c8 <read6502>
    ea += (uint16_t)y;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 800083c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 8000840:	7818      	ldrb	r0, [r3, #0]
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <absy+0x34>)
 8000844:	4404      	add	r4, r0
 8000846:	801c      	strh	r4, [r3, #0]
    pc += 2;
 8000848:	882b      	ldrh	r3, [r5, #0]
 800084a:	3302      	adds	r3, #2
 800084c:	802b      	strh	r3, [r5, #0]
}
 800084e:	bd38      	pop	{r3, r4, r5, pc}
 8000850:	200080d0 	.word	0x200080d0
 8000854:	200080db 	.word	0x200080db
 8000858:	200080c6 	.word	0x200080c6

0800085c <ind>:
void ind() { // indirect
 800085c:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 800085e:	4e10      	ldr	r6, [pc, #64]	; (80008a0 <ind+0x44>)
 8000860:	8830      	ldrh	r0, [r6, #0]
 8000862:	f7ff fdb1 	bl	80003c8 <read6502>
 8000866:	4604      	mov	r4, r0
 8000868:	8830      	ldrh	r0, [r6, #0]
 800086a:	3001      	adds	r0, #1
 800086c:	b280      	uxth	r0, r0
 800086e:	f7ff fdab 	bl	80003c8 <read6502>
 8000872:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000876:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000878:	4620      	mov	r0, r4
 800087a:	f7ff fda5 	bl	80003c8 <read6502>
 800087e:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8000880:	1c60      	adds	r0, r4, #1
 8000882:	b2c0      	uxtb	r0, r0
 8000884:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000888:	4320      	orrs	r0, r4
 800088a:	f7ff fd9d 	bl	80003c8 <read6502>
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <ind+0x48>)
 8000890:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000894:	801d      	strh	r5, [r3, #0]
    pc += 2;
 8000896:	8833      	ldrh	r3, [r6, #0]
 8000898:	3302      	adds	r3, #2
 800089a:	8033      	strh	r3, [r6, #0]
}
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	bf00      	nop
 80008a0:	200080d0 	.word	0x200080d0
 80008a4:	200080c6 	.word	0x200080c6

080008a8 <indx>:
void indx() { //  (indirect,X)
 80008a8:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <indx+0x30>)
 80008ac:	8818      	ldrh	r0, [r3, #0]
 80008ae:	1c42      	adds	r2, r0, #1
 80008b0:	801a      	strh	r2, [r3, #0]
 80008b2:	f7ff fd89 	bl	80003c8 <read6502>
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <indx+0x34>)
 80008b8:	781c      	ldrb	r4, [r3, #0]
 80008ba:	4404      	add	r4, r0
 80008bc:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 80008be:	4620      	mov	r0, r4
 80008c0:	f7ff fd82 	bl	80003c8 <read6502>
 80008c4:	3401      	adds	r4, #1
 80008c6:	4605      	mov	r5, r0
 80008c8:	b2e0      	uxtb	r0, r4
 80008ca:	f7ff fd7d 	bl	80003c8 <read6502>
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <indx+0x38>)
 80008d0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80008d4:	801d      	strh	r5, [r3, #0]
}
 80008d6:	bd38      	pop	{r3, r4, r5, pc}
 80008d8:	200080d0 	.word	0x200080d0
 80008dc:	200080da 	.word	0x200080da
 80008e0:	200080c6 	.word	0x200080c6

080008e4 <indy>:
void indy() { //  (indirect),Y
 80008e4:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <indy+0x30>)
 80008e8:	8818      	ldrh	r0, [r3, #0]
 80008ea:	1c42      	adds	r2, r0, #1
 80008ec:	801a      	strh	r2, [r3, #0]
 80008ee:	f7ff fd6b 	bl	80003c8 <read6502>
 80008f2:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80008f4:	4620      	mov	r0, r4
 80008f6:	f7ff fd67 	bl	80003c8 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 80008fa:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 80008fc:	4605      	mov	r5, r0
 80008fe:	b2e0      	uxtb	r0, r4
 8000900:	f7ff fd62 	bl	80003c8 <read6502>
    ea += (uint16_t)y;
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000906:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 800090a:	7818      	ldrb	r0, [r3, #0]
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <indy+0x38>)
 800090e:	4405      	add	r5, r0
 8000910:	801d      	strh	r5, [r3, #0]
}
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	200080d0 	.word	0x200080d0
 8000918:	200080db 	.word	0x200080db
 800091c:	200080c6 	.word	0x200080c6

08000920 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <putvalue+0x18>)
 8000922:	b2c1      	uxtb	r1, r0
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b113      	cbz	r3, 800092e <putvalue+0xe>
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <putvalue+0x1c>)
 800092a:	7019      	strb	r1, [r3, #0]
}
 800092c:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <putvalue+0x20>)
 8000930:	8818      	ldrh	r0, [r3, #0]
 8000932:	f7ff bcbf 	b.w	80002b4 <write6502>
 8000936:	bf00      	nop
 8000938:	200080d7 	.word	0x200080d7
 800093c:	200080bd 	.word	0x200080bd
 8000940:	200080c6 	.word	0x200080c6

08000944 <adc>:
void adc() {
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 8000946:	f7ff fe4b 	bl	80005e0 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800094a:	4d24      	ldr	r5, [pc, #144]	; (80009dc <adc+0x98>)
    value = getvalue();
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800094e:	4c25      	ldr	r4, [pc, #148]	; (80009e4 <adc+0xa0>)
    value = getvalue();
 8000950:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000952:	782b      	ldrb	r3, [r5, #0]
 8000954:	7821      	ldrb	r1, [r4, #0]
 8000956:	f003 0201 	and.w	r2, r3, #1
 800095a:	440a      	add	r2, r1
 800095c:	4e22      	ldr	r6, [pc, #136]	; (80009e8 <adc+0xa4>)
 800095e:	4402      	add	r2, r0
 8000960:	b292      	uxth	r2, r2
    carrycalc(result);
 8000962:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8000966:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8000968:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 800096a:	bf14      	ite	ne
 800096c:	f043 0301 	orrne.w	r3, r3, #1
 8000970:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000974:	b1c6      	cbz	r6, 80009a8 <adc+0x64>
 8000976:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 800097a:	ea81 0602 	eor.w	r6, r1, r2
 800097e:	ea80 0702 	eor.w	r7, r0, r2
 8000982:	4630      	mov	r0, r6
 8000984:	4038      	ands	r0, r7
 8000986:	0607      	lsls	r7, r0, #24
 8000988:	bf4c      	ite	mi
 800098a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800098e:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8000992:	0616      	lsls	r6, r2, #24
 8000994:	bf4c      	ite	mi
 8000996:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800099a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 800099e:	0718      	lsls	r0, r3, #28
 80009a0:	d405      	bmi.n	80009ae <adc+0x6a>
 80009a2:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 80009a4:	7022      	strb	r2, [r4, #0]
}
 80009a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	e7e5      	b.n	800097a <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 80009ae:	f001 000f 	and.w	r0, r1, #15
 80009b2:	2809      	cmp	r0, #9
            a += 0x06;
 80009b4:	bf84      	itt	hi
 80009b6:	3106      	addhi	r1, #6
 80009b8:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80009ba:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80009bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80009c0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80009c4:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80009c6:	4909      	ldr	r1, [pc, #36]	; (80009ec <adc+0xa8>)
        clearcarry();
 80009c8:	702b      	strb	r3, [r5, #0]
            setcarry();
 80009ca:	bf84      	itt	hi
 80009cc:	f043 0301 	orrhi.w	r3, r3, #1
 80009d0:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80009d2:	680b      	ldr	r3, [r1, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	600b      	str	r3, [r1, #0]
 80009d8:	e7e4      	b.n	80009a4 <adc+0x60>
 80009da:	bf00      	nop
 80009dc:	200080c4 	.word	0x200080c4
 80009e0:	200080d8 	.word	0x200080d8
 80009e4:	200080bd 	.word	0x200080bd
 80009e8:	200080d4 	.word	0x200080d4
 80009ec:	200080c0 	.word	0x200080c0

080009f0 <op_and>:
void op_and() {
 80009f0:	b508      	push	{r3, lr}
    value = getvalue();
 80009f2:	f7ff fdf5 	bl	80005e0 <getvalue>
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <op_and+0x40>)
    result = (uint16_t)a & value;
 80009f8:	490e      	ldr	r1, [pc, #56]	; (8000a34 <op_and+0x44>)
    value = getvalue();
 80009fa:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 80009fc:	780b      	ldrb	r3, [r1, #0]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <op_and+0x48>)
 8000a00:	4018      	ands	r0, r3
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <op_and+0x4c>)
 8000a04:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000a06:	7813      	ldrb	r3, [r2, #0]
 8000a08:	b148      	cbz	r0, 8000a1e <op_and+0x2e>
 8000a0a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000a0e:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 8000a12:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000a14:	d107      	bne.n	8000a26 <op_and+0x36>
 8000a16:	7813      	ldrb	r3, [r2, #0]
 8000a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a1c:	e005      	b.n	8000a2a <op_and+0x3a>
    zerocalc(result);
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 8000a24:	e7f7      	b.n	8000a16 <op_and+0x26>
 8000a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2a:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 8000a2c:	7008      	strb	r0, [r1, #0]
}
 8000a2e:	bd08      	pop	{r3, pc}
 8000a30:	200080d8 	.word	0x200080d8
 8000a34:	200080bd 	.word	0x200080bd
 8000a38:	200080c4 	.word	0x200080c4
 8000a3c:	200080d4 	.word	0x200080d4

08000a40 <asl>:
void asl() {
 8000a40:	b508      	push	{r3, lr}
    value = getvalue();
 8000a42:	f7ff fdcd 	bl	80005e0 <getvalue>
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <asl+0x48>)
 8000a48:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <asl+0x4c>)
 8000a4a:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <asl+0x50>)
 8000a4e:	0040      	lsls	r0, r0, #1
 8000a50:	b280      	uxth	r0, r0
 8000a52:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 8000a54:	7813      	ldrb	r3, [r2, #0]
 8000a56:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8000a5a:	bf14      	ite	ne
 8000a5c:	f043 0301 	orrne.w	r3, r3, #1
 8000a60:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000a64:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 8000a68:	bf14      	ite	ne
 8000a6a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8000a6e:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8000a72:	0601      	lsls	r1, r0, #24
 8000a74:	bf4c      	ite	mi
 8000a76:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000a7a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000a7e:	7013      	strb	r3, [r2, #0]
}
 8000a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000a84:	f7ff bf4c 	b.w	8000920 <putvalue>
 8000a88:	200080d8 	.word	0x200080d8
 8000a8c:	200080c4 	.word	0x200080c4
 8000a90:	200080d4 	.word	0x200080d4

08000a94 <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <bcc+0x30>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	07db      	lsls	r3, r3, #31
 8000a9a:	d412      	bmi.n	8000ac2 <bcc+0x2e>
        oldpc = pc;
 8000a9c:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <bcc+0x34>)
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <bcc+0x38>)
 8000aa0:	880a      	ldrh	r2, [r1, #0]
 8000aa2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <bcc+0x3c>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000aae:	4053      	eors	r3, r2
 8000ab0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000ab4:	d001      	beq.n	8000aba <bcc+0x26>
 8000ab6:	f7ff bda7 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000aba:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <bcc+0x40>)
 8000abc:	6813      	ldr	r3, [r2, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	6013      	str	r3, [r2, #0]
}
 8000ac2:	4770      	bx	lr
 8000ac4:	200080c4 	.word	0x200080c4
 8000ac8:	200080d0 	.word	0x200080d0
 8000acc:	200080cc 	.word	0x200080cc
 8000ad0:	200080d2 	.word	0x200080d2
 8000ad4:	200080c0 	.word	0x200080c0

08000ad8 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <bcs+0x30>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	07db      	lsls	r3, r3, #31
 8000ade:	d512      	bpl.n	8000b06 <bcs+0x2e>
        oldpc = pc;
 8000ae0:	490a      	ldr	r1, [pc, #40]	; (8000b0c <bcs+0x34>)
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <bcs+0x38>)
 8000ae4:	880a      	ldrh	r2, [r1, #0]
 8000ae6:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <bcs+0x3c>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000af2:	4053      	eors	r3, r2
 8000af4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000af8:	d001      	beq.n	8000afe <bcs+0x26>
 8000afa:	f7ff bd85 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <bcs+0x40>)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	6013      	str	r3, [r2, #0]
}
 8000b06:	4770      	bx	lr
 8000b08:	200080c4 	.word	0x200080c4
 8000b0c:	200080d0 	.word	0x200080d0
 8000b10:	200080cc 	.word	0x200080cc
 8000b14:	200080d2 	.word	0x200080d2
 8000b18:	200080c0 	.word	0x200080c0

08000b1c <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <beq+0x30>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	079b      	lsls	r3, r3, #30
 8000b22:	d512      	bpl.n	8000b4a <beq+0x2e>
        oldpc = pc;
 8000b24:	490a      	ldr	r1, [pc, #40]	; (8000b50 <beq+0x34>)
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <beq+0x38>)
 8000b28:	880a      	ldrh	r2, [r1, #0]
 8000b2a:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <beq+0x3c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000b36:	4053      	eors	r3, r2
 8000b38:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000b3c:	d001      	beq.n	8000b42 <beq+0x26>
 8000b3e:	f7ff bd63 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <beq+0x40>)
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	4770      	bx	lr
 8000b4c:	200080c4 	.word	0x200080c4
 8000b50:	200080d0 	.word	0x200080d0
 8000b54:	200080cc 	.word	0x200080cc
 8000b58:	200080d2 	.word	0x200080d2
 8000b5c:	200080c0 	.word	0x200080c0

08000b60 <op_bit>:
void op_bit() {
 8000b60:	b508      	push	{r3, lr}
    value = getvalue();
 8000b62:	f7ff fd3d 	bl	80005e0 <getvalue>
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <op_bit+0x34>)
    result = (uint16_t)a & value;
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <op_bit+0x38>)
    value = getvalue();
 8000b6a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <op_bit+0x3c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4003      	ands	r3, r0
 8000b72:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <op_bit+0x40>)
 8000b76:	b14b      	cbz	r3, 8000b8c <op_bit+0x2c>
 8000b78:	7813      	ldrb	r3, [r2, #0]
 8000b7a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8000b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b82:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000b86:	4303      	orrs	r3, r0
 8000b88:	7013      	strb	r3, [r2, #0]
}
 8000b8a:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000b8c:	7813      	ldrb	r3, [r2, #0]
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	e7f4      	b.n	8000b7e <op_bit+0x1e>
 8000b94:	200080d8 	.word	0x200080d8
 8000b98:	200080d4 	.word	0x200080d4
 8000b9c:	200080bd 	.word	0x200080bd
 8000ba0:	200080c4 	.word	0x200080c4

08000ba4 <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <bmi+0x34>)
 8000ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da12      	bge.n	8000bd4 <bmi+0x30>
        oldpc = pc;
 8000bae:	490b      	ldr	r1, [pc, #44]	; (8000bdc <bmi+0x38>)
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <bmi+0x3c>)
 8000bb2:	880a      	ldrh	r2, [r1, #0]
 8000bb4:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <bmi+0x40>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000bc6:	d001      	beq.n	8000bcc <bmi+0x28>
 8000bc8:	f7ff bd1e 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <bmi+0x44>)
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200080c4 	.word	0x200080c4
 8000bdc:	200080d0 	.word	0x200080d0
 8000be0:	200080cc 	.word	0x200080cc
 8000be4:	200080d2 	.word	0x200080d2
 8000be8:	200080c0 	.word	0x200080c0

08000bec <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <bne+0x30>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	079b      	lsls	r3, r3, #30
 8000bf2:	d412      	bmi.n	8000c1a <bne+0x2e>
        oldpc = pc;
 8000bf4:	490a      	ldr	r1, [pc, #40]	; (8000c20 <bne+0x34>)
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <bne+0x38>)
 8000bf8:	880a      	ldrh	r2, [r1, #0]
 8000bfa:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <bne+0x3c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000c06:	4053      	eors	r3, r2
 8000c08:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000c0c:	d001      	beq.n	8000c12 <bne+0x26>
 8000c0e:	f7ff bcfb 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <bne+0x40>)
 8000c14:	6813      	ldr	r3, [r2, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	4770      	bx	lr
 8000c1c:	200080c4 	.word	0x200080c4
 8000c20:	200080d0 	.word	0x200080d0
 8000c24:	200080cc 	.word	0x200080cc
 8000c28:	200080d2 	.word	0x200080d2
 8000c2c:	200080c0 	.word	0x200080c0

08000c30 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <bpl+0x34>)
 8000c32:	f993 3000 	ldrsb.w	r3, [r3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db12      	blt.n	8000c60 <bpl+0x30>
        oldpc = pc;
 8000c3a:	490b      	ldr	r1, [pc, #44]	; (8000c68 <bpl+0x38>)
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <bpl+0x3c>)
 8000c3e:	880a      	ldrh	r2, [r1, #0]
 8000c40:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <bpl+0x40>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000c4c:	4053      	eors	r3, r2
 8000c4e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000c52:	d001      	beq.n	8000c58 <bpl+0x28>
 8000c54:	f7ff bcd8 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <bpl+0x44>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200080c4 	.word	0x200080c4
 8000c68:	200080d0 	.word	0x200080d0
 8000c6c:	200080cc 	.word	0x200080cc
 8000c70:	200080d2 	.word	0x200080d2
 8000c74:	200080c0 	.word	0x200080c0

08000c78 <brk>:
void brk() {
 8000c78:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8000c7a:	4d0f      	ldr	r5, [pc, #60]	; (8000cb8 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8000c7c:	4c0f      	ldr	r4, [pc, #60]	; (8000cbc <brk+0x44>)
    pc++;
 8000c7e:	8828      	ldrh	r0, [r5, #0]
 8000c80:	3001      	adds	r0, #1
 8000c82:	b280      	uxth	r0, r0
 8000c84:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8000c86:	f7ff fccf 	bl	8000628 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8000c8a:	7820      	ldrb	r0, [r4, #0]
 8000c8c:	f040 0010 	orr.w	r0, r0, #16
 8000c90:	f7ff fce2 	bl	8000658 <push8>
    setinterrupt(); // set interrupt flag
 8000c94:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8000c96:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8000ca0:	f7ff fb92 	bl	80003c8 <read6502>
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000caa:	f7ff fb8d 	bl	80003c8 <read6502>
 8000cae:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000cb2:	802c      	strh	r4, [r5, #0]
}
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200080d0 	.word	0x200080d0
 8000cbc:	200080c4 	.word	0x200080c4

08000cc0 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <bvc+0x30>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	065b      	lsls	r3, r3, #25
 8000cc6:	d412      	bmi.n	8000cee <bvc+0x2e>
        oldpc = pc;
 8000cc8:	490a      	ldr	r1, [pc, #40]	; (8000cf4 <bvc+0x34>)
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <bvc+0x38>)
 8000ccc:	880a      	ldrh	r2, [r1, #0]
 8000cce:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <bvc+0x3c>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000cda:	4053      	eors	r3, r2
 8000cdc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000ce0:	d001      	beq.n	8000ce6 <bvc+0x26>
 8000ce2:	f7ff bc91 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <bvc+0x40>)
 8000ce8:	6813      	ldr	r3, [r2, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	6013      	str	r3, [r2, #0]
}
 8000cee:	4770      	bx	lr
 8000cf0:	200080c4 	.word	0x200080c4
 8000cf4:	200080d0 	.word	0x200080d0
 8000cf8:	200080cc 	.word	0x200080cc
 8000cfc:	200080d2 	.word	0x200080d2
 8000d00:	200080c0 	.word	0x200080c0

08000d04 <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <bvs+0x30>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	065b      	lsls	r3, r3, #25
 8000d0a:	d512      	bpl.n	8000d32 <bvs+0x2e>
        oldpc = pc;
 8000d0c:	490a      	ldr	r1, [pc, #40]	; (8000d38 <bvs+0x34>)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <bvs+0x38>)
 8000d10:	880a      	ldrh	r2, [r1, #0]
 8000d12:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <bvs+0x3c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000d1e:	4053      	eors	r3, r2
 8000d20:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000d24:	d001      	beq.n	8000d2a <bvs+0x26>
 8000d26:	f7ff bc6f 	b.w	8000608 <bcc.part.0>
            else clockticks6502++;
 8000d2a:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <bvs+0x40>)
 8000d2c:	6813      	ldr	r3, [r2, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	4770      	bx	lr
 8000d34:	200080c4 	.word	0x200080c4
 8000d38:	200080d0 	.word	0x200080d0
 8000d3c:	200080cc 	.word	0x200080cc
 8000d40:	200080d2 	.word	0x200080d2
 8000d44:	200080c0 	.word	0x200080c0

08000d48 <clc>:
    clearcarry();
 8000d48:	4a02      	ldr	r2, [pc, #8]	; (8000d54 <clc+0xc>)
 8000d4a:	7813      	ldrb	r3, [r2, #0]
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	7013      	strb	r3, [r2, #0]
}
 8000d52:	4770      	bx	lr
 8000d54:	200080c4 	.word	0x200080c4

08000d58 <cld>:
    cleardecimal();
 8000d58:	4a02      	ldr	r2, [pc, #8]	; (8000d64 <cld+0xc>)
 8000d5a:	7813      	ldrb	r3, [r2, #0]
 8000d5c:	f023 0308 	bic.w	r3, r3, #8
 8000d60:	7013      	strb	r3, [r2, #0]
}
 8000d62:	4770      	bx	lr
 8000d64:	200080c4 	.word	0x200080c4

08000d68 <cli>:
    clearinterrupt();
 8000d68:	4a02      	ldr	r2, [pc, #8]	; (8000d74 <cli+0xc>)
 8000d6a:	7813      	ldrb	r3, [r2, #0]
 8000d6c:	f023 0304 	bic.w	r3, r3, #4
 8000d70:	7013      	strb	r3, [r2, #0]
}
 8000d72:	4770      	bx	lr
 8000d74:	200080c4 	.word	0x200080c4

08000d78 <clv>:
    clearoverflow();
 8000d78:	4a02      	ldr	r2, [pc, #8]	; (8000d84 <clv+0xc>)
 8000d7a:	7813      	ldrb	r3, [r2, #0]
 8000d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d80:	7013      	strb	r3, [r2, #0]
}
 8000d82:	4770      	bx	lr
 8000d84:	200080c4 	.word	0x200080c4

08000d88 <cmp>:
void cmp() {
 8000d88:	b508      	push	{r3, lr}
    value = getvalue();
 8000d8a:	f7ff fc29 	bl	80005e0 <getvalue>
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <cmp+0x4c>)
    result = (uint16_t)a - value;
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <cmp+0x50>)
    value = getvalue();
 8000d92:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <cmp+0x54>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	1a19      	subs	r1, r3, r0
 8000d9a:	b289      	uxth	r1, r1
 8000d9c:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8000d9e:	b2c0      	uxtb	r0, r0
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <cmp+0x58>)
 8000da2:	4283      	cmp	r3, r0
 8000da4:	7813      	ldrb	r3, [r2, #0]
 8000da6:	d307      	bcc.n	8000db8 <cmp+0x30>
 8000da8:	f043 0001 	orr.w	r0, r3, #1
 8000dac:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8000dae:	d007      	beq.n	8000dc0 <cmp+0x38>
        else clearzero();
 8000db0:	7813      	ldrb	r3, [r2, #0]
 8000db2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000db6:	e005      	b.n	8000dc4 <cmp+0x3c>
        else clearcarry();
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8000dbe:	e7f7      	b.n	8000db0 <cmp+0x28>
 8000dc0:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000dc4:	0609      	lsls	r1, r1, #24
 8000dc6:	bf4c      	ite	mi
 8000dc8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000dcc:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000dd0:	7013      	strb	r3, [r2, #0]
}
 8000dd2:	bd08      	pop	{r3, pc}
 8000dd4:	200080d8 	.word	0x200080d8
 8000dd8:	200080d4 	.word	0x200080d4
 8000ddc:	200080bd 	.word	0x200080bd
 8000de0:	200080c4 	.word	0x200080c4

08000de4 <cpx>:
void cpx() {
 8000de4:	b508      	push	{r3, lr}
    value = getvalue();
 8000de6:	f7ff fbfb 	bl	80005e0 <getvalue>
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <cpx+0x4c>)
    result = (uint16_t)x - value;
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <cpx+0x50>)
    value = getvalue();
 8000dee:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <cpx+0x54>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	1a19      	subs	r1, r3, r0
 8000df6:	b289      	uxth	r1, r1
 8000df8:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8000dfa:	b2c0      	uxtb	r0, r0
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <cpx+0x58>)
 8000dfe:	4283      	cmp	r3, r0
 8000e00:	7813      	ldrb	r3, [r2, #0]
 8000e02:	d307      	bcc.n	8000e14 <cpx+0x30>
 8000e04:	f043 0001 	orr.w	r0, r3, #1
 8000e08:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8000e0a:	d007      	beq.n	8000e1c <cpx+0x38>
        else clearzero();
 8000e0c:	7813      	ldrb	r3, [r2, #0]
 8000e0e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000e12:	e005      	b.n	8000e20 <cpx+0x3c>
        else clearcarry();
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8000e1a:	e7f7      	b.n	8000e0c <cpx+0x28>
 8000e1c:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000e20:	0609      	lsls	r1, r1, #24
 8000e22:	bf4c      	ite	mi
 8000e24:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000e28:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000e2c:	7013      	strb	r3, [r2, #0]
}
 8000e2e:	bd08      	pop	{r3, pc}
 8000e30:	200080d8 	.word	0x200080d8
 8000e34:	200080d4 	.word	0x200080d4
 8000e38:	200080da 	.word	0x200080da
 8000e3c:	200080c4 	.word	0x200080c4

08000e40 <cpy>:
void cpy() {
 8000e40:	b508      	push	{r3, lr}
    value = getvalue();
 8000e42:	f7ff fbcd 	bl	80005e0 <getvalue>
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <cpy+0x4c>)
    result = (uint16_t)y - value;
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <cpy+0x50>)
    value = getvalue();
 8000e4a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <cpy+0x54>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	1a19      	subs	r1, r3, r0
 8000e52:	b289      	uxth	r1, r1
 8000e54:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 8000e56:	b2c0      	uxtb	r0, r0
 8000e58:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <cpy+0x58>)
 8000e5a:	4283      	cmp	r3, r0
 8000e5c:	7813      	ldrb	r3, [r2, #0]
 8000e5e:	d307      	bcc.n	8000e70 <cpy+0x30>
 8000e60:	f043 0001 	orr.w	r0, r3, #1
 8000e64:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8000e66:	d007      	beq.n	8000e78 <cpy+0x38>
        else clearzero();
 8000e68:	7813      	ldrb	r3, [r2, #0]
 8000e6a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000e6e:	e005      	b.n	8000e7c <cpy+0x3c>
        else clearcarry();
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8000e76:	e7f7      	b.n	8000e68 <cpy+0x28>
 8000e78:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000e7c:	0609      	lsls	r1, r1, #24
 8000e7e:	bf4c      	ite	mi
 8000e80:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000e84:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000e88:	7013      	strb	r3, [r2, #0]
}
 8000e8a:	bd08      	pop	{r3, pc}
 8000e8c:	200080d8 	.word	0x200080d8
 8000e90:	200080d4 	.word	0x200080d4
 8000e94:	200080db 	.word	0x200080db
 8000e98:	200080c4 	.word	0x200080c4

08000e9c <dec>:
void dec() {
 8000e9c:	b508      	push	{r3, lr}
    value = getvalue();
 8000e9e:	f7ff fb9f 	bl	80005e0 <getvalue>
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <dec+0x3c>)
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <dec+0x40>)
 8000ea6:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <dec+0x44>)
 8000eaa:	3801      	subs	r0, #1
 8000eac:	b280      	uxth	r0, r0
 8000eae:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000eb0:	b2c3      	uxtb	r3, r0
 8000eb2:	b16b      	cbz	r3, 8000ed0 <dec+0x34>
 8000eb4:	7813      	ldrb	r3, [r2, #0]
 8000eb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000eba:	0601      	lsls	r1, r0, #24
 8000ebc:	bf4c      	ite	mi
 8000ebe:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000ec2:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000ec6:	7013      	strb	r3, [r2, #0]
}
 8000ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000ecc:	f7ff bd28 	b.w	8000920 <putvalue>
    zerocalc(result);
 8000ed0:	7813      	ldrb	r3, [r2, #0]
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	e7f0      	b.n	8000eba <dec+0x1e>
 8000ed8:	200080d8 	.word	0x200080d8
 8000edc:	200080c4 	.word	0x200080c4
 8000ee0:	200080d4 	.word	0x200080d4

08000ee4 <dex>:
    x--;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <dex+0x2c>)
    zerocalc(x);
 8000ee6:	490b      	ldr	r1, [pc, #44]	; (8000f14 <dex+0x30>)
    x--;
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	3a01      	subs	r2, #1
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000ef0:	780b      	ldrb	r3, [r1, #0]
 8000ef2:	b132      	cbz	r2, 8000f02 <dex+0x1e>
 8000ef4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000ef8:	0612      	lsls	r2, r2, #24
 8000efa:	700b      	strb	r3, [r1, #0]
 8000efc:	d504      	bpl.n	8000f08 <dex+0x24>
 8000efe:	f7ff bb8b 	b.w	8000618 <dex.part.0>
    zerocalc(x);
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	e7f7      	b.n	8000ef8 <dex+0x14>
    signcalc(x);
 8000f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f0c:	700b      	strb	r3, [r1, #0]
}
 8000f0e:	4770      	bx	lr
 8000f10:	200080da 	.word	0x200080da
 8000f14:	200080c4 	.word	0x200080c4

08000f18 <dey>:

void dey() {
    y--;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <dey+0x2c>)
   
    zerocalc(y);
 8000f1a:	490b      	ldr	r1, [pc, #44]	; (8000f48 <dey+0x30>)
    y--;
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	3a01      	subs	r2, #1
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8000f24:	780b      	ldrb	r3, [r1, #0]
 8000f26:	b132      	cbz	r2, 8000f36 <dey+0x1e>
 8000f28:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000f2c:	0612      	lsls	r2, r2, #24
 8000f2e:	700b      	strb	r3, [r1, #0]
 8000f30:	d504      	bpl.n	8000f3c <dey+0x24>
 8000f32:	f7ff bb71 	b.w	8000618 <dex.part.0>
    zerocalc(y);
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	e7f7      	b.n	8000f2c <dey+0x14>
    signcalc(y);
 8000f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f40:	700b      	strb	r3, [r1, #0]
}
 8000f42:	4770      	bx	lr
 8000f44:	200080db 	.word	0x200080db
 8000f48:	200080c4 	.word	0x200080c4

08000f4c <eor>:

void eor() {
 8000f4c:	b508      	push	{r3, lr}
    value = getvalue();
 8000f4e:	f7ff fb47 	bl	80005e0 <getvalue>
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 8000f54:	490d      	ldr	r1, [pc, #52]	; (8000f8c <eor+0x40>)
    value = getvalue();
 8000f56:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8000f58:	780b      	ldrb	r3, [r1, #0]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <eor+0x44>)
 8000f5c:	4058      	eors	r0, r3
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <eor+0x48>)
 8000f60:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8000f62:	b2c3      	uxtb	r3, r0
 8000f64:	b163      	cbz	r3, 8000f80 <eor+0x34>
 8000f66:	7813      	ldrb	r3, [r2, #0]
 8000f68:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000f6c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000f70:	bf14      	ite	ne
 8000f72:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8000f76:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8000f7a:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8000f7c:	7008      	strb	r0, [r1, #0]
}
 8000f7e:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000f80:	7813      	ldrb	r3, [r2, #0]
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	e7f1      	b.n	8000f6c <eor+0x20>
 8000f88:	200080d8 	.word	0x200080d8
 8000f8c:	200080bd 	.word	0x200080bd
 8000f90:	200080c4 	.word	0x200080c4
 8000f94:	200080d4 	.word	0x200080d4

08000f98 <inc>:

void inc() {
 8000f98:	b508      	push	{r3, lr}
    value = getvalue();
 8000f9a:	f7ff fb21 	bl	80005e0 <getvalue>
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <inc+0x3c>)
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <inc+0x40>)
 8000fa2:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <inc+0x44>)
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8000fac:	b2c3      	uxtb	r3, r0
 8000fae:	b16b      	cbz	r3, 8000fcc <inc+0x34>
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000fb6:	0601      	lsls	r1, r0, #24
 8000fb8:	bf4c      	ite	mi
 8000fba:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000fbe:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000fc2:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8000fc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000fc8:	f7ff bcaa 	b.w	8000920 <putvalue>
    zerocalc(result);
 8000fcc:	7813      	ldrb	r3, [r2, #0]
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	e7f0      	b.n	8000fb6 <inc+0x1e>
 8000fd4:	200080d8 	.word	0x200080d8
 8000fd8:	200080c4 	.word	0x200080c4
 8000fdc:	200080d4 	.word	0x200080d4

08000fe0 <inx>:

void inx() {
    x++;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <inx+0x2c>)
   
    zerocalc(x);
 8000fe2:	490b      	ldr	r1, [pc, #44]	; (8001010 <inx+0x30>)
    x++;
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000fec:	780b      	ldrb	r3, [r1, #0]
 8000fee:	b132      	cbz	r2, 8000ffe <inx+0x1e>
 8000ff0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000ff4:	0612      	lsls	r2, r2, #24
 8000ff6:	700b      	strb	r3, [r1, #0]
 8000ff8:	d504      	bpl.n	8001004 <inx+0x24>
 8000ffa:	f7ff bb0d 	b.w	8000618 <dex.part.0>
    zerocalc(x);
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	e7f7      	b.n	8000ff4 <inx+0x14>
    signcalc(x);
 8001004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001008:	700b      	strb	r3, [r1, #0]
}
 800100a:	4770      	bx	lr
 800100c:	200080da 	.word	0x200080da
 8001010:	200080c4 	.word	0x200080c4

08001014 <iny>:

void iny() {
    y++;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <iny+0x2c>)
   
    zerocalc(y);
 8001016:	490b      	ldr	r1, [pc, #44]	; (8001044 <iny+0x30>)
    y++;
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	3201      	adds	r2, #1
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8001020:	780b      	ldrb	r3, [r1, #0]
 8001022:	b132      	cbz	r2, 8001032 <iny+0x1e>
 8001024:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001028:	0612      	lsls	r2, r2, #24
 800102a:	700b      	strb	r3, [r1, #0]
 800102c:	d504      	bpl.n	8001038 <iny+0x24>
 800102e:	f7ff baf3 	b.w	8000618 <dex.part.0>
    zerocalc(y);
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	e7f7      	b.n	8001028 <iny+0x14>
    signcalc(y);
 8001038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800103c:	700b      	strb	r3, [r1, #0]
}
 800103e:	4770      	bx	lr
 8001040:	200080db 	.word	0x200080db
 8001044:	200080c4 	.word	0x200080c4

08001048 <jmp>:

void jmp() {
    pc = ea;
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <jmp+0xc>)
 800104a:	881a      	ldrh	r2, [r3, #0]
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <jmp+0x10>)
 800104e:	801a      	strh	r2, [r3, #0]
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200080c6 	.word	0x200080c6
 8001058:	200080d0 	.word	0x200080d0

0800105c <jsr>:

void jsr() {
 800105c:	b510      	push	{r4, lr}
    push16(pc - 1);
 800105e:	4c05      	ldr	r4, [pc, #20]	; (8001074 <jsr+0x18>)
 8001060:	8820      	ldrh	r0, [r4, #0]
 8001062:	3801      	subs	r0, #1
 8001064:	b280      	uxth	r0, r0
 8001066:	f7ff fadf 	bl	8000628 <push16>
    pc = ea;
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <jsr+0x1c>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	8023      	strh	r3, [r4, #0]
}
 8001070:	bd10      	pop	{r4, pc}
 8001072:	bf00      	nop
 8001074:	200080d0 	.word	0x200080d0
 8001078:	200080c6 	.word	0x200080c6

0800107c <lda>:

void lda() {
 800107c:	b508      	push	{r3, lr}
    value = getvalue();
 800107e:	f7ff faaf 	bl	80005e0 <getvalue>
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8001084:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <lda+0x3c>)
    value = getvalue();
 8001086:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001088:	b2c3      	uxtb	r3, r0
 800108a:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <lda+0x40>)
 800108e:	b14b      	cbz	r3, 80010a4 <lda+0x28>
 8001090:	7813      	ldrb	r3, [r2, #0]
 8001092:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001096:	0601      	lsls	r1, r0, #24
 8001098:	7013      	strb	r3, [r2, #0]
 800109a:	d507      	bpl.n	80010ac <lda+0x30>
}
 800109c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010a0:	f7ff baba 	b.w	8000618 <dex.part.0>
    zerocalc(a);
 80010a4:	7813      	ldrb	r3, [r2, #0]
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	e7f4      	b.n	8001096 <lda+0x1a>
    signcalc(a);
 80010ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b0:	7013      	strb	r3, [r2, #0]
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	200080d8 	.word	0x200080d8
 80010b8:	200080bd 	.word	0x200080bd
 80010bc:	200080c4 	.word	0x200080c4

080010c0 <ldx>:

void ldx() {
 80010c0:	b508      	push	{r3, lr}
    value = getvalue();
 80010c2:	f7ff fa8d 	bl	80005e0 <getvalue>
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <ldx+0x3c>)
    value = getvalue();
 80010ca:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 80010cc:	b2c3      	uxtb	r3, r0
 80010ce:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <ldx+0x40>)
 80010d2:	b14b      	cbz	r3, 80010e8 <ldx+0x28>
 80010d4:	7813      	ldrb	r3, [r2, #0]
 80010d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80010da:	0601      	lsls	r1, r0, #24
 80010dc:	7013      	strb	r3, [r2, #0]
 80010de:	d507      	bpl.n	80010f0 <ldx+0x30>
}
 80010e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010e4:	f7ff ba98 	b.w	8000618 <dex.part.0>
    zerocalc(x);
 80010e8:	7813      	ldrb	r3, [r2, #0]
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	e7f4      	b.n	80010da <ldx+0x1a>
    signcalc(x);
 80010f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010f4:	7013      	strb	r3, [r2, #0]
}
 80010f6:	bd08      	pop	{r3, pc}
 80010f8:	200080d8 	.word	0x200080d8
 80010fc:	200080da 	.word	0x200080da
 8001100:	200080c4 	.word	0x200080c4

08001104 <ldy>:

void ldy() {
 8001104:	b508      	push	{r3, lr}
    value = getvalue();
 8001106:	f7ff fa6b 	bl	80005e0 <getvalue>
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <ldy+0x3c>)
    value = getvalue();
 800110e:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 8001110:	b2c3      	uxtb	r3, r0
 8001112:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <ldy+0x40>)
 8001116:	b14b      	cbz	r3, 800112c <ldy+0x28>
 8001118:	7813      	ldrb	r3, [r2, #0]
 800111a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 800111e:	0601      	lsls	r1, r0, #24
 8001120:	7013      	strb	r3, [r2, #0]
 8001122:	d507      	bpl.n	8001134 <ldy+0x30>
}
 8001124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001128:	f7ff ba76 	b.w	8000618 <dex.part.0>
    zerocalc(y);
 800112c:	7813      	ldrb	r3, [r2, #0]
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	e7f4      	b.n	800111e <ldy+0x1a>
    signcalc(y);
 8001134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001138:	7013      	strb	r3, [r2, #0]
}
 800113a:	bd08      	pop	{r3, pc}
 800113c:	200080d8 	.word	0x200080d8
 8001140:	200080db 	.word	0x200080db
 8001144:	200080c4 	.word	0x200080c4

08001148 <lsr>:

void lsr() {
 8001148:	b508      	push	{r3, lr}
    value = getvalue();
 800114a:	f7ff fa49 	bl	80005e0 <getvalue>
 800114e:	4603      	mov	r3, r0
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 8001152:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 8001156:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <lsr+0x50>)
 800115a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800115e:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 8001162:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 8001164:	7813      	ldrb	r3, [r2, #0]
 8001166:	bf14      	ite	ne
 8001168:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 800116c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001170:	b161      	cbz	r1, 800118c <lsr+0x44>
 8001172:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001176:	0601      	lsls	r1, r0, #24
 8001178:	bf4c      	ite	mi
 800117a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800117e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001182:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001188:	f7ff bbca 	b.w	8000920 <putvalue>
    zerocalc(result);
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	e7f1      	b.n	8001176 <lsr+0x2e>
 8001192:	bf00      	nop
 8001194:	200080d8 	.word	0x200080d8
 8001198:	200080d4 	.word	0x200080d4
 800119c:	200080c4 	.word	0x200080c4

080011a0 <ora>:

void nop() {
}

void ora() {
 80011a0:	b508      	push	{r3, lr}
    value = getvalue();
 80011a2:	f7ff fa1d 	bl	80005e0 <getvalue>
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <ora+0x3c>)
    result = (uint16_t)a | value;
 80011a8:	490d      	ldr	r1, [pc, #52]	; (80011e0 <ora+0x40>)
    value = getvalue();
 80011aa:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 80011ac:	780b      	ldrb	r3, [r1, #0]
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <ora+0x44>)
 80011b0:	4318      	orrs	r0, r3
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <ora+0x48>)
 80011b4:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 80011b6:	b2c3      	uxtb	r3, r0
 80011b8:	b163      	cbz	r3, 80011d4 <ora+0x34>
 80011ba:	7813      	ldrb	r3, [r2, #0]
 80011bc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80011c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80011c4:	bf14      	ite	ne
 80011c6:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 80011ca:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 80011ce:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 80011d0:	7008      	strb	r0, [r1, #0]
}
 80011d2:	bd08      	pop	{r3, pc}
    zerocalc(result);
 80011d4:	7813      	ldrb	r3, [r2, #0]
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	e7f1      	b.n	80011c0 <ora+0x20>
 80011dc:	200080d8 	.word	0x200080d8
 80011e0:	200080bd 	.word	0x200080bd
 80011e4:	200080c4 	.word	0x200080c4
 80011e8:	200080d4 	.word	0x200080d4

080011ec <pha>:

void pha() {
    push8(a);
 80011ec:	4b01      	ldr	r3, [pc, #4]	; (80011f4 <pha+0x8>)
 80011ee:	7818      	ldrb	r0, [r3, #0]
 80011f0:	f7ff ba32 	b.w	8000658 <push8>
 80011f4:	200080bd 	.word	0x200080bd

080011f8 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <php+0xc>)
 80011fa:	7818      	ldrb	r0, [r3, #0]
 80011fc:	f040 0010 	orr.w	r0, r0, #16
 8001200:	f7ff ba2a 	b.w	8000658 <push8>
 8001204:	200080c4 	.word	0x200080c4

08001208 <pla>:
}

void pla() {
 8001208:	b508      	push	{r3, lr}
    a = pull8();
 800120a:	f7ff fa4b 	bl	80006a4 <pull8>
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <pla+0x30>)
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <pla+0x34>)
 8001212:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 8001214:	7813      	ldrb	r3, [r2, #0]
 8001216:	b140      	cbz	r0, 800122a <pla+0x22>
 8001218:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 800121c:	0601      	lsls	r1, r0, #24
 800121e:	7013      	strb	r3, [r2, #0]
 8001220:	d506      	bpl.n	8001230 <pla+0x28>
}
 8001222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001226:	f7ff b9f7 	b.w	8000618 <dex.part.0>
    zerocalc(a);
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	e7f5      	b.n	800121c <pla+0x14>
    signcalc(a);
 8001230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001234:	7013      	strb	r3, [r2, #0]
}
 8001236:	bd08      	pop	{r3, pc}
 8001238:	200080bd 	.word	0x200080bd
 800123c:	200080c4 	.word	0x200080c4

08001240 <plp>:

void plp() {
 8001240:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 8001242:	f7ff fa2f 	bl	80006a4 <pull8>
 8001246:	4b02      	ldr	r3, [pc, #8]	; (8001250 <plp+0x10>)
 8001248:	f040 0020 	orr.w	r0, r0, #32
 800124c:	7018      	strb	r0, [r3, #0]
}
 800124e:	bd08      	pop	{r3, pc}
 8001250:	200080c4 	.word	0x200080c4

08001254 <rol>:

void rol() {
 8001254:	b508      	push	{r3, lr}
    value = getvalue();
 8001256:	f7ff f9c3 	bl	80005e0 <getvalue>
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 800125c:	4912      	ldr	r1, [pc, #72]	; (80012a8 <rol+0x54>)
    value = getvalue();
 800125e:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001260:	780b      	ldrb	r3, [r1, #0]
 8001262:	f003 0201 	and.w	r2, r3, #1
 8001266:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <rol+0x58>)
 800126c:	b280      	uxth	r0, r0
   
    carrycalc(result);
 800126e:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001272:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 8001274:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 8001276:	bf14      	ite	ne
 8001278:	f043 0301 	orrne.w	r3, r3, #1
 800127c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001280:	b162      	cbz	r2, 800129c <rol+0x48>
 8001282:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001286:	0602      	lsls	r2, r0, #24
 8001288:	bf4c      	ite	mi
 800128a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800128e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001292:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 8001294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001298:	f7ff bb42 	b.w	8000920 <putvalue>
    zerocalc(result);
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	e7f1      	b.n	8001286 <rol+0x32>
 80012a2:	bf00      	nop
 80012a4:	200080d8 	.word	0x200080d8
 80012a8:	200080c4 	.word	0x200080c4
 80012ac:	200080d4 	.word	0x200080d4

080012b0 <ror>:

void ror() {
 80012b0:	b510      	push	{r4, lr}
    value = getvalue();
 80012b2:	f7ff f995 	bl	80005e0 <getvalue>
 80012b6:	4601      	mov	r1, r0
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80012ba:	4c12      	ldr	r4, [pc, #72]	; (8001304 <ror+0x54>)
    value = getvalue();
 80012bc:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80012be:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 80012c0:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80012c2:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <ror+0x58>)
    if (value & 1) setcarry();
 80012ce:	bf48      	it	mi
 80012d0:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 80012d4:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 80012d6:	b2c2      	uxtb	r2, r0
        else clearcarry();
 80012d8:	bf58      	it	pl
 80012da:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80012de:	b162      	cbz	r2, 80012fa <ror+0x4a>
 80012e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 80012e4:	0602      	lsls	r2, r0, #24
 80012e6:	bf4c      	ite	mi
 80012e8:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80012ec:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 80012f0:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 80012f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 80012f6:	f7ff bb13 	b.w	8000920 <putvalue>
    zerocalc(result);
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	e7f1      	b.n	80012e4 <ror+0x34>
 8001300:	200080d8 	.word	0x200080d8
 8001304:	200080c4 	.word	0x200080c4
 8001308:	200080d4 	.word	0x200080d4

0800130c <rti>:

void rti() {
 800130c:	b508      	push	{r3, lr}
    cpustatus = pull8();
 800130e:	f7ff f9c9 	bl	80006a4 <pull8>
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <rti+0x18>)
 8001314:	7018      	strb	r0, [r3, #0]
    value = pull16();
 8001316:	f7ff f9ab 	bl	8000670 <pull16>
 800131a:	4b03      	ldr	r3, [pc, #12]	; (8001328 <rti+0x1c>)
 800131c:	8018      	strh	r0, [r3, #0]
    pc = value;
 800131e:	4b03      	ldr	r3, [pc, #12]	; (800132c <rti+0x20>)
 8001320:	8018      	strh	r0, [r3, #0]
}
 8001322:	bd08      	pop	{r3, pc}
 8001324:	200080c4 	.word	0x200080c4
 8001328:	200080d8 	.word	0x200080d8
 800132c:	200080d0 	.word	0x200080d0

08001330 <rts>:

void rts() {
 8001330:	b508      	push	{r3, lr}
    value = pull16();
 8001332:	f7ff f99d 	bl	8000670 <pull16>
 8001336:	4b03      	ldr	r3, [pc, #12]	; (8001344 <rts+0x14>)
 8001338:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <rts+0x18>)
 800133c:	3001      	adds	r0, #1
 800133e:	8018      	strh	r0, [r3, #0]
}
 8001340:	bd08      	pop	{r3, pc}
 8001342:	bf00      	nop
 8001344:	200080d8 	.word	0x200080d8
 8001348:	200080d0 	.word	0x200080d0

0800134c <sbc>:

void sbc() {
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 800134e:	f7ff f947 	bl	80005e0 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001352:	4d27      	ldr	r5, [pc, #156]	; (80013f0 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <sbc+0xa8>)
 8001356:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 800135a:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 800135c:	4c26      	ldr	r4, [pc, #152]	; (80013f8 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 800135e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001360:	782b      	ldrb	r3, [r5, #0]
 8001362:	7821      	ldrb	r1, [r4, #0]
 8001364:	f003 0201 	and.w	r2, r3, #1
 8001368:	440a      	add	r2, r1
 800136a:	4e24      	ldr	r6, [pc, #144]	; (80013fc <sbc+0xb0>)
 800136c:	4402      	add	r2, r0
 800136e:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8001370:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001374:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8001376:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8001378:	bf14      	ite	ne
 800137a:	f043 0301 	orrne.w	r3, r3, #1
 800137e:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001382:	b1c6      	cbz	r6, 80013b6 <sbc+0x6a>
 8001384:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8001388:	ea81 0602 	eor.w	r6, r1, r2
 800138c:	ea80 0702 	eor.w	r7, r0, r2
 8001390:	4630      	mov	r0, r6
 8001392:	4038      	ands	r0, r7
 8001394:	0607      	lsls	r7, r0, #24
 8001396:	bf4c      	ite	mi
 8001398:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800139c:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 80013a0:	0616      	lsls	r6, r2, #24
 80013a2:	bf4c      	ite	mi
 80013a4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 80013a8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 80013ac:	0718      	lsls	r0, r3, #28
 80013ae:	d405      	bmi.n	80013bc <sbc+0x70>
 80013b0:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 80013b2:	7022      	strb	r2, [r4, #0]
}
 80013b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	e7e5      	b.n	8001388 <sbc+0x3c>
        a -= 0x66;
 80013bc:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 80013c0:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 80013c2:	f000 000f 	and.w	r0, r0, #15
 80013c6:	2809      	cmp	r0, #9
            a += 0x06;
 80013c8:	bf8a      	itet	hi
 80013ca:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 80013cc:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 80013ce:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 80013d0:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 80013d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 80013d6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80013da:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 80013dc:	4908      	ldr	r1, [pc, #32]	; (8001400 <sbc+0xb4>)
        clearcarry();
 80013de:	702b      	strb	r3, [r5, #0]
            setcarry();
 80013e0:	bf84      	itt	hi
 80013e2:	f043 0301 	orrhi.w	r3, r3, #1
 80013e6:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 80013e8:	680b      	ldr	r3, [r1, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	600b      	str	r3, [r1, #0]
 80013ee:	e7e0      	b.n	80013b2 <sbc+0x66>
 80013f0:	200080c4 	.word	0x200080c4
 80013f4:	200080d8 	.word	0x200080d8
 80013f8:	200080bd 	.word	0x200080bd
 80013fc:	200080d4 	.word	0x200080d4
 8001400:	200080c0 	.word	0x200080c0

08001404 <sec>:

void sec() {
    setcarry();
 8001404:	4a02      	ldr	r2, [pc, #8]	; (8001410 <sec+0xc>)
 8001406:	7813      	ldrb	r3, [r2, #0]
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	7013      	strb	r3, [r2, #0]
}
 800140e:	4770      	bx	lr
 8001410:	200080c4 	.word	0x200080c4

08001414 <sed>:

void sed() {
    setdecimal();
 8001414:	4a02      	ldr	r2, [pc, #8]	; (8001420 <sed+0xc>)
 8001416:	7813      	ldrb	r3, [r2, #0]
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	7013      	strb	r3, [r2, #0]
}
 800141e:	4770      	bx	lr
 8001420:	200080c4 	.word	0x200080c4

08001424 <sei>:

void sei() {
    setinterrupt();
 8001424:	4a02      	ldr	r2, [pc, #8]	; (8001430 <sei+0xc>)
 8001426:	7813      	ldrb	r3, [r2, #0]
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	7013      	strb	r3, [r2, #0]
}
 800142e:	4770      	bx	lr
 8001430:	200080c4 	.word	0x200080c4

08001434 <sta>:

void sta() {
    putvalue(a);
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <sta+0x8>)
 8001436:	7818      	ldrb	r0, [r3, #0]
 8001438:	f7ff ba72 	b.w	8000920 <putvalue>
 800143c:	200080bd 	.word	0x200080bd

08001440 <stx>:
}

void stx() {
    putvalue(x);
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <stx+0x8>)
 8001442:	7818      	ldrb	r0, [r3, #0]
 8001444:	f7ff ba6c 	b.w	8000920 <putvalue>
 8001448:	200080da 	.word	0x200080da

0800144c <sty>:
}

void sty() {
    putvalue(y);
 800144c:	4b01      	ldr	r3, [pc, #4]	; (8001454 <sty+0x8>)
 800144e:	7818      	ldrb	r0, [r3, #0]
 8001450:	f7ff ba66 	b.w	8000920 <putvalue>
 8001454:	200080db 	.word	0x200080db

08001458 <tax>:
}

void tax() {
    x = a;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <tax+0x2c>)
   
    zerocalc(x);
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <tax+0x30>)
    x = a;
 800145c:	7819      	ldrb	r1, [r3, #0]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <tax+0x34>)
 8001460:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 8001462:	7813      	ldrb	r3, [r2, #0]
 8001464:	b131      	cbz	r1, 8001474 <tax+0x1c>
 8001466:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800146a:	0609      	lsls	r1, r1, #24
 800146c:	7013      	strb	r3, [r2, #0]
 800146e:	d504      	bpl.n	800147a <tax+0x22>
 8001470:	f7ff b8d2 	b.w	8000618 <dex.part.0>
    zerocalc(x);
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	e7f7      	b.n	800146a <tax+0x12>
    signcalc(x);
 800147a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800147e:	7013      	strb	r3, [r2, #0]
}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200080bd 	.word	0x200080bd
 8001488:	200080c4 	.word	0x200080c4
 800148c:	200080da 	.word	0x200080da

08001490 <tay>:

void tay() {
    y = a;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <tay+0x2c>)
   
    zerocalc(y);
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <tay+0x30>)
    y = a;
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <tay+0x34>)
 8001498:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 800149a:	7813      	ldrb	r3, [r2, #0]
 800149c:	b131      	cbz	r1, 80014ac <tay+0x1c>
 800149e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80014a2:	0609      	lsls	r1, r1, #24
 80014a4:	7013      	strb	r3, [r2, #0]
 80014a6:	d504      	bpl.n	80014b2 <tay+0x22>
 80014a8:	f7ff b8b6 	b.w	8000618 <dex.part.0>
    zerocalc(y);
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	e7f7      	b.n	80014a2 <tay+0x12>
    signcalc(y);
 80014b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014b6:	7013      	strb	r3, [r2, #0]
}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200080bd 	.word	0x200080bd
 80014c0:	200080c4 	.word	0x200080c4
 80014c4:	200080db 	.word	0x200080db

080014c8 <tsx>:

void tsx() {
    x = sp;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <tsx+0x2c>)
   
    zerocalc(x);
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <tsx+0x30>)
    x = sp;
 80014cc:	7819      	ldrb	r1, [r3, #0]
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <tsx+0x34>)
 80014d0:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80014d2:	7813      	ldrb	r3, [r2, #0]
 80014d4:	b131      	cbz	r1, 80014e4 <tsx+0x1c>
 80014d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80014da:	0609      	lsls	r1, r1, #24
 80014dc:	7013      	strb	r3, [r2, #0]
 80014de:	d504      	bpl.n	80014ea <tsx+0x22>
 80014e0:	f7ff b89a 	b.w	8000618 <dex.part.0>
    zerocalc(x);
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	e7f7      	b.n	80014da <tsx+0x12>
    signcalc(x);
 80014ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ee:	7013      	strb	r3, [r2, #0]
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200080d6 	.word	0x200080d6
 80014f8:	200080c4 	.word	0x200080c4
 80014fc:	200080da 	.word	0x200080da

08001500 <txa>:

void txa() {
    a = x;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <txa+0x2c>)
   
    zerocalc(a);
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <txa+0x30>)
    a = x;
 8001504:	7819      	ldrb	r1, [r3, #0]
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <txa+0x34>)
 8001508:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 800150a:	7813      	ldrb	r3, [r2, #0]
 800150c:	b131      	cbz	r1, 800151c <txa+0x1c>
 800150e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001512:	0609      	lsls	r1, r1, #24
 8001514:	7013      	strb	r3, [r2, #0]
 8001516:	d504      	bpl.n	8001522 <txa+0x22>
 8001518:	f7ff b87e 	b.w	8000618 <dex.part.0>
    zerocalc(a);
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	e7f7      	b.n	8001512 <txa+0x12>
    signcalc(a);
 8001522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001526:	7013      	strb	r3, [r2, #0]
}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200080da 	.word	0x200080da
 8001530:	200080c4 	.word	0x200080c4
 8001534:	200080bd 	.word	0x200080bd

08001538 <txs>:

void txs() {
    sp = x;
 8001538:	4b02      	ldr	r3, [pc, #8]	; (8001544 <txs+0xc>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <txs+0x10>)
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200080da 	.word	0x200080da
 8001548:	200080d6 	.word	0x200080d6

0800154c <tya>:

void tya() {
    a = y;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <tya+0x2c>)
   
    zerocalc(a);
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <tya+0x30>)
    a = y;
 8001550:	7819      	ldrb	r1, [r3, #0]
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <tya+0x34>)
 8001554:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 8001556:	7813      	ldrb	r3, [r2, #0]
 8001558:	b131      	cbz	r1, 8001568 <tya+0x1c>
 800155a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 800155e:	0609      	lsls	r1, r1, #24
 8001560:	7013      	strb	r3, [r2, #0]
 8001562:	d504      	bpl.n	800156e <tya+0x22>
 8001564:	f7ff b858 	b.w	8000618 <dex.part.0>
    zerocalc(a);
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	e7f7      	b.n	800155e <tya+0x12>
    signcalc(a);
 800156e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001572:	7013      	strb	r3, [r2, #0]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200080db 	.word	0x200080db
 800157c:	200080c4 	.word	0x200080c4
 8001580:	200080bd 	.word	0x200080bd

08001584 <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 8001588:	4e01      	ldr	r6, [pc, #4]	; (8001590 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 800158a:	4d02      	ldr	r5, [pc, #8]	; (8001594 <exec6502+0x10>)
  while (tickcount--) {
 800158c:	b924      	cbnz	r4, 8001598 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	200080d0 	.word	0x200080d0
 8001594:	200080d7 	.word	0x200080d7
    opcode = read6502(pc++);
 8001598:	8830      	ldrh	r0, [r6, #0]
 800159a:	1c43      	adds	r3, r0, #1
 800159c:	8033      	strh	r3, [r6, #0]
 800159e:	f7fe ff13 	bl	80003c8 <read6502>
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <exec6502+0x38>)
    opcode = read6502(pc++);
 80015a6:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 80015a8:	7813      	ldrb	r3, [r2, #0]
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	702b      	strb	r3, [r5, #0]
 80015b4:	e004      	b.n	80015c0 <exec6502+0x3c>
 80015b6:	bf00      	nop
 80015b8:	200080ce 	.word	0x200080ce
 80015bc:	200080c4 	.word	0x200080c4
		switch (opcode) {
 80015c0:	28fe      	cmp	r0, #254	; 0xfe
 80015c2:	f200 8103 	bhi.w	80017cc <exec6502+0x248>
 80015c6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80015ca:	00ff      	.short	0x00ff
 80015cc:	01010107 	.word	0x01010107
 80015d0:	01010101 	.word	0x01010101
 80015d4:	0111010c 	.word	0x0111010c
 80015d8:	01160101 	.word	0x01160101
 80015dc:	011e0119 	.word	0x011e0119
 80015e0:	01010101 	.word	0x01010101
 80015e4:	01280123 	.word	0x01280123
 80015e8:	012d0101 	.word	0x012d0101
 80015ec:	01010132 	.word	0x01010132
 80015f0:	01010101 	.word	0x01010101
 80015f4:	013c0137 	.word	0x013c0137
 80015f8:	01410101 	.word	0x01410101
 80015fc:	01010144 	.word	0x01010144
 8001600:	01010101 	.word	0x01010101
 8001604:	014e0149 	.word	0x014e0149
 8001608:	01530101 	.word	0x01530101
 800160c:	01010158 	.word	0x01010158
 8001610:	015d0101 	.word	0x015d0101
 8001614:	01670162 	.word	0x01670162
 8001618:	016c0101 	.word	0x016c0101
 800161c:	0174016f 	.word	0x0174016f
 8001620:	01790101 	.word	0x01790101
 8001624:	0183017e 	.word	0x0183017e
 8001628:	01880101 	.word	0x01880101
 800162c:	0101018d 	.word	0x0101018d
 8001630:	01010101 	.word	0x01010101
 8001634:	01970192 	.word	0x01970192
 8001638:	019c0101 	.word	0x019c0101
 800163c:	0101019f 	.word	0x0101019f
 8001640:	01010101 	.word	0x01010101
 8001644:	01a901a4 	.word	0x01a901a4
 8001648:	01ae0101 	.word	0x01ae0101
 800164c:	010101b1 	.word	0x010101b1
 8001650:	01010101 	.word	0x01010101
 8001654:	01bb01b6 	.word	0x01bb01b6
 8001658:	01c00101 	.word	0x01c00101
 800165c:	01c801c3 	.word	0x01c801c3
 8001660:	01cd0101 	.word	0x01cd0101
 8001664:	01d701d2 	.word	0x01d701d2
 8001668:	01dc0101 	.word	0x01dc0101
 800166c:	010101e1 	.word	0x010101e1
 8001670:	01010101 	.word	0x01010101
 8001674:	01eb01e6 	.word	0x01eb01e6
 8001678:	01f00101 	.word	0x01f00101
 800167c:	010101f3 	.word	0x010101f3
 8001680:	01010101 	.word	0x01010101
 8001684:	01fd01f8 	.word	0x01fd01f8
 8001688:	02020101 	.word	0x02020101
 800168c:	01010205 	.word	0x01010205
 8001690:	01010101 	.word	0x01010101
 8001694:	020f020a 	.word	0x020f020a
 8001698:	02140101 	.word	0x02140101
 800169c:	021c0217 	.word	0x021c0217
 80016a0:	02210101 	.word	0x02210101
 80016a4:	022b0226 	.word	0x022b0226
 80016a8:	02300101 	.word	0x02300101
 80016ac:	01010235 	.word	0x01010235
 80016b0:	01010101 	.word	0x01010101
 80016b4:	023f023a 	.word	0x023f023a
 80016b8:	02440101 	.word	0x02440101
 80016bc:	01010247 	.word	0x01010247
 80016c0:	01010101 	.word	0x01010101
 80016c4:	0251024c 	.word	0x0251024c
 80016c8:	01010101 	.word	0x01010101
 80016cc:	01010256 	.word	0x01010256
 80016d0:	025b0101 	.word	0x025b0101
 80016d4:	02650260 	.word	0x02650260
 80016d8:	026a0101 	.word	0x026a0101
 80016dc:	026d0101 	.word	0x026d0101
 80016e0:	02700101 	.word	0x02700101
 80016e4:	027a0275 	.word	0x027a0275
 80016e8:	027f0101 	.word	0x027f0101
 80016ec:	01010284 	.word	0x01010284
 80016f0:	02890101 	.word	0x02890101
 80016f4:	0293028e 	.word	0x0293028e
 80016f8:	02980101 	.word	0x02980101
 80016fc:	02a3029b 	.word	0x02a3029b
 8001700:	01010101 	.word	0x01010101
 8001704:	010102a6 	.word	0x010102a6
 8001708:	02ab0101 	.word	0x02ab0101
 800170c:	02b502b0 	.word	0x02b502b0
 8001710:	02ba0101 	.word	0x02ba0101
 8001714:	02c402bf 	.word	0x02c402bf
 8001718:	02c90101 	.word	0x02c90101
 800171c:	02d102cc 	.word	0x02d102cc
 8001720:	02d40101 	.word	0x02d40101
 8001724:	02de02d9 	.word	0x02de02d9
 8001728:	02e30101 	.word	0x02e30101
 800172c:	010102e8 	.word	0x010102e8
 8001730:	02ed0101 	.word	0x02ed0101
 8001734:	02f702f2 	.word	0x02f702f2
 8001738:	02fc0101 	.word	0x02fc0101
 800173c:	030402ff 	.word	0x030402ff
 8001740:	03070101 	.word	0x03070101
 8001744:	0311030c 	.word	0x0311030c
 8001748:	03160101 	.word	0x03160101
 800174c:	0101031b 	.word	0x0101031b
 8001750:	03200101 	.word	0x03200101
 8001754:	032a0325 	.word	0x032a0325
 8001758:	032f0101 	.word	0x032f0101
 800175c:	03370332 	.word	0x03370332
 8001760:	033a0101 	.word	0x033a0101
 8001764:	0344033f 	.word	0x0344033f
 8001768:	03490101 	.word	0x03490101
 800176c:	0101034e 	.word	0x0101034e
 8001770:	01010101 	.word	0x01010101
 8001774:	03580353 	.word	0x03580353
 8001778:	035d0101 	.word	0x035d0101
 800177c:	01010360 	.word	0x01010360
 8001780:	01010101 	.word	0x01010101
 8001784:	036a0365 	.word	0x036a0365
 8001788:	036f0101 	.word	0x036f0101
 800178c:	01010374 	.word	0x01010374
 8001790:	03790101 	.word	0x03790101
 8001794:	0383037e 	.word	0x0383037e
 8001798:	03880101 	.word	0x03880101
 800179c:	0101038b 	.word	0x0101038b
 80017a0:	0390038b 	.word	0x0390038b
 80017a4:	039a0395 	.word	0x039a0395
 80017a8:	039f0101 	.word	0x039f0101
 80017ac:	010103a4 	.word	0x010103a4
 80017b0:	01010101 	.word	0x01010101
 80017b4:	03ae03a9 	.word	0x03ae03a9
 80017b8:	03b30101 	.word	0x03b30101
 80017bc:	010103b6 	.word	0x010103b6
 80017c0:	01010101 	.word	0x01010101
 80017c4:	03c003bb 	.word	0x03c003bb
			brk();
 80017c8:	f7ff fa56 	bl	8000c78 <brk>
      instructions++;
 80017cc:	4acf      	ldr	r2, [pc, #828]	; (8001b0c <exec6502+0x588>)
 80017ce:	3c01      	subs	r4, #1
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e6d9      	b.n	800158c <exec6502+0x8>
			indx();
 80017d8:	f7ff f866 	bl	80008a8 <indx>
			ora();
 80017dc:	f7ff fce0 	bl	80011a0 <ora>
			break;
 80017e0:	e7f4      	b.n	80017cc <exec6502+0x248>
			zp();
 80017e2:	f7fe ffa1 	bl	8000728 <zp>
			ora();
 80017e6:	f7ff fcdb 	bl	80011a0 <ora>
			break;
 80017ea:	e7ef      	b.n	80017cc <exec6502+0x248>
			zp();
 80017ec:	f7fe ff9c 	bl	8000728 <zp>
			asl();
 80017f0:	f7ff f926 	bl	8000a40 <asl>
			break;
 80017f4:	e7ea      	b.n	80017cc <exec6502+0x248>
			php();
 80017f6:	f7ff fcff 	bl	80011f8 <php>
			break;
 80017fa:	e7e7      	b.n	80017cc <exec6502+0x248>
			imm();
 80017fc:	f7fe ff88 	bl	8000710 <imm>
			ora();
 8001800:	f7ff fcce 	bl	80011a0 <ora>
			break;
 8001804:	e7e2      	b.n	80017cc <exec6502+0x248>
  useaccum = 1;
 8001806:	2301      	movs	r3, #1
 8001808:	702b      	strb	r3, [r5, #0]
			asl();
 800180a:	f7ff f919 	bl	8000a40 <asl>
			break;
 800180e:	e7dd      	b.n	80017cc <exec6502+0x248>
			abso();
 8001810:	f7fe ffd4 	bl	80007bc <abso>
			ora();
 8001814:	f7ff fcc4 	bl	80011a0 <ora>
			break;
 8001818:	e7d8      	b.n	80017cc <exec6502+0x248>
			abso();
 800181a:	f7fe ffcf 	bl	80007bc <abso>
			asl();
 800181e:	f7ff f90f 	bl	8000a40 <asl>
			break;
 8001822:	e7d3      	b.n	80017cc <exec6502+0x248>
			rel();
 8001824:	f7fe ffb6 	bl	8000794 <rel>
			bpl();
 8001828:	f7ff fa02 	bl	8000c30 <bpl>
			break;
 800182c:	e7ce      	b.n	80017cc <exec6502+0x248>
			indy();
 800182e:	f7ff f859 	bl	80008e4 <indy>
			ora();
 8001832:	f7ff fcb5 	bl	80011a0 <ora>
			break;
 8001836:	e7c9      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001838:	f7fe ff84 	bl	8000744 <zpx>
			ora();
 800183c:	f7ff fcb0 	bl	80011a0 <ora>
			break;
 8001840:	e7c4      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001842:	f7fe ff7f 	bl	8000744 <zpx>
			asl();
 8001846:	f7ff f8fb 	bl	8000a40 <asl>
			break;
 800184a:	e7bf      	b.n	80017cc <exec6502+0x248>
			clc();
 800184c:	f7ff fa7c 	bl	8000d48 <clc>
			break;
 8001850:	e7bc      	b.n	80017cc <exec6502+0x248>
			absy();
 8001852:	f7fe ffe7 	bl	8000824 <absy>
			ora();
 8001856:	f7ff fca3 	bl	80011a0 <ora>
			break;
 800185a:	e7b7      	b.n	80017cc <exec6502+0x248>
			absx();
 800185c:	f7fe ffc6 	bl	80007ec <absx>
			ora();
 8001860:	f7ff fc9e 	bl	80011a0 <ora>
			break;
 8001864:	e7b2      	b.n	80017cc <exec6502+0x248>
			absx();
 8001866:	f7fe ffc1 	bl	80007ec <absx>
			asl();
 800186a:	f7ff f8e9 	bl	8000a40 <asl>
			break;
 800186e:	e7ad      	b.n	80017cc <exec6502+0x248>
			abso();
 8001870:	f7fe ffa4 	bl	80007bc <abso>
			jsr();
 8001874:	f7ff fbf2 	bl	800105c <jsr>
			break;
 8001878:	e7a8      	b.n	80017cc <exec6502+0x248>
			indx();
 800187a:	f7ff f815 	bl	80008a8 <indx>
			op_and();
 800187e:	f7ff f8b7 	bl	80009f0 <op_and>
			break;
 8001882:	e7a3      	b.n	80017cc <exec6502+0x248>
			zp();
 8001884:	f7fe ff50 	bl	8000728 <zp>
			op_bit();
 8001888:	f7ff f96a 	bl	8000b60 <op_bit>
			break;
 800188c:	e79e      	b.n	80017cc <exec6502+0x248>
			zp();
 800188e:	f7fe ff4b 	bl	8000728 <zp>
			op_and();
 8001892:	f7ff f8ad 	bl	80009f0 <op_and>
			break;
 8001896:	e799      	b.n	80017cc <exec6502+0x248>
			zp();
 8001898:	f7fe ff46 	bl	8000728 <zp>
			rol();
 800189c:	f7ff fcda 	bl	8001254 <rol>
			break;
 80018a0:	e794      	b.n	80017cc <exec6502+0x248>
			plp();
 80018a2:	f7ff fccd 	bl	8001240 <plp>
			break;
 80018a6:	e791      	b.n	80017cc <exec6502+0x248>
			imm();
 80018a8:	f7fe ff32 	bl	8000710 <imm>
			op_and();
 80018ac:	f7ff f8a0 	bl	80009f0 <op_and>
			break;
 80018b0:	e78c      	b.n	80017cc <exec6502+0x248>
  useaccum = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	702b      	strb	r3, [r5, #0]
			rol();
 80018b6:	f7ff fccd 	bl	8001254 <rol>
			break;
 80018ba:	e787      	b.n	80017cc <exec6502+0x248>
			abso();
 80018bc:	f7fe ff7e 	bl	80007bc <abso>
			op_bit();
 80018c0:	f7ff f94e 	bl	8000b60 <op_bit>
			break;
 80018c4:	e782      	b.n	80017cc <exec6502+0x248>
			abso();
 80018c6:	f7fe ff79 	bl	80007bc <abso>
			op_and();
 80018ca:	f7ff f891 	bl	80009f0 <op_and>
			break;
 80018ce:	e77d      	b.n	80017cc <exec6502+0x248>
			abso();
 80018d0:	f7fe ff74 	bl	80007bc <abso>
			rol();
 80018d4:	f7ff fcbe 	bl	8001254 <rol>
			break;
 80018d8:	e778      	b.n	80017cc <exec6502+0x248>
			rel();
 80018da:	f7fe ff5b 	bl	8000794 <rel>
			bmi();
 80018de:	f7ff f961 	bl	8000ba4 <bmi>
			break;
 80018e2:	e773      	b.n	80017cc <exec6502+0x248>
			indy();
 80018e4:	f7fe fffe 	bl	80008e4 <indy>
			op_and();
 80018e8:	f7ff f882 	bl	80009f0 <op_and>
			break;
 80018ec:	e76e      	b.n	80017cc <exec6502+0x248>
			zpx();
 80018ee:	f7fe ff29 	bl	8000744 <zpx>
			op_and();
 80018f2:	f7ff f87d 	bl	80009f0 <op_and>
			break;
 80018f6:	e769      	b.n	80017cc <exec6502+0x248>
			zpx();
 80018f8:	f7fe ff24 	bl	8000744 <zpx>
			rol();
 80018fc:	f7ff fcaa 	bl	8001254 <rol>
			break;
 8001900:	e764      	b.n	80017cc <exec6502+0x248>
			sec();
 8001902:	f7ff fd7f 	bl	8001404 <sec>
			break;
 8001906:	e761      	b.n	80017cc <exec6502+0x248>
			absy();
 8001908:	f7fe ff8c 	bl	8000824 <absy>
			op_and();
 800190c:	f7ff f870 	bl	80009f0 <op_and>
			break;
 8001910:	e75c      	b.n	80017cc <exec6502+0x248>
			absx();
 8001912:	f7fe ff6b 	bl	80007ec <absx>
			op_and();
 8001916:	f7ff f86b 	bl	80009f0 <op_and>
			break;
 800191a:	e757      	b.n	80017cc <exec6502+0x248>
			absx();
 800191c:	f7fe ff66 	bl	80007ec <absx>
			rol();
 8001920:	f7ff fc98 	bl	8001254 <rol>
			break;
 8001924:	e752      	b.n	80017cc <exec6502+0x248>
			rti();
 8001926:	f7ff fcf1 	bl	800130c <rti>
			break;
 800192a:	e74f      	b.n	80017cc <exec6502+0x248>
			indx();
 800192c:	f7fe ffbc 	bl	80008a8 <indx>
			eor();
 8001930:	f7ff fb0c 	bl	8000f4c <eor>
			break;
 8001934:	e74a      	b.n	80017cc <exec6502+0x248>
			zp();
 8001936:	f7fe fef7 	bl	8000728 <zp>
			eor();
 800193a:	f7ff fb07 	bl	8000f4c <eor>
			break;
 800193e:	e745      	b.n	80017cc <exec6502+0x248>
			zp();
 8001940:	f7fe fef2 	bl	8000728 <zp>
			lsr();
 8001944:	f7ff fc00 	bl	8001148 <lsr>
			break;
 8001948:	e740      	b.n	80017cc <exec6502+0x248>
			pha();
 800194a:	f7ff fc4f 	bl	80011ec <pha>
			break;
 800194e:	e73d      	b.n	80017cc <exec6502+0x248>
			imm();
 8001950:	f7fe fede 	bl	8000710 <imm>
			eor();
 8001954:	f7ff fafa 	bl	8000f4c <eor>
			break;
 8001958:	e738      	b.n	80017cc <exec6502+0x248>
  useaccum = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	702b      	strb	r3, [r5, #0]
			lsr();
 800195e:	f7ff fbf3 	bl	8001148 <lsr>
			break;
 8001962:	e733      	b.n	80017cc <exec6502+0x248>
			abso();
 8001964:	f7fe ff2a 	bl	80007bc <abso>
			jmp();
 8001968:	f7ff fb6e 	bl	8001048 <jmp>
			break;
 800196c:	e72e      	b.n	80017cc <exec6502+0x248>
			abso();
 800196e:	f7fe ff25 	bl	80007bc <abso>
			eor();
 8001972:	f7ff faeb 	bl	8000f4c <eor>
			break;
 8001976:	e729      	b.n	80017cc <exec6502+0x248>
			abso();
 8001978:	f7fe ff20 	bl	80007bc <abso>
			lsr();
 800197c:	f7ff fbe4 	bl	8001148 <lsr>
			break;
 8001980:	e724      	b.n	80017cc <exec6502+0x248>
			rel();
 8001982:	f7fe ff07 	bl	8000794 <rel>
			bvc();
 8001986:	f7ff f99b 	bl	8000cc0 <bvc>
			break;
 800198a:	e71f      	b.n	80017cc <exec6502+0x248>
			indy();
 800198c:	f7fe ffaa 	bl	80008e4 <indy>
			eor();
 8001990:	f7ff fadc 	bl	8000f4c <eor>
			break;
 8001994:	e71a      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001996:	f7fe fed5 	bl	8000744 <zpx>
			eor();
 800199a:	f7ff fad7 	bl	8000f4c <eor>
			break;
 800199e:	e715      	b.n	80017cc <exec6502+0x248>
			zpx();
 80019a0:	f7fe fed0 	bl	8000744 <zpx>
			lsr();
 80019a4:	f7ff fbd0 	bl	8001148 <lsr>
			break;
 80019a8:	e710      	b.n	80017cc <exec6502+0x248>
			cli();
 80019aa:	f7ff f9dd 	bl	8000d68 <cli>
			break;
 80019ae:	e70d      	b.n	80017cc <exec6502+0x248>
			absy();
 80019b0:	f7fe ff38 	bl	8000824 <absy>
			eor();
 80019b4:	f7ff faca 	bl	8000f4c <eor>
			break;
 80019b8:	e708      	b.n	80017cc <exec6502+0x248>
			absx();
 80019ba:	f7fe ff17 	bl	80007ec <absx>
			eor();
 80019be:	f7ff fac5 	bl	8000f4c <eor>
			break;
 80019c2:	e703      	b.n	80017cc <exec6502+0x248>
			absx();
 80019c4:	f7fe ff12 	bl	80007ec <absx>
			lsr();
 80019c8:	f7ff fbbe 	bl	8001148 <lsr>
			break;
 80019cc:	e6fe      	b.n	80017cc <exec6502+0x248>
			rts();
 80019ce:	f7ff fcaf 	bl	8001330 <rts>
			break;
 80019d2:	e6fb      	b.n	80017cc <exec6502+0x248>
			indx();
 80019d4:	f7fe ff68 	bl	80008a8 <indx>
			adc();
 80019d8:	f7fe ffb4 	bl	8000944 <adc>
			break;
 80019dc:	e6f6      	b.n	80017cc <exec6502+0x248>
			zp();
 80019de:	f7fe fea3 	bl	8000728 <zp>
			adc();
 80019e2:	f7fe ffaf 	bl	8000944 <adc>
			break;
 80019e6:	e6f1      	b.n	80017cc <exec6502+0x248>
			zp();
 80019e8:	f7fe fe9e 	bl	8000728 <zp>
			ror();
 80019ec:	f7ff fc60 	bl	80012b0 <ror>
			break;
 80019f0:	e6ec      	b.n	80017cc <exec6502+0x248>
			pla();
 80019f2:	f7ff fc09 	bl	8001208 <pla>
			break;
 80019f6:	e6e9      	b.n	80017cc <exec6502+0x248>
			imm();
 80019f8:	f7fe fe8a 	bl	8000710 <imm>
			adc();
 80019fc:	f7fe ffa2 	bl	8000944 <adc>
			break;
 8001a00:	e6e4      	b.n	80017cc <exec6502+0x248>
  useaccum = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	702b      	strb	r3, [r5, #0]
			ror();
 8001a06:	f7ff fc53 	bl	80012b0 <ror>
			break;
 8001a0a:	e6df      	b.n	80017cc <exec6502+0x248>
			ind();
 8001a0c:	f7fe ff26 	bl	800085c <ind>
			jmp();
 8001a10:	f7ff fb1a 	bl	8001048 <jmp>
			break;
 8001a14:	e6da      	b.n	80017cc <exec6502+0x248>
			abso();
 8001a16:	f7fe fed1 	bl	80007bc <abso>
			adc();
 8001a1a:	f7fe ff93 	bl	8000944 <adc>
			break;
 8001a1e:	e6d5      	b.n	80017cc <exec6502+0x248>
			abso();
 8001a20:	f7fe fecc 	bl	80007bc <abso>
			ror();
 8001a24:	f7ff fc44 	bl	80012b0 <ror>
			break;
 8001a28:	e6d0      	b.n	80017cc <exec6502+0x248>
			rel();
 8001a2a:	f7fe feb3 	bl	8000794 <rel>
			bvs();
 8001a2e:	f7ff f969 	bl	8000d04 <bvs>
			break;
 8001a32:	e6cb      	b.n	80017cc <exec6502+0x248>
			indy();
 8001a34:	f7fe ff56 	bl	80008e4 <indy>
			adc();
 8001a38:	f7fe ff84 	bl	8000944 <adc>
			break;
 8001a3c:	e6c6      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001a3e:	f7fe fe81 	bl	8000744 <zpx>
			adc();
 8001a42:	f7fe ff7f 	bl	8000944 <adc>
			break;
 8001a46:	e6c1      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001a48:	f7fe fe7c 	bl	8000744 <zpx>
			ror();
 8001a4c:	f7ff fc30 	bl	80012b0 <ror>
			break;
 8001a50:	e6bc      	b.n	80017cc <exec6502+0x248>
			sei();
 8001a52:	f7ff fce7 	bl	8001424 <sei>
			break;
 8001a56:	e6b9      	b.n	80017cc <exec6502+0x248>
			absy();
 8001a58:	f7fe fee4 	bl	8000824 <absy>
			adc();
 8001a5c:	f7fe ff72 	bl	8000944 <adc>
			break;
 8001a60:	e6b4      	b.n	80017cc <exec6502+0x248>
			absx();
 8001a62:	f7fe fec3 	bl	80007ec <absx>
			adc();
 8001a66:	f7fe ff6d 	bl	8000944 <adc>
			break;
 8001a6a:	e6af      	b.n	80017cc <exec6502+0x248>
			absx();
 8001a6c:	f7fe febe 	bl	80007ec <absx>
			ror();
 8001a70:	f7ff fc1e 	bl	80012b0 <ror>
			break;
 8001a74:	e6aa      	b.n	80017cc <exec6502+0x248>
			indx();
 8001a76:	f7fe ff17 	bl	80008a8 <indx>
			sta();
 8001a7a:	f7ff fcdb 	bl	8001434 <sta>
			break;
 8001a7e:	e6a5      	b.n	80017cc <exec6502+0x248>
			zp();
 8001a80:	f7fe fe52 	bl	8000728 <zp>
			sty();
 8001a84:	f7ff fce2 	bl	800144c <sty>
			break;
 8001a88:	e6a0      	b.n	80017cc <exec6502+0x248>
			zp();
 8001a8a:	f7fe fe4d 	bl	8000728 <zp>
			sta();
 8001a8e:	f7ff fcd1 	bl	8001434 <sta>
			break;
 8001a92:	e69b      	b.n	80017cc <exec6502+0x248>
			zp();
 8001a94:	f7fe fe48 	bl	8000728 <zp>
			stx();
 8001a98:	f7ff fcd2 	bl	8001440 <stx>
			break;
 8001a9c:	e696      	b.n	80017cc <exec6502+0x248>
			dey();
 8001a9e:	f7ff fa3b 	bl	8000f18 <dey>
			break;
 8001aa2:	e693      	b.n	80017cc <exec6502+0x248>
			txa();
 8001aa4:	f7ff fd2c 	bl	8001500 <txa>
			break;
 8001aa8:	e690      	b.n	80017cc <exec6502+0x248>
			abso();
 8001aaa:	f7fe fe87 	bl	80007bc <abso>
			sty();
 8001aae:	f7ff fccd 	bl	800144c <sty>
			break;
 8001ab2:	e68b      	b.n	80017cc <exec6502+0x248>
			abso();
 8001ab4:	f7fe fe82 	bl	80007bc <abso>
			sta();
 8001ab8:	f7ff fcbc 	bl	8001434 <sta>
			break;
 8001abc:	e686      	b.n	80017cc <exec6502+0x248>
			abso();
 8001abe:	f7fe fe7d 	bl	80007bc <abso>
			stx();
 8001ac2:	f7ff fcbd 	bl	8001440 <stx>
			break;
 8001ac6:	e681      	b.n	80017cc <exec6502+0x248>
			rel();
 8001ac8:	f7fe fe64 	bl	8000794 <rel>
			bcc();
 8001acc:	f7fe ffe2 	bl	8000a94 <bcc>
			break;
 8001ad0:	e67c      	b.n	80017cc <exec6502+0x248>
			indy();
 8001ad2:	f7fe ff07 	bl	80008e4 <indy>
			sta();
 8001ad6:	f7ff fcad 	bl	8001434 <sta>
			break;
 8001ada:	e677      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001adc:	f7fe fe32 	bl	8000744 <zpx>
			sty();
 8001ae0:	f7ff fcb4 	bl	800144c <sty>
			break;
 8001ae4:	e672      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001ae6:	f7fe fe2d 	bl	8000744 <zpx>
			sta();
 8001aea:	f7ff fca3 	bl	8001434 <sta>
			break;
 8001aee:	e66d      	b.n	80017cc <exec6502+0x248>
			zpy();
 8001af0:	f7fe fe3c 	bl	800076c <zpy>
			stx();
 8001af4:	f7ff fca4 	bl	8001440 <stx>
			break;
 8001af8:	e668      	b.n	80017cc <exec6502+0x248>
			tya();
 8001afa:	f7ff fd27 	bl	800154c <tya>
			break;
 8001afe:	e665      	b.n	80017cc <exec6502+0x248>
			absy();
 8001b00:	f7fe fe90 	bl	8000824 <absy>
			sta();
 8001b04:	f7ff fc96 	bl	8001434 <sta>
			break;
 8001b08:	e660      	b.n	80017cc <exec6502+0x248>
 8001b0a:	bf00      	nop
 8001b0c:	200080c8 	.word	0x200080c8
			txs();
 8001b10:	f7ff fd12 	bl	8001538 <txs>
			break;
 8001b14:	e65a      	b.n	80017cc <exec6502+0x248>
			absx();
 8001b16:	f7fe fe69 	bl	80007ec <absx>
			sta();
 8001b1a:	f7ff fc8b 	bl	8001434 <sta>
			break;
 8001b1e:	e655      	b.n	80017cc <exec6502+0x248>
			imm();
 8001b20:	f7fe fdf6 	bl	8000710 <imm>
			ldy();
 8001b24:	f7ff faee 	bl	8001104 <ldy>
			break;
 8001b28:	e650      	b.n	80017cc <exec6502+0x248>
			indx();
 8001b2a:	f7fe febd 	bl	80008a8 <indx>
			lda();
 8001b2e:	f7ff faa5 	bl	800107c <lda>
			break;
 8001b32:	e64b      	b.n	80017cc <exec6502+0x248>
			imm();
 8001b34:	f7fe fdec 	bl	8000710 <imm>
			ldx();
 8001b38:	f7ff fac2 	bl	80010c0 <ldx>
			break;
 8001b3c:	e646      	b.n	80017cc <exec6502+0x248>
			zp();
 8001b3e:	f7fe fdf3 	bl	8000728 <zp>
			ldy();
 8001b42:	f7ff fadf 	bl	8001104 <ldy>
			break;
 8001b46:	e641      	b.n	80017cc <exec6502+0x248>
			zp();
 8001b48:	f7fe fdee 	bl	8000728 <zp>
			lda();
 8001b4c:	f7ff fa96 	bl	800107c <lda>
			break;
 8001b50:	e63c      	b.n	80017cc <exec6502+0x248>
			zp();
 8001b52:	f7fe fde9 	bl	8000728 <zp>
			ldx();
 8001b56:	f7ff fab3 	bl	80010c0 <ldx>
			break;
 8001b5a:	e637      	b.n	80017cc <exec6502+0x248>
			tay();
 8001b5c:	f7ff fc98 	bl	8001490 <tay>
			break;
 8001b60:	e634      	b.n	80017cc <exec6502+0x248>
			imm();
 8001b62:	f7fe fdd5 	bl	8000710 <imm>
			lda();
 8001b66:	f7ff fa89 	bl	800107c <lda>
			break;
 8001b6a:	e62f      	b.n	80017cc <exec6502+0x248>
			tax();
 8001b6c:	f7ff fc74 	bl	8001458 <tax>
			break;
 8001b70:	e62c      	b.n	80017cc <exec6502+0x248>
			abso();
 8001b72:	f7fe fe23 	bl	80007bc <abso>
			ldy();
 8001b76:	f7ff fac5 	bl	8001104 <ldy>
			break;
 8001b7a:	e627      	b.n	80017cc <exec6502+0x248>
			abso();
 8001b7c:	f7fe fe1e 	bl	80007bc <abso>
			lda();
 8001b80:	f7ff fa7c 	bl	800107c <lda>
			break;
 8001b84:	e622      	b.n	80017cc <exec6502+0x248>
			abso();
 8001b86:	f7fe fe19 	bl	80007bc <abso>
			ldx();
 8001b8a:	f7ff fa99 	bl	80010c0 <ldx>
			break;
 8001b8e:	e61d      	b.n	80017cc <exec6502+0x248>
			rel();
 8001b90:	f7fe fe00 	bl	8000794 <rel>
			bcs();
 8001b94:	f7fe ffa0 	bl	8000ad8 <bcs>
			break;
 8001b98:	e618      	b.n	80017cc <exec6502+0x248>
			indy();
 8001b9a:	f7fe fea3 	bl	80008e4 <indy>
			lda();
 8001b9e:	f7ff fa6d 	bl	800107c <lda>
			break;
 8001ba2:	e613      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001ba4:	f7fe fdce 	bl	8000744 <zpx>
			ldy();
 8001ba8:	f7ff faac 	bl	8001104 <ldy>
			break;
 8001bac:	e60e      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001bae:	f7fe fdc9 	bl	8000744 <zpx>
			lda();
 8001bb2:	f7ff fa63 	bl	800107c <lda>
			break;
 8001bb6:	e609      	b.n	80017cc <exec6502+0x248>
			zpy();
 8001bb8:	f7fe fdd8 	bl	800076c <zpy>
			ldx();
 8001bbc:	f7ff fa80 	bl	80010c0 <ldx>
			break;
 8001bc0:	e604      	b.n	80017cc <exec6502+0x248>
			clv();
 8001bc2:	f7ff f8d9 	bl	8000d78 <clv>
			break;
 8001bc6:	e601      	b.n	80017cc <exec6502+0x248>
			absy();
 8001bc8:	f7fe fe2c 	bl	8000824 <absy>
			lda();
 8001bcc:	f7ff fa56 	bl	800107c <lda>
			break;
 8001bd0:	e5fc      	b.n	80017cc <exec6502+0x248>
			tsx();
 8001bd2:	f7ff fc79 	bl	80014c8 <tsx>
			break;
 8001bd6:	e5f9      	b.n	80017cc <exec6502+0x248>
			absx();
 8001bd8:	f7fe fe08 	bl	80007ec <absx>
			ldy();
 8001bdc:	f7ff fa92 	bl	8001104 <ldy>
			break;
 8001be0:	e5f4      	b.n	80017cc <exec6502+0x248>
			absx();
 8001be2:	f7fe fe03 	bl	80007ec <absx>
			lda();
 8001be6:	f7ff fa49 	bl	800107c <lda>
			break;
 8001bea:	e5ef      	b.n	80017cc <exec6502+0x248>
			absy();
 8001bec:	f7fe fe1a 	bl	8000824 <absy>
			ldx();
 8001bf0:	f7ff fa66 	bl	80010c0 <ldx>
			break;
 8001bf4:	e5ea      	b.n	80017cc <exec6502+0x248>
			imm();
 8001bf6:	f7fe fd8b 	bl	8000710 <imm>
			cpy();
 8001bfa:	f7ff f921 	bl	8000e40 <cpy>
			break;
 8001bfe:	e5e5      	b.n	80017cc <exec6502+0x248>
			indx();
 8001c00:	f7fe fe52 	bl	80008a8 <indx>
			cmp();
 8001c04:	f7ff f8c0 	bl	8000d88 <cmp>
			break;
 8001c08:	e5e0      	b.n	80017cc <exec6502+0x248>
			zp();
 8001c0a:	f7fe fd8d 	bl	8000728 <zp>
			cpy();
 8001c0e:	f7ff f917 	bl	8000e40 <cpy>
			break;
 8001c12:	e5db      	b.n	80017cc <exec6502+0x248>
			zp();
 8001c14:	f7fe fd88 	bl	8000728 <zp>
			cmp();
 8001c18:	f7ff f8b6 	bl	8000d88 <cmp>
			break;
 8001c1c:	e5d6      	b.n	80017cc <exec6502+0x248>
			zp();
 8001c1e:	f7fe fd83 	bl	8000728 <zp>
			dec();
 8001c22:	f7ff f93b 	bl	8000e9c <dec>
			break;
 8001c26:	e5d1      	b.n	80017cc <exec6502+0x248>
			iny();
 8001c28:	f7ff f9f4 	bl	8001014 <iny>
			break;
 8001c2c:	e5ce      	b.n	80017cc <exec6502+0x248>
			imm();
 8001c2e:	f7fe fd6f 	bl	8000710 <imm>
			cmp();
 8001c32:	f7ff f8a9 	bl	8000d88 <cmp>
			break;
 8001c36:	e5c9      	b.n	80017cc <exec6502+0x248>
			dex();
 8001c38:	f7ff f954 	bl	8000ee4 <dex>
			break;
 8001c3c:	e5c6      	b.n	80017cc <exec6502+0x248>
			abso();
 8001c3e:	f7fe fdbd 	bl	80007bc <abso>
			cpy();
 8001c42:	f7ff f8fd 	bl	8000e40 <cpy>
			break;
 8001c46:	e5c1      	b.n	80017cc <exec6502+0x248>
			abso();
 8001c48:	f7fe fdb8 	bl	80007bc <abso>
			cmp();
 8001c4c:	f7ff f89c 	bl	8000d88 <cmp>
			break;
 8001c50:	e5bc      	b.n	80017cc <exec6502+0x248>
			abso();
 8001c52:	f7fe fdb3 	bl	80007bc <abso>
			dec();
 8001c56:	f7ff f921 	bl	8000e9c <dec>
			break;
 8001c5a:	e5b7      	b.n	80017cc <exec6502+0x248>
			rel();
 8001c5c:	f7fe fd9a 	bl	8000794 <rel>
			bne();
 8001c60:	f7fe ffc4 	bl	8000bec <bne>
			break;
 8001c64:	e5b2      	b.n	80017cc <exec6502+0x248>
			indy();
 8001c66:	f7fe fe3d 	bl	80008e4 <indy>
			cmp();
 8001c6a:	f7ff f88d 	bl	8000d88 <cmp>
			break;
 8001c6e:	e5ad      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001c70:	f7fe fd68 	bl	8000744 <zpx>
			cmp();
 8001c74:	f7ff f888 	bl	8000d88 <cmp>
			break;
 8001c78:	e5a8      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001c7a:	f7fe fd63 	bl	8000744 <zpx>
			dec();
 8001c7e:	f7ff f90d 	bl	8000e9c <dec>
			break;
 8001c82:	e5a3      	b.n	80017cc <exec6502+0x248>
			cld();
 8001c84:	f7ff f868 	bl	8000d58 <cld>
			break;
 8001c88:	e5a0      	b.n	80017cc <exec6502+0x248>
			absy();
 8001c8a:	f7fe fdcb 	bl	8000824 <absy>
			cmp();
 8001c8e:	f7ff f87b 	bl	8000d88 <cmp>
			break;
 8001c92:	e59b      	b.n	80017cc <exec6502+0x248>
			absx();
 8001c94:	f7fe fdaa 	bl	80007ec <absx>
			cmp();
 8001c98:	f7ff f876 	bl	8000d88 <cmp>
			break;
 8001c9c:	e596      	b.n	80017cc <exec6502+0x248>
			absx();
 8001c9e:	f7fe fda5 	bl	80007ec <absx>
			dec();
 8001ca2:	f7ff f8fb 	bl	8000e9c <dec>
			break;
 8001ca6:	e591      	b.n	80017cc <exec6502+0x248>
			imm();
 8001ca8:	f7fe fd32 	bl	8000710 <imm>
			cpx();
 8001cac:	f7ff f89a 	bl	8000de4 <cpx>
			break;
 8001cb0:	e58c      	b.n	80017cc <exec6502+0x248>
			indx();
 8001cb2:	f7fe fdf9 	bl	80008a8 <indx>
			sbc();
 8001cb6:	f7ff fb49 	bl	800134c <sbc>
			break;
 8001cba:	e587      	b.n	80017cc <exec6502+0x248>
			zp();
 8001cbc:	f7fe fd34 	bl	8000728 <zp>
			cpx();
 8001cc0:	f7ff f890 	bl	8000de4 <cpx>
			break;
 8001cc4:	e582      	b.n	80017cc <exec6502+0x248>
			zp();
 8001cc6:	f7fe fd2f 	bl	8000728 <zp>
			sbc();
 8001cca:	f7ff fb3f 	bl	800134c <sbc>
			break;
 8001cce:	e57d      	b.n	80017cc <exec6502+0x248>
			zp();
 8001cd0:	f7fe fd2a 	bl	8000728 <zp>
			inc();
 8001cd4:	f7ff f960 	bl	8000f98 <inc>
			break;
 8001cd8:	e578      	b.n	80017cc <exec6502+0x248>
			inx();
 8001cda:	f7ff f981 	bl	8000fe0 <inx>
			break;
 8001cde:	e575      	b.n	80017cc <exec6502+0x248>
			imm();
 8001ce0:	f7fe fd16 	bl	8000710 <imm>
			sbc();
 8001ce4:	f7ff fb32 	bl	800134c <sbc>
			break;
 8001ce8:	e570      	b.n	80017cc <exec6502+0x248>
			abso();
 8001cea:	f7fe fd67 	bl	80007bc <abso>
			cpx();
 8001cee:	f7ff f879 	bl	8000de4 <cpx>
			break;
 8001cf2:	e56b      	b.n	80017cc <exec6502+0x248>
			abso();
 8001cf4:	f7fe fd62 	bl	80007bc <abso>
			sbc();
 8001cf8:	f7ff fb28 	bl	800134c <sbc>
			break;
 8001cfc:	e566      	b.n	80017cc <exec6502+0x248>
			abso();
 8001cfe:	f7fe fd5d 	bl	80007bc <abso>
			inc();
 8001d02:	f7ff f949 	bl	8000f98 <inc>
			break;
 8001d06:	e561      	b.n	80017cc <exec6502+0x248>
			rel();
 8001d08:	f7fe fd44 	bl	8000794 <rel>
			beq();
 8001d0c:	f7fe ff06 	bl	8000b1c <beq>
			break;
 8001d10:	e55c      	b.n	80017cc <exec6502+0x248>
			indy();
 8001d12:	f7fe fde7 	bl	80008e4 <indy>
			sbc();
 8001d16:	f7ff fb19 	bl	800134c <sbc>
			break;
 8001d1a:	e557      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001d1c:	f7fe fd12 	bl	8000744 <zpx>
			sbc();
 8001d20:	f7ff fb14 	bl	800134c <sbc>
			break;
 8001d24:	e552      	b.n	80017cc <exec6502+0x248>
			zpx();
 8001d26:	f7fe fd0d 	bl	8000744 <zpx>
			inc();
 8001d2a:	f7ff f935 	bl	8000f98 <inc>
			break;
 8001d2e:	e54d      	b.n	80017cc <exec6502+0x248>
			sed();
 8001d30:	f7ff fb70 	bl	8001414 <sed>
			break;
 8001d34:	e54a      	b.n	80017cc <exec6502+0x248>
			absy();
 8001d36:	f7fe fd75 	bl	8000824 <absy>
			sbc();
 8001d3a:	f7ff fb07 	bl	800134c <sbc>
			break;
 8001d3e:	e545      	b.n	80017cc <exec6502+0x248>
			absx();
 8001d40:	f7fe fd54 	bl	80007ec <absx>
			sbc();
 8001d44:	f7ff fb02 	bl	800134c <sbc>
			break;
 8001d48:	e540      	b.n	80017cc <exec6502+0x248>
			absx();
 8001d4a:	f7fe fd4f 	bl	80007ec <absx>
			inc();
 8001d4e:	f7ff f923 	bl	8000f98 <inc>
			break;
 8001d52:	e53b      	b.n	80017cc <exec6502+0x248>

08001d54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_MspInit+0x3c>)
{
 8001d56:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	f002 0201 	and.w	r2, r2, #1
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d70:	61da      	str	r2, [r3, #28]
 8001d72:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7e:	6853      	ldr	r3, [r2, #4]
 8001d80:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	b002      	add	sp, #8
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	2210      	movs	r2, #16
 8001da0:	2100      	movs	r1, #0
 8001da2:	a802      	add	r0, sp, #8
 8001da4:	f000 feb8 	bl	8002b18 <memset>
  if(huart->Instance==USART1)
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_UART_MspInit+0x70>)
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d128      	bne.n	8001e02 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001db4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	4815      	ldr	r0, [pc, #84]	; (8001e0c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001dc6:	9200      	str	r2, [sp, #0]
 8001dc8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	f042 0204 	orr.w	r2, r2, #4
 8001dd0:	619a      	str	r2, [r3, #24]
 8001dd2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f000 f927 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f000 f91d 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e02:	b006      	add	sp, #24
 8001e04:	bd10      	pop	{r4, pc}
 8001e06:	bf00      	nop
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40010800 	.word	0x40010800

08001e10 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e10:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e12:	b530      	push	{r4, r5, lr}
 8001e14:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e16:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_SRAM_MspInit+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	b9fa      	cbnz	r2, 8001e5e <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e26:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e28:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e32:	480e      	ldr	r0, [pc, #56]	; (8001e6c <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e40:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e46:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e48:	f000 f8f8 	bl	800203c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e4c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e50:	4807      	ldr	r0, [pc, #28]	; (8001e70 <HAL_SRAM_MspInit+0x60>)
 8001e52:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e58:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5a:	f000 f8ef 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e5e:	b007      	add	sp, #28
 8001e60:	bd30      	pop	{r4, r5, pc}
 8001e62:	bf00      	nop
 8001e64:	200080dc 	.word	0x200080dc
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40011800 	.word	0x40011800
 8001e70:	40011400 	.word	0x40011400

08001e74 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <NMI_Handler>

08001e76 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler>

08001e78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler>

08001e7a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler>

08001e7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler>

08001e7e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:
 8001e80:	4770      	bx	lr

08001e82 <PendSV_Handler>:
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 b85e 	b.w	8001f44 <HAL_IncTick>

08001e88 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e88:	4770      	bx	lr
	...

08001e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e8c:	f7ff fffc 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e92:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e94:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ea8:	4c09      	ldr	r4, [pc, #36]	; (8001ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f000 fe0b 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eba:	f7fe faef 	bl	800049c <main>
  bx lr
 8001ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ec8:	08003d08 	.word	0x08003d08
  ldr r2, =_sbss
 8001ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ed0:	200080e4 	.word	0x200080e4

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>
	...

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_InitTick+0x3c>)
{
 8001edc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ede:	7818      	ldrb	r0, [r3, #0]
 8001ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_InitTick+0x40>)
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ef0:	f000 f890 	bl	8002014 <HAL_SYSTICK_Config>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	b958      	cbnz	r0, 8001f10 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	2d0f      	cmp	r5, #15
 8001efa:	d809      	bhi.n	8001f10 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	4602      	mov	r2, r0
 8001efe:	4629      	mov	r1, r5
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f854 	bl	8001fb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_InitTick+0x44>)
 8001f0c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f10:	2001      	movs	r0, #1
 8001f12:	e7fc      	b.n	8001f0e <HAL_InitTick+0x36>
 8001f14:	20000004 	.word	0x20000004
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000008 	.word	0x20000008

08001f20 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x20>)
{
 8001f22:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f26:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f28:	f043 0310 	orr.w	r3, r3, #16
 8001f2c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2e:	f000 f82d 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	200f      	movs	r0, #15
 8001f34:	f7ff ffd0 	bl	8001ed8 <HAL_InitTick>
  HAL_MspInit();
 8001f38:	f7ff ff0c 	bl	8001d54 <HAL_MspInit>
}
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	bd08      	pop	{r3, pc}
 8001f40:	40022000 	.word	0x40022000

08001f44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_IncTick+0x10>)
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_IncTick+0x14>)
 8001f48:	6811      	ldr	r1, [r2, #0]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	440b      	add	r3, r1
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200080e0 	.word	0x200080e0
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f5c:	4b01      	ldr	r3, [pc, #4]	; (8001f64 <HAL_GetTick+0x8>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200080e0 	.word	0x200080e0

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff fff6 	bl	8001f5c <HAL_GetTick>
 8001f70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001f74:	bf1e      	ittt	ne
 8001f76:	4b04      	ldrne	r3, [pc, #16]	; (8001f88 <HAL_Delay+0x20>)
 8001f78:	781b      	ldrbne	r3, [r3, #0]
 8001f7a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	1b43      	subs	r3, r0, r5
 8001f82:	42a3      	cmp	r3, r4
 8001f84:	d3fa      	bcc.n	8001f7c <HAL_Delay+0x14>
  {
  }
}
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f8e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f9a:	0412      	lsls	r2, r2, #16
 8001f9c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001fa8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb2:	b530      	push	{r4, r5, lr}
 8001fb4:	68dc      	ldr	r4, [r3, #12]
 8001fb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	bf28      	it	cs
 8001fc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fcc:	bf98      	it	ls
 8001fce:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd4:	bf88      	it	hi
 8001fd6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	ea21 0303 	bic.w	r3, r1, r3
 8001fdc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fde:	fa05 f404 	lsl.w	r4, r5, r4
 8001fe2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	bfac      	ite	ge
 8001fee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	4a07      	ldrlt	r2, [pc, #28]	; (8002010 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	bfab      	itete	ge
 8001ffc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800200a:	bd30      	pop	{r4, r5, pc}
 800200c:	e000ed00 	.word	0xe000ed00
 8002010:	e000ed14 	.word	0xe000ed14

08002014 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	3801      	subs	r0, #1
 8002016:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800201a:	d20b      	bcs.n	8002034 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	21f0      	movs	r1, #240	; 0xf0
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002024:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002030:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002032:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002034:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002040:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002042:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002044:	4f6a      	ldr	r7, [pc, #424]	; (80021f0 <HAL_GPIO_Init+0x1b4>)
 8002046:	4b6b      	ldr	r3, [pc, #428]	; (80021f4 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002048:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80021f8 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 800204c:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80021fc <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	680c      	ldr	r4, [r1, #0]
 8002052:	fa34 f506 	lsrs.w	r5, r4, r6
 8002056:	d102      	bne.n	800205e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002058:	b003      	add	sp, #12
 800205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800205e:	f04f 0801 	mov.w	r8, #1
 8002062:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 800206a:	ea38 0404 	bics.w	r4, r8, r4
 800206e:	f040 8081 	bne.w	8002174 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8002072:	684c      	ldr	r4, [r1, #4]
 8002074:	2c03      	cmp	r4, #3
 8002076:	d807      	bhi.n	8002088 <HAL_GPIO_Init+0x4c>
 8002078:	3c01      	subs	r4, #1
 800207a:	2c02      	cmp	r4, #2
 800207c:	f200 808c 	bhi.w	8002198 <HAL_GPIO_Init+0x15c>
 8002080:	e8df f004 	tbb	[pc, r4]
 8002084:	a29d      	.short	0xa29d
 8002086:	a8          	.byte	0xa8
 8002087:	00          	.byte	0x00
 8002088:	2c12      	cmp	r4, #18
 800208a:	f000 80a0 	beq.w	80021ce <HAL_GPIO_Init+0x192>
 800208e:	d873      	bhi.n	8002178 <HAL_GPIO_Init+0x13c>
 8002090:	2c11      	cmp	r4, #17
 8002092:	f000 8096 	beq.w	80021c2 <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002096:	2dff      	cmp	r5, #255	; 0xff
 8002098:	bf98      	it	ls
 800209a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800209c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a0:	bf88      	it	hi
 80020a2:	f100 0a04 	addhi.w	sl, r0, #4
 80020a6:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020aa:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ae:	bf88      	it	hi
 80020b0:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b2:	fa09 fb04 	lsl.w	fp, r9, r4
 80020b6:	ea28 080b 	bic.w	r8, r8, fp
 80020ba:	fa02 f404 	lsl.w	r4, r2, r4
 80020be:	ea48 0404 	orr.w	r4, r8, r4
 80020c2:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80020ca:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80020ce:	d051      	beq.n	8002174 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d0:	69bc      	ldr	r4, [r7, #24]
 80020d2:	f026 0803 	bic.w	r8, r6, #3
 80020d6:	f044 0401 	orr.w	r4, r4, #1
 80020da:	61bc      	str	r4, [r7, #24]
 80020dc:	69bc      	ldr	r4, [r7, #24]
 80020de:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80020e2:	f004 0401 	and.w	r4, r4, #1
 80020e6:	9401      	str	r4, [sp, #4]
 80020e8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ec:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f0:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80020f6:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fa:	fa09 f90b 	lsl.w	r9, r9, fp
 80020fe:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002102:	4c3f      	ldr	r4, [pc, #252]	; (8002200 <HAL_GPIO_Init+0x1c4>)
 8002104:	42a0      	cmp	r0, r4
 8002106:	d069      	beq.n	80021dc <HAL_GPIO_Init+0x1a0>
 8002108:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800210c:	42a0      	cmp	r0, r4
 800210e:	d067      	beq.n	80021e0 <HAL_GPIO_Init+0x1a4>
 8002110:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002114:	42a0      	cmp	r0, r4
 8002116:	d065      	beq.n	80021e4 <HAL_GPIO_Init+0x1a8>
 8002118:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800211c:	42a0      	cmp	r0, r4
 800211e:	d063      	beq.n	80021e8 <HAL_GPIO_Init+0x1ac>
 8002120:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002124:	42a0      	cmp	r0, r4
 8002126:	d061      	beq.n	80021ec <HAL_GPIO_Init+0x1b0>
 8002128:	4560      	cmp	r0, ip
 800212a:	bf0c      	ite	eq
 800212c:	2405      	moveq	r4, #5
 800212e:	2406      	movne	r4, #6
 8002130:	fa04 f40b 	lsl.w	r4, r4, fp
 8002134:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002138:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800213c:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002142:	bf14      	ite	ne
 8002144:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002146:	43ac      	biceq	r4, r5
 8002148:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800214a:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800214c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002150:	bf14      	ite	ne
 8002152:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002154:	43ac      	biceq	r4, r5
 8002156:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002158:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800215e:	bf14      	ite	ne
 8002160:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002162:	43ac      	biceq	r4, r5
 8002164:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002166:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002168:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800216c:	bf14      	ite	ne
 800216e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002170:	43ac      	biceq	r4, r5
 8002172:	601c      	str	r4, [r3, #0]
	position++;
 8002174:	3601      	adds	r6, #1
 8002176:	e76b      	b.n	8002050 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002178:	4574      	cmp	r4, lr
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x15c>
 800217c:	d818      	bhi.n	80021b0 <HAL_GPIO_Init+0x174>
 800217e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002204 <HAL_GPIO_Init+0x1c8>
 8002182:	454c      	cmp	r4, r9
 8002184:	d008      	beq.n	8002198 <HAL_GPIO_Init+0x15c>
 8002186:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800218a:	454c      	cmp	r4, r9
 800218c:	d004      	beq.n	8002198 <HAL_GPIO_Init+0x15c>
 800218e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002192:	454c      	cmp	r4, r9
 8002194:	f47f af7f 	bne.w	8002096 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002198:	688a      	ldr	r2, [r1, #8]
 800219a:	b1ea      	cbz	r2, 80021d8 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800219c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800219e:	bf08      	it	eq
 80021a0:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80021a8:	bf18      	it	ne
 80021aa:	f8c0 8014 	strne.w	r8, [r0, #20]
 80021ae:	e772      	b.n	8002096 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80021b0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8002208 <HAL_GPIO_Init+0x1cc>
 80021b4:	454c      	cmp	r4, r9
 80021b6:	d0ef      	beq.n	8002198 <HAL_GPIO_Init+0x15c>
 80021b8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80021bc:	e7e9      	b.n	8002192 <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021be:	68ca      	ldr	r2, [r1, #12]
          break;
 80021c0:	e769      	b.n	8002096 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c2:	68ca      	ldr	r2, [r1, #12]
 80021c4:	3204      	adds	r2, #4
          break;
 80021c6:	e766      	b.n	8002096 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021c8:	68ca      	ldr	r2, [r1, #12]
 80021ca:	3208      	adds	r2, #8
          break;
 80021cc:	e763      	b.n	8002096 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021ce:	68ca      	ldr	r2, [r1, #12]
 80021d0:	320c      	adds	r2, #12
          break;
 80021d2:	e760      	b.n	8002096 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80021d4:	2200      	movs	r2, #0
 80021d6:	e75e      	b.n	8002096 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021d8:	2204      	movs	r2, #4
 80021da:	e75c      	b.n	8002096 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021dc:	2400      	movs	r4, #0
 80021de:	e7a7      	b.n	8002130 <HAL_GPIO_Init+0xf4>
 80021e0:	2401      	movs	r4, #1
 80021e2:	e7a5      	b.n	8002130 <HAL_GPIO_Init+0xf4>
 80021e4:	2402      	movs	r4, #2
 80021e6:	e7a3      	b.n	8002130 <HAL_GPIO_Init+0xf4>
 80021e8:	2403      	movs	r4, #3
 80021ea:	e7a1      	b.n	8002130 <HAL_GPIO_Init+0xf4>
 80021ec:	2404      	movs	r4, #4
 80021ee:	e79f      	b.n	8002130 <HAL_GPIO_Init+0xf4>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010400 	.word	0x40010400
 80021f8:	40011c00 	.word	0x40011c00
 80021fc:	10220000 	.word	0x10220000
 8002200:	40010800 	.word	0x40010800
 8002204:	10120000 	.word	0x10120000
 8002208:	10310000 	.word	0x10310000

0800220c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220c:	b10a      	cbz	r2, 8002212 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220e:	6101      	str	r1, [r0, #16]
  }
}
 8002210:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002212:	0409      	lsls	r1, r1, #16
 8002214:	e7fb      	b.n	800220e <HAL_GPIO_WritePin+0x2>
	...

08002218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002218:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	4605      	mov	r5, r0
 800221e:	b338      	cbz	r0, 8002270 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002220:	6803      	ldr	r3, [r0, #0]
 8002222:	07db      	lsls	r3, r3, #31
 8002224:	d410      	bmi.n	8002248 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	079f      	lsls	r7, r3, #30
 800222a:	d45e      	bmi.n	80022ea <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	0719      	lsls	r1, r3, #28
 8002230:	f100 8095 	bmi.w	800235e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	682b      	ldr	r3, [r5, #0]
 8002236:	075a      	lsls	r2, r3, #29
 8002238:	f100 80c1 	bmi.w	80023be <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	69e8      	ldr	r0, [r5, #28]
 800223e:	2800      	cmp	r0, #0
 8002240:	f040 812c 	bne.w	800249c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002244:	2000      	movs	r0, #0
 8002246:	e029      	b.n	800229c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4c90      	ldr	r4, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x274>)
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d007      	beq.n	8002264 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b08      	cmp	r3, #8
 800225c:	d10a      	bne.n	8002274 <HAL_RCC_OscConfig+0x5c>
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	03de      	lsls	r6, r3, #15
 8002262:	d507      	bpl.n	8002274 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	039c      	lsls	r4, r3, #14
 8002268:	d5dd      	bpl.n	8002226 <HAL_RCC_OscConfig+0xe>
 800226a:	686b      	ldr	r3, [r5, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1da      	bne.n	8002226 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
 8002272:	e013      	b.n	800229c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	686b      	ldr	r3, [r5, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d112      	bne.n	80022a2 <HAL_RCC_OscConfig+0x8a>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002284:	f7ff fe6a 	bl	8001f5c <HAL_GetTick>
 8002288:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	0398      	lsls	r0, r3, #14
 800228e:	d4ca      	bmi.n	8002226 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fe64 	bl	8001f5c <HAL_GetTick>
 8002294:	1b80      	subs	r0, r0, r6
 8002296:	2864      	cmp	r0, #100	; 0x64
 8002298:	d9f7      	bls.n	800228a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800229a:	2003      	movs	r0, #3
}
 800229c:	b002      	add	sp, #8
 800229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a2:	b99b      	cbnz	r3, 80022cc <HAL_RCC_OscConfig+0xb4>
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022b4:	f7ff fe52 	bl	8001f5c <HAL_GetTick>
 80022b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	0399      	lsls	r1, r3, #14
 80022be:	d5b2      	bpl.n	8002226 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fe4c 	bl	8001f5c <HAL_GetTick>
 80022c4:	1b80      	subs	r0, r0, r6
 80022c6:	2864      	cmp	r0, #100	; 0x64
 80022c8:	d9f7      	bls.n	80022ba <HAL_RCC_OscConfig+0xa2>
 80022ca:	e7e6      	b.n	800229a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	d103      	bne.n	80022dc <HAL_RCC_OscConfig+0xc4>
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6023      	str	r3, [r4, #0]
 80022da:	e7cf      	b.n	800227c <HAL_RCC_OscConfig+0x64>
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e8:	e7cb      	b.n	8002282 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ea:	4c68      	ldr	r4, [pc, #416]	; (800248c <HAL_RCC_OscConfig+0x274>)
 80022ec:	6863      	ldr	r3, [r4, #4]
 80022ee:	f013 0f0c 	tst.w	r3, #12
 80022f2:	d007      	beq.n	8002304 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f4:	6863      	ldr	r3, [r4, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d110      	bne.n	8002320 <HAL_RCC_OscConfig+0x108>
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	03da      	lsls	r2, r3, #15
 8002302:	d40d      	bmi.n	8002320 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	079b      	lsls	r3, r3, #30
 8002308:	d502      	bpl.n	8002310 <HAL_RCC_OscConfig+0xf8>
 800230a:	692b      	ldr	r3, [r5, #16]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1af      	bne.n	8002270 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	696a      	ldr	r2, [r5, #20]
 8002314:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002318:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	e785      	b.n	800222c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002320:	692a      	ldr	r2, [r5, #16]
 8002322:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x278>)
 8002324:	b16a      	cbz	r2, 8002342 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800232a:	f7ff fe17 	bl	8001f5c <HAL_GetTick>
 800232e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	079f      	lsls	r7, r3, #30
 8002334:	d4ec      	bmi.n	8002310 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7ff fe11 	bl	8001f5c <HAL_GetTick>
 800233a:	1b80      	subs	r0, r0, r6
 800233c:	2802      	cmp	r0, #2
 800233e:	d9f7      	bls.n	8002330 <HAL_RCC_OscConfig+0x118>
 8002340:	e7ab      	b.n	800229a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002342:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002344:	f7ff fe0a 	bl	8001f5c <HAL_GetTick>
 8002348:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	0798      	lsls	r0, r3, #30
 800234e:	f57f af6d 	bpl.w	800222c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002352:	f7ff fe03 	bl	8001f5c <HAL_GetTick>
 8002356:	1b80      	subs	r0, r0, r6
 8002358:	2802      	cmp	r0, #2
 800235a:	d9f6      	bls.n	800234a <HAL_RCC_OscConfig+0x132>
 800235c:	e79d      	b.n	800229a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	69aa      	ldr	r2, [r5, #24]
 8002360:	4e4a      	ldr	r6, [pc, #296]	; (800248c <HAL_RCC_OscConfig+0x274>)
 8002362:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCC_OscConfig+0x278>)
 8002364:	b1e2      	cbz	r2, 80023a0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002366:	2201      	movs	r2, #1
 8002368:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800236c:	f7ff fdf6 	bl	8001f5c <HAL_GetTick>
 8002370:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002374:	079b      	lsls	r3, r3, #30
 8002376:	d50d      	bpl.n	8002394 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002378:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <HAL_RCC_OscConfig+0x27c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fbb3 f3f2 	udiv	r3, r3, r2
 8002384:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002386:	bf00      	nop
  }
  while (Delay --);
 8002388:	9b01      	ldr	r3, [sp, #4]
 800238a:	1e5a      	subs	r2, r3, #1
 800238c:	9201      	str	r2, [sp, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f9      	bne.n	8002386 <HAL_RCC_OscConfig+0x16e>
 8002392:	e74f      	b.n	8002234 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fde2 	bl	8001f5c <HAL_GetTick>
 8002398:	1b00      	subs	r0, r0, r4
 800239a:	2802      	cmp	r0, #2
 800239c:	d9e9      	bls.n	8002372 <HAL_RCC_OscConfig+0x15a>
 800239e:	e77c      	b.n	800229a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80023a0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80023a4:	f7ff fdda 	bl	8001f5c <HAL_GetTick>
 80023a8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80023ac:	079f      	lsls	r7, r3, #30
 80023ae:	f57f af41 	bpl.w	8002234 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff fdd3 	bl	8001f5c <HAL_GetTick>
 80023b6:	1b00      	subs	r0, r0, r4
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d9f6      	bls.n	80023aa <HAL_RCC_OscConfig+0x192>
 80023bc:	e76d      	b.n	800229a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4c33      	ldr	r4, [pc, #204]	; (800248c <HAL_RCC_OscConfig+0x274>)
 80023c0:	69e3      	ldr	r3, [r4, #28]
 80023c2:	00d8      	lsls	r0, r3, #3
 80023c4:	d424      	bmi.n	8002410 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80023c6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	69e3      	ldr	r3, [r4, #28]
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	61e3      	str	r3, [r4, #28]
 80023d0:	69e3      	ldr	r3, [r4, #28]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4e2f      	ldr	r6, [pc, #188]	; (8002498 <HAL_RCC_OscConfig+0x280>)
 80023dc:	6833      	ldr	r3, [r6, #0]
 80023de:	05d9      	lsls	r1, r3, #23
 80023e0:	d518      	bpl.n	8002414 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e2:	68eb      	ldr	r3, [r5, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d126      	bne.n	8002436 <HAL_RCC_OscConfig+0x21e>
 80023e8:	6a23      	ldr	r3, [r4, #32]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80023f0:	f7ff fdb4 	bl	8001f5c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	6a23      	ldr	r3, [r4, #32]
 80023fc:	079b      	lsls	r3, r3, #30
 80023fe:	d53f      	bpl.n	8002480 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002400:	2f00      	cmp	r7, #0
 8002402:	f43f af1b 	beq.w	800223c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	69e3      	ldr	r3, [r4, #28]
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	61e3      	str	r3, [r4, #28]
 800240e:	e715      	b.n	800223c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002410:	2700      	movs	r7, #0
 8002412:	e7e2      	b.n	80023da <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002414:	6833      	ldr	r3, [r6, #0]
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800241c:	f7ff fd9e 	bl	8001f5c <HAL_GetTick>
 8002420:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	6833      	ldr	r3, [r6, #0]
 8002424:	05da      	lsls	r2, r3, #23
 8002426:	d4dc      	bmi.n	80023e2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002428:	f7ff fd98 	bl	8001f5c <HAL_GetTick>
 800242c:	eba0 0008 	sub.w	r0, r0, r8
 8002430:	2864      	cmp	r0, #100	; 0x64
 8002432:	d9f6      	bls.n	8002422 <HAL_RCC_OscConfig+0x20a>
 8002434:	e731      	b.n	800229a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002436:	b9ab      	cbnz	r3, 8002464 <HAL_RCC_OscConfig+0x24c>
 8002438:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6223      	str	r3, [r4, #32]
 8002444:	6a23      	ldr	r3, [r4, #32]
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800244c:	f7ff fd86 	bl	8001f5c <HAL_GetTick>
 8002450:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	6a23      	ldr	r3, [r4, #32]
 8002454:	0798      	lsls	r0, r3, #30
 8002456:	d5d3      	bpl.n	8002400 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7ff fd80 	bl	8001f5c <HAL_GetTick>
 800245c:	1b80      	subs	r0, r0, r6
 800245e:	4540      	cmp	r0, r8
 8002460:	d9f7      	bls.n	8002452 <HAL_RCC_OscConfig+0x23a>
 8002462:	e71a      	b.n	800229a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	2b05      	cmp	r3, #5
 8002466:	6a23      	ldr	r3, [r4, #32]
 8002468:	d103      	bne.n	8002472 <HAL_RCC_OscConfig+0x25a>
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6223      	str	r3, [r4, #32]
 8002470:	e7ba      	b.n	80023e8 <HAL_RCC_OscConfig+0x1d0>
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6223      	str	r3, [r4, #32]
 8002478:	6a23      	ldr	r3, [r4, #32]
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	e7b6      	b.n	80023ee <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7ff fd6c 	bl	8001f5c <HAL_GetTick>
 8002484:	1b80      	subs	r0, r0, r6
 8002486:	4540      	cmp	r0, r8
 8002488:	d9b7      	bls.n	80023fa <HAL_RCC_OscConfig+0x1e2>
 800248a:	e706      	b.n	800229a <HAL_RCC_OscConfig+0x82>
 800248c:	40021000 	.word	0x40021000
 8002490:	42420000 	.word	0x42420000
 8002494:	20000000 	.word	0x20000000
 8002498:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	4c2a      	ldr	r4, [pc, #168]	; (8002548 <HAL_RCC_OscConfig+0x330>)
 800249e:	6863      	ldr	r3, [r4, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d03e      	beq.n	8002526 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	2200      	movs	r2, #0
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x334>)
 80024ac:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80024ae:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	d12c      	bne.n	800250c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80024b2:	f7ff fd53 	bl	8001f5c <HAL_GetTick>
 80024b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	0199      	lsls	r1, r3, #6
 80024bc:	d420      	bmi.n	8002500 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024be:	6a2b      	ldr	r3, [r5, #32]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c6:	6862      	ldr	r2, [r4, #4]
 80024c8:	68a9      	ldr	r1, [r5, #8]
 80024ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80024ce:	430a      	orrs	r2, r1
 80024d0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80024d4:	6862      	ldr	r2, [r4, #4]
 80024d6:	430b      	orrs	r3, r1
 80024d8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80024dc:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80024de:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_OscConfig+0x334>)
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80024e6:	f7ff fd39 	bl	8001f5c <HAL_GetTick>
 80024ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	019a      	lsls	r2, r3, #6
 80024f0:	f53f aea8 	bmi.w	8002244 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7ff fd32 	bl	8001f5c <HAL_GetTick>
 80024f8:	1b40      	subs	r0, r0, r5
 80024fa:	2802      	cmp	r0, #2
 80024fc:	d9f6      	bls.n	80024ec <HAL_RCC_OscConfig+0x2d4>
 80024fe:	e6cc      	b.n	800229a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff fd2c 	bl	8001f5c <HAL_GetTick>
 8002504:	1b80      	subs	r0, r0, r6
 8002506:	2802      	cmp	r0, #2
 8002508:	d9d6      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2a0>
 800250a:	e6c6      	b.n	800229a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800250c:	f7ff fd26 	bl	8001f5c <HAL_GetTick>
 8002510:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	019b      	lsls	r3, r3, #6
 8002516:	f57f ae95 	bpl.w	8002244 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7ff fd1f 	bl	8001f5c <HAL_GetTick>
 800251e:	1b40      	subs	r0, r0, r5
 8002520:	2802      	cmp	r0, #2
 8002522:	d9f6      	bls.n	8002512 <HAL_RCC_OscConfig+0x2fa>
 8002524:	e6b9      	b.n	800229a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002526:	2801      	cmp	r0, #1
 8002528:	f43f aeb8 	beq.w	800229c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800252c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	6a2a      	ldr	r2, [r5, #32]
 8002530:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002534:	4291      	cmp	r1, r2
 8002536:	f47f ae9b 	bne.w	8002270 <HAL_RCC_OscConfig+0x58>
 800253a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800253c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	4293      	cmp	r3, r2
 8002542:	f43f ae7f 	beq.w	8002244 <HAL_RCC_OscConfig+0x2c>
 8002546:	e693      	b.n	8002270 <HAL_RCC_OscConfig+0x58>
 8002548:	40021000 	.word	0x40021000
 800254c:	42420000 	.word	0x42420000

08002550 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_RCC_GetSysClockFreq+0x38>)
 8002552:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002554:	f003 010c 	and.w	r1, r3, #12
 8002558:	2908      	cmp	r1, #8
 800255a:	d112      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <HAL_RCC_GetSysClockFreq+0x3c>)
 800255e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002562:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002564:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002566:	d509      	bpl.n	800257c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002568:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002570:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_RCC_GetSysClockFreq+0x44>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetSysClockFreq+0x48>)
 800257e:	4358      	muls	r0, r3
 8002580:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002582:	4803      	ldr	r0, [pc, #12]	; (8002590 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	08003cee 	.word	0x08003cee
 8002590:	007a1200 	.word	0x007a1200
 8002594:	08003cfe 	.word	0x08003cfe
 8002598:	003d0900 	.word	0x003d0900

0800259c <HAL_RCC_ClockConfig>:
{
 800259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80025a2:	4604      	mov	r4, r0
 80025a4:	b910      	cbnz	r0, 80025ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
}
 80025a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4a44      	ldr	r2, [pc, #272]	; (80026c0 <HAL_RCC_ClockConfig+0x124>)
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	428b      	cmp	r3, r1
 80025b6:	d328      	bcc.n	800260a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	6821      	ldr	r1, [r4, #0]
 80025ba:	078e      	lsls	r6, r1, #30
 80025bc:	d430      	bmi.n	8002620 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	07ca      	lsls	r2, r1, #31
 80025c0:	d443      	bmi.n	800264a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c2:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <HAL_RCC_ClockConfig+0x124>)
 80025c4:	6813      	ldr	r3, [r2, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	42ab      	cmp	r3, r5
 80025cc:	d865      	bhi.n	800269a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	4d3c      	ldr	r5, [pc, #240]	; (80026c4 <HAL_RCC_ClockConfig+0x128>)
 80025d2:	f012 0f04 	tst.w	r2, #4
 80025d6:	d16c      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	0713      	lsls	r3, r2, #28
 80025da:	d506      	bpl.n	80025ea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025dc:	686b      	ldr	r3, [r5, #4]
 80025de:	6922      	ldr	r2, [r4, #16]
 80025e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80025e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025e8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f7ff ffb1 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80025ee:	686b      	ldr	r3, [r5, #4]
 80025f0:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <HAL_RCC_ClockConfig+0x12c>)
 80025f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	40d8      	lsrs	r0, r3
 80025fa:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_RCC_ClockConfig+0x130>)
 80025fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025fe:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_RCC_ClockConfig+0x134>)
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	f7ff fc69 	bl	8001ed8 <HAL_InitTick>
  return HAL_OK;
 8002606:	2000      	movs	r0, #0
 8002608:	e7ce      	b.n	80025a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	6813      	ldr	r3, [r2, #0]
 800260c:	f023 0307 	bic.w	r3, r3, #7
 8002610:	430b      	orrs	r3, r1
 8002612:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002614:	6813      	ldr	r3, [r2, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	428b      	cmp	r3, r1
 800261c:	d1c3      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xa>
 800261e:	e7cb      	b.n	80025b8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_ClockConfig+0x128>)
 8002622:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002626:	bf1e      	ittt	ne
 8002628:	685a      	ldrne	r2, [r3, #4]
 800262a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800262e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002632:	bf42      	ittt	mi
 8002634:	685a      	ldrmi	r2, [r3, #4]
 8002636:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800263a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68a0      	ldr	r0, [r4, #8]
 8002640:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002644:	4302      	orrs	r2, r0
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	e7b9      	b.n	80025be <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	6862      	ldr	r2, [r4, #4]
 800264c:	4e1d      	ldr	r6, [pc, #116]	; (80026c4 <HAL_RCC_ClockConfig+0x128>)
 800264e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002650:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	d11a      	bne.n	800268a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002654:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	d0a5      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002660:	f023 0303 	bic.w	r3, r3, #3
 8002664:	4313      	orrs	r3, r2
 8002666:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002668:	f7ff fc78 	bl	8001f5c <HAL_GetTick>
 800266c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	6873      	ldr	r3, [r6, #4]
 8002670:	6862      	ldr	r2, [r4, #4]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800267a:	d0a2      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7ff fc6e 	bl	8001f5c <HAL_GetTick>
 8002680:	1bc0      	subs	r0, r0, r7
 8002682:	4540      	cmp	r0, r8
 8002684:	d9f3      	bls.n	800266e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002686:	2003      	movs	r0, #3
 8002688:	e78e      	b.n	80025a8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	2a02      	cmp	r2, #2
 800268c:	d102      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002692:	e7e1      	b.n	8002658 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	f013 0f02 	tst.w	r3, #2
 8002698:	e7de      	b.n	8002658 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	f023 0307 	bic.w	r3, r3, #7
 80026a0:	432b      	orrs	r3, r5
 80026a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	42ab      	cmp	r3, r5
 80026ac:	f47f af7b 	bne.w	80025a6 <HAL_RCC_ClockConfig+0xa>
 80026b0:	e78d      	b.n	80025ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b2:	686b      	ldr	r3, [r5, #4]
 80026b4:	68e1      	ldr	r1, [r4, #12]
 80026b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026ba:	430b      	orrs	r3, r1
 80026bc:	606b      	str	r3, [r5, #4]
 80026be:	e78b      	b.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
 80026c0:	40022000 	.word	0x40022000
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08003cd6 	.word	0x08003cd6
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000008 	.word	0x20000008

080026d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026e2:	6810      	ldr	r0, [r2, #0]
}
 80026e4:	40d8      	lsrs	r0, r3
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08003ce6 	.word	0x08003ce6
 80026f0:	20000000 	.word	0x20000000

080026f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <HAL_RCC_GetPCLK2Freq+0x18>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002702:	6810      	ldr	r0, [r2, #0]
}
 8002704:	40d8      	lsrs	r0, r3
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	08003ce6 	.word	0x08003ce6
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	460e      	mov	r6, r1
 8002718:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800271a:	4604      	mov	r4, r0
 800271c:	b348      	cbz	r0, 8002772 <HAL_SRAM_Init+0x5e>
 800271e:	6983      	ldr	r3, [r0, #24]
 8002720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002724:	d025      	beq.n	8002772 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002726:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800272a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800272e:	b91b      	cbnz	r3, 8002738 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002730:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002734:	f7ff fb6c 	bl	8001e10 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002738:	f104 0108 	add.w	r1, r4, #8
 800273c:	6820      	ldr	r0, [r4, #0]
 800273e:	f000 f959 	bl	80029f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002742:	4631      	mov	r1, r6
 8002744:	68a2      	ldr	r2, [r4, #8]
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	f000 f986 	bl	8002a58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800274c:	4629      	mov	r1, r5
 800274e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002750:	68a2      	ldr	r2, [r4, #8]
 8002752:	6860      	ldr	r0, [r4, #4]
 8002754:	f000 f99e 	bl	8002a94 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 800275c:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800275e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 800276a:	2301      	movs	r3, #1
 800276c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002770:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002772:	2001      	movs	r0, #1
 8002774:	e7fc      	b.n	8002770 <HAL_SRAM_Init+0x5c>
	...

08002778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002778:	b510      	push	{r4, lr}
 800277a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	68c1      	ldr	r1, [r0, #12]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002786:	430a      	orrs	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800278a:	6882      	ldr	r2, [r0, #8]
 800278c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800278e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002790:	4302      	orrs	r2, r0
 8002792:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002794:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002798:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800279c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800279e:	430a      	orrs	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	69a1      	ldr	r1, [r4, #24]
 80027a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027aa:	430a      	orrs	r2, r1
 80027ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <UART_SetConfig+0x70>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d115      	bne.n	80027e0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027b4:	f7ff ff9e 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b8:	2319      	movs	r3, #25
 80027ba:	4343      	muls	r3, r0
 80027bc:	6862      	ldr	r2, [r4, #4]
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80027c6:	2264      	movs	r2, #100	; 0x64
 80027c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80027cc:	fb02 3311 	mls	r3, r2, r1, r3
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	3332      	adds	r3, #50	; 0x32
 80027d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027d8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80027dc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80027de:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80027e0:	f7ff ff78 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 80027e4:	e7e8      	b.n	80027b8 <UART_SetConfig+0x40>
 80027e6:	bf00      	nop
 80027e8:	40013800 	.word	0x40013800

080027ec <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	4604      	mov	r4, r0
 80027f0:	460e      	mov	r6, r1
 80027f2:	4617      	mov	r7, r2
 80027f4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	ea36 0303 	bics.w	r3, r6, r3
 80027fe:	d101      	bne.n	8002804 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002800:	2000      	movs	r0, #0
 8002802:	e028      	b.n	8002856 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002804:	1c6b      	adds	r3, r5, #1
 8002806:	d0f7      	beq.n	80027f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002808:	b125      	cbz	r5, 8002814 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800280a:	f7ff fba7 	bl	8001f5c <HAL_GetTick>
 800280e:	1bc0      	subs	r0, r0, r7
 8002810:	4285      	cmp	r5, r0
 8002812:	d2f0      	bcs.n	80027f6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002814:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002816:	f102 030c 	add.w	r3, r2, #12
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	320c      	adds	r2, #12
 8002824:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002828:	6821      	ldr	r1, [r4, #0]
 800282a:	2800      	cmp	r0, #0
 800282c:	d1f2      	bne.n	8002814 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	f101 0314 	add.w	r3, r1, #20
 8002832:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	f101 0014 	add.w	r0, r1, #20
 800283e:	e840 3200 	strex	r2, r3, [r0]
 8002842:	2a00      	cmp	r2, #0
 8002844:	d1f3      	bne.n	800282e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8002846:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002848:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800284a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 800284e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8002852:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8002856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002858 <HAL_UART_Init>:
{
 8002858:	b510      	push	{r4, lr}
  if (huart == NULL)
 800285a:	4604      	mov	r4, r0
 800285c:	b348      	cbz	r0, 80028b2 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002862:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002866:	b91b      	cbnz	r3, 8002870 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002868:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800286c:	f7ff fa94 	bl	8001d98 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002872:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002878:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800287a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800287c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002880:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002882:	f7ff ff79 	bl	8002778 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002886:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002898:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028ae:	6360      	str	r0, [r4, #52]	; 0x34
}
 80028b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028b2:	2001      	movs	r0, #1
 80028b4:	e7fc      	b.n	80028b0 <HAL_UART_Init+0x58>

080028b6 <HAL_UART_Transmit>:
{
 80028b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028ba:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80028bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80028c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80028c2:	2b20      	cmp	r3, #32
{
 80028c4:	460e      	mov	r6, r1
 80028c6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80028c8:	d13c      	bne.n	8002944 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80028ca:	2900      	cmp	r1, #0
 80028cc:	d03c      	beq.n	8002948 <HAL_UART_Transmit+0x92>
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	d03a      	beq.n	8002948 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	2500      	movs	r5, #0
 80028d6:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80028dc:	f7ff fb3e 	bl	8001f5c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80028e2:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80028e8:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ea:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	d103      	bne.n	80028f6 <HAL_UART_Transmit+0x40>
 80028ee:	6923      	ldr	r3, [r4, #16]
 80028f0:	b90b      	cbnz	r3, 80028f6 <HAL_UART_Transmit+0x40>
 80028f2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80028f4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80028f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b953      	cbnz	r3, 8002912 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fc:	464b      	mov	r3, r9
 80028fe:	4642      	mov	r2, r8
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff ff72 	bl	80027ec <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002908:	b950      	cbnz	r0, 8002920 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 800290a:	2320      	movs	r3, #32
 800290c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8002910:	e007      	b.n	8002922 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002912:	464b      	mov	r3, r9
 8002914:	4642      	mov	r2, r8
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff ff67 	bl	80027ec <UART_WaitOnFlagUntilTimeout.constprop.0>
 800291e:	b110      	cbz	r0, 8002926 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002920:	2003      	movs	r0, #3
}
 8002922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002926:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002928:	b94e      	cbnz	r6, 800293e <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002932:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002934:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002936:	3901      	subs	r1, #1
 8002938:	b289      	uxth	r1, r1
 800293a:	84e1      	strh	r1, [r4, #38]	; 0x26
 800293c:	e7db      	b.n	80028f6 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800293e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002942:	e7f6      	b.n	8002932 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8002944:	2002      	movs	r0, #2
 8002946:	e7ec      	b.n	8002922 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8002948:	2001      	movs	r0, #1
 800294a:	e7ea      	b.n	8002922 <HAL_UART_Transmit+0x6c>

0800294c <HAL_UART_Receive>:
{
 800294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002950:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002952:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8002956:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002958:	2b20      	cmp	r3, #32
{
 800295a:	460e      	mov	r6, r1
 800295c:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800295e:	d143      	bne.n	80029e8 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002960:	2900      	cmp	r1, #0
 8002962:	d043      	beq.n	80029ec <HAL_UART_Receive+0xa0>
 8002964:	2a00      	cmp	r2, #0
 8002966:	d041      	beq.n	80029ec <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002968:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296a:	2500      	movs	r5, #0
 800296c:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800296e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002972:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8002974:	f7ff faf2 	bl	8001f5c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002978:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800297a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002980:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002984:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	d103      	bne.n	8002992 <HAL_UART_Receive+0x46>
 800298a:	6923      	ldr	r3, [r4, #16]
 800298c:	b90b      	cbnz	r3, 8002992 <HAL_UART_Receive+0x46>
 800298e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002990:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8002992:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002994:	b280      	uxth	r0, r0
 8002996:	b920      	cbnz	r0, 80029a2 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002998:	2320      	movs	r3, #32
 800299a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800299e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	463b      	mov	r3, r7
 80029a4:	4642      	mov	r2, r8
 80029a6:	2120      	movs	r1, #32
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff ff1f 	bl	80027ec <UART_WaitOnFlagUntilTimeout.constprop.0>
 80029ae:	b9f8      	cbnz	r0, 80029f0 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029b0:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80029b2:	b94e      	cbnz	r6, 80029c8 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80029be:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80029c6:	e7e4      	b.n	8002992 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029c8:	68a2      	ldr	r2, [r4, #8]
 80029ca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80029ce:	d002      	beq.n	80029d6 <HAL_UART_Receive+0x8a>
 80029d0:	b932      	cbnz	r2, 80029e0 <HAL_UART_Receive+0x94>
 80029d2:	6922      	ldr	r2, [r4, #16]
 80029d4:	b922      	cbnz	r2, 80029e0 <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80029de:	e7ee      	b.n	80029be <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80029e6:	e7f8      	b.n	80029da <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 80029e8:	2002      	movs	r0, #2
 80029ea:	e7d8      	b.n	800299e <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
 80029ee:	e7d6      	b.n	800299e <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 80029f0:	2003      	movs	r0, #3
 80029f2:	e7d4      	b.n	800299e <HAL_UART_Receive+0x52>

080029f4 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80029f4:	680a      	ldr	r2, [r1, #0]
{
 80029f6:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80029f8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80029fc:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002a06:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002a08:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	bf0c      	ite	eq
 8002a10:	2440      	moveq	r4, #64	; 0x40
 8002a12:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002a14:	4333      	orrs	r3, r6
 8002a16:	68ce      	ldr	r6, [r1, #12]
 8002a18:	4333      	orrs	r3, r6
 8002a1a:	690e      	ldr	r6, [r1, #16]
 8002a1c:	4333      	orrs	r3, r6
 8002a1e:	694e      	ldr	r6, [r1, #20]
 8002a20:	4333      	orrs	r3, r6
 8002a22:	69ce      	ldr	r6, [r1, #28]
 8002a24:	4333      	orrs	r3, r6
 8002a26:	6a0e      	ldr	r6, [r1, #32]
 8002a28:	4333      	orrs	r3, r6
 8002a2a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8002a2c:	4333      	orrs	r3, r6
 8002a2e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8002a30:	4333      	orrs	r3, r6
 8002a32:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8002a34:	4333      	orrs	r3, r6
 8002a36:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8002a38:	4333      	orrs	r3, r6
 8002a3a:	698e      	ldr	r6, [r1, #24]
 8002a3c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002a3e:	4333      	orrs	r3, r6
 8002a40:	430b      	orrs	r3, r1
 8002a42:	4904      	ldr	r1, [pc, #16]	; (8002a54 <FSMC_NORSRAM_Init+0x60>)
 8002a44:	4029      	ands	r1, r5
 8002a46:	430b      	orrs	r3, r1
 8002a48:	4323      	orrs	r3, r4
 8002a4a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8002a4e:	2000      	movs	r0, #0
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	bf00      	nop
 8002a54:	fff00080 	.word	0xfff00080

08002a58 <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002a58:	680b      	ldr	r3, [r1, #0]
{
 8002a5a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002a5c:	698c      	ldr	r4, [r1, #24]
 8002a5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002a62:	4323      	orrs	r3, r4
 8002a64:	684c      	ldr	r4, [r1, #4]
 8002a66:	6850      	ldr	r0, [r2, #4]
 8002a68:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002a6c:	688c      	ldr	r4, [r1, #8]
 8002a6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002a72:	68cc      	ldr	r4, [r1, #12]
 8002a74:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002a78:	690c      	ldr	r4, [r1, #16]
 8002a7a:	6949      	ldr	r1, [r1, #20]
 8002a7c:	3c01      	subs	r4, #1
 8002a7e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002a82:	3902      	subs	r1, #2
 8002a84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002a88:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8002a8c:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8002a8e:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002a90:	6053      	str	r3, [r2, #4]
}
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8002a98:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002a9a:	d114      	bne.n	8002ac6 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002a9c:	698d      	ldr	r5, [r1, #24]
 8002a9e:	680b      	ldr	r3, [r1, #0]
 8002aa0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002aa4:	432b      	orrs	r3, r5
 8002aa6:	684d      	ldr	r5, [r1, #4]
 8002aa8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002aac:	688d      	ldr	r5, [r1, #8]
 8002aae:	68c9      	ldr	r1, [r1, #12]
 8002ab0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8002aba:	4021      	ands	r1, r4
 8002abc:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002abe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002ac6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002aca:	e7f8      	b.n	8002abe <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8002acc:	cff00000 	.word	0xcff00000

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	4d0c      	ldr	r5, [pc, #48]	; (8002b08 <__libc_init_array+0x38>)
 8002ad6:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	f000 f822 	bl	8002b28 <_init>
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	4d0a      	ldr	r5, [pc, #40]	; (8002b10 <__libc_init_array+0x40>)
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <__libc_init_array+0x44>)
 8002aea:	1b64      	subs	r4, r4, r5
 8002aec:	10a4      	asrs	r4, r4, #2
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08003d00 	.word	0x08003d00
 8002b0c:	08003d00 	.word	0x08003d00
 8002b10:	08003d00 	.word	0x08003d00
 8002b14:	08003d04 	.word	0x08003d04

08002b18 <memset>:
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4402      	add	r2, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	f803 1b01 	strb.w	r1, [r3], #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <_init>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr

08002b34 <_fini>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr
