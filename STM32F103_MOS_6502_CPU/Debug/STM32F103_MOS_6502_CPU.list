
STM32F103_MOS_6502_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000126c  08003260  08003260  00013260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044cc  080044cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080044cc  080044cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044cc  080044cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080a0  20000070  08004544  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008110  08004544  00028110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d437  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aaa  00000000  00000000  0002d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005a36  00000000  00000000  0002ef7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  000349b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a2d  00000000  00000000  00035bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6d2  00000000  00000000  0004e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008feb9  00000000  00000000  00059cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e9b90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018a4  00000000  00000000  000e9be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003248 	.word	0x08003248

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003248 	.word	0x08003248

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <writelineTerminal>:
}

/**
 * Write string with line ending to UART & LCD (STM32)
 */
void writelineTerminal(char *buffer) {
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000238:	f7ff fff4 	bl	8000224 <strlen>
 800023c:	4d08      	ldr	r5, [pc, #32]	; (8000260 <writelineTerminal+0x2c>)
 800023e:	4621      	mov	r1, r4
 8000240:	b282      	uxth	r2, r0
 8000242:	f04f 33ff 	mov.w	r3, #4294967295
 8000246:	4628      	mov	r0, r5
 8000248:	f002 fab3 	bl	80027b2 <HAL_UART_Transmit>
 800024c:	4628      	mov	r0, r5
}
 800024e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2202      	movs	r2, #2
 8000258:	4902      	ldr	r1, [pc, #8]	; (8000264 <writelineTerminal+0x30>)
 800025a:	f002 baaa 	b.w	80027b2 <HAL_UART_Transmit>
 800025e:	bf00      	nop
 8000260:	2000808c 	.word	0x2000808c
 8000264:	08003260 	.word	0x08003260

08000268 <writeTerminal>:

/**
 * Write string to UART & LCD without line ending (STM32)
 */
void writeTerminal(char *buffer) {
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800026c:	f7ff ffda 	bl	8000224 <strlen>
 8000270:	4621      	mov	r1, r4
}
 8000272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000276:	b282      	uxth	r2, r0
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <writeTerminal+0x1c>)
 800027e:	f002 ba98 	b.w	80027b2 <HAL_UART_Transmit>
 8000282:	bf00      	nop
 8000284:	2000808c 	.word	0x2000808c

08000288 <handleOutput>:
}

/**
 * Write character to UART & LCD (MOS 6502)
 */
void handleOutput(uint8_t value) {
 8000288:	b507      	push	{r0, r1, r2, lr}
  if (value == 13) {
 800028a:	280d      	cmp	r0, #13
void handleOutput(uint8_t value) {
 800028c:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	bf0b      	itete	eq
 8000296:	2202      	moveq	r2, #2
  }
  else {
    HAL_UART_Transmit(&huart1, (uint8_t *)&value, 1, HAL_MAX_DELAY);
 8000298:	2201      	movne	r2, #1
    HAL_UART_Transmit(&huart1, (uint8_t *)UART_LINE_ENDING, strlen(UART_LINE_ENDING), HAL_MAX_DELAY);
 800029a:	4904      	ldreq	r1, [pc, #16]	; (80002ac <handleOutput+0x24>)
    HAL_UART_Transmit(&huart1, (uint8_t *)&value, 1, HAL_MAX_DELAY);
 800029c:	f10d 0107 	addne.w	r1, sp, #7
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <handleOutput+0x28>)
 80002a2:	f002 fa86 	bl	80027b2 <HAL_UART_Transmit>
  }
}
 80002a6:	b003      	add	sp, #12
 80002a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ac:	08003260 	.word	0x08003260
 80002b0:	2000808c 	.word	0x2000808c

080002b4 <write6502>:
  if (address < RAM_SIZE) {
 80002b4:	0403      	lsls	r3, r0, #16
 80002b6:	d402      	bmi.n	80002be <write6502+0xa>
    RAM[address] = value;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <write6502+0x20>)
 80002ba:	5419      	strb	r1, [r3, r0]
  if (address == PIA_DISPLAY_REG) {
 80002bc:	4770      	bx	lr
 80002be:	f24d 0312 	movw	r3, #53266	; 0xd012
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d105      	bne.n	80002d2 <write6502+0x1e>
    pia.display_register = value;
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <write6502+0x24>)
    handleOutput(value);
 80002c8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    pia.display_register = value;
 80002cc:	7099      	strb	r1, [r3, #2]
    handleOutput(value);
 80002ce:	f7ff bfdb 	b.w	8000288 <handleOutput>
}
 80002d2:	4770      	bx	lr
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	200080d5 	.word	0x200080d5

080002dc <initApple1>:

/**
 * Initialize Apple I
 */
void initApple1(void) {
 80002dc:	b538      	push	{r3, r4, r5, lr}
  // Wait for space key to be pressed in UART
  do {
    HAL_Delay(1000);
    writelineTerminal("Press <space> to boot Apple I");
 80002de:	4c18      	ldr	r4, [pc, #96]	; (8000340 <initApple1+0x64>)
    handleInput((char *)keyboardBuffer);
 80002e0:	4d18      	ldr	r5, [pc, #96]	; (8000344 <initApple1+0x68>)
    HAL_Delay(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f001 fdf5 	bl	8001ed4 <HAL_Delay>
    writelineTerminal("Press <space> to boot Apple I");
 80002ea:	4620      	mov	r0, r4
 80002ec:	f7ff ffa2 	bl	8000234 <writelineTerminal>
    handleInput((char *)keyboardBuffer);
 80002f0:	4814      	ldr	r0, [pc, #80]	; (8000344 <initApple1+0x68>)
 80002f2:	f000 f835 	bl	8000360 <handleInput>
  } while (keyboardBuffer[0] != SPACE_KEY);
 80002f6:	782b      	ldrb	r3, [r5, #0]
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	d1f2      	bne.n	80002e2 <initApple1+0x6>
  keyboardBuffer[0] = 0x00;
 80002fc:	2400      	movs	r4, #0

  // Initialize CPU
  writeTerminal("Initializing CPU...");
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <initApple1+0x6c>)
  keyboardBuffer[0] = 0x00;
 8000300:	702c      	strb	r4, [r5, #0]
  writeTerminal("Initializing CPU...");
 8000302:	f7ff ffb1 	bl	8000268 <writeTerminal>
  reset6502(); writelineTerminal(" Complete");
 8000306:	f000 f9a1 	bl	800064c <reset6502>
 800030a:	4810      	ldr	r0, [pc, #64]	; (800034c <initApple1+0x70>)
 800030c:	f7ff ff92 	bl	8000234 <writelineTerminal>

  // Initialize RAM
  writeTerminal("Initializing RAM...");
 8000310:	480f      	ldr	r0, [pc, #60]	; (8000350 <initApple1+0x74>)
 8000312:	f7ff ffa9 	bl	8000268 <writeTerminal>
  for (uint16_t i = 0; i < RAM_SIZE; i++) {
    RAM[i] = 0x00;
 8000316:	4621      	mov	r1, r4
 8000318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <initApple1+0x78>)
 800031e:	f002 fb11 	bl	8002944 <memset>
  }
  writelineTerminal(" Complete");
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <initApple1+0x70>)
 8000324:	f7ff ff86 	bl	8000234 <writelineTerminal>

  // Initialize PIA
  writeTerminal("Initializing PIA...");
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <initApple1+0x7c>)
 800032a:	f7ff ff9d 	bl	8000268 <writeTerminal>
  pia.keyboard_register = 0x00;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <initApple1+0x80>)
  pia.keyboard_control = 0x00;
  pia.display_register = 0x00;
  writelineTerminal(" Complete");
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <initApple1+0x70>)
  pia.keyboard_register = 0x00;
 8000332:	701c      	strb	r4, [r3, #0]
  pia.keyboard_control = 0x00;
 8000334:	705c      	strb	r4, [r3, #1]
  pia.display_register = 0x00;
 8000336:	709c      	strb	r4, [r3, #2]
}
 8000338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writelineTerminal(" Complete");
 800033c:	f7ff bf7a 	b.w	8000234 <writelineTerminal>
 8000340:	08003263 	.word	0x08003263
 8000344:	200080d4 	.word	0x200080d4
 8000348:	08003281 	.word	0x08003281
 800034c:	08003295 	.word	0x08003295
 8000350:	0800329f 	.word	0x0800329f
 8000354:	2000008c 	.word	0x2000008c
 8000358:	080032b3 	.word	0x080032b3
 800035c:	200080d5 	.word	0x200080d5

08000360 <handleInput>:
void handleInput(char *buffer) {
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
  HAL_UART_Receive(&huart1, (uint8_t *)buffer, 1, KEYBOARD_READ_INTERVAL); // Read from UART
 8000364:	230a      	movs	r3, #10
 8000366:	2201      	movs	r2, #1
 8000368:	4601      	mov	r1, r0
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <handleInput+0x5c>)
 800036c:	f002 fa6c 	bl	8002848 <HAL_UART_Receive>
  buffer[0] &= 0x7F; // Mask out MSB
 8000370:	7823      	ldrb	r3, [r4, #0]
 8000372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 8000376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800037a:	2a19      	cmp	r2, #25
  buffer[0] &= 0x7F; // Mask out MSB
 800037c:	7023      	strb	r3, [r4, #0]
  if (buffer[0] >= 'a' && buffer[0] <= 'z') {
 800037e:	d802      	bhi.n	8000386 <handleInput+0x26>
    buffer[0] -= 0x20;
 8000380:	3b20      	subs	r3, #32
    buffer[0] = 0x5F;
 8000382:	7023      	strb	r3, [r4, #0]
}
 8000384:	bd10      	pop	{r4, pc}
  else if (buffer[0] == '\n') {
 8000386:	2b0a      	cmp	r3, #10
 8000388:	d101      	bne.n	800038e <handleInput+0x2e>
    buffer[0] = '\r';
 800038a:	230d      	movs	r3, #13
 800038c:	e7f9      	b.n	8000382 <handleInput+0x22>
  else if (buffer[0] == '\b') {
 800038e:	2b08      	cmp	r3, #8
 8000390:	d101      	bne.n	8000396 <handleInput+0x36>
    buffer[0] = 0x5F;
 8000392:	235f      	movs	r3, #95	; 0x5f
 8000394:	e7f5      	b.n	8000382 <handleInput+0x22>
  else if (buffer[0] == 0x7F) {
 8000396:	2b7f      	cmp	r3, #127	; 0x7f
 8000398:	d0fb      	beq.n	8000392 <handleInput+0x32>
  else if (buffer[0] == 0x03) {
 800039a:	2b03      	cmp	r3, #3
 800039c:	d1f2      	bne.n	8000384 <handleInput+0x24>
    writelineTerminal("Resetting in 5 seconds...");
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <handleInput+0x60>)
 80003a0:	f7ff ff48 	bl	8000234 <writelineTerminal>
    HAL_Delay(5000);
 80003a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80003a8:	f001 fd94 	bl	8001ed4 <HAL_Delay>
    keyboardBuffer[0] = SPACE_KEY;
 80003ac:	2220      	movs	r2, #32
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <handleInput+0x64>)
 80003b0:	701a      	strb	r2, [r3, #0]
}
 80003b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initApple1();
 80003b6:	f7ff bf91 	b.w	80002dc <initApple1>
 80003ba:	bf00      	nop
 80003bc:	2000808c 	.word	0x2000808c
 80003c0:	080032c7 	.word	0x080032c7
 80003c4:	200080d4 	.word	0x200080d4

080003c8 <read6502>:
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 80003c8:	b530      	push	{r4, r5, lr}
  if (address < RAM_SIZE) return RAM[address];
 80003ca:	0403      	lsls	r3, r0, #16
uint8_t read6502(uint16_t address) { // Memory mapping for Apple I
 80003cc:	4604      	mov	r4, r0
 80003ce:	b09d      	sub	sp, #116	; 0x74
  if (address < RAM_SIZE) return RAM[address];
 80003d0:	d402      	bmi.n	80003d8 <read6502+0x10>
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <read6502+0xb4>)
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 80003d4:	5d18      	ldrb	r0, [r3, r4]
 80003d6:	e01b      	b.n	8000410 <read6502+0x48>
  if (address == PIA_KEYBOARD_REG) {
 80003d8:	f24d 0310 	movw	r3, #53264	; 0xd010
 80003dc:	4298      	cmp	r0, r3
 80003de:	d119      	bne.n	8000414 <read6502+0x4c>
    handleInput((char *)keyboardBuffer);
 80003e0:	4d27      	ldr	r5, [pc, #156]	; (8000480 <read6502+0xb8>)
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 80003e2:	4c28      	ldr	r4, [pc, #160]	; (8000484 <read6502+0xbc>)
    handleInput((char *)keyboardBuffer);
 80003e4:	4628      	mov	r0, r5
 80003e6:	f7ff ffbb 	bl	8000360 <handleInput>
    keyboardBuffer[0] = 0x00;
 80003ea:	2300      	movs	r3, #0
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 80003ec:	782a      	ldrb	r2, [r5, #0]
    keyboardBuffer[0] = 0x00;
 80003ee:	702b      	strb	r3, [r5, #0]
    sprintf(debugMsg, "\nPIA: 0x%02X 0x%02X 0x%02X 0x%02X", pia.keyboard_register, pia.keyboard_control, pia.display_register, pia.display_control);
 80003f0:	78e3      	ldrb	r3, [r4, #3]
    pia.keyboard_register = keyboardBuffer[0] | 0x80;
 80003f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003f6:	7022      	strb	r2, [r4, #0]
    sprintf(debugMsg, "\nPIA: 0x%02X 0x%02X 0x%02X 0x%02X", pia.keyboard_register, pia.keyboard_control, pia.display_register, pia.display_control);
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	78a3      	ldrb	r3, [r4, #2]
 80003fc:	4922      	ldr	r1, [pc, #136]	; (8000488 <read6502+0xc0>)
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	7863      	ldrb	r3, [r4, #1]
 8000402:	a803      	add	r0, sp, #12
 8000404:	f002 faa6 	bl	8002954 <siprintf>
    writelineTerminal(debugMsg);
 8000408:	a803      	add	r0, sp, #12
 800040a:	f7ff ff13 	bl	8000234 <writelineTerminal>
    return pia.keyboard_register;
 800040e:	7820      	ldrb	r0, [r4, #0]
}
 8000410:	b01d      	add	sp, #116	; 0x74
 8000412:	bd30      	pop	{r4, r5, pc}
  if (address == PIA_KEYBOARD_CTRL) {
 8000414:	f24d 0311 	movw	r3, #53265	; 0xd011
 8000418:	4298      	cmp	r0, r3
 800041a:	d10d      	bne.n	8000438 <read6502+0x70>
    sprintf(debugMsg, "read6502()::PIA_KEYBOARD_CTRL at 0x%04X", address);
 800041c:	4602      	mov	r2, r0
 800041e:	491b      	ldr	r1, [pc, #108]	; (800048c <read6502+0xc4>)
 8000420:	a803      	add	r0, sp, #12
 8000422:	f002 fa97 	bl	8002954 <siprintf>
    writelineTerminal(debugMsg);
 8000426:	a803      	add	r0, sp, #12
 8000428:	f7ff ff04 	bl	8000234 <writelineTerminal>
    if (keyboardBuffer[0] != 0x00)
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <read6502+0xb8>)
 800042e:	7818      	ldrb	r0, [r3, #0]
      return 0x80;
 8000430:	2800      	cmp	r0, #0
 8000432:	bf18      	it	ne
 8000434:	2080      	movne	r0, #128	; 0x80
 8000436:	e7eb      	b.n	8000410 <read6502+0x48>
  if (address >= BASIC_START && address <= 0xEFFF) {
 8000438:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
 800043c:	b2ad      	uxth	r5, r5
 800043e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8000442:	d20a      	bcs.n	800045a <read6502+0x92>
    sprintf(debugMsg, "read6502()::BASIC_ROM at 0x%04X", address);
 8000444:	4602      	mov	r2, r0
 8000446:	4912      	ldr	r1, [pc, #72]	; (8000490 <read6502+0xc8>)
 8000448:	a803      	add	r0, sp, #12
 800044a:	f002 fa83 	bl	8002954 <siprintf>
    writelineTerminal(debugMsg);
 800044e:	a803      	add	r0, sp, #12
 8000450:	f7ff fef0 	bl	8000234 <writelineTerminal>
      return BASIC[BASIC_addr];
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <read6502+0xcc>)
 8000456:	5d58      	ldrb	r0, [r3, r5]
 8000458:	e7da      	b.n	8000410 <read6502+0x48>
  if (address >= 0xF000) {
 800045a:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 800045e:	d30a      	bcc.n	8000476 <read6502+0xae>
    sprintf(debugMsg, "read6502()::WOZMON_ROM at 0x%04X", address);
 8000460:	4602      	mov	r2, r0
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <read6502+0xd0>)
 8000464:	a803      	add	r0, sp, #12
 8000466:	f002 fa75 	bl	8002954 <siprintf>
    writelineTerminal(debugMsg);
 800046a:	a803      	add	r0, sp, #12
 800046c:	f7ff fee2 	bl	8000234 <writelineTerminal>
    if (monitor_addr < 0x100) return monitor[monitor_addr];
 8000470:	b2e4      	uxtb	r4, r4
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <read6502+0xd4>)
 8000474:	e7ae      	b.n	80003d4 <read6502+0xc>
  return 0x00;
 8000476:	2000      	movs	r0, #0
 8000478:	e7ca      	b.n	8000410 <read6502+0x48>
 800047a:	bf00      	nop
 800047c:	2000008c 	.word	0x2000008c
 8000480:	200080d4 	.word	0x200080d4
 8000484:	200080d5 	.word	0x200080d5
 8000488:	080032e1 	.word	0x080032e1
 800048c:	08003303 	.word	0x08003303
 8000490:	0800332b 	.word	0x0800332b
 8000494:	0800336c 	.word	0x0800336c
 8000498:	0800334b 	.word	0x0800334b
 800049c:	0800436c 	.word	0x0800436c

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b510      	push	{r4, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a4:	2214      	movs	r2, #20
 80004a6:	2100      	movs	r1, #0
 80004a8:	a808      	add	r0, sp, #32
 80004aa:	f002 fa4b 	bl	8002944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	2214      	movs	r2, #20
 80004b0:	2100      	movs	r1, #0
 80004b2:	a801      	add	r0, sp, #4
 80004b4:	f002 fa46 	bl	8002944 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004be:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c0:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004cc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004d0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f001 fe51 	bl	8002178 <HAL_RCC_OscConfig>
 80004d6:	b108      	cbz	r0, 80004dc <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004da:	e7fe      	b.n	80004da <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004dc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ec:	4621      	mov	r1, r4
 80004ee:	a801      	add	r0, sp, #4
 80004f0:	f002 f804 	bl	80024fc <HAL_RCC_ClockConfig>
 80004f4:	b108      	cbz	r0, 80004fa <SystemClock_Config+0x5a>
 80004f6:	b672      	cpsid	i
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <SystemClock_Config+0x58>
}
 80004fa:	b010      	add	sp, #64	; 0x40
 80004fc:	bd10      	pop	{r4, pc}
	...

08000500 <main>:
{
 8000500:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000502:	f001 fcc3 	bl	8001e8c <HAL_Init>
  SystemClock_Config();
 8000506:	f7ff ffcb 	bl	80004a0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <main+0x64>)
  huart1.Instance = USART1;
 800050c:	4816      	ldr	r0, [pc, #88]	; (8000568 <main+0x68>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	699a      	ldr	r2, [r3, #24]
 8000510:	f042 0210 	orr.w	r2, r2, #16
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	699a      	ldr	r2, [r3, #24]
 8000518:	f002 0210 	and.w	r2, r2, #16
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	699a      	ldr	r2, [r3, #24]
 8000522:	f042 0204 	orr.w	r2, r2, #4
 8000526:	619a      	str	r2, [r3, #24]
 8000528:	699b      	ldr	r3, [r3, #24]
  huart1.Init.BaudRate = 115200;
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <main+0x6c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	9b01      	ldr	r3, [sp, #4]
  huart1.Init.BaudRate = 115200;
 8000534:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000538:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053e:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000540:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000544:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000548:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800054a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800054c:	f002 f902 	bl	8002754 <HAL_UART_Init>
 8000550:	b108      	cbz	r0, 8000556 <main+0x56>
 8000552:	b672      	cpsid	i
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x54>
  initApple1(); // Initialize Apple I
 8000556:	f7ff fec1 	bl	80002dc <initApple1>
    exec6502(INSTRUCTION_CHUNK);
 800055a:	f242 7010 	movw	r0, #10000	; 0x2710
 800055e:	f000 ffd9 	bl	8001514 <exec6502>
  while (1)
 8000562:	e7fa      	b.n	800055a <main+0x5a>
 8000564:	40021000 	.word	0x40021000
 8000568:	2000808c 	.word	0x2000808c
 800056c:	40013800 	.word	0x40013800

08000570 <getvalue>:
    startpage = ea & 0xFF00;
    ea += (uint16_t)y;

}

static uint16_t getvalue() {
 8000570:	b508      	push	{r3, lr}
    if (useaccum) return((uint16_t)a);
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <getvalue+0x1c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b113      	cbz	r3, 800057e <getvalue+0xe>
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <getvalue+0x20>)
 800057a:	7818      	ldrb	r0, [r3, #0]
        else return((uint16_t)read6502(ea));
}
 800057c:	bd08      	pop	{r3, pc}
        else return((uint16_t)read6502(ea));
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <getvalue+0x24>)
 8000580:	8818      	ldrh	r0, [r3, #0]
 8000582:	f7ff ff21 	bl	80003c8 <read6502>
 8000586:	b280      	uxth	r0, r0
 8000588:	e7f8      	b.n	800057c <getvalue+0xc>
 800058a:	bf00      	nop
 800058c:	200080f3 	.word	0x200080f3
 8000590:	200080d9 	.word	0x200080d9
 8000594:	200080e2 	.word	0x200080e2

08000598 <bcc.part.0>:

void bcc() {
    if ((cpustatus & FLAG_CARRY) == 0) {
        oldpc = pc;
        pc += reladdr;
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000598:	4a02      	ldr	r2, [pc, #8]	; (80005a4 <bcc.part.0+0xc>)
 800059a:	6813      	ldr	r3, [r2, #0]
 800059c:	3302      	adds	r3, #2
 800059e:	6013      	str	r3, [r2, #0]
            else clockticks6502++;
    }
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200080dc 	.word	0x200080dc

080005a8 <dex.part.0>:

void dex() {
    x--;
   
    zerocalc(x);
    signcalc(x);
 80005a8:	4a02      	ldr	r2, [pc, #8]	; (80005b4 <dex.part.0+0xc>)
 80005aa:	7813      	ldrb	r3, [r2, #0]
 80005ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b0:	7013      	strb	r3, [r2, #0]
}
 80005b2:	4770      	bx	lr
 80005b4:	200080e0 	.word	0x200080e0

080005b8 <push16>:
void push16(uint16_t pushval) {
 80005b8:	b538      	push	{r3, r4, r5, lr}
 80005ba:	4605      	mov	r5, r0
    write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 80005bc:	4c09      	ldr	r4, [pc, #36]	; (80005e4 <push16+0x2c>)
 80005be:	0a29      	lsrs	r1, r5, #8
 80005c0:	7820      	ldrb	r0, [r4, #0]
 80005c2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80005c6:	f7ff fe75 	bl	80002b4 <write6502>
    write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 80005ca:	7823      	ldrb	r3, [r4, #0]
 80005cc:	b2e9      	uxtb	r1, r5
 80005ce:	3b01      	subs	r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80005d6:	f7ff fe6d 	bl	80002b4 <write6502>
    sp -= 2;
 80005da:	7823      	ldrb	r3, [r4, #0]
 80005dc:	3b02      	subs	r3, #2
 80005de:	7023      	strb	r3, [r4, #0]
}
 80005e0:	bd38      	pop	{r3, r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	200080f2 	.word	0x200080f2

080005e8 <push8>:
    write6502(BASE_STACK + sp--, pushval);
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <push8+0x14>)
void push8(uint8_t pushval) {
 80005ea:	4601      	mov	r1, r0
    write6502(BASE_STACK + sp--, pushval);
 80005ec:	7813      	ldrb	r3, [r2, #0]
 80005ee:	1e58      	subs	r0, r3, #1
 80005f0:	7010      	strb	r0, [r2, #0]
 80005f2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80005f6:	f7ff be5d 	b.w	80002b4 <write6502>
 80005fa:	bf00      	nop
 80005fc:	200080f2 	.word	0x200080f2

08000600 <pull16>:
uint16_t pull16() {
 8000600:	b538      	push	{r3, r4, r5, lr}
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000602:	4d0b      	ldr	r5, [pc, #44]	; (8000630 <pull16+0x30>)
 8000604:	7828      	ldrb	r0, [r5, #0]
 8000606:	3001      	adds	r0, #1
 8000608:	b2c0      	uxtb	r0, r0
 800060a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800060e:	f7ff fedb 	bl	80003c8 <read6502>
 8000612:	4604      	mov	r4, r0
 8000614:	7828      	ldrb	r0, [r5, #0]
 8000616:	3002      	adds	r0, #2
 8000618:	b2c0      	uxtb	r0, r0
 800061a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800061e:	f7ff fed3 	bl	80003c8 <read6502>
    sp += 2;
 8000622:	782b      	ldrb	r3, [r5, #0]
    temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) & 0xFF)) << 8);
 8000624:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    sp += 2;
 8000628:	3302      	adds	r3, #2
 800062a:	702b      	strb	r3, [r5, #0]
}
 800062c:	b280      	uxth	r0, r0
 800062e:	bd38      	pop	{r3, r4, r5, pc}
 8000630:	200080f2 	.word	0x200080f2

08000634 <pull8>:
    return (read6502(BASE_STACK + ++sp));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <pull8+0x14>)
 8000636:	7818      	ldrb	r0, [r3, #0]
 8000638:	3001      	adds	r0, #1
 800063a:	b2c0      	uxtb	r0, r0
 800063c:	7018      	strb	r0, [r3, #0]
 800063e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000642:	f7ff bec1 	b.w	80003c8 <read6502>
 8000646:	bf00      	nop
 8000648:	200080f2 	.word	0x200080f2

0800064c <reset6502>:
void reset6502() {
 800064c:	b510      	push	{r4, lr}
    pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 800064e:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 8000652:	f7ff feb9 	bl	80003c8 <read6502>
 8000656:	4604      	mov	r4, r0
 8000658:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 800065c:	f7ff feb4 	bl	80003c8 <read6502>
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <reset6502+0x3c>)
 8000662:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000666:	801c      	strh	r4, [r3, #0]
    a = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <reset6502+0x40>)
 800066c:	7013      	strb	r3, [r2, #0]
    x = 0;
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <reset6502+0x44>)
 8000670:	7013      	strb	r3, [r2, #0]
    y = 0;
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <reset6502+0x48>)
 8000674:	7013      	strb	r3, [r2, #0]
    sp = 0xFD;
 8000676:	22fd      	movs	r2, #253	; 0xfd
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <reset6502+0x4c>)
 800067a:	701a      	strb	r2, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <reset6502+0x50>)
 800067e:	7813      	ldrb	r3, [r2, #0]
 8000680:	f043 0320 	orr.w	r3, r3, #32
 8000684:	7013      	strb	r3, [r2, #0]
}
 8000686:	bd10      	pop	{r4, pc}
 8000688:	200080ec 	.word	0x200080ec
 800068c:	200080d9 	.word	0x200080d9
 8000690:	200080f6 	.word	0x200080f6
 8000694:	200080f7 	.word	0x200080f7
 8000698:	200080f2 	.word	0x200080f2
 800069c:	200080e0 	.word	0x200080e0

080006a0 <imm>:
    ea = pc++;
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <imm+0x10>)
 80006a2:	8813      	ldrh	r3, [r2, #0]
 80006a4:	1c59      	adds	r1, r3, #1
 80006a6:	8011      	strh	r1, [r2, #0]
 80006a8:	4a02      	ldr	r2, [pc, #8]	; (80006b4 <imm+0x14>)
 80006aa:	8013      	strh	r3, [r2, #0]
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	200080ec 	.word	0x200080ec
 80006b4:	200080e2 	.word	0x200080e2

080006b8 <zp>:
void zp() { // zero-page
 80006b8:	b508      	push	{r3, lr}
    ea = (uint16_t)read6502((uint16_t)pc++);
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <zp+0x14>)
 80006bc:	8818      	ldrh	r0, [r3, #0]
 80006be:	1c42      	adds	r2, r0, #1
 80006c0:	801a      	strh	r2, [r3, #0]
 80006c2:	f7ff fe81 	bl	80003c8 <read6502>
 80006c6:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <zp+0x18>)
 80006c8:	8018      	strh	r0, [r3, #0]
}
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	200080ec 	.word	0x200080ec
 80006d0:	200080e2 	.word	0x200080e2

080006d4 <zpx>:
void zpx() { // zero-page,X
 80006d4:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; // zero-page wraparound
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <zpx+0x1c>)
 80006d8:	8818      	ldrh	r0, [r3, #0]
 80006da:	1c42      	adds	r2, r0, #1
 80006dc:	801a      	strh	r2, [r3, #0]
 80006de:	f7ff fe73 	bl	80003c8 <read6502>
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <zpx+0x20>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4418      	add	r0, r3
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <zpx+0x24>)
 80006ea:	b2c0      	uxtb	r0, r0
 80006ec:	8018      	strh	r0, [r3, #0]
}
 80006ee:	bd08      	pop	{r3, pc}
 80006f0:	200080ec 	.word	0x200080ec
 80006f4:	200080f6 	.word	0x200080f6
 80006f8:	200080e2 	.word	0x200080e2

080006fc <zpy>:
void zpy() { // zero-page,Y
 80006fc:	b508      	push	{r3, lr}
    ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; // zero-page wraparound
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <zpy+0x1c>)
 8000700:	8818      	ldrh	r0, [r3, #0]
 8000702:	1c42      	adds	r2, r0, #1
 8000704:	801a      	strh	r2, [r3, #0]
 8000706:	f7ff fe5f 	bl	80003c8 <read6502>
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <zpy+0x20>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4418      	add	r0, r3
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <zpy+0x24>)
 8000712:	b2c0      	uxtb	r0, r0
 8000714:	8018      	strh	r0, [r3, #0]
}
 8000716:	bd08      	pop	{r3, pc}
 8000718:	200080ec 	.word	0x200080ec
 800071c:	200080f7 	.word	0x200080f7
 8000720:	200080e2 	.word	0x200080e2

08000724 <rel>:
void rel() { // relative for branch ops (8-bit immediate value, sign-extended)
 8000724:	b508      	push	{r3, lr}
    reladdr = (uint16_t)read6502(pc++);
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <rel+0x20>)
 8000728:	8818      	ldrh	r0, [r3, #0]
 800072a:	1c42      	adds	r2, r0, #1
 800072c:	801a      	strh	r2, [r3, #0]
 800072e:	f7ff fe4b 	bl	80003c8 <read6502>
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <rel+0x24>)
 8000734:	b283      	uxth	r3, r0
    if (reladdr & 0x80) reladdr |= 0xFF00;
 8000736:	f010 0f80 	tst.w	r0, #128	; 0x80
 800073a:	bf18      	it	ne
 800073c:	f063 03ff 	ornne	r3, r3, #255	; 0xff
 8000740:	8013      	strh	r3, [r2, #0]
}
 8000742:	bd08      	pop	{r3, pc}
 8000744:	200080ec 	.word	0x200080ec
 8000748:	200080ee 	.word	0x200080ee

0800074c <abso>:
void abso() { // absolute
 800074c:	b538      	push	{r3, r4, r5, lr}
    ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 800074e:	4d09      	ldr	r5, [pc, #36]	; (8000774 <abso+0x28>)
 8000750:	8828      	ldrh	r0, [r5, #0]
 8000752:	f7ff fe39 	bl	80003c8 <read6502>
 8000756:	4604      	mov	r4, r0
 8000758:	8828      	ldrh	r0, [r5, #0]
 800075a:	3001      	adds	r0, #1
 800075c:	b280      	uxth	r0, r0
 800075e:	f7ff fe33 	bl	80003c8 <read6502>
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <abso+0x2c>)
 8000764:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000768:	801c      	strh	r4, [r3, #0]
    pc += 2;
 800076a:	882b      	ldrh	r3, [r5, #0]
 800076c:	3302      	adds	r3, #2
 800076e:	802b      	strh	r3, [r5, #0]
}
 8000770:	bd38      	pop	{r3, r4, r5, pc}
 8000772:	bf00      	nop
 8000774:	200080ec 	.word	0x200080ec
 8000778:	200080e2 	.word	0x200080e2

0800077c <absx>:
void absx() { // absolute,X
 800077c:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 800077e:	4d0a      	ldr	r5, [pc, #40]	; (80007a8 <absx+0x2c>)
 8000780:	8828      	ldrh	r0, [r5, #0]
 8000782:	f7ff fe21 	bl	80003c8 <read6502>
 8000786:	4604      	mov	r4, r0
 8000788:	8828      	ldrh	r0, [r5, #0]
 800078a:	3001      	adds	r0, #1
 800078c:	b280      	uxth	r0, r0
 800078e:	f7ff fe1b 	bl	80003c8 <read6502>
    ea += (uint16_t)x;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <absx+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 8000794:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)x;
 8000798:	7818      	ldrb	r0, [r3, #0]
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <absx+0x34>)
 800079c:	4404      	add	r4, r0
 800079e:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80007a0:	882b      	ldrh	r3, [r5, #0]
 80007a2:	3302      	adds	r3, #2
 80007a4:	802b      	strh	r3, [r5, #0]
}
 80007a6:	bd38      	pop	{r3, r4, r5, pc}
 80007a8:	200080ec 	.word	0x200080ec
 80007ac:	200080f6 	.word	0x200080f6
 80007b0:	200080e2 	.word	0x200080e2

080007b4 <absy>:
void absy() { // absolute,Y
 80007b4:	b538      	push	{r3, r4, r5, lr}
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80007b6:	4d0a      	ldr	r5, [pc, #40]	; (80007e0 <absy+0x2c>)
 80007b8:	8828      	ldrh	r0, [r5, #0]
 80007ba:	f7ff fe05 	bl	80003c8 <read6502>
 80007be:	4604      	mov	r4, r0
 80007c0:	8828      	ldrh	r0, [r5, #0]
 80007c2:	3001      	adds	r0, #1
 80007c4:	b280      	uxth	r0, r0
 80007c6:	f7ff fdff 	bl	80003c8 <read6502>
    ea += (uint16_t)y;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <absy+0x30>)
    ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 80007cc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    ea += (uint16_t)y;
 80007d0:	7818      	ldrb	r0, [r3, #0]
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <absy+0x34>)
 80007d4:	4404      	add	r4, r0
 80007d6:	801c      	strh	r4, [r3, #0]
    pc += 2;
 80007d8:	882b      	ldrh	r3, [r5, #0]
 80007da:	3302      	adds	r3, #2
 80007dc:	802b      	strh	r3, [r5, #0]
}
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	200080ec 	.word	0x200080ec
 80007e4:	200080f7 	.word	0x200080f7
 80007e8:	200080e2 	.word	0x200080e2

080007ec <ind>:
void ind() { // indirect
 80007ec:	b570      	push	{r4, r5, r6, lr}
    eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 80007ee:	4e10      	ldr	r6, [pc, #64]	; (8000830 <ind+0x44>)
 80007f0:	8830      	ldrh	r0, [r6, #0]
 80007f2:	f7ff fde9 	bl	80003c8 <read6502>
 80007f6:	4604      	mov	r4, r0
 80007f8:	8830      	ldrh	r0, [r6, #0]
 80007fa:	3001      	adds	r0, #1
 80007fc:	b280      	uxth	r0, r0
 80007fe:	f7ff fde3 	bl	80003c8 <read6502>
 8000802:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000806:	b2a4      	uxth	r4, r4
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fddd 	bl	80003c8 <read6502>
 800080e:	4605      	mov	r5, r0
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // replicate 6502 page-boundary wraparound bug
 8000810:	1c60      	adds	r0, r4, #1
 8000812:	b2c0      	uxtb	r0, r0
 8000814:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000818:	4320      	orrs	r0, r4
 800081a:	f7ff fdd5 	bl	80003c8 <read6502>
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <ind+0x48>)
 8000820:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000824:	801d      	strh	r5, [r3, #0]
    pc += 2;
 8000826:	8833      	ldrh	r3, [r6, #0]
 8000828:	3302      	adds	r3, #2
 800082a:	8033      	strh	r3, [r6, #0]
}
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	bf00      	nop
 8000830:	200080ec 	.word	0x200080ec
 8000834:	200080e2 	.word	0x200080e2

08000838 <indx>:
void indx() { //  (indirect,X)
 8000838:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); // zero-page wraparound for table pointer
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <indx+0x30>)
 800083c:	8818      	ldrh	r0, [r3, #0]
 800083e:	1c42      	adds	r2, r0, #1
 8000840:	801a      	strh	r2, [r3, #0]
 8000842:	f7ff fdc1 	bl	80003c8 <read6502>
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <indx+0x34>)
 8000848:	781c      	ldrb	r4, [r3, #0]
 800084a:	4404      	add	r4, r0
 800084c:	b2e4      	uxtb	r4, r4
    ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 800084e:	4620      	mov	r0, r4
 8000850:	f7ff fdba 	bl	80003c8 <read6502>
 8000854:	3401      	adds	r4, #1
 8000856:	4605      	mov	r5, r0
 8000858:	b2e0      	uxtb	r0, r4
 800085a:	f7ff fdb5 	bl	80003c8 <read6502>
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <indx+0x38>)
 8000860:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000864:	801d      	strh	r5, [r3, #0]
}
 8000866:	bd38      	pop	{r3, r4, r5, pc}
 8000868:	200080ec 	.word	0x200080ec
 800086c:	200080f6 	.word	0x200080f6
 8000870:	200080e2 	.word	0x200080e2

08000874 <indy>:
void indy() { //  (indirect),Y
 8000874:	b538      	push	{r3, r4, r5, lr}
    eahelp = (uint16_t)read6502(pc++);
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <indy+0x30>)
 8000878:	8818      	ldrh	r0, [r3, #0]
 800087a:	1c42      	adds	r2, r0, #1
 800087c:	801a      	strh	r2, [r3, #0]
 800087e:	f7ff fda3 	bl	80003c8 <read6502>
 8000882:	b284      	uxth	r4, r0
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff fd9f 	bl	80003c8 <read6502>
    eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); // zero-page wraparound
 800088a:	3401      	adds	r4, #1
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 800088c:	4605      	mov	r5, r0
 800088e:	b2e0      	uxtb	r0, r4
 8000890:	f7ff fd9a 	bl	80003c8 <read6502>
    ea += (uint16_t)y;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <indy+0x34>)
    ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 8000896:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
    ea += (uint16_t)y;
 800089a:	7818      	ldrb	r0, [r3, #0]
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <indy+0x38>)
 800089e:	4405      	add	r5, r0
 80008a0:	801d      	strh	r5, [r3, #0]
}
 80008a2:	bd38      	pop	{r3, r4, r5, pc}
 80008a4:	200080ec 	.word	0x200080ec
 80008a8:	200080f7 	.word	0x200080f7
 80008ac:	200080e2 	.word	0x200080e2

080008b0 <putvalue>:
    if (useaccum) a = (uint8_t)(saveval & 0x00FF);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <putvalue+0x18>)
 80008b2:	b2c1      	uxtb	r1, r0
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b113      	cbz	r3, 80008be <putvalue+0xe>
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <putvalue+0x1c>)
 80008ba:	7019      	strb	r1, [r3, #0]
}
 80008bc:	4770      	bx	lr
        else write6502(ea, (saveval & 0x00FF));
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <putvalue+0x20>)
 80008c0:	8818      	ldrh	r0, [r3, #0]
 80008c2:	f7ff bcf7 	b.w	80002b4 <write6502>
 80008c6:	bf00      	nop
 80008c8:	200080f3 	.word	0x200080f3
 80008cc:	200080d9 	.word	0x200080d9
 80008d0:	200080e2 	.word	0x200080e2

080008d4 <adc>:
void adc() {
 80008d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue();
 80008d6:	f7ff fe4b 	bl	8000570 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80008da:	4d24      	ldr	r5, [pc, #144]	; (800096c <adc+0x98>)
    value = getvalue();
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <adc+0x9c>)
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80008de:	4c25      	ldr	r4, [pc, #148]	; (8000974 <adc+0xa0>)
    value = getvalue();
 80008e0:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80008e2:	782b      	ldrb	r3, [r5, #0]
 80008e4:	7821      	ldrb	r1, [r4, #0]
 80008e6:	f003 0201 	and.w	r2, r3, #1
 80008ea:	440a      	add	r2, r1
 80008ec:	4e22      	ldr	r6, [pc, #136]	; (8000978 <adc+0xa4>)
 80008ee:	4402      	add	r2, r0
 80008f0:	b292      	uxth	r2, r2
    carrycalc(result);
 80008f2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80008f6:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 80008f8:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 80008fa:	bf14      	ite	ne
 80008fc:	f043 0301 	orrne.w	r3, r3, #1
 8000900:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8000904:	b1c6      	cbz	r6, 8000938 <adc+0x64>
 8000906:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 800090a:	ea81 0602 	eor.w	r6, r1, r2
 800090e:	ea80 0702 	eor.w	r7, r0, r2
 8000912:	4630      	mov	r0, r6
 8000914:	4038      	ands	r0, r7
 8000916:	0607      	lsls	r7, r0, #24
 8000918:	bf4c      	ite	mi
 800091a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800091e:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8000922:	0616      	lsls	r6, r2, #24
 8000924:	bf4c      	ite	mi
 8000926:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800092a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (cpustatus & FLAG_DECIMAL) {
 800092e:	0718      	lsls	r0, r3, #28
 8000930:	d405      	bmi.n	800093e <adc+0x6a>
 8000932:	702b      	strb	r3, [r5, #0]
    saveaccum(result);
 8000934:	7022      	strb	r2, [r4, #0]
}
 8000936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	e7e5      	b.n	800090a <adc+0x36>
        if ((a & 0x0F) > 0x09) {
 800093e:	f001 000f 	and.w	r0, r1, #15
 8000942:	2809      	cmp	r0, #9
            a += 0x06;
 8000944:	bf84      	itt	hi
 8000946:	3106      	addhi	r1, #6
 8000948:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 800094a:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 800094c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8000950:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8000954:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <adc+0xa8>)
        clearcarry();
 8000958:	702b      	strb	r3, [r5, #0]
            setcarry();
 800095a:	bf84      	itt	hi
 800095c:	f043 0301 	orrhi.w	r3, r3, #1
 8000960:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8000962:	680b      	ldr	r3, [r1, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	600b      	str	r3, [r1, #0]
 8000968:	e7e4      	b.n	8000934 <adc+0x60>
 800096a:	bf00      	nop
 800096c:	200080e0 	.word	0x200080e0
 8000970:	200080f4 	.word	0x200080f4
 8000974:	200080d9 	.word	0x200080d9
 8000978:	200080f0 	.word	0x200080f0
 800097c:	200080dc 	.word	0x200080dc

08000980 <op_and>:
void op_and() {
 8000980:	b508      	push	{r3, lr}
    value = getvalue();
 8000982:	f7ff fdf5 	bl	8000570 <getvalue>
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <op_and+0x40>)
    result = (uint16_t)a & value;
 8000988:	490e      	ldr	r1, [pc, #56]	; (80009c4 <op_and+0x44>)
    value = getvalue();
 800098a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 800098c:	780b      	ldrb	r3, [r1, #0]
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <op_and+0x48>)
 8000990:	4018      	ands	r0, r3
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <op_and+0x4c>)
 8000994:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000996:	7813      	ldrb	r3, [r2, #0]
 8000998:	b148      	cbz	r0, 80009ae <op_and+0x2e>
 800099a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 800099e:	f010 0f80 	tst.w	r0, #128	; 0x80
    zerocalc(result);
 80009a2:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 80009a4:	d107      	bne.n	80009b6 <op_and+0x36>
 80009a6:	7813      	ldrb	r3, [r2, #0]
 80009a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ac:	e005      	b.n	80009ba <op_and+0x3a>
    zerocalc(result);
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	7013      	strb	r3, [r2, #0]
    signcalc(result);
 80009b4:	e7f7      	b.n	80009a6 <op_and+0x26>
 80009b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ba:	7013      	strb	r3, [r2, #0]
    saveaccum(result);
 80009bc:	7008      	strb	r0, [r1, #0]
}
 80009be:	bd08      	pop	{r3, pc}
 80009c0:	200080f4 	.word	0x200080f4
 80009c4:	200080d9 	.word	0x200080d9
 80009c8:	200080e0 	.word	0x200080e0
 80009cc:	200080f0 	.word	0x200080f0

080009d0 <asl>:
void asl() {
 80009d0:	b508      	push	{r3, lr}
    value = getvalue();
 80009d2:	f7ff fdcd 	bl	8000570 <getvalue>
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <asl+0x48>)
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <asl+0x4c>)
 80009da:	8018      	strh	r0, [r3, #0]
    result = value << 1;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <asl+0x50>)
 80009de:	0040      	lsls	r0, r0, #1
 80009e0:	b280      	uxth	r0, r0
 80009e2:	8018      	strh	r0, [r3, #0]
    carrycalc(result);
 80009e4:	7813      	ldrb	r3, [r2, #0]
 80009e6:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 80009ea:	bf14      	ite	ne
 80009ec:	f043 0301 	orrne.w	r3, r3, #1
 80009f0:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 80009f4:	f010 0ffe 	tst.w	r0, #254	; 0xfe
 80009f8:	bf14      	ite	ne
 80009fa:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 80009fe:	f043 0302 	orreq.w	r3, r3, #2
    signcalc(result);
 8000a02:	0601      	lsls	r1, r0, #24
 8000a04:	bf4c      	ite	mi
 8000a06:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000a0a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000a0e:	7013      	strb	r3, [r2, #0]
}
 8000a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000a14:	f7ff bf4c 	b.w	80008b0 <putvalue>
 8000a18:	200080f4 	.word	0x200080f4
 8000a1c:	200080e0 	.word	0x200080e0
 8000a20:	200080f0 	.word	0x200080f0

08000a24 <bcc>:
    if ((cpustatus & FLAG_CARRY) == 0) {
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <bcc+0x30>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	07db      	lsls	r3, r3, #31
 8000a2a:	d412      	bmi.n	8000a52 <bcc+0x2e>
        oldpc = pc;
 8000a2c:	490a      	ldr	r1, [pc, #40]	; (8000a58 <bcc+0x34>)
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <bcc+0x38>)
 8000a30:	880a      	ldrh	r2, [r1, #0]
 8000a32:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <bcc+0x3c>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000a3e:	4053      	eors	r3, r2
 8000a40:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000a44:	d001      	beq.n	8000a4a <bcc+0x26>
 8000a46:	f7ff bda7 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000a4a:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <bcc+0x40>)
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	6013      	str	r3, [r2, #0]
}
 8000a52:	4770      	bx	lr
 8000a54:	200080e0 	.word	0x200080e0
 8000a58:	200080ec 	.word	0x200080ec
 8000a5c:	200080e8 	.word	0x200080e8
 8000a60:	200080ee 	.word	0x200080ee
 8000a64:	200080dc 	.word	0x200080dc

08000a68 <bcs>:
    if ((cpustatus & FLAG_CARRY) == FLAG_CARRY) {
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <bcs+0x30>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	07db      	lsls	r3, r3, #31
 8000a6e:	d512      	bpl.n	8000a96 <bcs+0x2e>
        oldpc = pc;
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <bcs+0x34>)
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <bcs+0x38>)
 8000a74:	880a      	ldrh	r2, [r1, #0]
 8000a76:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <bcs+0x3c>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000a82:	4053      	eors	r3, r2
 8000a84:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000a88:	d001      	beq.n	8000a8e <bcs+0x26>
 8000a8a:	f7ff bd85 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <bcs+0x40>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	4770      	bx	lr
 8000a98:	200080e0 	.word	0x200080e0
 8000a9c:	200080ec 	.word	0x200080ec
 8000aa0:	200080e8 	.word	0x200080e8
 8000aa4:	200080ee 	.word	0x200080ee
 8000aa8:	200080dc 	.word	0x200080dc

08000aac <beq>:
    if ((cpustatus & FLAG_ZERO) == FLAG_ZERO) {
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <beq+0x30>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	079b      	lsls	r3, r3, #30
 8000ab2:	d512      	bpl.n	8000ada <beq+0x2e>
        oldpc = pc;
 8000ab4:	490a      	ldr	r1, [pc, #40]	; (8000ae0 <beq+0x34>)
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <beq+0x38>)
 8000ab8:	880a      	ldrh	r2, [r1, #0]
 8000aba:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <beq+0x3c>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000ac6:	4053      	eors	r3, r2
 8000ac8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000acc:	d001      	beq.n	8000ad2 <beq+0x26>
 8000ace:	f7ff bd63 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <beq+0x40>)
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	4770      	bx	lr
 8000adc:	200080e0 	.word	0x200080e0
 8000ae0:	200080ec 	.word	0x200080ec
 8000ae4:	200080e8 	.word	0x200080e8
 8000ae8:	200080ee 	.word	0x200080ee
 8000aec:	200080dc 	.word	0x200080dc

08000af0 <op_bit>:
void op_bit() {
 8000af0:	b508      	push	{r3, lr}
    value = getvalue();
 8000af2:	f7ff fd3d 	bl	8000570 <getvalue>
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <op_bit+0x34>)
    result = (uint16_t)a & value;
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <op_bit+0x38>)
    value = getvalue();
 8000afa:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a & value;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <op_bit+0x3c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4003      	ands	r3, r0
 8000b02:	8013      	strh	r3, [r2, #0]
    zerocalc(result);
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <op_bit+0x40>)
 8000b06:	b14b      	cbz	r3, 8000b1c <op_bit+0x2c>
 8000b08:	7813      	ldrb	r3, [r2, #0]
 8000b0a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    cpustatus = (cpustatus & 0x3F) | (uint8_t)(value & 0xC0);
 8000b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b12:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000b16:	4303      	orrs	r3, r0
 8000b18:	7013      	strb	r3, [r2, #0]
}
 8000b1a:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000b1c:	7813      	ldrb	r3, [r2, #0]
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	e7f4      	b.n	8000b0e <op_bit+0x1e>
 8000b24:	200080f4 	.word	0x200080f4
 8000b28:	200080f0 	.word	0x200080f0
 8000b2c:	200080d9 	.word	0x200080d9
 8000b30:	200080e0 	.word	0x200080e0

08000b34 <bmi>:
    if ((cpustatus & FLAG_SIGN) == FLAG_SIGN) {
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <bmi+0x34>)
 8000b36:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da12      	bge.n	8000b64 <bmi+0x30>
        oldpc = pc;
 8000b3e:	490b      	ldr	r1, [pc, #44]	; (8000b6c <bmi+0x38>)
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <bmi+0x3c>)
 8000b42:	880a      	ldrh	r2, [r1, #0]
 8000b44:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <bmi+0x40>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000b50:	4053      	eors	r3, r2
 8000b52:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000b56:	d001      	beq.n	8000b5c <bmi+0x28>
 8000b58:	f7ff bd1e 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <bmi+0x44>)
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200080e0 	.word	0x200080e0
 8000b6c:	200080ec 	.word	0x200080ec
 8000b70:	200080e8 	.word	0x200080e8
 8000b74:	200080ee 	.word	0x200080ee
 8000b78:	200080dc 	.word	0x200080dc

08000b7c <bne>:
    if ((cpustatus & FLAG_ZERO) == 0) {
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <bne+0x30>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	079b      	lsls	r3, r3, #30
 8000b82:	d412      	bmi.n	8000baa <bne+0x2e>
        oldpc = pc;
 8000b84:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <bne+0x34>)
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <bne+0x38>)
 8000b88:	880a      	ldrh	r2, [r1, #0]
 8000b8a:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <bne+0x3c>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000b96:	4053      	eors	r3, r2
 8000b98:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000b9c:	d001      	beq.n	8000ba2 <bne+0x26>
 8000b9e:	f7ff bcfb 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <bne+0x40>)
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]
}
 8000baa:	4770      	bx	lr
 8000bac:	200080e0 	.word	0x200080e0
 8000bb0:	200080ec 	.word	0x200080ec
 8000bb4:	200080e8 	.word	0x200080e8
 8000bb8:	200080ee 	.word	0x200080ee
 8000bbc:	200080dc 	.word	0x200080dc

08000bc0 <bpl>:
    if ((cpustatus & FLAG_SIGN) == 0) {
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <bpl+0x34>)
 8000bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db12      	blt.n	8000bf0 <bpl+0x30>
        oldpc = pc;
 8000bca:	490b      	ldr	r1, [pc, #44]	; (8000bf8 <bpl+0x38>)
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <bpl+0x3c>)
 8000bce:	880a      	ldrh	r2, [r1, #0]
 8000bd0:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <bpl+0x40>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000bdc:	4053      	eors	r3, r2
 8000bde:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000be2:	d001      	beq.n	8000be8 <bpl+0x28>
 8000be4:	f7ff bcd8 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <bpl+0x44>)
 8000bea:	6813      	ldr	r3, [r2, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200080e0 	.word	0x200080e0
 8000bf8:	200080ec 	.word	0x200080ec
 8000bfc:	200080e8 	.word	0x200080e8
 8000c00:	200080ee 	.word	0x200080ee
 8000c04:	200080dc 	.word	0x200080dc

08000c08 <brk>:
void brk() {
 8000c08:	b538      	push	{r3, r4, r5, lr}
    pc++;
 8000c0a:	4d0f      	ldr	r5, [pc, #60]	; (8000c48 <brk+0x40>)
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8000c0c:	4c0f      	ldr	r4, [pc, #60]	; (8000c4c <brk+0x44>)
    pc++;
 8000c0e:	8828      	ldrh	r0, [r5, #0]
 8000c10:	3001      	adds	r0, #1
 8000c12:	b280      	uxth	r0, r0
 8000c14:	8028      	strh	r0, [r5, #0]
    push16(pc); // push next instruction address onto stack
 8000c16:	f7ff fccf 	bl	80005b8 <push16>
    push8(cpustatus | FLAG_BREAK); // push CPU cpustatus to stack
 8000c1a:	7820      	ldrb	r0, [r4, #0]
 8000c1c:	f040 0010 	orr.w	r0, r0, #16
 8000c20:	f7ff fce2 	bl	80005e8 <push8>
    setinterrupt(); // set interrupt flag
 8000c24:	7823      	ldrb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8000c26:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    setinterrupt(); // set interrupt flag
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	7023      	strb	r3, [r4, #0]
    pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 8000c30:	f7ff fbca 	bl	80003c8 <read6502>
 8000c34:	4604      	mov	r4, r0
 8000c36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c3a:	f7ff fbc5 	bl	80003c8 <read6502>
 8000c3e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8000c42:	802c      	strh	r4, [r5, #0]
}
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop
 8000c48:	200080ec 	.word	0x200080ec
 8000c4c:	200080e0 	.word	0x200080e0

08000c50 <bvc>:
    if ((cpustatus & FLAG_OVERFLOW) == 0) {
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <bvc+0x30>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	065b      	lsls	r3, r3, #25
 8000c56:	d412      	bmi.n	8000c7e <bvc+0x2e>
        oldpc = pc;
 8000c58:	490a      	ldr	r1, [pc, #40]	; (8000c84 <bvc+0x34>)
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <bvc+0x38>)
 8000c5c:	880a      	ldrh	r2, [r1, #0]
 8000c5e:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <bvc+0x3c>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000c6a:	4053      	eors	r3, r2
 8000c6c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000c70:	d001      	beq.n	8000c76 <bvc+0x26>
 8000c72:	f7ff bc91 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000c76:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <bvc+0x40>)
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	4770      	bx	lr
 8000c80:	200080e0 	.word	0x200080e0
 8000c84:	200080ec 	.word	0x200080ec
 8000c88:	200080e8 	.word	0x200080e8
 8000c8c:	200080ee 	.word	0x200080ee
 8000c90:	200080dc 	.word	0x200080dc

08000c94 <bvs>:
    if ((cpustatus & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <bvs+0x30>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	065b      	lsls	r3, r3, #25
 8000c9a:	d512      	bpl.n	8000cc2 <bvs+0x2e>
        oldpc = pc;
 8000c9c:	490a      	ldr	r1, [pc, #40]	; (8000cc8 <bvs+0x34>)
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <bvs+0x38>)
 8000ca0:	880a      	ldrh	r2, [r1, #0]
 8000ca2:	801a      	strh	r2, [r3, #0]
        pc += reladdr;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <bvs+0x3c>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	800b      	strh	r3, [r1, #0]
        if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; // check if jump crossed a page boundary
 8000cae:	4053      	eors	r3, r2
 8000cb0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000cb4:	d001      	beq.n	8000cba <bvs+0x26>
 8000cb6:	f7ff bc6f 	b.w	8000598 <bcc.part.0>
            else clockticks6502++;
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <bvs+0x40>)
 8000cbc:	6813      	ldr	r3, [r2, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	6013      	str	r3, [r2, #0]
}
 8000cc2:	4770      	bx	lr
 8000cc4:	200080e0 	.word	0x200080e0
 8000cc8:	200080ec 	.word	0x200080ec
 8000ccc:	200080e8 	.word	0x200080e8
 8000cd0:	200080ee 	.word	0x200080ee
 8000cd4:	200080dc 	.word	0x200080dc

08000cd8 <clc>:
    clearcarry();
 8000cd8:	4a02      	ldr	r2, [pc, #8]	; (8000ce4 <clc+0xc>)
 8000cda:	7813      	ldrb	r3, [r2, #0]
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	7013      	strb	r3, [r2, #0]
}
 8000ce2:	4770      	bx	lr
 8000ce4:	200080e0 	.word	0x200080e0

08000ce8 <cld>:
    cleardecimal();
 8000ce8:	4a02      	ldr	r2, [pc, #8]	; (8000cf4 <cld+0xc>)
 8000cea:	7813      	ldrb	r3, [r2, #0]
 8000cec:	f023 0308 	bic.w	r3, r3, #8
 8000cf0:	7013      	strb	r3, [r2, #0]
}
 8000cf2:	4770      	bx	lr
 8000cf4:	200080e0 	.word	0x200080e0

08000cf8 <cli>:
    clearinterrupt();
 8000cf8:	4a02      	ldr	r2, [pc, #8]	; (8000d04 <cli+0xc>)
 8000cfa:	7813      	ldrb	r3, [r2, #0]
 8000cfc:	f023 0304 	bic.w	r3, r3, #4
 8000d00:	7013      	strb	r3, [r2, #0]
}
 8000d02:	4770      	bx	lr
 8000d04:	200080e0 	.word	0x200080e0

08000d08 <clv>:
    clearoverflow();
 8000d08:	4a02      	ldr	r2, [pc, #8]	; (8000d14 <clv+0xc>)
 8000d0a:	7813      	ldrb	r3, [r2, #0]
 8000d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d10:	7013      	strb	r3, [r2, #0]
}
 8000d12:	4770      	bx	lr
 8000d14:	200080e0 	.word	0x200080e0

08000d18 <cmp>:
void cmp() {
 8000d18:	b508      	push	{r3, lr}
    value = getvalue();
 8000d1a:	f7ff fc29 	bl	8000570 <getvalue>
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <cmp+0x4c>)
    result = (uint16_t)a - value;
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <cmp+0x50>)
    value = getvalue();
 8000d22:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a - value;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <cmp+0x54>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	1a19      	subs	r1, r3, r0
 8000d2a:	b289      	uxth	r1, r1
 8000d2c:	8011      	strh	r1, [r2, #0]
    if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 8000d2e:	b2c0      	uxtb	r0, r0
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <cmp+0x58>)
 8000d32:	4283      	cmp	r3, r0
 8000d34:	7813      	ldrb	r3, [r2, #0]
 8000d36:	d307      	bcc.n	8000d48 <cmp+0x30>
 8000d38:	f043 0001 	orr.w	r0, r3, #1
 8000d3c:	7010      	strb	r0, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8000d3e:	d007      	beq.n	8000d50 <cmp+0x38>
        else clearzero();
 8000d40:	7813      	ldrb	r3, [r2, #0]
 8000d42:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000d46:	e005      	b.n	8000d54 <cmp+0x3c>
        else clearcarry();
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	7013      	strb	r3, [r2, #0]
    if (a == (uint8_t)(value & 0x00FF)) setzero();
 8000d4e:	e7f7      	b.n	8000d40 <cmp+0x28>
 8000d50:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000d54:	0609      	lsls	r1, r1, #24
 8000d56:	bf4c      	ite	mi
 8000d58:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000d5c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000d60:	7013      	strb	r3, [r2, #0]
}
 8000d62:	bd08      	pop	{r3, pc}
 8000d64:	200080f4 	.word	0x200080f4
 8000d68:	200080f0 	.word	0x200080f0
 8000d6c:	200080d9 	.word	0x200080d9
 8000d70:	200080e0 	.word	0x200080e0

08000d74 <cpx>:
void cpx() {
 8000d74:	b508      	push	{r3, lr}
    value = getvalue();
 8000d76:	f7ff fbfb 	bl	8000570 <getvalue>
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <cpx+0x4c>)
    result = (uint16_t)x - value;
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <cpx+0x50>)
    value = getvalue();
 8000d7e:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)x - value;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <cpx+0x54>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	1a19      	subs	r1, r3, r0
 8000d86:	b289      	uxth	r1, r1
 8000d88:	8011      	strh	r1, [r2, #0]
    if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 8000d8a:	b2c0      	uxtb	r0, r0
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <cpx+0x58>)
 8000d8e:	4283      	cmp	r3, r0
 8000d90:	7813      	ldrb	r3, [r2, #0]
 8000d92:	d307      	bcc.n	8000da4 <cpx+0x30>
 8000d94:	f043 0001 	orr.w	r0, r3, #1
 8000d98:	7010      	strb	r0, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8000d9a:	d007      	beq.n	8000dac <cpx+0x38>
        else clearzero();
 8000d9c:	7813      	ldrb	r3, [r2, #0]
 8000d9e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000da2:	e005      	b.n	8000db0 <cpx+0x3c>
        else clearcarry();
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	7013      	strb	r3, [r2, #0]
    if (x == (uint8_t)(value & 0x00FF)) setzero();
 8000daa:	e7f7      	b.n	8000d9c <cpx+0x28>
 8000dac:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000db0:	0609      	lsls	r1, r1, #24
 8000db2:	bf4c      	ite	mi
 8000db4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000db8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000dbc:	7013      	strb	r3, [r2, #0]
}
 8000dbe:	bd08      	pop	{r3, pc}
 8000dc0:	200080f4 	.word	0x200080f4
 8000dc4:	200080f0 	.word	0x200080f0
 8000dc8:	200080f6 	.word	0x200080f6
 8000dcc:	200080e0 	.word	0x200080e0

08000dd0 <cpy>:
void cpy() {
 8000dd0:	b508      	push	{r3, lr}
    value = getvalue();
 8000dd2:	f7ff fbcd 	bl	8000570 <getvalue>
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <cpy+0x4c>)
    result = (uint16_t)y - value;
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <cpy+0x50>)
    value = getvalue();
 8000dda:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)y - value;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <cpy+0x54>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	1a19      	subs	r1, r3, r0
 8000de2:	b289      	uxth	r1, r1
 8000de4:	8011      	strh	r1, [r2, #0]
    if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <cpy+0x58>)
 8000dea:	4283      	cmp	r3, r0
 8000dec:	7813      	ldrb	r3, [r2, #0]
 8000dee:	d307      	bcc.n	8000e00 <cpy+0x30>
 8000df0:	f043 0001 	orr.w	r0, r3, #1
 8000df4:	7010      	strb	r0, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8000df6:	d007      	beq.n	8000e08 <cpy+0x38>
        else clearzero();
 8000df8:	7813      	ldrb	r3, [r2, #0]
 8000dfa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000dfe:	e005      	b.n	8000e0c <cpy+0x3c>
        else clearcarry();
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	7013      	strb	r3, [r2, #0]
    if (y == (uint8_t)(value & 0x00FF)) setzero();
 8000e06:	e7f7      	b.n	8000df8 <cpy+0x28>
 8000e08:	f043 0303 	orr.w	r3, r3, #3
    signcalc(result);
 8000e0c:	0609      	lsls	r1, r1, #24
 8000e0e:	bf4c      	ite	mi
 8000e10:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000e14:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000e18:	7013      	strb	r3, [r2, #0]
}
 8000e1a:	bd08      	pop	{r3, pc}
 8000e1c:	200080f4 	.word	0x200080f4
 8000e20:	200080f0 	.word	0x200080f0
 8000e24:	200080f7 	.word	0x200080f7
 8000e28:	200080e0 	.word	0x200080e0

08000e2c <dec>:
void dec() {
 8000e2c:	b508      	push	{r3, lr}
    value = getvalue();
 8000e2e:	f7ff fb9f 	bl	8000570 <getvalue>
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <dec+0x3c>)
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <dec+0x40>)
 8000e36:	8018      	strh	r0, [r3, #0]
    result = value - 1;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <dec+0x44>)
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	b280      	uxth	r0, r0
 8000e3e:	8018      	strh	r0, [r3, #0]
    zerocalc(result);
 8000e40:	b2c3      	uxtb	r3, r0
 8000e42:	b16b      	cbz	r3, 8000e60 <dec+0x34>
 8000e44:	7813      	ldrb	r3, [r2, #0]
 8000e46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000e4a:	0601      	lsls	r1, r0, #24
 8000e4c:	bf4c      	ite	mi
 8000e4e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000e52:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000e56:	7013      	strb	r3, [r2, #0]
}
 8000e58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000e5c:	f7ff bd28 	b.w	80008b0 <putvalue>
    zerocalc(result);
 8000e60:	7813      	ldrb	r3, [r2, #0]
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	e7f0      	b.n	8000e4a <dec+0x1e>
 8000e68:	200080f4 	.word	0x200080f4
 8000e6c:	200080e0 	.word	0x200080e0
 8000e70:	200080f0 	.word	0x200080f0

08000e74 <dex>:
    x--;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <dex+0x2c>)
    zerocalc(x);
 8000e76:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <dex+0x30>)
    x--;
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	3a01      	subs	r2, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000e80:	780b      	ldrb	r3, [r1, #0]
 8000e82:	b132      	cbz	r2, 8000e92 <dex+0x1e>
 8000e84:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000e88:	0612      	lsls	r2, r2, #24
 8000e8a:	700b      	strb	r3, [r1, #0]
 8000e8c:	d504      	bpl.n	8000e98 <dex+0x24>
 8000e8e:	f7ff bb8b 	b.w	80005a8 <dex.part.0>
    zerocalc(x);
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	e7f7      	b.n	8000e88 <dex+0x14>
    signcalc(x);
 8000e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e9c:	700b      	strb	r3, [r1, #0]
}
 8000e9e:	4770      	bx	lr
 8000ea0:	200080f6 	.word	0x200080f6
 8000ea4:	200080e0 	.word	0x200080e0

08000ea8 <dey>:

void dey() {
    y--;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <dey+0x2c>)
   
    zerocalc(y);
 8000eaa:	490b      	ldr	r1, [pc, #44]	; (8000ed8 <dey+0x30>)
    y--;
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	3a01      	subs	r2, #1
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8000eb4:	780b      	ldrb	r3, [r1, #0]
 8000eb6:	b132      	cbz	r2, 8000ec6 <dey+0x1e>
 8000eb8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000ebc:	0612      	lsls	r2, r2, #24
 8000ebe:	700b      	strb	r3, [r1, #0]
 8000ec0:	d504      	bpl.n	8000ecc <dey+0x24>
 8000ec2:	f7ff bb71 	b.w	80005a8 <dex.part.0>
    zerocalc(y);
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	e7f7      	b.n	8000ebc <dey+0x14>
    signcalc(y);
 8000ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ed0:	700b      	strb	r3, [r1, #0]
}
 8000ed2:	4770      	bx	lr
 8000ed4:	200080f7 	.word	0x200080f7
 8000ed8:	200080e0 	.word	0x200080e0

08000edc <eor>:

void eor() {
 8000edc:	b508      	push	{r3, lr}
    value = getvalue();
 8000ede:	f7ff fb47 	bl	8000570 <getvalue>
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <eor+0x3c>)
    result = (uint16_t)a ^ value;
 8000ee4:	490d      	ldr	r1, [pc, #52]	; (8000f1c <eor+0x40>)
    value = getvalue();
 8000ee6:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a ^ value;
 8000ee8:	780b      	ldrb	r3, [r1, #0]
 8000eea:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <eor+0x44>)
 8000eec:	4058      	eors	r0, r3
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <eor+0x48>)
 8000ef0:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8000ef2:	b2c3      	uxtb	r3, r0
 8000ef4:	b163      	cbz	r3, 8000f10 <eor+0x34>
 8000ef6:	7813      	ldrb	r3, [r2, #0]
 8000ef8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000efc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000f00:	bf14      	ite	ne
 8000f02:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8000f06:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 8000f0a:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8000f0c:	7008      	strb	r0, [r1, #0]
}
 8000f0e:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8000f10:	7813      	ldrb	r3, [r2, #0]
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	e7f1      	b.n	8000efc <eor+0x20>
 8000f18:	200080f4 	.word	0x200080f4
 8000f1c:	200080d9 	.word	0x200080d9
 8000f20:	200080e0 	.word	0x200080e0
 8000f24:	200080f0 	.word	0x200080f0

08000f28 <inc>:

void inc() {
 8000f28:	b508      	push	{r3, lr}
    value = getvalue();
 8000f2a:	f7ff fb21 	bl	8000570 <getvalue>
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <inc+0x3c>)
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <inc+0x40>)
 8000f32:	8018      	strh	r0, [r3, #0]
    result = value + 1;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <inc+0x44>)
 8000f36:	3001      	adds	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8000f3c:	b2c3      	uxtb	r3, r0
 8000f3e:	b16b      	cbz	r3, 8000f5c <inc+0x34>
 8000f40:	7813      	ldrb	r3, [r2, #0]
 8000f42:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8000f46:	0601      	lsls	r1, r0, #24
 8000f48:	bf4c      	ite	mi
 8000f4a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8000f4e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8000f52:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8000f54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8000f58:	f7ff bcaa 	b.w	80008b0 <putvalue>
    zerocalc(result);
 8000f5c:	7813      	ldrb	r3, [r2, #0]
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	e7f0      	b.n	8000f46 <inc+0x1e>
 8000f64:	200080f4 	.word	0x200080f4
 8000f68:	200080e0 	.word	0x200080e0
 8000f6c:	200080f0 	.word	0x200080f0

08000f70 <inx>:

void inx() {
    x++;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <inx+0x2c>)
   
    zerocalc(x);
 8000f72:	490b      	ldr	r1, [pc, #44]	; (8000fa0 <inx+0x30>)
    x++;
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	3201      	adds	r2, #1
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	701a      	strb	r2, [r3, #0]
    zerocalc(x);
 8000f7c:	780b      	ldrb	r3, [r1, #0]
 8000f7e:	b132      	cbz	r2, 8000f8e <inx+0x1e>
 8000f80:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 8000f84:	0612      	lsls	r2, r2, #24
 8000f86:	700b      	strb	r3, [r1, #0]
 8000f88:	d504      	bpl.n	8000f94 <inx+0x24>
 8000f8a:	f7ff bb0d 	b.w	80005a8 <dex.part.0>
    zerocalc(x);
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	e7f7      	b.n	8000f84 <inx+0x14>
    signcalc(x);
 8000f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f98:	700b      	strb	r3, [r1, #0]
}
 8000f9a:	4770      	bx	lr
 8000f9c:	200080f6 	.word	0x200080f6
 8000fa0:	200080e0 	.word	0x200080e0

08000fa4 <iny>:

void iny() {
    y++;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <iny+0x2c>)
   
    zerocalc(y);
 8000fa6:	490b      	ldr	r1, [pc, #44]	; (8000fd4 <iny+0x30>)
    y++;
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	3201      	adds	r2, #1
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
    zerocalc(y);
 8000fb0:	780b      	ldrb	r3, [r1, #0]
 8000fb2:	b132      	cbz	r2, 8000fc2 <iny+0x1e>
 8000fb4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8000fb8:	0612      	lsls	r2, r2, #24
 8000fba:	700b      	strb	r3, [r1, #0]
 8000fbc:	d504      	bpl.n	8000fc8 <iny+0x24>
 8000fbe:	f7ff baf3 	b.w	80005a8 <dex.part.0>
    zerocalc(y);
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	e7f7      	b.n	8000fb8 <iny+0x14>
    signcalc(y);
 8000fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fcc:	700b      	strb	r3, [r1, #0]
}
 8000fce:	4770      	bx	lr
 8000fd0:	200080f7 	.word	0x200080f7
 8000fd4:	200080e0 	.word	0x200080e0

08000fd8 <jmp>:

void jmp() {
    pc = ea;
 8000fd8:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <jmp+0xc>)
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <jmp+0x10>)
 8000fde:	801a      	strh	r2, [r3, #0]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200080e2 	.word	0x200080e2
 8000fe8:	200080ec 	.word	0x200080ec

08000fec <jsr>:

void jsr() {
 8000fec:	b510      	push	{r4, lr}
    push16(pc - 1);
 8000fee:	4c05      	ldr	r4, [pc, #20]	; (8001004 <jsr+0x18>)
 8000ff0:	8820      	ldrh	r0, [r4, #0]
 8000ff2:	3801      	subs	r0, #1
 8000ff4:	b280      	uxth	r0, r0
 8000ff6:	f7ff fadf 	bl	80005b8 <push16>
    pc = ea;
 8000ffa:	4b03      	ldr	r3, [pc, #12]	; (8001008 <jsr+0x1c>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	8023      	strh	r3, [r4, #0]
}
 8001000:	bd10      	pop	{r4, pc}
 8001002:	bf00      	nop
 8001004:	200080ec 	.word	0x200080ec
 8001008:	200080e2 	.word	0x200080e2

0800100c <lda>:

void lda() {
 800100c:	b508      	push	{r3, lr}
    value = getvalue();
 800100e:	f7ff faaf 	bl	8000570 <getvalue>
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <lda+0x38>)
    a = (uint8_t)(value & 0x00FF);
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <lda+0x3c>)
    value = getvalue();
 8001016:	8018      	strh	r0, [r3, #0]
    a = (uint8_t)(value & 0x00FF);
 8001018:	b2c3      	uxtb	r3, r0
 800101a:	7013      	strb	r3, [r2, #0]
   
    zerocalc(a);
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <lda+0x40>)
 800101e:	b14b      	cbz	r3, 8001034 <lda+0x28>
 8001020:	7813      	ldrb	r3, [r2, #0]
 8001022:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 8001026:	0601      	lsls	r1, r0, #24
 8001028:	7013      	strb	r3, [r2, #0]
 800102a:	d507      	bpl.n	800103c <lda+0x30>
}
 800102c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001030:	f7ff baba 	b.w	80005a8 <dex.part.0>
    zerocalc(a);
 8001034:	7813      	ldrb	r3, [r2, #0]
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	e7f4      	b.n	8001026 <lda+0x1a>
    signcalc(a);
 800103c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001040:	7013      	strb	r3, [r2, #0]
}
 8001042:	bd08      	pop	{r3, pc}
 8001044:	200080f4 	.word	0x200080f4
 8001048:	200080d9 	.word	0x200080d9
 800104c:	200080e0 	.word	0x200080e0

08001050 <ldx>:

void ldx() {
 8001050:	b508      	push	{r3, lr}
    value = getvalue();
 8001052:	f7ff fa8d 	bl	8000570 <getvalue>
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <ldx+0x38>)
    x = (uint8_t)(value & 0x00FF);
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <ldx+0x3c>)
    value = getvalue();
 800105a:	8018      	strh	r0, [r3, #0]
    x = (uint8_t)(value & 0x00FF);
 800105c:	b2c3      	uxtb	r3, r0
 800105e:	7013      	strb	r3, [r2, #0]
   
    zerocalc(x);
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <ldx+0x40>)
 8001062:	b14b      	cbz	r3, 8001078 <ldx+0x28>
 8001064:	7813      	ldrb	r3, [r2, #0]
 8001066:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800106a:	0601      	lsls	r1, r0, #24
 800106c:	7013      	strb	r3, [r2, #0]
 800106e:	d507      	bpl.n	8001080 <ldx+0x30>
}
 8001070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001074:	f7ff ba98 	b.w	80005a8 <dex.part.0>
    zerocalc(x);
 8001078:	7813      	ldrb	r3, [r2, #0]
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	e7f4      	b.n	800106a <ldx+0x1a>
    signcalc(x);
 8001080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001084:	7013      	strb	r3, [r2, #0]
}
 8001086:	bd08      	pop	{r3, pc}
 8001088:	200080f4 	.word	0x200080f4
 800108c:	200080f6 	.word	0x200080f6
 8001090:	200080e0 	.word	0x200080e0

08001094 <ldy>:

void ldy() {
 8001094:	b508      	push	{r3, lr}
    value = getvalue();
 8001096:	f7ff fa6b 	bl	8000570 <getvalue>
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <ldy+0x38>)
    y = (uint8_t)(value & 0x00FF);
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <ldy+0x3c>)
    value = getvalue();
 800109e:	8018      	strh	r0, [r3, #0]
    y = (uint8_t)(value & 0x00FF);
 80010a0:	b2c3      	uxtb	r3, r0
 80010a2:	7013      	strb	r3, [r2, #0]
   
    zerocalc(y);
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <ldy+0x40>)
 80010a6:	b14b      	cbz	r3, 80010bc <ldy+0x28>
 80010a8:	7813      	ldrb	r3, [r2, #0]
 80010aa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 80010ae:	0601      	lsls	r1, r0, #24
 80010b0:	7013      	strb	r3, [r2, #0]
 80010b2:	d507      	bpl.n	80010c4 <ldy+0x30>
}
 80010b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010b8:	f7ff ba76 	b.w	80005a8 <dex.part.0>
    zerocalc(y);
 80010bc:	7813      	ldrb	r3, [r2, #0]
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	e7f4      	b.n	80010ae <ldy+0x1a>
    signcalc(y);
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	7013      	strb	r3, [r2, #0]
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	200080f4 	.word	0x200080f4
 80010d0:	200080f7 	.word	0x200080f7
 80010d4:	200080e0 	.word	0x200080e0

080010d8 <lsr>:

void lsr() {
 80010d8:	b508      	push	{r3, lr}
    value = getvalue();
 80010da:	f7ff fa49 	bl	8000570 <getvalue>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <lsr+0x4c>)
    result = value >> 1;
   
    if (value & 1) setcarry();
 80010e2:	f013 0f01 	tst.w	r3, #1
    value = getvalue();
 80010e6:	8010      	strh	r0, [r2, #0]
    result = value >> 1;
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <lsr+0x50>)
 80010ea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80010ee:	8010      	strh	r0, [r2, #0]
    if (value & 1) setcarry();
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <lsr+0x54>)
        else clearcarry();
    zerocalc(result);
 80010f2:	b2c1      	uxtb	r1, r0
    if (value & 1) setcarry();
 80010f4:	7813      	ldrb	r3, [r2, #0]
 80010f6:	bf14      	ite	ne
 80010f8:	f043 0301 	orrne.w	r3, r3, #1
        else clearcarry();
 80010fc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001100:	b161      	cbz	r1, 800111c <lsr+0x44>
 8001102:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001106:	0601      	lsls	r1, r0, #24
 8001108:	bf4c      	ite	mi
 800110a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800110e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001112:	7013      	strb	r3, [r2, #0]
   
    putvalue(result);
}
 8001114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001118:	f7ff bbca 	b.w	80008b0 <putvalue>
    zerocalc(result);
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	e7f1      	b.n	8001106 <lsr+0x2e>
 8001122:	bf00      	nop
 8001124:	200080f4 	.word	0x200080f4
 8001128:	200080f0 	.word	0x200080f0
 800112c:	200080e0 	.word	0x200080e0

08001130 <ora>:

void nop() {
}

void ora() {
 8001130:	b508      	push	{r3, lr}
    value = getvalue();
 8001132:	f7ff fa1d 	bl	8000570 <getvalue>
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <ora+0x3c>)
    result = (uint16_t)a | value;
 8001138:	490d      	ldr	r1, [pc, #52]	; (8001170 <ora+0x40>)
    value = getvalue();
 800113a:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a | value;
 800113c:	780b      	ldrb	r3, [r1, #0]
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <ora+0x44>)
 8001140:	4318      	orrs	r0, r3
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <ora+0x48>)
 8001144:	8018      	strh	r0, [r3, #0]
   
    zerocalc(result);
 8001146:	b2c3      	uxtb	r3, r0
 8001148:	b163      	cbz	r3, 8001164 <ora+0x34>
 800114a:	7813      	ldrb	r3, [r2, #0]
 800114c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001150:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001154:	bf14      	ite	ne
 8001156:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800115a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
 800115e:	7013      	strb	r3, [r2, #0]
   
    saveaccum(result);
 8001160:	7008      	strb	r0, [r1, #0]
}
 8001162:	bd08      	pop	{r3, pc}
    zerocalc(result);
 8001164:	7813      	ldrb	r3, [r2, #0]
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	e7f1      	b.n	8001150 <ora+0x20>
 800116c:	200080f4 	.word	0x200080f4
 8001170:	200080d9 	.word	0x200080d9
 8001174:	200080e0 	.word	0x200080e0
 8001178:	200080f0 	.word	0x200080f0

0800117c <pha>:

void pha() {
    push8(a);
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <pha+0x8>)
 800117e:	7818      	ldrb	r0, [r3, #0]
 8001180:	f7ff ba32 	b.w	80005e8 <push8>
 8001184:	200080d9 	.word	0x200080d9

08001188 <php>:
}

void php() {
    push8(cpustatus | FLAG_BREAK);
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <php+0xc>)
 800118a:	7818      	ldrb	r0, [r3, #0]
 800118c:	f040 0010 	orr.w	r0, r0, #16
 8001190:	f7ff ba2a 	b.w	80005e8 <push8>
 8001194:	200080e0 	.word	0x200080e0

08001198 <pla>:
}

void pla() {
 8001198:	b508      	push	{r3, lr}
    a = pull8();
 800119a:	f7ff fa4b 	bl	8000634 <pull8>
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <pla+0x30>)
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <pla+0x34>)
 80011a2:	7018      	strb	r0, [r3, #0]
   
    zerocalc(a);
 80011a4:	7813      	ldrb	r3, [r2, #0]
 80011a6:	b140      	cbz	r0, 80011ba <pla+0x22>
 80011a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80011ac:	0601      	lsls	r1, r0, #24
 80011ae:	7013      	strb	r3, [r2, #0]
 80011b0:	d506      	bpl.n	80011c0 <pla+0x28>
}
 80011b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80011b6:	f7ff b9f7 	b.w	80005a8 <dex.part.0>
    zerocalc(a);
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	e7f5      	b.n	80011ac <pla+0x14>
    signcalc(a);
 80011c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011c4:	7013      	strb	r3, [r2, #0]
}
 80011c6:	bd08      	pop	{r3, pc}
 80011c8:	200080d9 	.word	0x200080d9
 80011cc:	200080e0 	.word	0x200080e0

080011d0 <plp>:

void plp() {
 80011d0:	b508      	push	{r3, lr}
    cpustatus = pull8() | FLAG_CONSTANT;
 80011d2:	f7ff fa2f 	bl	8000634 <pull8>
 80011d6:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <plp+0x10>)
 80011d8:	f040 0020 	orr.w	r0, r0, #32
 80011dc:	7018      	strb	r0, [r3, #0]
}
 80011de:	bd08      	pop	{r3, pc}
 80011e0:	200080e0 	.word	0x200080e0

080011e4 <rol>:

void rol() {
 80011e4:	b508      	push	{r3, lr}
    value = getvalue();
 80011e6:	f7ff f9c3 	bl	8000570 <getvalue>
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <rol+0x50>)
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 80011ec:	4912      	ldr	r1, [pc, #72]	; (8001238 <rol+0x54>)
    value = getvalue();
 80011ee:	8018      	strh	r0, [r3, #0]
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 80011f0:	780b      	ldrb	r3, [r1, #0]
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <rol+0x58>)
 80011fc:	b280      	uxth	r0, r0
   
    carrycalc(result);
 80011fe:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    result = (value << 1) | (cpustatus & FLAG_CARRY);
 8001202:	8010      	strh	r0, [r2, #0]
    zerocalc(result);
 8001204:	b2c2      	uxtb	r2, r0
    carrycalc(result);
 8001206:	bf14      	ite	ne
 8001208:	f043 0301 	orrne.w	r3, r3, #1
 800120c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001210:	b162      	cbz	r2, 800122c <rol+0x48>
 8001212:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001216:	0602      	lsls	r2, r0, #24
 8001218:	bf4c      	ite	mi
 800121a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800121e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001222:	700b      	strb	r3, [r1, #0]
   
    putvalue(result);
}
 8001224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    putvalue(result);
 8001228:	f7ff bb42 	b.w	80008b0 <putvalue>
    zerocalc(result);
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	e7f1      	b.n	8001216 <rol+0x32>
 8001232:	bf00      	nop
 8001234:	200080f4 	.word	0x200080f4
 8001238:	200080e0 	.word	0x200080e0
 800123c:	200080f0 	.word	0x200080f0

08001240 <ror>:

void ror() {
 8001240:	b510      	push	{r4, lr}
    value = getvalue();
 8001242:	f7ff f995 	bl	8000570 <getvalue>
 8001246:	4601      	mov	r1, r0
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <ror+0x50>)
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800124a:	4c12      	ldr	r4, [pc, #72]	; (8001294 <ror+0x54>)
    value = getvalue();
 800124c:	8018      	strh	r0, [r3, #0]
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 800124e:	7823      	ldrb	r3, [r4, #0]
   
    if (value & 1) setcarry();
 8001250:	07c9      	lsls	r1, r1, #31
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001252:	ea4f 12c3 	mov.w	r2, r3, lsl #7
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <ror+0x58>)
    if (value & 1) setcarry();
 800125e:	bf48      	it	mi
 8001260:	f043 0301 	orrmi.w	r3, r3, #1
    result = (value >> 1) | ((cpustatus & FLAG_CARRY) << 7);
 8001264:	8010      	strh	r0, [r2, #0]
        else clearcarry();
    zerocalc(result);
 8001266:	b2c2      	uxtb	r2, r0
        else clearcarry();
 8001268:	bf58      	it	pl
 800126a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 800126e:	b162      	cbz	r2, 800128a <ror+0x4a>
 8001270:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(result);
 8001274:	0602      	lsls	r2, r0, #24
 8001276:	bf4c      	ite	mi
 8001278:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 800127c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
 8001280:	7023      	strb	r3, [r4, #0]
   
    putvalue(result);
}
 8001282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    putvalue(result);
 8001286:	f7ff bb13 	b.w	80008b0 <putvalue>
    zerocalc(result);
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	e7f1      	b.n	8001274 <ror+0x34>
 8001290:	200080f4 	.word	0x200080f4
 8001294:	200080e0 	.word	0x200080e0
 8001298:	200080f0 	.word	0x200080f0

0800129c <rti>:

void rti() {
 800129c:	b508      	push	{r3, lr}
    cpustatus = pull8();
 800129e:	f7ff f9c9 	bl	8000634 <pull8>
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <rti+0x18>)
 80012a4:	7018      	strb	r0, [r3, #0]
    value = pull16();
 80012a6:	f7ff f9ab 	bl	8000600 <pull16>
 80012aa:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <rti+0x1c>)
 80012ac:	8018      	strh	r0, [r3, #0]
    pc = value;
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <rti+0x20>)
 80012b0:	8018      	strh	r0, [r3, #0]
}
 80012b2:	bd08      	pop	{r3, pc}
 80012b4:	200080e0 	.word	0x200080e0
 80012b8:	200080f4 	.word	0x200080f4
 80012bc:	200080ec 	.word	0x200080ec

080012c0 <rts>:

void rts() {
 80012c0:	b508      	push	{r3, lr}
    value = pull16();
 80012c2:	f7ff f99d 	bl	8000600 <pull16>
 80012c6:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <rts+0x14>)
 80012c8:	8018      	strh	r0, [r3, #0]
    pc = value + 1;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <rts+0x18>)
 80012cc:	3001      	adds	r0, #1
 80012ce:	8018      	strh	r0, [r3, #0]
}
 80012d0:	bd08      	pop	{r3, pc}
 80012d2:	bf00      	nop
 80012d4:	200080f4 	.word	0x200080f4
 80012d8:	200080ec 	.word	0x200080ec

080012dc <sbc>:

void sbc() {
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    value = getvalue() ^ 0x00FF;
 80012de:	f7ff f947 	bl	8000570 <getvalue>
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80012e2:	4d27      	ldr	r5, [pc, #156]	; (8001380 <sbc+0xa4>)
    value = getvalue() ^ 0x00FF;
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <sbc+0xa8>)
 80012e6:	f080 00ff 	eor.w	r0, r0, #255	; 0xff
 80012ea:	b280      	uxth	r0, r0
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80012ec:	4c26      	ldr	r4, [pc, #152]	; (8001388 <sbc+0xac>)
    value = getvalue() ^ 0x00FF;
 80012ee:	8018      	strh	r0, [r3, #0]
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 80012f0:	782b      	ldrb	r3, [r5, #0]
 80012f2:	7821      	ldrb	r1, [r4, #0]
 80012f4:	f003 0201 	and.w	r2, r3, #1
 80012f8:	440a      	add	r2, r1
 80012fa:	4e24      	ldr	r6, [pc, #144]	; (800138c <sbc+0xb0>)
 80012fc:	4402      	add	r2, r0
 80012fe:	b292      	uxth	r2, r2
   
    carrycalc(result);
 8001300:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    result = (uint16_t)a + value + (uint16_t)(cpustatus & FLAG_CARRY);
 8001304:	8032      	strh	r2, [r6, #0]
    zerocalc(result);
 8001306:	b2d6      	uxtb	r6, r2
    carrycalc(result);
 8001308:	bf14      	ite	ne
 800130a:	f043 0301 	orrne.w	r3, r3, #1
 800130e:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    zerocalc(result);
 8001312:	b1c6      	cbz	r6, 8001346 <sbc+0x6a>
 8001314:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    overflowcalc(result, a, value);
 8001318:	ea81 0602 	eor.w	r6, r1, r2
 800131c:	ea80 0702 	eor.w	r7, r0, r2
 8001320:	4630      	mov	r0, r6
 8001322:	4038      	ands	r0, r7
 8001324:	0607      	lsls	r7, r0, #24
 8001326:	bf4c      	ite	mi
 8001328:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800132c:	f003 03bf 	andpl.w	r3, r3, #191	; 0xbf
    signcalc(result);
 8001330:	0616      	lsls	r6, r2, #24
 8001332:	bf4c      	ite	mi
 8001334:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8001338:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f

    #ifndef NES_CPU
    if (cpustatus & FLAG_DECIMAL) {
 800133c:	0718      	lsls	r0, r3, #28
 800133e:	d405      	bmi.n	800134c <sbc+0x70>
 8001340:	702b      	strb	r3, [r5, #0]
        
        clockticks6502++;
    }
    #endif
   
    saveaccum(result);
 8001342:	7022      	strb	r2, [r4, #0]
}
 8001344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    zerocalc(result);
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	e7e5      	b.n	8001318 <sbc+0x3c>
        a -= 0x66;
 800134c:	f1a1 0066 	sub.w	r0, r1, #102	; 0x66
 8001350:	b2c6      	uxtb	r6, r0
        if ((a & 0x0F) > 0x09) {
 8001352:	f000 000f 	and.w	r0, r0, #15
 8001356:	2809      	cmp	r0, #9
            a += 0x06;
 8001358:	bf8a      	itet	hi
 800135a:	3960      	subhi	r1, #96	; 0x60
        a -= 0x66;
 800135c:	7026      	strbls	r6, [r4, #0]
            a += 0x06;
 800135e:	7021      	strbhi	r1, [r4, #0]
        if ((a & 0xF0) > 0x90) {
 8001360:	7821      	ldrb	r1, [r4, #0]
        clearcarry();
 8001362:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
        if ((a & 0xF0) > 0x90) {
 8001366:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800136a:	2990      	cmp	r1, #144	; 0x90
        clockticks6502++;
 800136c:	4908      	ldr	r1, [pc, #32]	; (8001390 <sbc+0xb4>)
        clearcarry();
 800136e:	702b      	strb	r3, [r5, #0]
            setcarry();
 8001370:	bf84      	itt	hi
 8001372:	f043 0301 	orrhi.w	r3, r3, #1
 8001376:	702b      	strbhi	r3, [r5, #0]
        clockticks6502++;
 8001378:	680b      	ldr	r3, [r1, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	600b      	str	r3, [r1, #0]
 800137e:	e7e0      	b.n	8001342 <sbc+0x66>
 8001380:	200080e0 	.word	0x200080e0
 8001384:	200080f4 	.word	0x200080f4
 8001388:	200080d9 	.word	0x200080d9
 800138c:	200080f0 	.word	0x200080f0
 8001390:	200080dc 	.word	0x200080dc

08001394 <sec>:

void sec() {
    setcarry();
 8001394:	4a02      	ldr	r2, [pc, #8]	; (80013a0 <sec+0xc>)
 8001396:	7813      	ldrb	r3, [r2, #0]
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	7013      	strb	r3, [r2, #0]
}
 800139e:	4770      	bx	lr
 80013a0:	200080e0 	.word	0x200080e0

080013a4 <sed>:

void sed() {
    setdecimal();
 80013a4:	4a02      	ldr	r2, [pc, #8]	; (80013b0 <sed+0xc>)
 80013a6:	7813      	ldrb	r3, [r2, #0]
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	7013      	strb	r3, [r2, #0]
}
 80013ae:	4770      	bx	lr
 80013b0:	200080e0 	.word	0x200080e0

080013b4 <sei>:

void sei() {
    setinterrupt();
 80013b4:	4a02      	ldr	r2, [pc, #8]	; (80013c0 <sei+0xc>)
 80013b6:	7813      	ldrb	r3, [r2, #0]
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	7013      	strb	r3, [r2, #0]
}
 80013be:	4770      	bx	lr
 80013c0:	200080e0 	.word	0x200080e0

080013c4 <sta>:

void sta() {
    putvalue(a);
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <sta+0x8>)
 80013c6:	7818      	ldrb	r0, [r3, #0]
 80013c8:	f7ff ba72 	b.w	80008b0 <putvalue>
 80013cc:	200080d9 	.word	0x200080d9

080013d0 <stx>:
}

void stx() {
    putvalue(x);
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <stx+0x8>)
 80013d2:	7818      	ldrb	r0, [r3, #0]
 80013d4:	f7ff ba6c 	b.w	80008b0 <putvalue>
 80013d8:	200080f6 	.word	0x200080f6

080013dc <sty>:
}

void sty() {
    putvalue(y);
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <sty+0x8>)
 80013de:	7818      	ldrb	r0, [r3, #0]
 80013e0:	f7ff ba66 	b.w	80008b0 <putvalue>
 80013e4:	200080f7 	.word	0x200080f7

080013e8 <tax>:
}

void tax() {
    x = a;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <tax+0x2c>)
   
    zerocalc(x);
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <tax+0x30>)
    x = a;
 80013ec:	7819      	ldrb	r1, [r3, #0]
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <tax+0x34>)
 80013f0:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 80013f2:	7813      	ldrb	r3, [r2, #0]
 80013f4:	b131      	cbz	r1, 8001404 <tax+0x1c>
 80013f6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 80013fa:	0609      	lsls	r1, r1, #24
 80013fc:	7013      	strb	r3, [r2, #0]
 80013fe:	d504      	bpl.n	800140a <tax+0x22>
 8001400:	f7ff b8d2 	b.w	80005a8 <dex.part.0>
    zerocalc(x);
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	e7f7      	b.n	80013fa <tax+0x12>
    signcalc(x);
 800140a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800140e:	7013      	strb	r3, [r2, #0]
}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200080d9 	.word	0x200080d9
 8001418:	200080e0 	.word	0x200080e0
 800141c:	200080f6 	.word	0x200080f6

08001420 <tay>:

void tay() {
    y = a;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <tay+0x2c>)
   
    zerocalc(y);
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <tay+0x30>)
    y = a;
 8001424:	7819      	ldrb	r1, [r3, #0]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <tay+0x34>)
 8001428:	7019      	strb	r1, [r3, #0]
    zerocalc(y);
 800142a:	7813      	ldrb	r3, [r2, #0]
 800142c:	b131      	cbz	r1, 800143c <tay+0x1c>
 800142e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(y);
 8001432:	0609      	lsls	r1, r1, #24
 8001434:	7013      	strb	r3, [r2, #0]
 8001436:	d504      	bpl.n	8001442 <tay+0x22>
 8001438:	f7ff b8b6 	b.w	80005a8 <dex.part.0>
    zerocalc(y);
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	e7f7      	b.n	8001432 <tay+0x12>
    signcalc(y);
 8001442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001446:	7013      	strb	r3, [r2, #0]
}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200080d9 	.word	0x200080d9
 8001450:	200080e0 	.word	0x200080e0
 8001454:	200080f7 	.word	0x200080f7

08001458 <tsx>:

void tsx() {
    x = sp;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <tsx+0x2c>)
   
    zerocalc(x);
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <tsx+0x30>)
    x = sp;
 800145c:	7819      	ldrb	r1, [r3, #0]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <tsx+0x34>)
 8001460:	7019      	strb	r1, [r3, #0]
    zerocalc(x);
 8001462:	7813      	ldrb	r3, [r2, #0]
 8001464:	b131      	cbz	r1, 8001474 <tsx+0x1c>
 8001466:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(x);
 800146a:	0609      	lsls	r1, r1, #24
 800146c:	7013      	strb	r3, [r2, #0]
 800146e:	d504      	bpl.n	800147a <tsx+0x22>
 8001470:	f7ff b89a 	b.w	80005a8 <dex.part.0>
    zerocalc(x);
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	e7f7      	b.n	800146a <tsx+0x12>
    signcalc(x);
 800147a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800147e:	7013      	strb	r3, [r2, #0]
}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200080f2 	.word	0x200080f2
 8001488:	200080e0 	.word	0x200080e0
 800148c:	200080f6 	.word	0x200080f6

08001490 <txa>:

void txa() {
    a = x;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <txa+0x2c>)
   
    zerocalc(a);
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <txa+0x30>)
    a = x;
 8001494:	7819      	ldrb	r1, [r3, #0]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <txa+0x34>)
 8001498:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 800149a:	7813      	ldrb	r3, [r2, #0]
 800149c:	b131      	cbz	r1, 80014ac <txa+0x1c>
 800149e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80014a2:	0609      	lsls	r1, r1, #24
 80014a4:	7013      	strb	r3, [r2, #0]
 80014a6:	d504      	bpl.n	80014b2 <txa+0x22>
 80014a8:	f7ff b87e 	b.w	80005a8 <dex.part.0>
    zerocalc(a);
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	e7f7      	b.n	80014a2 <txa+0x12>
    signcalc(a);
 80014b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014b6:	7013      	strb	r3, [r2, #0]
}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200080f6 	.word	0x200080f6
 80014c0:	200080e0 	.word	0x200080e0
 80014c4:	200080d9 	.word	0x200080d9

080014c8 <txs>:

void txs() {
    sp = x;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <txs+0xc>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <txs+0x10>)
 80014ce:	701a      	strb	r2, [r3, #0]
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200080f6 	.word	0x200080f6
 80014d8:	200080f2 	.word	0x200080f2

080014dc <tya>:

void tya() {
    a = y;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <tya+0x2c>)
   
    zerocalc(a);
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <tya+0x30>)
    a = y;
 80014e0:	7819      	ldrb	r1, [r3, #0]
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <tya+0x34>)
 80014e4:	7019      	strb	r1, [r3, #0]
    zerocalc(a);
 80014e6:	7813      	ldrb	r3, [r2, #0]
 80014e8:	b131      	cbz	r1, 80014f8 <tya+0x1c>
 80014ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    signcalc(a);
 80014ee:	0609      	lsls	r1, r1, #24
 80014f0:	7013      	strb	r3, [r2, #0]
 80014f2:	d504      	bpl.n	80014fe <tya+0x22>
 80014f4:	f7ff b858 	b.w	80005a8 <dex.part.0>
    zerocalc(a);
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	e7f7      	b.n	80014ee <tya+0x12>
    signcalc(a);
 80014fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001502:	7013      	strb	r3, [r2, #0]
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200080f7 	.word	0x200080f7
 800150c:	200080e0 	.word	0x200080e0
 8001510:	200080d9 	.word	0x200080d9

08001514 <exec6502>:
/* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,    6,  /* E */
/* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,    7   /* F */
};
#endif

void exec6502(int32_t tickcount) {
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4604      	mov	r4, r0
   
  while (clockgoal6502 > 0) {
#else
  while (tickcount--) {
#endif
    opcode = read6502(pc++);
 8001518:	4e01      	ldr	r6, [pc, #4]	; (8001520 <exec6502+0xc>)
    cpustatus |= FLAG_CONSTANT;

    useaccum = 0;
 800151a:	4d02      	ldr	r5, [pc, #8]	; (8001524 <exec6502+0x10>)
  while (tickcount--) {
 800151c:	b924      	cbnz	r4, 8001528 <exec6502+0x14>
#ifdef USE_TIMING
      clockgoal6502 -= (int32_t)ticktable[opcode];
#endif
      instructions++;
  }
}
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	200080ec 	.word	0x200080ec
 8001524:	200080f3 	.word	0x200080f3
    opcode = read6502(pc++);
 8001528:	8830      	ldrh	r0, [r6, #0]
 800152a:	1c43      	adds	r3, r0, #1
 800152c:	8033      	strh	r3, [r6, #0]
 800152e:	f7fe ff4b 	bl	80003c8 <read6502>
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <exec6502+0x34>)
    cpustatus |= FLAG_CONSTANT;
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <exec6502+0x38>)
    opcode = read6502(pc++);
 8001536:	7018      	strb	r0, [r3, #0]
    cpustatus |= FLAG_CONSTANT;
 8001538:	7813      	ldrb	r3, [r2, #0]
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	7013      	strb	r3, [r2, #0]
    useaccum = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	702b      	strb	r3, [r5, #0]
 8001544:	e004      	b.n	8001550 <exec6502+0x3c>
 8001546:	bf00      	nop
 8001548:	200080ea 	.word	0x200080ea
 800154c:	200080e0 	.word	0x200080e0
		switch (opcode) {
 8001550:	28fe      	cmp	r0, #254	; 0xfe
 8001552:	f200 8103 	bhi.w	800175c <exec6502+0x248>
 8001556:	e8df f010 	tbh	[pc, r0, lsl #1]
 800155a:	00ff      	.short	0x00ff
 800155c:	01010107 	.word	0x01010107
 8001560:	01010101 	.word	0x01010101
 8001564:	0111010c 	.word	0x0111010c
 8001568:	01160101 	.word	0x01160101
 800156c:	011e0119 	.word	0x011e0119
 8001570:	01010101 	.word	0x01010101
 8001574:	01280123 	.word	0x01280123
 8001578:	012d0101 	.word	0x012d0101
 800157c:	01010132 	.word	0x01010132
 8001580:	01010101 	.word	0x01010101
 8001584:	013c0137 	.word	0x013c0137
 8001588:	01410101 	.word	0x01410101
 800158c:	01010144 	.word	0x01010144
 8001590:	01010101 	.word	0x01010101
 8001594:	014e0149 	.word	0x014e0149
 8001598:	01530101 	.word	0x01530101
 800159c:	01010158 	.word	0x01010158
 80015a0:	015d0101 	.word	0x015d0101
 80015a4:	01670162 	.word	0x01670162
 80015a8:	016c0101 	.word	0x016c0101
 80015ac:	0174016f 	.word	0x0174016f
 80015b0:	01790101 	.word	0x01790101
 80015b4:	0183017e 	.word	0x0183017e
 80015b8:	01880101 	.word	0x01880101
 80015bc:	0101018d 	.word	0x0101018d
 80015c0:	01010101 	.word	0x01010101
 80015c4:	01970192 	.word	0x01970192
 80015c8:	019c0101 	.word	0x019c0101
 80015cc:	0101019f 	.word	0x0101019f
 80015d0:	01010101 	.word	0x01010101
 80015d4:	01a901a4 	.word	0x01a901a4
 80015d8:	01ae0101 	.word	0x01ae0101
 80015dc:	010101b1 	.word	0x010101b1
 80015e0:	01010101 	.word	0x01010101
 80015e4:	01bb01b6 	.word	0x01bb01b6
 80015e8:	01c00101 	.word	0x01c00101
 80015ec:	01c801c3 	.word	0x01c801c3
 80015f0:	01cd0101 	.word	0x01cd0101
 80015f4:	01d701d2 	.word	0x01d701d2
 80015f8:	01dc0101 	.word	0x01dc0101
 80015fc:	010101e1 	.word	0x010101e1
 8001600:	01010101 	.word	0x01010101
 8001604:	01eb01e6 	.word	0x01eb01e6
 8001608:	01f00101 	.word	0x01f00101
 800160c:	010101f3 	.word	0x010101f3
 8001610:	01010101 	.word	0x01010101
 8001614:	01fd01f8 	.word	0x01fd01f8
 8001618:	02020101 	.word	0x02020101
 800161c:	01010205 	.word	0x01010205
 8001620:	01010101 	.word	0x01010101
 8001624:	020f020a 	.word	0x020f020a
 8001628:	02140101 	.word	0x02140101
 800162c:	021c0217 	.word	0x021c0217
 8001630:	02210101 	.word	0x02210101
 8001634:	022b0226 	.word	0x022b0226
 8001638:	02300101 	.word	0x02300101
 800163c:	01010235 	.word	0x01010235
 8001640:	01010101 	.word	0x01010101
 8001644:	023f023a 	.word	0x023f023a
 8001648:	02440101 	.word	0x02440101
 800164c:	01010247 	.word	0x01010247
 8001650:	01010101 	.word	0x01010101
 8001654:	0251024c 	.word	0x0251024c
 8001658:	01010101 	.word	0x01010101
 800165c:	01010256 	.word	0x01010256
 8001660:	025b0101 	.word	0x025b0101
 8001664:	02650260 	.word	0x02650260
 8001668:	026a0101 	.word	0x026a0101
 800166c:	026d0101 	.word	0x026d0101
 8001670:	02700101 	.word	0x02700101
 8001674:	027a0275 	.word	0x027a0275
 8001678:	027f0101 	.word	0x027f0101
 800167c:	01010284 	.word	0x01010284
 8001680:	02890101 	.word	0x02890101
 8001684:	0293028e 	.word	0x0293028e
 8001688:	02980101 	.word	0x02980101
 800168c:	02a3029b 	.word	0x02a3029b
 8001690:	01010101 	.word	0x01010101
 8001694:	010102a6 	.word	0x010102a6
 8001698:	02ab0101 	.word	0x02ab0101
 800169c:	02b502b0 	.word	0x02b502b0
 80016a0:	02ba0101 	.word	0x02ba0101
 80016a4:	02c402bf 	.word	0x02c402bf
 80016a8:	02c90101 	.word	0x02c90101
 80016ac:	02d102cc 	.word	0x02d102cc
 80016b0:	02d40101 	.word	0x02d40101
 80016b4:	02de02d9 	.word	0x02de02d9
 80016b8:	02e30101 	.word	0x02e30101
 80016bc:	010102e8 	.word	0x010102e8
 80016c0:	02ed0101 	.word	0x02ed0101
 80016c4:	02f702f2 	.word	0x02f702f2
 80016c8:	02fc0101 	.word	0x02fc0101
 80016cc:	030402ff 	.word	0x030402ff
 80016d0:	03070101 	.word	0x03070101
 80016d4:	0311030c 	.word	0x0311030c
 80016d8:	03160101 	.word	0x03160101
 80016dc:	0101031b 	.word	0x0101031b
 80016e0:	03200101 	.word	0x03200101
 80016e4:	032a0325 	.word	0x032a0325
 80016e8:	032f0101 	.word	0x032f0101
 80016ec:	03370332 	.word	0x03370332
 80016f0:	033a0101 	.word	0x033a0101
 80016f4:	0344033f 	.word	0x0344033f
 80016f8:	03490101 	.word	0x03490101
 80016fc:	0101034e 	.word	0x0101034e
 8001700:	01010101 	.word	0x01010101
 8001704:	03580353 	.word	0x03580353
 8001708:	035d0101 	.word	0x035d0101
 800170c:	01010360 	.word	0x01010360
 8001710:	01010101 	.word	0x01010101
 8001714:	036a0365 	.word	0x036a0365
 8001718:	036f0101 	.word	0x036f0101
 800171c:	01010374 	.word	0x01010374
 8001720:	03790101 	.word	0x03790101
 8001724:	0383037e 	.word	0x0383037e
 8001728:	03880101 	.word	0x03880101
 800172c:	0101038b 	.word	0x0101038b
 8001730:	0390038b 	.word	0x0390038b
 8001734:	039a0395 	.word	0x039a0395
 8001738:	039f0101 	.word	0x039f0101
 800173c:	010103a4 	.word	0x010103a4
 8001740:	01010101 	.word	0x01010101
 8001744:	03ae03a9 	.word	0x03ae03a9
 8001748:	03b30101 	.word	0x03b30101
 800174c:	010103b6 	.word	0x010103b6
 8001750:	01010101 	.word	0x01010101
 8001754:	03c003bb 	.word	0x03c003bb
			brk();
 8001758:	f7ff fa56 	bl	8000c08 <brk>
      instructions++;
 800175c:	4acf      	ldr	r2, [pc, #828]	; (8001a9c <exec6502+0x588>)
 800175e:	3c01      	subs	r4, #1
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e6d9      	b.n	800151c <exec6502+0x8>
			indx();
 8001768:	f7ff f866 	bl	8000838 <indx>
			ora();
 800176c:	f7ff fce0 	bl	8001130 <ora>
			break;
 8001770:	e7f4      	b.n	800175c <exec6502+0x248>
			zp();
 8001772:	f7fe ffa1 	bl	80006b8 <zp>
			ora();
 8001776:	f7ff fcdb 	bl	8001130 <ora>
			break;
 800177a:	e7ef      	b.n	800175c <exec6502+0x248>
			zp();
 800177c:	f7fe ff9c 	bl	80006b8 <zp>
			asl();
 8001780:	f7ff f926 	bl	80009d0 <asl>
			break;
 8001784:	e7ea      	b.n	800175c <exec6502+0x248>
			php();
 8001786:	f7ff fcff 	bl	8001188 <php>
			break;
 800178a:	e7e7      	b.n	800175c <exec6502+0x248>
			imm();
 800178c:	f7fe ff88 	bl	80006a0 <imm>
			ora();
 8001790:	f7ff fcce 	bl	8001130 <ora>
			break;
 8001794:	e7e2      	b.n	800175c <exec6502+0x248>
  useaccum = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	702b      	strb	r3, [r5, #0]
			asl();
 800179a:	f7ff f919 	bl	80009d0 <asl>
			break;
 800179e:	e7dd      	b.n	800175c <exec6502+0x248>
			abso();
 80017a0:	f7fe ffd4 	bl	800074c <abso>
			ora();
 80017a4:	f7ff fcc4 	bl	8001130 <ora>
			break;
 80017a8:	e7d8      	b.n	800175c <exec6502+0x248>
			abso();
 80017aa:	f7fe ffcf 	bl	800074c <abso>
			asl();
 80017ae:	f7ff f90f 	bl	80009d0 <asl>
			break;
 80017b2:	e7d3      	b.n	800175c <exec6502+0x248>
			rel();
 80017b4:	f7fe ffb6 	bl	8000724 <rel>
			bpl();
 80017b8:	f7ff fa02 	bl	8000bc0 <bpl>
			break;
 80017bc:	e7ce      	b.n	800175c <exec6502+0x248>
			indy();
 80017be:	f7ff f859 	bl	8000874 <indy>
			ora();
 80017c2:	f7ff fcb5 	bl	8001130 <ora>
			break;
 80017c6:	e7c9      	b.n	800175c <exec6502+0x248>
			zpx();
 80017c8:	f7fe ff84 	bl	80006d4 <zpx>
			ora();
 80017cc:	f7ff fcb0 	bl	8001130 <ora>
			break;
 80017d0:	e7c4      	b.n	800175c <exec6502+0x248>
			zpx();
 80017d2:	f7fe ff7f 	bl	80006d4 <zpx>
			asl();
 80017d6:	f7ff f8fb 	bl	80009d0 <asl>
			break;
 80017da:	e7bf      	b.n	800175c <exec6502+0x248>
			clc();
 80017dc:	f7ff fa7c 	bl	8000cd8 <clc>
			break;
 80017e0:	e7bc      	b.n	800175c <exec6502+0x248>
			absy();
 80017e2:	f7fe ffe7 	bl	80007b4 <absy>
			ora();
 80017e6:	f7ff fca3 	bl	8001130 <ora>
			break;
 80017ea:	e7b7      	b.n	800175c <exec6502+0x248>
			absx();
 80017ec:	f7fe ffc6 	bl	800077c <absx>
			ora();
 80017f0:	f7ff fc9e 	bl	8001130 <ora>
			break;
 80017f4:	e7b2      	b.n	800175c <exec6502+0x248>
			absx();
 80017f6:	f7fe ffc1 	bl	800077c <absx>
			asl();
 80017fa:	f7ff f8e9 	bl	80009d0 <asl>
			break;
 80017fe:	e7ad      	b.n	800175c <exec6502+0x248>
			abso();
 8001800:	f7fe ffa4 	bl	800074c <abso>
			jsr();
 8001804:	f7ff fbf2 	bl	8000fec <jsr>
			break;
 8001808:	e7a8      	b.n	800175c <exec6502+0x248>
			indx();
 800180a:	f7ff f815 	bl	8000838 <indx>
			op_and();
 800180e:	f7ff f8b7 	bl	8000980 <op_and>
			break;
 8001812:	e7a3      	b.n	800175c <exec6502+0x248>
			zp();
 8001814:	f7fe ff50 	bl	80006b8 <zp>
			op_bit();
 8001818:	f7ff f96a 	bl	8000af0 <op_bit>
			break;
 800181c:	e79e      	b.n	800175c <exec6502+0x248>
			zp();
 800181e:	f7fe ff4b 	bl	80006b8 <zp>
			op_and();
 8001822:	f7ff f8ad 	bl	8000980 <op_and>
			break;
 8001826:	e799      	b.n	800175c <exec6502+0x248>
			zp();
 8001828:	f7fe ff46 	bl	80006b8 <zp>
			rol();
 800182c:	f7ff fcda 	bl	80011e4 <rol>
			break;
 8001830:	e794      	b.n	800175c <exec6502+0x248>
			plp();
 8001832:	f7ff fccd 	bl	80011d0 <plp>
			break;
 8001836:	e791      	b.n	800175c <exec6502+0x248>
			imm();
 8001838:	f7fe ff32 	bl	80006a0 <imm>
			op_and();
 800183c:	f7ff f8a0 	bl	8000980 <op_and>
			break;
 8001840:	e78c      	b.n	800175c <exec6502+0x248>
  useaccum = 1;
 8001842:	2301      	movs	r3, #1
 8001844:	702b      	strb	r3, [r5, #0]
			rol();
 8001846:	f7ff fccd 	bl	80011e4 <rol>
			break;
 800184a:	e787      	b.n	800175c <exec6502+0x248>
			abso();
 800184c:	f7fe ff7e 	bl	800074c <abso>
			op_bit();
 8001850:	f7ff f94e 	bl	8000af0 <op_bit>
			break;
 8001854:	e782      	b.n	800175c <exec6502+0x248>
			abso();
 8001856:	f7fe ff79 	bl	800074c <abso>
			op_and();
 800185a:	f7ff f891 	bl	8000980 <op_and>
			break;
 800185e:	e77d      	b.n	800175c <exec6502+0x248>
			abso();
 8001860:	f7fe ff74 	bl	800074c <abso>
			rol();
 8001864:	f7ff fcbe 	bl	80011e4 <rol>
			break;
 8001868:	e778      	b.n	800175c <exec6502+0x248>
			rel();
 800186a:	f7fe ff5b 	bl	8000724 <rel>
			bmi();
 800186e:	f7ff f961 	bl	8000b34 <bmi>
			break;
 8001872:	e773      	b.n	800175c <exec6502+0x248>
			indy();
 8001874:	f7fe fffe 	bl	8000874 <indy>
			op_and();
 8001878:	f7ff f882 	bl	8000980 <op_and>
			break;
 800187c:	e76e      	b.n	800175c <exec6502+0x248>
			zpx();
 800187e:	f7fe ff29 	bl	80006d4 <zpx>
			op_and();
 8001882:	f7ff f87d 	bl	8000980 <op_and>
			break;
 8001886:	e769      	b.n	800175c <exec6502+0x248>
			zpx();
 8001888:	f7fe ff24 	bl	80006d4 <zpx>
			rol();
 800188c:	f7ff fcaa 	bl	80011e4 <rol>
			break;
 8001890:	e764      	b.n	800175c <exec6502+0x248>
			sec();
 8001892:	f7ff fd7f 	bl	8001394 <sec>
			break;
 8001896:	e761      	b.n	800175c <exec6502+0x248>
			absy();
 8001898:	f7fe ff8c 	bl	80007b4 <absy>
			op_and();
 800189c:	f7ff f870 	bl	8000980 <op_and>
			break;
 80018a0:	e75c      	b.n	800175c <exec6502+0x248>
			absx();
 80018a2:	f7fe ff6b 	bl	800077c <absx>
			op_and();
 80018a6:	f7ff f86b 	bl	8000980 <op_and>
			break;
 80018aa:	e757      	b.n	800175c <exec6502+0x248>
			absx();
 80018ac:	f7fe ff66 	bl	800077c <absx>
			rol();
 80018b0:	f7ff fc98 	bl	80011e4 <rol>
			break;
 80018b4:	e752      	b.n	800175c <exec6502+0x248>
			rti();
 80018b6:	f7ff fcf1 	bl	800129c <rti>
			break;
 80018ba:	e74f      	b.n	800175c <exec6502+0x248>
			indx();
 80018bc:	f7fe ffbc 	bl	8000838 <indx>
			eor();
 80018c0:	f7ff fb0c 	bl	8000edc <eor>
			break;
 80018c4:	e74a      	b.n	800175c <exec6502+0x248>
			zp();
 80018c6:	f7fe fef7 	bl	80006b8 <zp>
			eor();
 80018ca:	f7ff fb07 	bl	8000edc <eor>
			break;
 80018ce:	e745      	b.n	800175c <exec6502+0x248>
			zp();
 80018d0:	f7fe fef2 	bl	80006b8 <zp>
			lsr();
 80018d4:	f7ff fc00 	bl	80010d8 <lsr>
			break;
 80018d8:	e740      	b.n	800175c <exec6502+0x248>
			pha();
 80018da:	f7ff fc4f 	bl	800117c <pha>
			break;
 80018de:	e73d      	b.n	800175c <exec6502+0x248>
			imm();
 80018e0:	f7fe fede 	bl	80006a0 <imm>
			eor();
 80018e4:	f7ff fafa 	bl	8000edc <eor>
			break;
 80018e8:	e738      	b.n	800175c <exec6502+0x248>
  useaccum = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	702b      	strb	r3, [r5, #0]
			lsr();
 80018ee:	f7ff fbf3 	bl	80010d8 <lsr>
			break;
 80018f2:	e733      	b.n	800175c <exec6502+0x248>
			abso();
 80018f4:	f7fe ff2a 	bl	800074c <abso>
			jmp();
 80018f8:	f7ff fb6e 	bl	8000fd8 <jmp>
			break;
 80018fc:	e72e      	b.n	800175c <exec6502+0x248>
			abso();
 80018fe:	f7fe ff25 	bl	800074c <abso>
			eor();
 8001902:	f7ff faeb 	bl	8000edc <eor>
			break;
 8001906:	e729      	b.n	800175c <exec6502+0x248>
			abso();
 8001908:	f7fe ff20 	bl	800074c <abso>
			lsr();
 800190c:	f7ff fbe4 	bl	80010d8 <lsr>
			break;
 8001910:	e724      	b.n	800175c <exec6502+0x248>
			rel();
 8001912:	f7fe ff07 	bl	8000724 <rel>
			bvc();
 8001916:	f7ff f99b 	bl	8000c50 <bvc>
			break;
 800191a:	e71f      	b.n	800175c <exec6502+0x248>
			indy();
 800191c:	f7fe ffaa 	bl	8000874 <indy>
			eor();
 8001920:	f7ff fadc 	bl	8000edc <eor>
			break;
 8001924:	e71a      	b.n	800175c <exec6502+0x248>
			zpx();
 8001926:	f7fe fed5 	bl	80006d4 <zpx>
			eor();
 800192a:	f7ff fad7 	bl	8000edc <eor>
			break;
 800192e:	e715      	b.n	800175c <exec6502+0x248>
			zpx();
 8001930:	f7fe fed0 	bl	80006d4 <zpx>
			lsr();
 8001934:	f7ff fbd0 	bl	80010d8 <lsr>
			break;
 8001938:	e710      	b.n	800175c <exec6502+0x248>
			cli();
 800193a:	f7ff f9dd 	bl	8000cf8 <cli>
			break;
 800193e:	e70d      	b.n	800175c <exec6502+0x248>
			absy();
 8001940:	f7fe ff38 	bl	80007b4 <absy>
			eor();
 8001944:	f7ff faca 	bl	8000edc <eor>
			break;
 8001948:	e708      	b.n	800175c <exec6502+0x248>
			absx();
 800194a:	f7fe ff17 	bl	800077c <absx>
			eor();
 800194e:	f7ff fac5 	bl	8000edc <eor>
			break;
 8001952:	e703      	b.n	800175c <exec6502+0x248>
			absx();
 8001954:	f7fe ff12 	bl	800077c <absx>
			lsr();
 8001958:	f7ff fbbe 	bl	80010d8 <lsr>
			break;
 800195c:	e6fe      	b.n	800175c <exec6502+0x248>
			rts();
 800195e:	f7ff fcaf 	bl	80012c0 <rts>
			break;
 8001962:	e6fb      	b.n	800175c <exec6502+0x248>
			indx();
 8001964:	f7fe ff68 	bl	8000838 <indx>
			adc();
 8001968:	f7fe ffb4 	bl	80008d4 <adc>
			break;
 800196c:	e6f6      	b.n	800175c <exec6502+0x248>
			zp();
 800196e:	f7fe fea3 	bl	80006b8 <zp>
			adc();
 8001972:	f7fe ffaf 	bl	80008d4 <adc>
			break;
 8001976:	e6f1      	b.n	800175c <exec6502+0x248>
			zp();
 8001978:	f7fe fe9e 	bl	80006b8 <zp>
			ror();
 800197c:	f7ff fc60 	bl	8001240 <ror>
			break;
 8001980:	e6ec      	b.n	800175c <exec6502+0x248>
			pla();
 8001982:	f7ff fc09 	bl	8001198 <pla>
			break;
 8001986:	e6e9      	b.n	800175c <exec6502+0x248>
			imm();
 8001988:	f7fe fe8a 	bl	80006a0 <imm>
			adc();
 800198c:	f7fe ffa2 	bl	80008d4 <adc>
			break;
 8001990:	e6e4      	b.n	800175c <exec6502+0x248>
  useaccum = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	702b      	strb	r3, [r5, #0]
			ror();
 8001996:	f7ff fc53 	bl	8001240 <ror>
			break;
 800199a:	e6df      	b.n	800175c <exec6502+0x248>
			ind();
 800199c:	f7fe ff26 	bl	80007ec <ind>
			jmp();
 80019a0:	f7ff fb1a 	bl	8000fd8 <jmp>
			break;
 80019a4:	e6da      	b.n	800175c <exec6502+0x248>
			abso();
 80019a6:	f7fe fed1 	bl	800074c <abso>
			adc();
 80019aa:	f7fe ff93 	bl	80008d4 <adc>
			break;
 80019ae:	e6d5      	b.n	800175c <exec6502+0x248>
			abso();
 80019b0:	f7fe fecc 	bl	800074c <abso>
			ror();
 80019b4:	f7ff fc44 	bl	8001240 <ror>
			break;
 80019b8:	e6d0      	b.n	800175c <exec6502+0x248>
			rel();
 80019ba:	f7fe feb3 	bl	8000724 <rel>
			bvs();
 80019be:	f7ff f969 	bl	8000c94 <bvs>
			break;
 80019c2:	e6cb      	b.n	800175c <exec6502+0x248>
			indy();
 80019c4:	f7fe ff56 	bl	8000874 <indy>
			adc();
 80019c8:	f7fe ff84 	bl	80008d4 <adc>
			break;
 80019cc:	e6c6      	b.n	800175c <exec6502+0x248>
			zpx();
 80019ce:	f7fe fe81 	bl	80006d4 <zpx>
			adc();
 80019d2:	f7fe ff7f 	bl	80008d4 <adc>
			break;
 80019d6:	e6c1      	b.n	800175c <exec6502+0x248>
			zpx();
 80019d8:	f7fe fe7c 	bl	80006d4 <zpx>
			ror();
 80019dc:	f7ff fc30 	bl	8001240 <ror>
			break;
 80019e0:	e6bc      	b.n	800175c <exec6502+0x248>
			sei();
 80019e2:	f7ff fce7 	bl	80013b4 <sei>
			break;
 80019e6:	e6b9      	b.n	800175c <exec6502+0x248>
			absy();
 80019e8:	f7fe fee4 	bl	80007b4 <absy>
			adc();
 80019ec:	f7fe ff72 	bl	80008d4 <adc>
			break;
 80019f0:	e6b4      	b.n	800175c <exec6502+0x248>
			absx();
 80019f2:	f7fe fec3 	bl	800077c <absx>
			adc();
 80019f6:	f7fe ff6d 	bl	80008d4 <adc>
			break;
 80019fa:	e6af      	b.n	800175c <exec6502+0x248>
			absx();
 80019fc:	f7fe febe 	bl	800077c <absx>
			ror();
 8001a00:	f7ff fc1e 	bl	8001240 <ror>
			break;
 8001a04:	e6aa      	b.n	800175c <exec6502+0x248>
			indx();
 8001a06:	f7fe ff17 	bl	8000838 <indx>
			sta();
 8001a0a:	f7ff fcdb 	bl	80013c4 <sta>
			break;
 8001a0e:	e6a5      	b.n	800175c <exec6502+0x248>
			zp();
 8001a10:	f7fe fe52 	bl	80006b8 <zp>
			sty();
 8001a14:	f7ff fce2 	bl	80013dc <sty>
			break;
 8001a18:	e6a0      	b.n	800175c <exec6502+0x248>
			zp();
 8001a1a:	f7fe fe4d 	bl	80006b8 <zp>
			sta();
 8001a1e:	f7ff fcd1 	bl	80013c4 <sta>
			break;
 8001a22:	e69b      	b.n	800175c <exec6502+0x248>
			zp();
 8001a24:	f7fe fe48 	bl	80006b8 <zp>
			stx();
 8001a28:	f7ff fcd2 	bl	80013d0 <stx>
			break;
 8001a2c:	e696      	b.n	800175c <exec6502+0x248>
			dey();
 8001a2e:	f7ff fa3b 	bl	8000ea8 <dey>
			break;
 8001a32:	e693      	b.n	800175c <exec6502+0x248>
			txa();
 8001a34:	f7ff fd2c 	bl	8001490 <txa>
			break;
 8001a38:	e690      	b.n	800175c <exec6502+0x248>
			abso();
 8001a3a:	f7fe fe87 	bl	800074c <abso>
			sty();
 8001a3e:	f7ff fccd 	bl	80013dc <sty>
			break;
 8001a42:	e68b      	b.n	800175c <exec6502+0x248>
			abso();
 8001a44:	f7fe fe82 	bl	800074c <abso>
			sta();
 8001a48:	f7ff fcbc 	bl	80013c4 <sta>
			break;
 8001a4c:	e686      	b.n	800175c <exec6502+0x248>
			abso();
 8001a4e:	f7fe fe7d 	bl	800074c <abso>
			stx();
 8001a52:	f7ff fcbd 	bl	80013d0 <stx>
			break;
 8001a56:	e681      	b.n	800175c <exec6502+0x248>
			rel();
 8001a58:	f7fe fe64 	bl	8000724 <rel>
			bcc();
 8001a5c:	f7fe ffe2 	bl	8000a24 <bcc>
			break;
 8001a60:	e67c      	b.n	800175c <exec6502+0x248>
			indy();
 8001a62:	f7fe ff07 	bl	8000874 <indy>
			sta();
 8001a66:	f7ff fcad 	bl	80013c4 <sta>
			break;
 8001a6a:	e677      	b.n	800175c <exec6502+0x248>
			zpx();
 8001a6c:	f7fe fe32 	bl	80006d4 <zpx>
			sty();
 8001a70:	f7ff fcb4 	bl	80013dc <sty>
			break;
 8001a74:	e672      	b.n	800175c <exec6502+0x248>
			zpx();
 8001a76:	f7fe fe2d 	bl	80006d4 <zpx>
			sta();
 8001a7a:	f7ff fca3 	bl	80013c4 <sta>
			break;
 8001a7e:	e66d      	b.n	800175c <exec6502+0x248>
			zpy();
 8001a80:	f7fe fe3c 	bl	80006fc <zpy>
			stx();
 8001a84:	f7ff fca4 	bl	80013d0 <stx>
			break;
 8001a88:	e668      	b.n	800175c <exec6502+0x248>
			tya();
 8001a8a:	f7ff fd27 	bl	80014dc <tya>
			break;
 8001a8e:	e665      	b.n	800175c <exec6502+0x248>
			absy();
 8001a90:	f7fe fe90 	bl	80007b4 <absy>
			sta();
 8001a94:	f7ff fc96 	bl	80013c4 <sta>
			break;
 8001a98:	e660      	b.n	800175c <exec6502+0x248>
 8001a9a:	bf00      	nop
 8001a9c:	200080e4 	.word	0x200080e4
			txs();
 8001aa0:	f7ff fd12 	bl	80014c8 <txs>
			break;
 8001aa4:	e65a      	b.n	800175c <exec6502+0x248>
			absx();
 8001aa6:	f7fe fe69 	bl	800077c <absx>
			sta();
 8001aaa:	f7ff fc8b 	bl	80013c4 <sta>
			break;
 8001aae:	e655      	b.n	800175c <exec6502+0x248>
			imm();
 8001ab0:	f7fe fdf6 	bl	80006a0 <imm>
			ldy();
 8001ab4:	f7ff faee 	bl	8001094 <ldy>
			break;
 8001ab8:	e650      	b.n	800175c <exec6502+0x248>
			indx();
 8001aba:	f7fe febd 	bl	8000838 <indx>
			lda();
 8001abe:	f7ff faa5 	bl	800100c <lda>
			break;
 8001ac2:	e64b      	b.n	800175c <exec6502+0x248>
			imm();
 8001ac4:	f7fe fdec 	bl	80006a0 <imm>
			ldx();
 8001ac8:	f7ff fac2 	bl	8001050 <ldx>
			break;
 8001acc:	e646      	b.n	800175c <exec6502+0x248>
			zp();
 8001ace:	f7fe fdf3 	bl	80006b8 <zp>
			ldy();
 8001ad2:	f7ff fadf 	bl	8001094 <ldy>
			break;
 8001ad6:	e641      	b.n	800175c <exec6502+0x248>
			zp();
 8001ad8:	f7fe fdee 	bl	80006b8 <zp>
			lda();
 8001adc:	f7ff fa96 	bl	800100c <lda>
			break;
 8001ae0:	e63c      	b.n	800175c <exec6502+0x248>
			zp();
 8001ae2:	f7fe fde9 	bl	80006b8 <zp>
			ldx();
 8001ae6:	f7ff fab3 	bl	8001050 <ldx>
			break;
 8001aea:	e637      	b.n	800175c <exec6502+0x248>
			tay();
 8001aec:	f7ff fc98 	bl	8001420 <tay>
			break;
 8001af0:	e634      	b.n	800175c <exec6502+0x248>
			imm();
 8001af2:	f7fe fdd5 	bl	80006a0 <imm>
			lda();
 8001af6:	f7ff fa89 	bl	800100c <lda>
			break;
 8001afa:	e62f      	b.n	800175c <exec6502+0x248>
			tax();
 8001afc:	f7ff fc74 	bl	80013e8 <tax>
			break;
 8001b00:	e62c      	b.n	800175c <exec6502+0x248>
			abso();
 8001b02:	f7fe fe23 	bl	800074c <abso>
			ldy();
 8001b06:	f7ff fac5 	bl	8001094 <ldy>
			break;
 8001b0a:	e627      	b.n	800175c <exec6502+0x248>
			abso();
 8001b0c:	f7fe fe1e 	bl	800074c <abso>
			lda();
 8001b10:	f7ff fa7c 	bl	800100c <lda>
			break;
 8001b14:	e622      	b.n	800175c <exec6502+0x248>
			abso();
 8001b16:	f7fe fe19 	bl	800074c <abso>
			ldx();
 8001b1a:	f7ff fa99 	bl	8001050 <ldx>
			break;
 8001b1e:	e61d      	b.n	800175c <exec6502+0x248>
			rel();
 8001b20:	f7fe fe00 	bl	8000724 <rel>
			bcs();
 8001b24:	f7fe ffa0 	bl	8000a68 <bcs>
			break;
 8001b28:	e618      	b.n	800175c <exec6502+0x248>
			indy();
 8001b2a:	f7fe fea3 	bl	8000874 <indy>
			lda();
 8001b2e:	f7ff fa6d 	bl	800100c <lda>
			break;
 8001b32:	e613      	b.n	800175c <exec6502+0x248>
			zpx();
 8001b34:	f7fe fdce 	bl	80006d4 <zpx>
			ldy();
 8001b38:	f7ff faac 	bl	8001094 <ldy>
			break;
 8001b3c:	e60e      	b.n	800175c <exec6502+0x248>
			zpx();
 8001b3e:	f7fe fdc9 	bl	80006d4 <zpx>
			lda();
 8001b42:	f7ff fa63 	bl	800100c <lda>
			break;
 8001b46:	e609      	b.n	800175c <exec6502+0x248>
			zpy();
 8001b48:	f7fe fdd8 	bl	80006fc <zpy>
			ldx();
 8001b4c:	f7ff fa80 	bl	8001050 <ldx>
			break;
 8001b50:	e604      	b.n	800175c <exec6502+0x248>
			clv();
 8001b52:	f7ff f8d9 	bl	8000d08 <clv>
			break;
 8001b56:	e601      	b.n	800175c <exec6502+0x248>
			absy();
 8001b58:	f7fe fe2c 	bl	80007b4 <absy>
			lda();
 8001b5c:	f7ff fa56 	bl	800100c <lda>
			break;
 8001b60:	e5fc      	b.n	800175c <exec6502+0x248>
			tsx();
 8001b62:	f7ff fc79 	bl	8001458 <tsx>
			break;
 8001b66:	e5f9      	b.n	800175c <exec6502+0x248>
			absx();
 8001b68:	f7fe fe08 	bl	800077c <absx>
			ldy();
 8001b6c:	f7ff fa92 	bl	8001094 <ldy>
			break;
 8001b70:	e5f4      	b.n	800175c <exec6502+0x248>
			absx();
 8001b72:	f7fe fe03 	bl	800077c <absx>
			lda();
 8001b76:	f7ff fa49 	bl	800100c <lda>
			break;
 8001b7a:	e5ef      	b.n	800175c <exec6502+0x248>
			absy();
 8001b7c:	f7fe fe1a 	bl	80007b4 <absy>
			ldx();
 8001b80:	f7ff fa66 	bl	8001050 <ldx>
			break;
 8001b84:	e5ea      	b.n	800175c <exec6502+0x248>
			imm();
 8001b86:	f7fe fd8b 	bl	80006a0 <imm>
			cpy();
 8001b8a:	f7ff f921 	bl	8000dd0 <cpy>
			break;
 8001b8e:	e5e5      	b.n	800175c <exec6502+0x248>
			indx();
 8001b90:	f7fe fe52 	bl	8000838 <indx>
			cmp();
 8001b94:	f7ff f8c0 	bl	8000d18 <cmp>
			break;
 8001b98:	e5e0      	b.n	800175c <exec6502+0x248>
			zp();
 8001b9a:	f7fe fd8d 	bl	80006b8 <zp>
			cpy();
 8001b9e:	f7ff f917 	bl	8000dd0 <cpy>
			break;
 8001ba2:	e5db      	b.n	800175c <exec6502+0x248>
			zp();
 8001ba4:	f7fe fd88 	bl	80006b8 <zp>
			cmp();
 8001ba8:	f7ff f8b6 	bl	8000d18 <cmp>
			break;
 8001bac:	e5d6      	b.n	800175c <exec6502+0x248>
			zp();
 8001bae:	f7fe fd83 	bl	80006b8 <zp>
			dec();
 8001bb2:	f7ff f93b 	bl	8000e2c <dec>
			break;
 8001bb6:	e5d1      	b.n	800175c <exec6502+0x248>
			iny();
 8001bb8:	f7ff f9f4 	bl	8000fa4 <iny>
			break;
 8001bbc:	e5ce      	b.n	800175c <exec6502+0x248>
			imm();
 8001bbe:	f7fe fd6f 	bl	80006a0 <imm>
			cmp();
 8001bc2:	f7ff f8a9 	bl	8000d18 <cmp>
			break;
 8001bc6:	e5c9      	b.n	800175c <exec6502+0x248>
			dex();
 8001bc8:	f7ff f954 	bl	8000e74 <dex>
			break;
 8001bcc:	e5c6      	b.n	800175c <exec6502+0x248>
			abso();
 8001bce:	f7fe fdbd 	bl	800074c <abso>
			cpy();
 8001bd2:	f7ff f8fd 	bl	8000dd0 <cpy>
			break;
 8001bd6:	e5c1      	b.n	800175c <exec6502+0x248>
			abso();
 8001bd8:	f7fe fdb8 	bl	800074c <abso>
			cmp();
 8001bdc:	f7ff f89c 	bl	8000d18 <cmp>
			break;
 8001be0:	e5bc      	b.n	800175c <exec6502+0x248>
			abso();
 8001be2:	f7fe fdb3 	bl	800074c <abso>
			dec();
 8001be6:	f7ff f921 	bl	8000e2c <dec>
			break;
 8001bea:	e5b7      	b.n	800175c <exec6502+0x248>
			rel();
 8001bec:	f7fe fd9a 	bl	8000724 <rel>
			bne();
 8001bf0:	f7fe ffc4 	bl	8000b7c <bne>
			break;
 8001bf4:	e5b2      	b.n	800175c <exec6502+0x248>
			indy();
 8001bf6:	f7fe fe3d 	bl	8000874 <indy>
			cmp();
 8001bfa:	f7ff f88d 	bl	8000d18 <cmp>
			break;
 8001bfe:	e5ad      	b.n	800175c <exec6502+0x248>
			zpx();
 8001c00:	f7fe fd68 	bl	80006d4 <zpx>
			cmp();
 8001c04:	f7ff f888 	bl	8000d18 <cmp>
			break;
 8001c08:	e5a8      	b.n	800175c <exec6502+0x248>
			zpx();
 8001c0a:	f7fe fd63 	bl	80006d4 <zpx>
			dec();
 8001c0e:	f7ff f90d 	bl	8000e2c <dec>
			break;
 8001c12:	e5a3      	b.n	800175c <exec6502+0x248>
			cld();
 8001c14:	f7ff f868 	bl	8000ce8 <cld>
			break;
 8001c18:	e5a0      	b.n	800175c <exec6502+0x248>
			absy();
 8001c1a:	f7fe fdcb 	bl	80007b4 <absy>
			cmp();
 8001c1e:	f7ff f87b 	bl	8000d18 <cmp>
			break;
 8001c22:	e59b      	b.n	800175c <exec6502+0x248>
			absx();
 8001c24:	f7fe fdaa 	bl	800077c <absx>
			cmp();
 8001c28:	f7ff f876 	bl	8000d18 <cmp>
			break;
 8001c2c:	e596      	b.n	800175c <exec6502+0x248>
			absx();
 8001c2e:	f7fe fda5 	bl	800077c <absx>
			dec();
 8001c32:	f7ff f8fb 	bl	8000e2c <dec>
			break;
 8001c36:	e591      	b.n	800175c <exec6502+0x248>
			imm();
 8001c38:	f7fe fd32 	bl	80006a0 <imm>
			cpx();
 8001c3c:	f7ff f89a 	bl	8000d74 <cpx>
			break;
 8001c40:	e58c      	b.n	800175c <exec6502+0x248>
			indx();
 8001c42:	f7fe fdf9 	bl	8000838 <indx>
			sbc();
 8001c46:	f7ff fb49 	bl	80012dc <sbc>
			break;
 8001c4a:	e587      	b.n	800175c <exec6502+0x248>
			zp();
 8001c4c:	f7fe fd34 	bl	80006b8 <zp>
			cpx();
 8001c50:	f7ff f890 	bl	8000d74 <cpx>
			break;
 8001c54:	e582      	b.n	800175c <exec6502+0x248>
			zp();
 8001c56:	f7fe fd2f 	bl	80006b8 <zp>
			sbc();
 8001c5a:	f7ff fb3f 	bl	80012dc <sbc>
			break;
 8001c5e:	e57d      	b.n	800175c <exec6502+0x248>
			zp();
 8001c60:	f7fe fd2a 	bl	80006b8 <zp>
			inc();
 8001c64:	f7ff f960 	bl	8000f28 <inc>
			break;
 8001c68:	e578      	b.n	800175c <exec6502+0x248>
			inx();
 8001c6a:	f7ff f981 	bl	8000f70 <inx>
			break;
 8001c6e:	e575      	b.n	800175c <exec6502+0x248>
			imm();
 8001c70:	f7fe fd16 	bl	80006a0 <imm>
			sbc();
 8001c74:	f7ff fb32 	bl	80012dc <sbc>
			break;
 8001c78:	e570      	b.n	800175c <exec6502+0x248>
			abso();
 8001c7a:	f7fe fd67 	bl	800074c <abso>
			cpx();
 8001c7e:	f7ff f879 	bl	8000d74 <cpx>
			break;
 8001c82:	e56b      	b.n	800175c <exec6502+0x248>
			abso();
 8001c84:	f7fe fd62 	bl	800074c <abso>
			sbc();
 8001c88:	f7ff fb28 	bl	80012dc <sbc>
			break;
 8001c8c:	e566      	b.n	800175c <exec6502+0x248>
			abso();
 8001c8e:	f7fe fd5d 	bl	800074c <abso>
			inc();
 8001c92:	f7ff f949 	bl	8000f28 <inc>
			break;
 8001c96:	e561      	b.n	800175c <exec6502+0x248>
			rel();
 8001c98:	f7fe fd44 	bl	8000724 <rel>
			beq();
 8001c9c:	f7fe ff06 	bl	8000aac <beq>
			break;
 8001ca0:	e55c      	b.n	800175c <exec6502+0x248>
			indy();
 8001ca2:	f7fe fde7 	bl	8000874 <indy>
			sbc();
 8001ca6:	f7ff fb19 	bl	80012dc <sbc>
			break;
 8001caa:	e557      	b.n	800175c <exec6502+0x248>
			zpx();
 8001cac:	f7fe fd12 	bl	80006d4 <zpx>
			sbc();
 8001cb0:	f7ff fb14 	bl	80012dc <sbc>
			break;
 8001cb4:	e552      	b.n	800175c <exec6502+0x248>
			zpx();
 8001cb6:	f7fe fd0d 	bl	80006d4 <zpx>
			inc();
 8001cba:	f7ff f935 	bl	8000f28 <inc>
			break;
 8001cbe:	e54d      	b.n	800175c <exec6502+0x248>
			sed();
 8001cc0:	f7ff fb70 	bl	80013a4 <sed>
			break;
 8001cc4:	e54a      	b.n	800175c <exec6502+0x248>
			absy();
 8001cc6:	f7fe fd75 	bl	80007b4 <absy>
			sbc();
 8001cca:	f7ff fb07 	bl	80012dc <sbc>
			break;
 8001cce:	e545      	b.n	800175c <exec6502+0x248>
			absx();
 8001cd0:	f7fe fd54 	bl	800077c <absx>
			sbc();
 8001cd4:	f7ff fb02 	bl	80012dc <sbc>
			break;
 8001cd8:	e540      	b.n	800175c <exec6502+0x248>
			absx();
 8001cda:	f7fe fd4f 	bl	800077c <absx>
			inc();
 8001cde:	f7ff f923 	bl	8000f28 <inc>
			break;
 8001ce2:	e53b      	b.n	800175c <exec6502+0x248>

08001ce4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_MspInit+0x3c>)
{
 8001ce6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	619a      	str	r2, [r3, #24]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	f002 0201 	and.w	r2, r2, #1
 8001cf6:	9200      	str	r2, [sp, #0]
 8001cf8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d00:	61da      	str	r2, [r3, #28]
 8001d02:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d0e:	6853      	ldr	r3, [r2, #4]
 8001d10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	b002      	add	sp, #8
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2e:	2210      	movs	r2, #16
 8001d30:	2100      	movs	r1, #0
 8001d32:	a802      	add	r0, sp, #8
 8001d34:	f000 fe06 	bl	8002944 <memset>
  if(huart->Instance==USART1)
 8001d38:	6822      	ldr	r2, [r4, #0]
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x70>)
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d128      	bne.n	8001d92 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d40:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001d44:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d4c:	619a      	str	r2, [r3, #24]
 8001d4e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d56:	9200      	str	r2, [sp, #0]
 8001d58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	f042 0204 	orr.w	r2, r2, #4
 8001d60:	619a      	str	r2, [r3, #24]
 8001d62:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f000 f915 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d82:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d86:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f000 f90b 	bl	8001fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d92:	b006      	add	sp, #24
 8001d94:	bd10      	pop	{r4, pc}
 8001d96:	bf00      	nop
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40010800 	.word	0x40010800

08001da0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <NMI_Handler>

08001da2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler>

08001da4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler>

08001da6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler>

08001da8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler>

08001daa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 b87e 	b.w	8001eb0 <HAL_IncTick>

08001db4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <_sbrk+0x30>)
{
 8001db6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001db8:	6811      	ldr	r1, [r2, #0]
{
 8001dba:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001dbc:	b909      	cbnz	r1, 8001dc2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001dbe:	490a      	ldr	r1, [pc, #40]	; (8001de8 <_sbrk+0x34>)
 8001dc0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	6810      	ldr	r0, [r2, #0]
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <_sbrk+0x38>)
 8001dc6:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <_sbrk+0x3c>)
 8001dc8:	4403      	add	r3, r0
 8001dca:	1b09      	subs	r1, r1, r4
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d906      	bls.n	8001dde <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001dd0:	f000 fd8e 	bl	80028f0 <__errno>
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001ddc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001dde:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001de0:	e7fc      	b.n	8001ddc <_sbrk+0x28>
 8001de2:	bf00      	nop
 8001de4:	200080f8 	.word	0x200080f8
 8001de8:	20008110 	.word	0x20008110
 8001dec:	20010000 	.word	0x20010000
 8001df0:	00000400 	.word	0x00000400

08001df4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	4770      	bx	lr
	...

08001df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df8:	f7ff fffc 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480b      	ldr	r0, [pc, #44]	; (8001e2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e14:	4c09      	ldr	r4, [pc, #36]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e22:	f000 fd6b 	bl	80028fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7fe fb6b 	bl	8000500 <main>
  bx lr
 8001e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e34:	080044d4 	.word	0x080044d4
  ldr r2, =_sbss
 8001e38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e3c:	20008110 	.word	0x20008110

08001e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC1_2_IRQHandler>
	...

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_InitTick+0x3c>)
{
 8001e48:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4a:	7818      	ldrb	r0, [r3, #0]
 8001e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e50:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_InitTick+0x40>)
 8001e56:	6810      	ldr	r0, [r2, #0]
 8001e58:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e5c:	f000 f890 	bl	8001f80 <HAL_SYSTICK_Config>
 8001e60:	4604      	mov	r4, r0
 8001e62:	b958      	cbnz	r0, 8001e7c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e64:	2d0f      	cmp	r5, #15
 8001e66:	d809      	bhi.n	8001e7c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 f854 	bl	8001f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4620      	mov	r0, r4
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_InitTick+0x44>)
 8001e78:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	e7fc      	b.n	8001e7a <HAL_InitTick+0x36>
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000008 	.word	0x20000008

08001e8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x20>)
{
 8001e8e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e92:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9a:	f000 f82d 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f7ff ffd0 	bl	8001e44 <HAL_InitTick>
  HAL_MspInit();
 8001ea4:	f7ff ff1e 	bl	8001ce4 <HAL_MspInit>
}
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	bd08      	pop	{r3, pc}
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001eb0:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_IncTick+0x10>)
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_IncTick+0x14>)
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	440b      	add	r3, r1
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200080fc 	.word	0x200080fc
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ec8:	4b01      	ldr	r3, [pc, #4]	; (8001ed0 <HAL_GetTick+0x8>)
 8001eca:	6818      	ldr	r0, [r3, #0]
}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200080fc 	.word	0x200080fc

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff6 	bl	8001ec8 <HAL_GetTick>
 8001edc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee0:	bf1e      	ittt	ne
 8001ee2:	4b04      	ldrne	r3, [pc, #16]	; (8001ef4 <HAL_Delay+0x20>)
 8001ee4:	781b      	ldrbne	r3, [r3, #0]
 8001ee6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee8:	f7ff ffee 	bl	8001ec8 <HAL_GetTick>
 8001eec:	1b43      	subs	r3, r0, r5
 8001eee:	42a3      	cmp	r3, r4
 8001ef0:	d3fa      	bcc.n	8001ee8 <HAL_Delay+0x14>
  {
  }
}
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b530      	push	{r4, r5, lr}
 8001f20:	68dc      	ldr	r4, [r3, #12]
 8001f22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	bf28      	it	cs
 8001f30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f38:	bf98      	it	ls
 8001f3a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f40:	bf88      	it	hi
 8001f42:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	ea21 0303 	bic.w	r3, r1, r3
 8001f48:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4a:	fa05 f404 	lsl.w	r4, r5, r4
 8001f4e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001f52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	bfac      	ite	ge
 8001f5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	4a07      	ldrlt	r2, [pc, #28]	; (8001f7c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	bfab      	itete	ge
 8001f68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f76:	bd30      	pop	{r4, r5, pc}
 8001f78:	e000ed00 	.word	0xe000ed00
 8001f7c:	e000ed14 	.word	0xe000ed14

08001f80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	3801      	subs	r0, #1
 8001f82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f86:	d20b      	bcs.n	8001fa0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	21f0      	movs	r1, #240	; 0xf0
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f90:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f96:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f98:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fa0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fac:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001fae:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb0:	4f6a      	ldr	r7, [pc, #424]	; (800215c <HAL_GPIO_Init+0x1b4>)
 8001fb2:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb4:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002164 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8001fb8:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8002168 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbc:	680c      	ldr	r4, [r1, #0]
 8001fbe:	fa34 f506 	lsrs.w	r5, r4, r6
 8001fc2:	d102      	bne.n	8001fca <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001fc4:	b003      	add	sp, #12
 8001fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001fca:	f04f 0801 	mov.w	r8, #1
 8001fce:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8001fd6:	ea38 0404 	bics.w	r4, r8, r4
 8001fda:	f040 8081 	bne.w	80020e0 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8001fde:	684c      	ldr	r4, [r1, #4]
 8001fe0:	2c03      	cmp	r4, #3
 8001fe2:	d807      	bhi.n	8001ff4 <HAL_GPIO_Init+0x4c>
 8001fe4:	3c01      	subs	r4, #1
 8001fe6:	2c02      	cmp	r4, #2
 8001fe8:	f200 808c 	bhi.w	8002104 <HAL_GPIO_Init+0x15c>
 8001fec:	e8df f004 	tbb	[pc, r4]
 8001ff0:	a29d      	.short	0xa29d
 8001ff2:	a8          	.byte	0xa8
 8001ff3:	00          	.byte	0x00
 8001ff4:	2c12      	cmp	r4, #18
 8001ff6:	f000 80a0 	beq.w	800213a <HAL_GPIO_Init+0x192>
 8001ffa:	d873      	bhi.n	80020e4 <HAL_GPIO_Init+0x13c>
 8001ffc:	2c11      	cmp	r4, #17
 8001ffe:	f000 8096 	beq.w	800212e <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002002:	2dff      	cmp	r5, #255	; 0xff
 8002004:	bf98      	it	ls
 8002006:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002008:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800200c:	bf88      	it	hi
 800200e:	f100 0a04 	addhi.w	sl, r0, #4
 8002012:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002016:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800201a:	bf88      	it	hi
 800201c:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201e:	fa09 fb04 	lsl.w	fp, r9, r4
 8002022:	ea28 080b 	bic.w	r8, r8, fp
 8002026:	fa02 f404 	lsl.w	r4, r2, r4
 800202a:	ea48 0404 	orr.w	r4, r8, r4
 800202e:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002032:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002036:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800203a:	d051      	beq.n	80020e0 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800203c:	69bc      	ldr	r4, [r7, #24]
 800203e:	f026 0803 	bic.w	r8, r6, #3
 8002042:	f044 0401 	orr.w	r4, r4, #1
 8002046:	61bc      	str	r4, [r7, #24]
 8002048:	69bc      	ldr	r4, [r7, #24]
 800204a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800204e:	f004 0401 	and.w	r4, r4, #1
 8002052:	9401      	str	r4, [sp, #4]
 8002054:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002058:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800205c:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002062:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002066:	fa09 f90b 	lsl.w	r9, r9, fp
 800206a:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800206e:	4c3f      	ldr	r4, [pc, #252]	; (800216c <HAL_GPIO_Init+0x1c4>)
 8002070:	42a0      	cmp	r0, r4
 8002072:	d069      	beq.n	8002148 <HAL_GPIO_Init+0x1a0>
 8002074:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002078:	42a0      	cmp	r0, r4
 800207a:	d067      	beq.n	800214c <HAL_GPIO_Init+0x1a4>
 800207c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002080:	42a0      	cmp	r0, r4
 8002082:	d065      	beq.n	8002150 <HAL_GPIO_Init+0x1a8>
 8002084:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002088:	42a0      	cmp	r0, r4
 800208a:	d063      	beq.n	8002154 <HAL_GPIO_Init+0x1ac>
 800208c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002090:	42a0      	cmp	r0, r4
 8002092:	d061      	beq.n	8002158 <HAL_GPIO_Init+0x1b0>
 8002094:	4560      	cmp	r0, ip
 8002096:	bf0c      	ite	eq
 8002098:	2405      	moveq	r4, #5
 800209a:	2406      	movne	r4, #6
 800209c:	fa04 f40b 	lsl.w	r4, r4, fp
 80020a0:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80020a4:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a8:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020aa:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ae:	bf14      	ite	ne
 80020b0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b2:	43ac      	biceq	r4, r5
 80020b4:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b6:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80020bc:	bf14      	ite	ne
 80020be:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c0:	43ac      	biceq	r4, r5
 80020c2:	60dc      	str	r4, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80020c4:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80020ca:	bf14      	ite	ne
 80020cc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ce:	43ac      	biceq	r4, r5
 80020d0:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80020d2:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80020d8:	bf14      	ite	ne
 80020da:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020dc:	43ac      	biceq	r4, r5
 80020de:	601c      	str	r4, [r3, #0]
	position++;
 80020e0:	3601      	adds	r6, #1
 80020e2:	e76b      	b.n	8001fbc <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80020e4:	4574      	cmp	r4, lr
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x15c>
 80020e8:	d818      	bhi.n	800211c <HAL_GPIO_Init+0x174>
 80020ea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002170 <HAL_GPIO_Init+0x1c8>
 80020ee:	454c      	cmp	r4, r9
 80020f0:	d008      	beq.n	8002104 <HAL_GPIO_Init+0x15c>
 80020f2:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80020f6:	454c      	cmp	r4, r9
 80020f8:	d004      	beq.n	8002104 <HAL_GPIO_Init+0x15c>
 80020fa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80020fe:	454c      	cmp	r4, r9
 8002100:	f47f af7f 	bne.w	8002002 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002104:	688a      	ldr	r2, [r1, #8]
 8002106:	b1ea      	cbz	r2, 8002144 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002108:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800210a:	bf08      	it	eq
 800210c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002110:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002114:	bf18      	it	ne
 8002116:	f8c0 8014 	strne.w	r8, [r0, #20]
 800211a:	e772      	b.n	8002002 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800211c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8002174 <HAL_GPIO_Init+0x1cc>
 8002120:	454c      	cmp	r4, r9
 8002122:	d0ef      	beq.n	8002104 <HAL_GPIO_Init+0x15c>
 8002124:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002128:	e7e9      	b.n	80020fe <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212a:	68ca      	ldr	r2, [r1, #12]
          break;
 800212c:	e769      	b.n	8002002 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800212e:	68ca      	ldr	r2, [r1, #12]
 8002130:	3204      	adds	r2, #4
          break;
 8002132:	e766      	b.n	8002002 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002134:	68ca      	ldr	r2, [r1, #12]
 8002136:	3208      	adds	r2, #8
          break;
 8002138:	e763      	b.n	8002002 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213a:	68ca      	ldr	r2, [r1, #12]
 800213c:	320c      	adds	r2, #12
          break;
 800213e:	e760      	b.n	8002002 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002140:	2200      	movs	r2, #0
 8002142:	e75e      	b.n	8002002 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002144:	2204      	movs	r2, #4
 8002146:	e75c      	b.n	8002002 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002148:	2400      	movs	r4, #0
 800214a:	e7a7      	b.n	800209c <HAL_GPIO_Init+0xf4>
 800214c:	2401      	movs	r4, #1
 800214e:	e7a5      	b.n	800209c <HAL_GPIO_Init+0xf4>
 8002150:	2402      	movs	r4, #2
 8002152:	e7a3      	b.n	800209c <HAL_GPIO_Init+0xf4>
 8002154:	2403      	movs	r4, #3
 8002156:	e7a1      	b.n	800209c <HAL_GPIO_Init+0xf4>
 8002158:	2404      	movs	r4, #4
 800215a:	e79f      	b.n	800209c <HAL_GPIO_Init+0xf4>
 800215c:	40021000 	.word	0x40021000
 8002160:	40010400 	.word	0x40010400
 8002164:	40011c00 	.word	0x40011c00
 8002168:	10220000 	.word	0x10220000
 800216c:	40010800 	.word	0x40010800
 8002170:	10120000 	.word	0x10120000
 8002174:	10310000 	.word	0x10310000

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800217c:	4605      	mov	r5, r0
 800217e:	b338      	cbz	r0, 80021d0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002180:	6803      	ldr	r3, [r0, #0]
 8002182:	07db      	lsls	r3, r3, #31
 8002184:	d410      	bmi.n	80021a8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	682b      	ldr	r3, [r5, #0]
 8002188:	079f      	lsls	r7, r3, #30
 800218a:	d45e      	bmi.n	800224a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	0719      	lsls	r1, r3, #28
 8002190:	f100 8095 	bmi.w	80022be <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	075a      	lsls	r2, r3, #29
 8002198:	f100 80c1 	bmi.w	800231e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219c:	69e8      	ldr	r0, [r5, #28]
 800219e:	2800      	cmp	r0, #0
 80021a0:	f040 812c 	bne.w	80023fc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80021a4:	2000      	movs	r0, #0
 80021a6:	e029      	b.n	80021fc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	4c90      	ldr	r4, [pc, #576]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 80021aa:	6863      	ldr	r3, [r4, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d007      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d10a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	03de      	lsls	r6, r3, #15
 80021c2:	d507      	bpl.n	80021d4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	039c      	lsls	r4, r3, #14
 80021c8:	d5dd      	bpl.n	8002186 <HAL_RCC_OscConfig+0xe>
 80021ca:	686b      	ldr	r3, [r5, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1da      	bne.n	8002186 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	686b      	ldr	r3, [r5, #4]
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x8a>
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021e4:	f7ff fe70 	bl	8001ec8 <HAL_GetTick>
 80021e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	0398      	lsls	r0, r3, #14
 80021ee:	d4ca      	bmi.n	8002186 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fe6a 	bl	8001ec8 <HAL_GetTick>
 80021f4:	1b80      	subs	r0, r0, r6
 80021f6:	2864      	cmp	r0, #100	; 0x64
 80021f8:	d9f7      	bls.n	80021ea <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80021fa:	2003      	movs	r0, #3
}
 80021fc:	b002      	add	sp, #8
 80021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	b99b      	cbnz	r3, 800222c <HAL_RCC_OscConfig+0xb4>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6023      	str	r3, [r4, #0]
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002214:	f7ff fe58 	bl	8001ec8 <HAL_GetTick>
 8002218:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	0399      	lsls	r1, r3, #14
 800221e:	d5b2      	bpl.n	8002186 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fe52 	bl	8001ec8 <HAL_GetTick>
 8002224:	1b80      	subs	r0, r0, r6
 8002226:	2864      	cmp	r0, #100	; 0x64
 8002228:	d9f7      	bls.n	800221a <HAL_RCC_OscConfig+0xa2>
 800222a:	e7e6      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	d103      	bne.n	800223c <HAL_RCC_OscConfig+0xc4>
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6023      	str	r3, [r4, #0]
 800223a:	e7cf      	b.n	80021dc <HAL_RCC_OscConfig+0x64>
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	e7cb      	b.n	80021e2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224a:	4c68      	ldr	r4, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 800224c:	6863      	ldr	r3, [r4, #4]
 800224e:	f013 0f0c 	tst.w	r3, #12
 8002252:	d007      	beq.n	8002264 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b08      	cmp	r3, #8
 800225c:	d110      	bne.n	8002280 <HAL_RCC_OscConfig+0x108>
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	03da      	lsls	r2, r3, #15
 8002262:	d40d      	bmi.n	8002280 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	079b      	lsls	r3, r3, #30
 8002268:	d502      	bpl.n	8002270 <HAL_RCC_OscConfig+0xf8>
 800226a:	692b      	ldr	r3, [r5, #16]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d1af      	bne.n	80021d0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	696a      	ldr	r2, [r5, #20]
 8002274:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002278:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	e785      	b.n	800218c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	692a      	ldr	r2, [r5, #16]
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCC_OscConfig+0x278>)
 8002284:	b16a      	cbz	r2, 80022a2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800228a:	f7ff fe1d 	bl	8001ec8 <HAL_GetTick>
 800228e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	079f      	lsls	r7, r3, #30
 8002294:	d4ec      	bmi.n	8002270 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff fe17 	bl	8001ec8 <HAL_GetTick>
 800229a:	1b80      	subs	r0, r0, r6
 800229c:	2802      	cmp	r0, #2
 800229e:	d9f7      	bls.n	8002290 <HAL_RCC_OscConfig+0x118>
 80022a0:	e7ab      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80022a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022a4:	f7ff fe10 	bl	8001ec8 <HAL_GetTick>
 80022a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	0798      	lsls	r0, r3, #30
 80022ae:	f57f af6d 	bpl.w	800218c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b2:	f7ff fe09 	bl	8001ec8 <HAL_GetTick>
 80022b6:	1b80      	subs	r0, r0, r6
 80022b8:	2802      	cmp	r0, #2
 80022ba:	d9f6      	bls.n	80022aa <HAL_RCC_OscConfig+0x132>
 80022bc:	e79d      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	69aa      	ldr	r2, [r5, #24]
 80022c0:	4e4a      	ldr	r6, [pc, #296]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x278>)
 80022c4:	b1e2      	cbz	r2, 8002300 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80022c6:	2201      	movs	r2, #1
 80022c8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80022cc:	f7ff fdfc 	bl	8001ec8 <HAL_GetTick>
 80022d0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80022d4:	079b      	lsls	r3, r3, #30
 80022d6:	d50d      	bpl.n	80022f4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022dc:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <HAL_RCC_OscConfig+0x27c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022e4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80022e6:	bf00      	nop
  }
  while (Delay --);
 80022e8:	9b01      	ldr	r3, [sp, #4]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	9201      	str	r2, [sp, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f9      	bne.n	80022e6 <HAL_RCC_OscConfig+0x16e>
 80022f2:	e74f      	b.n	8002194 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fde8 	bl	8001ec8 <HAL_GetTick>
 80022f8:	1b00      	subs	r0, r0, r4
 80022fa:	2802      	cmp	r0, #2
 80022fc:	d9e9      	bls.n	80022d2 <HAL_RCC_OscConfig+0x15a>
 80022fe:	e77c      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002300:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002304:	f7ff fde0 	bl	8001ec8 <HAL_GetTick>
 8002308:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800230c:	079f      	lsls	r7, r3, #30
 800230e:	f57f af41 	bpl.w	8002194 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7ff fdd9 	bl	8001ec8 <HAL_GetTick>
 8002316:	1b00      	subs	r0, r0, r4
 8002318:	2802      	cmp	r0, #2
 800231a:	d9f6      	bls.n	800230a <HAL_RCC_OscConfig+0x192>
 800231c:	e76d      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4c33      	ldr	r4, [pc, #204]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 8002320:	69e3      	ldr	r3, [r4, #28]
 8002322:	00d8      	lsls	r0, r3, #3
 8002324:	d424      	bmi.n	8002370 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002326:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	69e3      	ldr	r3, [r4, #28]
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	61e3      	str	r3, [r4, #28]
 8002330:	69e3      	ldr	r3, [r4, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4e2f      	ldr	r6, [pc, #188]	; (80023f8 <HAL_RCC_OscConfig+0x280>)
 800233c:	6833      	ldr	r3, [r6, #0]
 800233e:	05d9      	lsls	r1, r3, #23
 8002340:	d518      	bpl.n	8002374 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002342:	68eb      	ldr	r3, [r5, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d126      	bne.n	8002396 <HAL_RCC_OscConfig+0x21e>
 8002348:	6a23      	ldr	r3, [r4, #32]
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002350:	f7ff fdba 	bl	8001ec8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002358:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	6a23      	ldr	r3, [r4, #32]
 800235c:	079b      	lsls	r3, r3, #30
 800235e:	d53f      	bpl.n	80023e0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002360:	2f00      	cmp	r7, #0
 8002362:	f43f af1b 	beq.w	800219c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	69e3      	ldr	r3, [r4, #28]
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	61e3      	str	r3, [r4, #28]
 800236e:	e715      	b.n	800219c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002370:	2700      	movs	r7, #0
 8002372:	e7e2      	b.n	800233a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002374:	6833      	ldr	r3, [r6, #0]
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800237c:	f7ff fda4 	bl	8001ec8 <HAL_GetTick>
 8002380:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	6833      	ldr	r3, [r6, #0]
 8002384:	05da      	lsls	r2, r3, #23
 8002386:	d4dc      	bmi.n	8002342 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7ff fd9e 	bl	8001ec8 <HAL_GetTick>
 800238c:	eba0 0008 	sub.w	r0, r0, r8
 8002390:	2864      	cmp	r0, #100	; 0x64
 8002392:	d9f6      	bls.n	8002382 <HAL_RCC_OscConfig+0x20a>
 8002394:	e731      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	b9ab      	cbnz	r3, 80023c4 <HAL_RCC_OscConfig+0x24c>
 8002398:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6223      	str	r3, [r4, #32]
 80023a4:	6a23      	ldr	r3, [r4, #32]
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80023ac:	f7ff fd8c 	bl	8001ec8 <HAL_GetTick>
 80023b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	6a23      	ldr	r3, [r4, #32]
 80023b4:	0798      	lsls	r0, r3, #30
 80023b6:	d5d3      	bpl.n	8002360 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff fd86 	bl	8001ec8 <HAL_GetTick>
 80023bc:	1b80      	subs	r0, r0, r6
 80023be:	4540      	cmp	r0, r8
 80023c0:	d9f7      	bls.n	80023b2 <HAL_RCC_OscConfig+0x23a>
 80023c2:	e71a      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	6a23      	ldr	r3, [r4, #32]
 80023c8:	d103      	bne.n	80023d2 <HAL_RCC_OscConfig+0x25a>
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6223      	str	r3, [r4, #32]
 80023d0:	e7ba      	b.n	8002348 <HAL_RCC_OscConfig+0x1d0>
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6223      	str	r3, [r4, #32]
 80023d8:	6a23      	ldr	r3, [r4, #32]
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	e7b6      	b.n	800234e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff fd72 	bl	8001ec8 <HAL_GetTick>
 80023e4:	1b80      	subs	r0, r0, r6
 80023e6:	4540      	cmp	r0, r8
 80023e8:	d9b7      	bls.n	800235a <HAL_RCC_OscConfig+0x1e2>
 80023ea:	e706      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	42420000 	.word	0x42420000
 80023f4:	20000000 	.word	0x20000000
 80023f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	4c2a      	ldr	r4, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d03e      	beq.n	8002486 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002408:	2200      	movs	r2, #0
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_RCC_OscConfig+0x334>)
 800240c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800240e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002410:	d12c      	bne.n	800246c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002412:	f7ff fd59 	bl	8001ec8 <HAL_GetTick>
 8002416:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	0199      	lsls	r1, r3, #6
 800241c:	d420      	bmi.n	8002460 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800241e:	6a2b      	ldr	r3, [r5, #32]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d105      	bne.n	8002432 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002426:	6862      	ldr	r2, [r4, #4]
 8002428:	68a9      	ldr	r1, [r5, #8]
 800242a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800242e:	430a      	orrs	r2, r1
 8002430:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002432:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002434:	6862      	ldr	r2, [r4, #4]
 8002436:	430b      	orrs	r3, r1
 8002438:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800243c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800243e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_RCC_OscConfig+0x334>)
 8002444:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002446:	f7ff fd3f 	bl	8001ec8 <HAL_GetTick>
 800244a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	019a      	lsls	r2, r3, #6
 8002450:	f53f aea8 	bmi.w	80021a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7ff fd38 	bl	8001ec8 <HAL_GetTick>
 8002458:	1b40      	subs	r0, r0, r5
 800245a:	2802      	cmp	r0, #2
 800245c:	d9f6      	bls.n	800244c <HAL_RCC_OscConfig+0x2d4>
 800245e:	e6cc      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff fd32 	bl	8001ec8 <HAL_GetTick>
 8002464:	1b80      	subs	r0, r0, r6
 8002466:	2802      	cmp	r0, #2
 8002468:	d9d6      	bls.n	8002418 <HAL_RCC_OscConfig+0x2a0>
 800246a:	e6c6      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800246c:	f7ff fd2c 	bl	8001ec8 <HAL_GetTick>
 8002470:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	f57f ae95 	bpl.w	80021a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7ff fd25 	bl	8001ec8 <HAL_GetTick>
 800247e:	1b40      	subs	r0, r0, r5
 8002480:	2802      	cmp	r0, #2
 8002482:	d9f6      	bls.n	8002472 <HAL_RCC_OscConfig+0x2fa>
 8002484:	e6b9      	b.n	80021fa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002486:	2801      	cmp	r0, #1
 8002488:	f43f aeb8 	beq.w	80021fc <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800248c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	6a2a      	ldr	r2, [r5, #32]
 8002490:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002494:	4291      	cmp	r1, r2
 8002496:	f47f ae9b 	bne.w	80021d0 <HAL_RCC_OscConfig+0x58>
 800249a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800249c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a0:	4293      	cmp	r3, r2
 80024a2:	f43f ae7f 	beq.w	80021a4 <HAL_RCC_OscConfig+0x2c>
 80024a6:	e693      	b.n	80021d0 <HAL_RCC_OscConfig+0x58>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	42420000 	.word	0x42420000

080024b0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x38>)
 80024b2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	f003 010c 	and.w	r1, r3, #12
 80024b8:	2908      	cmp	r1, #8
 80024ba:	d112      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80024be:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c6:	d509      	bpl.n	80024dc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d2:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x44>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80024da:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x48>)
 80024de:	4358      	muls	r0, r3
 80024e0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80024e2:	4803      	ldr	r0, [pc, #12]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08004484 	.word	0x08004484
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	08004494 	.word	0x08004494
 80024f8:	003d0900 	.word	0x003d0900

080024fc <HAL_RCC_ClockConfig>:
{
 80024fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002500:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002502:	4604      	mov	r4, r0
 8002504:	b910      	cbnz	r0, 800250c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002506:	2001      	movs	r0, #1
}
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_RCC_ClockConfig+0x124>)
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	428b      	cmp	r3, r1
 8002516:	d328      	bcc.n	800256a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	6821      	ldr	r1, [r4, #0]
 800251a:	078e      	lsls	r6, r1, #30
 800251c:	d430      	bmi.n	8002580 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	07ca      	lsls	r2, r1, #31
 8002520:	d443      	bmi.n	80025aa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002522:	4a3f      	ldr	r2, [pc, #252]	; (8002620 <HAL_RCC_ClockConfig+0x124>)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	42ab      	cmp	r3, r5
 800252c:	d865      	bhi.n	80025fa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	4d3c      	ldr	r5, [pc, #240]	; (8002624 <HAL_RCC_ClockConfig+0x128>)
 8002532:	f012 0f04 	tst.w	r2, #4
 8002536:	d16c      	bne.n	8002612 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	0713      	lsls	r3, r2, #28
 800253a:	d506      	bpl.n	800254a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253c:	686b      	ldr	r3, [r5, #4]
 800253e:	6922      	ldr	r2, [r4, #16]
 8002540:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002544:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002548:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f7ff ffb1 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800254e:	686b      	ldr	r3, [r5, #4]
 8002550:	4a35      	ldr	r2, [pc, #212]	; (8002628 <HAL_RCC_ClockConfig+0x12c>)
 8002552:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	40d8      	lsrs	r0, r3
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCC_ClockConfig+0x130>)
 800255c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_RCC_ClockConfig+0x134>)
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	f7ff fc6f 	bl	8001e44 <HAL_InitTick>
  return HAL_OK;
 8002566:	2000      	movs	r0, #0
 8002568:	e7ce      	b.n	8002508 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	f023 0307 	bic.w	r3, r3, #7
 8002570:	430b      	orrs	r3, r1
 8002572:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	6813      	ldr	r3, [r2, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	428b      	cmp	r3, r1
 800257c:	d1c3      	bne.n	8002506 <HAL_RCC_ClockConfig+0xa>
 800257e:	e7cb      	b.n	8002518 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_RCC_ClockConfig+0x128>)
 8002582:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002586:	bf1e      	ittt	ne
 8002588:	685a      	ldrne	r2, [r3, #4]
 800258a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800258e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002592:	bf42      	ittt	mi
 8002594:	685a      	ldrmi	r2, [r3, #4]
 8002596:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800259a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	68a0      	ldr	r0, [r4, #8]
 80025a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025a4:	4302      	orrs	r2, r0
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	e7b9      	b.n	800251e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	6862      	ldr	r2, [r4, #4]
 80025ac:	4e1d      	ldr	r6, [pc, #116]	; (8002624 <HAL_RCC_ClockConfig+0x128>)
 80025ae:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	d11a      	bne.n	80025ea <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	d0a5      	beq.n	8002506 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c0:	f023 0303 	bic.w	r3, r3, #3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80025c8:	f7ff fc7e 	bl	8001ec8 <HAL_GetTick>
 80025cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	6873      	ldr	r3, [r6, #4]
 80025d0:	6862      	ldr	r2, [r4, #4]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025da:	d0a2      	beq.n	8002522 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff fc74 	bl	8001ec8 <HAL_GetTick>
 80025e0:	1bc0      	subs	r0, r0, r7
 80025e2:	4540      	cmp	r0, r8
 80025e4:	d9f3      	bls.n	80025ce <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80025e6:	2003      	movs	r0, #3
 80025e8:	e78e      	b.n	8002508 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ea:	2a02      	cmp	r2, #2
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025f2:	e7e1      	b.n	80025b8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	f013 0f02 	tst.w	r3, #2
 80025f8:	e7de      	b.n	80025b8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	6813      	ldr	r3, [r2, #0]
 80025fc:	f023 0307 	bic.w	r3, r3, #7
 8002600:	432b      	orrs	r3, r5
 8002602:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	42ab      	cmp	r3, r5
 800260c:	f47f af7b 	bne.w	8002506 <HAL_RCC_ClockConfig+0xa>
 8002610:	e78d      	b.n	800252e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002612:	686b      	ldr	r3, [r5, #4]
 8002614:	68e1      	ldr	r1, [r4, #12]
 8002616:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800261a:	430b      	orrs	r3, r1
 800261c:	606b      	str	r3, [r5, #4]
 800261e:	e78b      	b.n	8002538 <HAL_RCC_ClockConfig+0x3c>
 8002620:	40022000 	.word	0x40022000
 8002624:	40021000 	.word	0x40021000
 8002628:	0800446c 	.word	0x0800446c
 800262c:	20000000 	.word	0x20000000
 8002630:	20000008 	.word	0x20000008

08002634 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002642:	6810      	ldr	r0, [r2, #0]
}
 8002644:	40d8      	lsrs	r0, r3
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	0800447c 	.word	0x0800447c
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002662:	6810      	ldr	r0, [r2, #0]
}
 8002664:	40d8      	lsrs	r0, r3
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	0800447c 	.word	0x0800447c
 8002670:	20000000 	.word	0x20000000

08002674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002674:	b510      	push	{r4, lr}
 8002676:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	68c1      	ldr	r1, [r0, #12]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002682:	430a      	orrs	r2, r1
 8002684:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002686:	6882      	ldr	r2, [r0, #8]
 8002688:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800268a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800268c:	4302      	orrs	r2, r0
 800268e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002690:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002694:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002698:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800269a:	430a      	orrs	r2, r1
 800269c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	69a1      	ldr	r1, [r4, #24]
 80026a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026a6:	430a      	orrs	r2, r1
 80026a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <UART_SetConfig+0x70>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d115      	bne.n	80026dc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b0:	f7ff ffd0 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b4:	2319      	movs	r3, #25
 80026b6:	4343      	muls	r3, r0
 80026b8:	6862      	ldr	r2, [r4, #4]
 80026ba:	6820      	ldr	r0, [r4, #0]
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c2:	2264      	movs	r2, #100	; 0x64
 80026c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80026c8:	fb02 3311 	mls	r3, r2, r1, r3
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	3332      	adds	r3, #50	; 0x32
 80026d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80026d8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80026da:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80026dc:	f7ff ffaa 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 80026e0:	e7e8      	b.n	80026b4 <UART_SetConfig+0x40>
 80026e2:	bf00      	nop
 80026e4:	40013800 	.word	0x40013800

080026e8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	4604      	mov	r4, r0
 80026ec:	460e      	mov	r6, r1
 80026ee:	4617      	mov	r7, r2
 80026f0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	ea36 0303 	bics.w	r3, r6, r3
 80026fa:	d101      	bne.n	8002700 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80026fc:	2000      	movs	r0, #0
 80026fe:	e028      	b.n	8002752 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002700:	1c6b      	adds	r3, r5, #1
 8002702:	d0f7      	beq.n	80026f4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002704:	b125      	cbz	r5, 8002710 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002706:	f7ff fbdf 	bl	8001ec8 <HAL_GetTick>
 800270a:	1bc0      	subs	r0, r0, r7
 800270c:	4285      	cmp	r5, r0
 800270e:	d2f0      	bcs.n	80026f2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002710:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	f102 030c 	add.w	r3, r2, #12
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	320c      	adds	r2, #12
 8002720:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002724:	6821      	ldr	r1, [r4, #0]
 8002726:	2800      	cmp	r0, #0
 8002728:	d1f2      	bne.n	8002710 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	f101 0314 	add.w	r3, r1, #20
 800272e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002732:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	f101 0014 	add.w	r0, r1, #20
 800273a:	e840 3200 	strex	r2, r3, [r0]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d1f3      	bne.n	800272a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8002742:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002744:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002746:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 800274a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800274e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8002752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002754 <HAL_UART_Init>:
{
 8002754:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002756:	4604      	mov	r4, r0
 8002758:	b348      	cbz	r0, 80027ae <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800275e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002762:	b91b      	cbnz	r3, 800276c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002764:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002768:	f7ff fade 	bl	8001d28 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800276c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800276e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002774:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002776:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800277c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800277e:	f7ff ff79 	bl	8002674 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002794:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800279c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800279e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027aa:	6360      	str	r0, [r4, #52]	; 0x34
}
 80027ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027ae:	2001      	movs	r0, #1
 80027b0:	e7fc      	b.n	80027ac <HAL_UART_Init+0x58>

080027b2 <HAL_UART_Transmit>:
{
 80027b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027b6:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80027b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80027bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80027be:	2b20      	cmp	r3, #32
{
 80027c0:	460e      	mov	r6, r1
 80027c2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80027c4:	d13c      	bne.n	8002840 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80027c6:	2900      	cmp	r1, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_UART_Transmit+0x92>
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d03a      	beq.n	8002844 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d0:	2500      	movs	r5, #0
 80027d2:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80027d8:	f7ff fb76 	bl	8001ec8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80027de:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80027e4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80027e6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	d103      	bne.n	80027f2 <HAL_UART_Transmit+0x40>
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	b90b      	cbnz	r3, 80027f2 <HAL_UART_Transmit+0x40>
 80027ee:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80027f0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80027f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b953      	cbnz	r3, 800280e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027f8:	464b      	mov	r3, r9
 80027fa:	4642      	mov	r2, r8
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff ff72 	bl	80026e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002804:	b950      	cbnz	r0, 800281c <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002806:	2320      	movs	r3, #32
 8002808:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 800280c:	e007      	b.n	800281e <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	464b      	mov	r3, r9
 8002810:	4642      	mov	r2, r8
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff ff67 	bl	80026e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800281a:	b110      	cbz	r0, 8002822 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 800281c:	2003      	movs	r0, #3
}
 800281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002822:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002824:	b94e      	cbnz	r6, 800283a <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002826:	f835 3b02 	ldrh.w	r3, [r5], #2
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800282e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002830:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002832:	3901      	subs	r1, #1
 8002834:	b289      	uxth	r1, r1
 8002836:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002838:	e7db      	b.n	80027f2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800283a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800283e:	e7f6      	b.n	800282e <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8002840:	2002      	movs	r0, #2
 8002842:	e7ec      	b.n	800281e <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8002844:	2001      	movs	r0, #1
 8002846:	e7ea      	b.n	800281e <HAL_UART_Transmit+0x6c>

08002848 <HAL_UART_Receive>:
{
 8002848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800284c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800284e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
 8002852:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8002854:	2b20      	cmp	r3, #32
{
 8002856:	460e      	mov	r6, r1
 8002858:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800285a:	d143      	bne.n	80028e4 <HAL_UART_Receive+0x9c>
    if ((pData == NULL) || (Size == 0U))
 800285c:	2900      	cmp	r1, #0
 800285e:	d043      	beq.n	80028e8 <HAL_UART_Receive+0xa0>
 8002860:	2a00      	cmp	r2, #0
 8002862:	d041      	beq.n	80028e8 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002864:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	2500      	movs	r5, #0
 8002868:	6445      	str	r5, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800286a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286e:	6305      	str	r5, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8002870:	f7ff fb2a 	bl	8001ec8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002874:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002876:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800287c:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002880:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002884:	d103      	bne.n	800288e <HAL_UART_Receive+0x46>
 8002886:	6923      	ldr	r3, [r4, #16]
 8002888:	b90b      	cbnz	r3, 800288e <HAL_UART_Receive+0x46>
 800288a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800288c:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 800288e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002890:	b280      	uxth	r0, r0
 8002892:	b920      	cbnz	r0, 800289e <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002894:	2320      	movs	r3, #32
 8002896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800289a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	463b      	mov	r3, r7
 80028a0:	4642      	mov	r2, r8
 80028a2:	2120      	movs	r1, #32
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff ff1f 	bl	80026e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80028aa:	b9f8      	cbnz	r0, 80028ec <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028ac:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80028ae:	b94e      	cbnz	r6, 80028c4 <HAL_UART_Receive+0x7c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b6:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80028ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80028c2:	e7e4      	b.n	800288e <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028c4:	68a2      	ldr	r2, [r4, #8]
 80028c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80028ca:	d002      	beq.n	80028d2 <HAL_UART_Receive+0x8a>
 80028cc:	b932      	cbnz	r2, 80028dc <HAL_UART_Receive+0x94>
 80028ce:	6922      	ldr	r2, [r4, #16]
 80028d0:	b922      	cbnz	r2, 80028dc <HAL_UART_Receive+0x94>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	b2c9      	uxtb	r1, r1
 80028d6:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80028da:	e7ee      	b.n	80028ba <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80028e2:	e7f8      	b.n	80028d6 <HAL_UART_Receive+0x8e>
    return HAL_BUSY;
 80028e4:	2002      	movs	r0, #2
 80028e6:	e7d8      	b.n	800289a <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
 80028ea:	e7d6      	b.n	800289a <HAL_UART_Receive+0x52>
        return HAL_TIMEOUT;
 80028ec:	2003      	movs	r0, #3
 80028ee:	e7d4      	b.n	800289a <HAL_UART_Receive+0x52>

080028f0 <__errno>:
 80028f0:	4b01      	ldr	r3, [pc, #4]	; (80028f8 <__errno+0x8>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000000c 	.word	0x2000000c

080028fc <__libc_init_array>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	2600      	movs	r6, #0
 8002900:	4d0c      	ldr	r5, [pc, #48]	; (8002934 <__libc_init_array+0x38>)
 8002902:	4c0d      	ldr	r4, [pc, #52]	; (8002938 <__libc_init_array+0x3c>)
 8002904:	1b64      	subs	r4, r4, r5
 8002906:	10a4      	asrs	r4, r4, #2
 8002908:	42a6      	cmp	r6, r4
 800290a:	d109      	bne.n	8002920 <__libc_init_array+0x24>
 800290c:	f000 fc9c 	bl	8003248 <_init>
 8002910:	2600      	movs	r6, #0
 8002912:	4d0a      	ldr	r5, [pc, #40]	; (800293c <__libc_init_array+0x40>)
 8002914:	4c0a      	ldr	r4, [pc, #40]	; (8002940 <__libc_init_array+0x44>)
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	42a6      	cmp	r6, r4
 800291c:	d105      	bne.n	800292a <__libc_init_array+0x2e>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	f855 3b04 	ldr.w	r3, [r5], #4
 8002924:	4798      	blx	r3
 8002926:	3601      	adds	r6, #1
 8002928:	e7ee      	b.n	8002908 <__libc_init_array+0xc>
 800292a:	f855 3b04 	ldr.w	r3, [r5], #4
 800292e:	4798      	blx	r3
 8002930:	3601      	adds	r6, #1
 8002932:	e7f2      	b.n	800291a <__libc_init_array+0x1e>
 8002934:	080044cc 	.word	0x080044cc
 8002938:	080044cc 	.word	0x080044cc
 800293c:	080044cc 	.word	0x080044cc
 8002940:	080044d0 	.word	0x080044d0

08002944 <memset>:
 8002944:	4603      	mov	r3, r0
 8002946:	4402      	add	r2, r0
 8002948:	4293      	cmp	r3, r2
 800294a:	d100      	bne.n	800294e <memset+0xa>
 800294c:	4770      	bx	lr
 800294e:	f803 1b01 	strb.w	r1, [r3], #1
 8002952:	e7f9      	b.n	8002948 <memset+0x4>

08002954 <siprintf>:
 8002954:	b40e      	push	{r1, r2, r3}
 8002956:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800295a:	b500      	push	{lr}
 800295c:	b09c      	sub	sp, #112	; 0x70
 800295e:	ab1d      	add	r3, sp, #116	; 0x74
 8002960:	9002      	str	r0, [sp, #8]
 8002962:	9006      	str	r0, [sp, #24]
 8002964:	9107      	str	r1, [sp, #28]
 8002966:	9104      	str	r1, [sp, #16]
 8002968:	4808      	ldr	r0, [pc, #32]	; (800298c <siprintf+0x38>)
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <siprintf+0x3c>)
 800296c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002970:	9105      	str	r1, [sp, #20]
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	a902      	add	r1, sp, #8
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	f000 f868 	bl	8002a4c <_svfiprintf_r>
 800297c:	2200      	movs	r2, #0
 800297e:	9b02      	ldr	r3, [sp, #8]
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	b01c      	add	sp, #112	; 0x70
 8002984:	f85d eb04 	ldr.w	lr, [sp], #4
 8002988:	b003      	add	sp, #12
 800298a:	4770      	bx	lr
 800298c:	2000000c 	.word	0x2000000c
 8002990:	ffff0208 	.word	0xffff0208

08002994 <__ssputs_r>:
 8002994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	688e      	ldr	r6, [r1, #8]
 800299a:	4682      	mov	sl, r0
 800299c:	429e      	cmp	r6, r3
 800299e:	460c      	mov	r4, r1
 80029a0:	4690      	mov	r8, r2
 80029a2:	461f      	mov	r7, r3
 80029a4:	d838      	bhi.n	8002a18 <__ssputs_r+0x84>
 80029a6:	898a      	ldrh	r2, [r1, #12]
 80029a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029ac:	d032      	beq.n	8002a14 <__ssputs_r+0x80>
 80029ae:	6825      	ldr	r5, [r4, #0]
 80029b0:	6909      	ldr	r1, [r1, #16]
 80029b2:	3301      	adds	r3, #1
 80029b4:	eba5 0901 	sub.w	r9, r5, r1
 80029b8:	6965      	ldr	r5, [r4, #20]
 80029ba:	444b      	add	r3, r9
 80029bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029c4:	106d      	asrs	r5, r5, #1
 80029c6:	429d      	cmp	r5, r3
 80029c8:	bf38      	it	cc
 80029ca:	461d      	movcc	r5, r3
 80029cc:	0553      	lsls	r3, r2, #21
 80029ce:	d531      	bpl.n	8002a34 <__ssputs_r+0xa0>
 80029d0:	4629      	mov	r1, r5
 80029d2:	f000 fb6f 	bl	80030b4 <_malloc_r>
 80029d6:	4606      	mov	r6, r0
 80029d8:	b950      	cbnz	r0, 80029f0 <__ssputs_r+0x5c>
 80029da:	230c      	movs	r3, #12
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f8ca 3000 	str.w	r3, [sl]
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f0:	464a      	mov	r2, r9
 80029f2:	6921      	ldr	r1, [r4, #16]
 80029f4:	f000 face 	bl	8002f94 <memcpy>
 80029f8:	89a3      	ldrh	r3, [r4, #12]
 80029fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a02:	81a3      	strh	r3, [r4, #12]
 8002a04:	6126      	str	r6, [r4, #16]
 8002a06:	444e      	add	r6, r9
 8002a08:	6026      	str	r6, [r4, #0]
 8002a0a:	463e      	mov	r6, r7
 8002a0c:	6165      	str	r5, [r4, #20]
 8002a0e:	eba5 0509 	sub.w	r5, r5, r9
 8002a12:	60a5      	str	r5, [r4, #8]
 8002a14:	42be      	cmp	r6, r7
 8002a16:	d900      	bls.n	8002a1a <__ssputs_r+0x86>
 8002a18:	463e      	mov	r6, r7
 8002a1a:	4632      	mov	r2, r6
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	f000 fac6 	bl	8002fb0 <memmove>
 8002a24:	68a3      	ldr	r3, [r4, #8]
 8002a26:	2000      	movs	r0, #0
 8002a28:	1b9b      	subs	r3, r3, r6
 8002a2a:	60a3      	str	r3, [r4, #8]
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	4433      	add	r3, r6
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	e7db      	b.n	80029ec <__ssputs_r+0x58>
 8002a34:	462a      	mov	r2, r5
 8002a36:	f000 fbb1 	bl	800319c <_realloc_r>
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d1e1      	bne.n	8002a04 <__ssputs_r+0x70>
 8002a40:	4650      	mov	r0, sl
 8002a42:	6921      	ldr	r1, [r4, #16]
 8002a44:	f000 face 	bl	8002fe4 <_free_r>
 8002a48:	e7c7      	b.n	80029da <__ssputs_r+0x46>
	...

08002a4c <_svfiprintf_r>:
 8002a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a50:	4698      	mov	r8, r3
 8002a52:	898b      	ldrh	r3, [r1, #12]
 8002a54:	4607      	mov	r7, r0
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	460d      	mov	r5, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	b09d      	sub	sp, #116	; 0x74
 8002a5e:	d50e      	bpl.n	8002a7e <_svfiprintf_r+0x32>
 8002a60:	690b      	ldr	r3, [r1, #16]
 8002a62:	b963      	cbnz	r3, 8002a7e <_svfiprintf_r+0x32>
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	f000 fb25 	bl	80030b4 <_malloc_r>
 8002a6a:	6028      	str	r0, [r5, #0]
 8002a6c:	6128      	str	r0, [r5, #16]
 8002a6e:	b920      	cbnz	r0, 8002a7a <_svfiprintf_r+0x2e>
 8002a70:	230c      	movs	r3, #12
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	e0d1      	b.n	8002c1e <_svfiprintf_r+0x1d2>
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	616b      	str	r3, [r5, #20]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9309      	str	r3, [sp, #36]	; 0x24
 8002a82:	2320      	movs	r3, #32
 8002a84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a88:	2330      	movs	r3, #48	; 0x30
 8002a8a:	f04f 0901 	mov.w	r9, #1
 8002a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c38 <_svfiprintf_r+0x1ec>
 8002a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	469a      	mov	sl, r3
 8002a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aa2:	b10a      	cbz	r2, 8002aa8 <_svfiprintf_r+0x5c>
 8002aa4:	2a25      	cmp	r2, #37	; 0x25
 8002aa6:	d1f9      	bne.n	8002a9c <_svfiprintf_r+0x50>
 8002aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8002aac:	d00b      	beq.n	8002ac6 <_svfiprintf_r+0x7a>
 8002aae:	465b      	mov	r3, fp
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	f7ff ff6d 	bl	8002994 <__ssputs_r>
 8002aba:	3001      	adds	r0, #1
 8002abc:	f000 80aa 	beq.w	8002c14 <_svfiprintf_r+0x1c8>
 8002ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ac2:	445a      	add	r2, fp
 8002ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a2 	beq.w	8002c14 <_svfiprintf_r+0x1c8>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ada:	f10a 0a01 	add.w	sl, sl, #1
 8002ade:	9304      	str	r3, [sp, #16]
 8002ae0:	9307      	str	r3, [sp, #28]
 8002ae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ae6:	931a      	str	r3, [sp, #104]	; 0x68
 8002ae8:	4654      	mov	r4, sl
 8002aea:	2205      	movs	r2, #5
 8002aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af0:	4851      	ldr	r0, [pc, #324]	; (8002c38 <_svfiprintf_r+0x1ec>)
 8002af2:	f000 fa41 	bl	8002f78 <memchr>
 8002af6:	9a04      	ldr	r2, [sp, #16]
 8002af8:	b9d8      	cbnz	r0, 8002b32 <_svfiprintf_r+0xe6>
 8002afa:	06d0      	lsls	r0, r2, #27
 8002afc:	bf44      	itt	mi
 8002afe:	2320      	movmi	r3, #32
 8002b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b04:	0711      	lsls	r1, r2, #28
 8002b06:	bf44      	itt	mi
 8002b08:	232b      	movmi	r3, #43	; 0x2b
 8002b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b12:	2b2a      	cmp	r3, #42	; 0x2a
 8002b14:	d015      	beq.n	8002b42 <_svfiprintf_r+0xf6>
 8002b16:	4654      	mov	r4, sl
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f04f 0c0a 	mov.w	ip, #10
 8002b1e:	9a07      	ldr	r2, [sp, #28]
 8002b20:	4621      	mov	r1, r4
 8002b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b26:	3b30      	subs	r3, #48	; 0x30
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	d94e      	bls.n	8002bca <_svfiprintf_r+0x17e>
 8002b2c:	b1b0      	cbz	r0, 8002b5c <_svfiprintf_r+0x110>
 8002b2e:	9207      	str	r2, [sp, #28]
 8002b30:	e014      	b.n	8002b5c <_svfiprintf_r+0x110>
 8002b32:	eba0 0308 	sub.w	r3, r0, r8
 8002b36:	fa09 f303 	lsl.w	r3, r9, r3
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	46a2      	mov	sl, r4
 8002b3e:	9304      	str	r3, [sp, #16]
 8002b40:	e7d2      	b.n	8002ae8 <_svfiprintf_r+0x9c>
 8002b42:	9b03      	ldr	r3, [sp, #12]
 8002b44:	1d19      	adds	r1, r3, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	9103      	str	r1, [sp, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bfbb      	ittet	lt
 8002b4e:	425b      	neglt	r3, r3
 8002b50:	f042 0202 	orrlt.w	r2, r2, #2
 8002b54:	9307      	strge	r3, [sp, #28]
 8002b56:	9307      	strlt	r3, [sp, #28]
 8002b58:	bfb8      	it	lt
 8002b5a:	9204      	strlt	r2, [sp, #16]
 8002b5c:	7823      	ldrb	r3, [r4, #0]
 8002b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b60:	d10c      	bne.n	8002b7c <_svfiprintf_r+0x130>
 8002b62:	7863      	ldrb	r3, [r4, #1]
 8002b64:	2b2a      	cmp	r3, #42	; 0x2a
 8002b66:	d135      	bne.n	8002bd4 <_svfiprintf_r+0x188>
 8002b68:	9b03      	ldr	r3, [sp, #12]
 8002b6a:	3402      	adds	r4, #2
 8002b6c:	1d1a      	adds	r2, r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	9203      	str	r2, [sp, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bfb8      	it	lt
 8002b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b7a:	9305      	str	r3, [sp, #20]
 8002b7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002c3c <_svfiprintf_r+0x1f0>
 8002b80:	2203      	movs	r2, #3
 8002b82:	4650      	mov	r0, sl
 8002b84:	7821      	ldrb	r1, [r4, #0]
 8002b86:	f000 f9f7 	bl	8002f78 <memchr>
 8002b8a:	b140      	cbz	r0, 8002b9e <_svfiprintf_r+0x152>
 8002b8c:	2340      	movs	r3, #64	; 0x40
 8002b8e:	eba0 000a 	sub.w	r0, r0, sl
 8002b92:	fa03 f000 	lsl.w	r0, r3, r0
 8002b96:	9b04      	ldr	r3, [sp, #16]
 8002b98:	3401      	adds	r4, #1
 8002b9a:	4303      	orrs	r3, r0
 8002b9c:	9304      	str	r3, [sp, #16]
 8002b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba2:	2206      	movs	r2, #6
 8002ba4:	4826      	ldr	r0, [pc, #152]	; (8002c40 <_svfiprintf_r+0x1f4>)
 8002ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002baa:	f000 f9e5 	bl	8002f78 <memchr>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d038      	beq.n	8002c24 <_svfiprintf_r+0x1d8>
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <_svfiprintf_r+0x1f8>)
 8002bb4:	bb1b      	cbnz	r3, 8002bfe <_svfiprintf_r+0x1b2>
 8002bb6:	9b03      	ldr	r3, [sp, #12]
 8002bb8:	3307      	adds	r3, #7
 8002bba:	f023 0307 	bic.w	r3, r3, #7
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	9303      	str	r3, [sp, #12]
 8002bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bc4:	4433      	add	r3, r6
 8002bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc8:	e767      	b.n	8002a9a <_svfiprintf_r+0x4e>
 8002bca:	460c      	mov	r4, r1
 8002bcc:	2001      	movs	r0, #1
 8002bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bd2:	e7a5      	b.n	8002b20 <_svfiprintf_r+0xd4>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f04f 0c0a 	mov.w	ip, #10
 8002bda:	4619      	mov	r1, r3
 8002bdc:	3401      	adds	r4, #1
 8002bde:	9305      	str	r3, [sp, #20]
 8002be0:	4620      	mov	r0, r4
 8002be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002be6:	3a30      	subs	r2, #48	; 0x30
 8002be8:	2a09      	cmp	r2, #9
 8002bea:	d903      	bls.n	8002bf4 <_svfiprintf_r+0x1a8>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0c5      	beq.n	8002b7c <_svfiprintf_r+0x130>
 8002bf0:	9105      	str	r1, [sp, #20]
 8002bf2:	e7c3      	b.n	8002b7c <_svfiprintf_r+0x130>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bfc:	e7f0      	b.n	8002be0 <_svfiprintf_r+0x194>
 8002bfe:	ab03      	add	r3, sp, #12
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	462a      	mov	r2, r5
 8002c04:	4638      	mov	r0, r7
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <_svfiprintf_r+0x1fc>)
 8002c08:	a904      	add	r1, sp, #16
 8002c0a:	f3af 8000 	nop.w
 8002c0e:	1c42      	adds	r2, r0, #1
 8002c10:	4606      	mov	r6, r0
 8002c12:	d1d6      	bne.n	8002bc2 <_svfiprintf_r+0x176>
 8002c14:	89ab      	ldrh	r3, [r5, #12]
 8002c16:	065b      	lsls	r3, r3, #25
 8002c18:	f53f af2c 	bmi.w	8002a74 <_svfiprintf_r+0x28>
 8002c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c1e:	b01d      	add	sp, #116	; 0x74
 8002c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c24:	ab03      	add	r3, sp, #12
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	462a      	mov	r2, r5
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <_svfiprintf_r+0x1fc>)
 8002c2e:	a904      	add	r1, sp, #16
 8002c30:	f000 f87c 	bl	8002d2c <_printf_i>
 8002c34:	e7eb      	b.n	8002c0e <_svfiprintf_r+0x1c2>
 8002c36:	bf00      	nop
 8002c38:	08004496 	.word	0x08004496
 8002c3c:	0800449c 	.word	0x0800449c
 8002c40:	080044a0 	.word	0x080044a0
 8002c44:	00000000 	.word	0x00000000
 8002c48:	08002995 	.word	0x08002995

08002c4c <_printf_common>:
 8002c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c50:	4616      	mov	r6, r2
 8002c52:	4699      	mov	r9, r3
 8002c54:	688a      	ldr	r2, [r1, #8]
 8002c56:	690b      	ldr	r3, [r1, #16]
 8002c58:	4607      	mov	r7, r0
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	bfb8      	it	lt
 8002c5e:	4613      	movlt	r3, r2
 8002c60:	6033      	str	r3, [r6, #0]
 8002c62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c66:	460c      	mov	r4, r1
 8002c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c6c:	b10a      	cbz	r2, 8002c72 <_printf_common+0x26>
 8002c6e:	3301      	adds	r3, #1
 8002c70:	6033      	str	r3, [r6, #0]
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	0699      	lsls	r1, r3, #26
 8002c76:	bf42      	ittt	mi
 8002c78:	6833      	ldrmi	r3, [r6, #0]
 8002c7a:	3302      	addmi	r3, #2
 8002c7c:	6033      	strmi	r3, [r6, #0]
 8002c7e:	6825      	ldr	r5, [r4, #0]
 8002c80:	f015 0506 	ands.w	r5, r5, #6
 8002c84:	d106      	bne.n	8002c94 <_printf_common+0x48>
 8002c86:	f104 0a19 	add.w	sl, r4, #25
 8002c8a:	68e3      	ldr	r3, [r4, #12]
 8002c8c:	6832      	ldr	r2, [r6, #0]
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	42ab      	cmp	r3, r5
 8002c92:	dc28      	bgt.n	8002ce6 <_printf_common+0x9a>
 8002c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c98:	1e13      	subs	r3, r2, #0
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	bf18      	it	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	0692      	lsls	r2, r2, #26
 8002ca2:	d42d      	bmi.n	8002d00 <_printf_common+0xb4>
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cac:	47c0      	blx	r8
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d020      	beq.n	8002cf4 <_printf_common+0xa8>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	68e5      	ldr	r5, [r4, #12]
 8002cb6:	f003 0306 	and.w	r3, r3, #6
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf18      	it	ne
 8002cbe:	2500      	movne	r5, #0
 8002cc0:	6832      	ldr	r2, [r6, #0]
 8002cc2:	f04f 0600 	mov.w	r6, #0
 8002cc6:	68a3      	ldr	r3, [r4, #8]
 8002cc8:	bf08      	it	eq
 8002cca:	1aad      	subeq	r5, r5, r2
 8002ccc:	6922      	ldr	r2, [r4, #16]
 8002cce:	bf08      	it	eq
 8002cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	bfc4      	itt	gt
 8002cd8:	1a9b      	subgt	r3, r3, r2
 8002cda:	18ed      	addgt	r5, r5, r3
 8002cdc:	341a      	adds	r4, #26
 8002cde:	42b5      	cmp	r5, r6
 8002ce0:	d11a      	bne.n	8002d18 <_printf_common+0xcc>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e008      	b.n	8002cf8 <_printf_common+0xac>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4652      	mov	r2, sl
 8002cea:	4649      	mov	r1, r9
 8002cec:	4638      	mov	r0, r7
 8002cee:	47c0      	blx	r8
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d103      	bne.n	8002cfc <_printf_common+0xb0>
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfc:	3501      	adds	r5, #1
 8002cfe:	e7c4      	b.n	8002c8a <_printf_common+0x3e>
 8002d00:	2030      	movs	r0, #48	; 0x30
 8002d02:	18e1      	adds	r1, r4, r3
 8002d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d0e:	4422      	add	r2, r4
 8002d10:	3302      	adds	r3, #2
 8002d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d16:	e7c5      	b.n	8002ca4 <_printf_common+0x58>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	4638      	mov	r0, r7
 8002d20:	47c0      	blx	r8
 8002d22:	3001      	adds	r0, #1
 8002d24:	d0e6      	beq.n	8002cf4 <_printf_common+0xa8>
 8002d26:	3601      	adds	r6, #1
 8002d28:	e7d9      	b.n	8002cde <_printf_common+0x92>
	...

08002d2c <_printf_i>:
 8002d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d30:	7e0f      	ldrb	r7, [r1, #24]
 8002d32:	4691      	mov	r9, r2
 8002d34:	2f78      	cmp	r7, #120	; 0x78
 8002d36:	4680      	mov	r8, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	469a      	mov	sl, r3
 8002d3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d42:	d807      	bhi.n	8002d54 <_printf_i+0x28>
 8002d44:	2f62      	cmp	r7, #98	; 0x62
 8002d46:	d80a      	bhi.n	8002d5e <_printf_i+0x32>
 8002d48:	2f00      	cmp	r7, #0
 8002d4a:	f000 80d9 	beq.w	8002f00 <_printf_i+0x1d4>
 8002d4e:	2f58      	cmp	r7, #88	; 0x58
 8002d50:	f000 80a4 	beq.w	8002e9c <_printf_i+0x170>
 8002d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d5c:	e03a      	b.n	8002dd4 <_printf_i+0xa8>
 8002d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d62:	2b15      	cmp	r3, #21
 8002d64:	d8f6      	bhi.n	8002d54 <_printf_i+0x28>
 8002d66:	a101      	add	r1, pc, #4	; (adr r1, 8002d6c <_printf_i+0x40>)
 8002d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d6c:	08002dc5 	.word	0x08002dc5
 8002d70:	08002dd9 	.word	0x08002dd9
 8002d74:	08002d55 	.word	0x08002d55
 8002d78:	08002d55 	.word	0x08002d55
 8002d7c:	08002d55 	.word	0x08002d55
 8002d80:	08002d55 	.word	0x08002d55
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002d55 	.word	0x08002d55
 8002d8c:	08002d55 	.word	0x08002d55
 8002d90:	08002d55 	.word	0x08002d55
 8002d94:	08002d55 	.word	0x08002d55
 8002d98:	08002ee7 	.word	0x08002ee7
 8002d9c:	08002e09 	.word	0x08002e09
 8002da0:	08002ec9 	.word	0x08002ec9
 8002da4:	08002d55 	.word	0x08002d55
 8002da8:	08002d55 	.word	0x08002d55
 8002dac:	08002f09 	.word	0x08002f09
 8002db0:	08002d55 	.word	0x08002d55
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002d55 	.word	0x08002d55
 8002dbc:	08002d55 	.word	0x08002d55
 8002dc0:	08002ed1 	.word	0x08002ed1
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	602a      	str	r2, [r5, #0]
 8002dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0a4      	b.n	8002f22 <_printf_i+0x1f6>
 8002dd8:	6820      	ldr	r0, [r4, #0]
 8002dda:	6829      	ldr	r1, [r5, #0]
 8002ddc:	0606      	lsls	r6, r0, #24
 8002dde:	f101 0304 	add.w	r3, r1, #4
 8002de2:	d50a      	bpl.n	8002dfa <_printf_i+0xce>
 8002de4:	680e      	ldr	r6, [r1, #0]
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	2e00      	cmp	r6, #0
 8002dea:	da03      	bge.n	8002df4 <_printf_i+0xc8>
 8002dec:	232d      	movs	r3, #45	; 0x2d
 8002dee:	4276      	negs	r6, r6
 8002df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df4:	230a      	movs	r3, #10
 8002df6:	485e      	ldr	r0, [pc, #376]	; (8002f70 <_printf_i+0x244>)
 8002df8:	e019      	b.n	8002e2e <_printf_i+0x102>
 8002dfa:	680e      	ldr	r6, [r1, #0]
 8002dfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	bf18      	it	ne
 8002e04:	b236      	sxthne	r6, r6
 8002e06:	e7ef      	b.n	8002de8 <_printf_i+0xbc>
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	1d19      	adds	r1, r3, #4
 8002e0e:	6029      	str	r1, [r5, #0]
 8002e10:	0601      	lsls	r1, r0, #24
 8002e12:	d501      	bpl.n	8002e18 <_printf_i+0xec>
 8002e14:	681e      	ldr	r6, [r3, #0]
 8002e16:	e002      	b.n	8002e1e <_printf_i+0xf2>
 8002e18:	0646      	lsls	r6, r0, #25
 8002e1a:	d5fb      	bpl.n	8002e14 <_printf_i+0xe8>
 8002e1c:	881e      	ldrh	r6, [r3, #0]
 8002e1e:	2f6f      	cmp	r7, #111	; 0x6f
 8002e20:	bf0c      	ite	eq
 8002e22:	2308      	moveq	r3, #8
 8002e24:	230a      	movne	r3, #10
 8002e26:	4852      	ldr	r0, [pc, #328]	; (8002f70 <_printf_i+0x244>)
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e2e:	6865      	ldr	r5, [r4, #4]
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	bfa8      	it	ge
 8002e34:	6821      	ldrge	r1, [r4, #0]
 8002e36:	60a5      	str	r5, [r4, #8]
 8002e38:	bfa4      	itt	ge
 8002e3a:	f021 0104 	bicge.w	r1, r1, #4
 8002e3e:	6021      	strge	r1, [r4, #0]
 8002e40:	b90e      	cbnz	r6, 8002e46 <_printf_i+0x11a>
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	d04d      	beq.n	8002ee2 <_printf_i+0x1b6>
 8002e46:	4615      	mov	r5, r2
 8002e48:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e4c:	fb03 6711 	mls	r7, r3, r1, r6
 8002e50:	5dc7      	ldrb	r7, [r0, r7]
 8002e52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e56:	4637      	mov	r7, r6
 8002e58:	42bb      	cmp	r3, r7
 8002e5a:	460e      	mov	r6, r1
 8002e5c:	d9f4      	bls.n	8002e48 <_printf_i+0x11c>
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d10b      	bne.n	8002e7a <_printf_i+0x14e>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	07de      	lsls	r6, r3, #31
 8002e66:	d508      	bpl.n	8002e7a <_printf_i+0x14e>
 8002e68:	6923      	ldr	r3, [r4, #16]
 8002e6a:	6861      	ldr	r1, [r4, #4]
 8002e6c:	4299      	cmp	r1, r3
 8002e6e:	bfde      	ittt	le
 8002e70:	2330      	movle	r3, #48	; 0x30
 8002e72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e7a:	1b52      	subs	r2, r2, r5
 8002e7c:	6122      	str	r2, [r4, #16]
 8002e7e:	464b      	mov	r3, r9
 8002e80:	4621      	mov	r1, r4
 8002e82:	4640      	mov	r0, r8
 8002e84:	f8cd a000 	str.w	sl, [sp]
 8002e88:	aa03      	add	r2, sp, #12
 8002e8a:	f7ff fedf 	bl	8002c4c <_printf_common>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d14c      	bne.n	8002f2c <_printf_i+0x200>
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	b004      	add	sp, #16
 8002e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e9c:	4834      	ldr	r0, [pc, #208]	; (8002f70 <_printf_i+0x244>)
 8002e9e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ea2:	6829      	ldr	r1, [r5, #0]
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eaa:	6029      	str	r1, [r5, #0]
 8002eac:	061d      	lsls	r5, r3, #24
 8002eae:	d514      	bpl.n	8002eda <_printf_i+0x1ae>
 8002eb0:	07df      	lsls	r7, r3, #31
 8002eb2:	bf44      	itt	mi
 8002eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8002eb8:	6023      	strmi	r3, [r4, #0]
 8002eba:	b91e      	cbnz	r6, 8002ec4 <_printf_i+0x198>
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	f023 0320 	bic.w	r3, r3, #32
 8002ec2:	6023      	str	r3, [r4, #0]
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	e7af      	b.n	8002e28 <_printf_i+0xfc>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	2378      	movs	r3, #120	; 0x78
 8002ed2:	4828      	ldr	r0, [pc, #160]	; (8002f74 <_printf_i+0x248>)
 8002ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ed8:	e7e3      	b.n	8002ea2 <_printf_i+0x176>
 8002eda:	0659      	lsls	r1, r3, #25
 8002edc:	bf48      	it	mi
 8002ede:	b2b6      	uxthmi	r6, r6
 8002ee0:	e7e6      	b.n	8002eb0 <_printf_i+0x184>
 8002ee2:	4615      	mov	r5, r2
 8002ee4:	e7bb      	b.n	8002e5e <_printf_i+0x132>
 8002ee6:	682b      	ldr	r3, [r5, #0]
 8002ee8:	6826      	ldr	r6, [r4, #0]
 8002eea:	1d18      	adds	r0, r3, #4
 8002eec:	6961      	ldr	r1, [r4, #20]
 8002eee:	6028      	str	r0, [r5, #0]
 8002ef0:	0635      	lsls	r5, r6, #24
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	d501      	bpl.n	8002efa <_printf_i+0x1ce>
 8002ef6:	6019      	str	r1, [r3, #0]
 8002ef8:	e002      	b.n	8002f00 <_printf_i+0x1d4>
 8002efa:	0670      	lsls	r0, r6, #25
 8002efc:	d5fb      	bpl.n	8002ef6 <_printf_i+0x1ca>
 8002efe:	8019      	strh	r1, [r3, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	4615      	mov	r5, r2
 8002f04:	6123      	str	r3, [r4, #16]
 8002f06:	e7ba      	b.n	8002e7e <_printf_i+0x152>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	602a      	str	r2, [r5, #0]
 8002f10:	681d      	ldr	r5, [r3, #0]
 8002f12:	6862      	ldr	r2, [r4, #4]
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f82f 	bl	8002f78 <memchr>
 8002f1a:	b108      	cbz	r0, 8002f20 <_printf_i+0x1f4>
 8002f1c:	1b40      	subs	r0, r0, r5
 8002f1e:	6060      	str	r0, [r4, #4]
 8002f20:	6863      	ldr	r3, [r4, #4]
 8002f22:	6123      	str	r3, [r4, #16]
 8002f24:	2300      	movs	r3, #0
 8002f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f2a:	e7a8      	b.n	8002e7e <_printf_i+0x152>
 8002f2c:	462a      	mov	r2, r5
 8002f2e:	4649      	mov	r1, r9
 8002f30:	4640      	mov	r0, r8
 8002f32:	6923      	ldr	r3, [r4, #16]
 8002f34:	47d0      	blx	sl
 8002f36:	3001      	adds	r0, #1
 8002f38:	d0ab      	beq.n	8002e92 <_printf_i+0x166>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	079b      	lsls	r3, r3, #30
 8002f3e:	d413      	bmi.n	8002f68 <_printf_i+0x23c>
 8002f40:	68e0      	ldr	r0, [r4, #12]
 8002f42:	9b03      	ldr	r3, [sp, #12]
 8002f44:	4298      	cmp	r0, r3
 8002f46:	bfb8      	it	lt
 8002f48:	4618      	movlt	r0, r3
 8002f4a:	e7a4      	b.n	8002e96 <_printf_i+0x16a>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4632      	mov	r2, r6
 8002f50:	4649      	mov	r1, r9
 8002f52:	4640      	mov	r0, r8
 8002f54:	47d0      	blx	sl
 8002f56:	3001      	adds	r0, #1
 8002f58:	d09b      	beq.n	8002e92 <_printf_i+0x166>
 8002f5a:	3501      	adds	r5, #1
 8002f5c:	68e3      	ldr	r3, [r4, #12]
 8002f5e:	9903      	ldr	r1, [sp, #12]
 8002f60:	1a5b      	subs	r3, r3, r1
 8002f62:	42ab      	cmp	r3, r5
 8002f64:	dcf2      	bgt.n	8002f4c <_printf_i+0x220>
 8002f66:	e7eb      	b.n	8002f40 <_printf_i+0x214>
 8002f68:	2500      	movs	r5, #0
 8002f6a:	f104 0619 	add.w	r6, r4, #25
 8002f6e:	e7f5      	b.n	8002f5c <_printf_i+0x230>
 8002f70:	080044a7 	.word	0x080044a7
 8002f74:	080044b8 	.word	0x080044b8

08002f78 <memchr>:
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b510      	push	{r4, lr}
 8002f7c:	b2c9      	uxtb	r1, r1
 8002f7e:	4402      	add	r2, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	d101      	bne.n	8002f8a <memchr+0x12>
 8002f86:	2000      	movs	r0, #0
 8002f88:	e003      	b.n	8002f92 <memchr+0x1a>
 8002f8a:	7804      	ldrb	r4, [r0, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	428c      	cmp	r4, r1
 8002f90:	d1f6      	bne.n	8002f80 <memchr+0x8>
 8002f92:	bd10      	pop	{r4, pc}

08002f94 <memcpy>:
 8002f94:	440a      	add	r2, r1
 8002f96:	4291      	cmp	r1, r2
 8002f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f9c:	d100      	bne.n	8002fa0 <memcpy+0xc>
 8002f9e:	4770      	bx	lr
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fac:	d1f9      	bne.n	8002fa2 <memcpy+0xe>
 8002fae:	bd10      	pop	{r4, pc}

08002fb0 <memmove>:
 8002fb0:	4288      	cmp	r0, r1
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	eb01 0402 	add.w	r4, r1, r2
 8002fb8:	d902      	bls.n	8002fc0 <memmove+0x10>
 8002fba:	4284      	cmp	r4, r0
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	d807      	bhi.n	8002fd0 <memmove+0x20>
 8002fc0:	1e43      	subs	r3, r0, #1
 8002fc2:	42a1      	cmp	r1, r4
 8002fc4:	d008      	beq.n	8002fd8 <memmove+0x28>
 8002fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fce:	e7f8      	b.n	8002fc2 <memmove+0x12>
 8002fd0:	4601      	mov	r1, r0
 8002fd2:	4402      	add	r2, r0
 8002fd4:	428a      	cmp	r2, r1
 8002fd6:	d100      	bne.n	8002fda <memmove+0x2a>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fe2:	e7f7      	b.n	8002fd4 <memmove+0x24>

08002fe4 <_free_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d040      	beq.n	800306e <_free_r+0x8a>
 8002fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff0:	1f0c      	subs	r4, r1, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bfb8      	it	lt
 8002ff6:	18e4      	addlt	r4, r4, r3
 8002ff8:	f000 f910 	bl	800321c <__malloc_lock>
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <_free_r+0x8c>)
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	b933      	cbnz	r3, 8003010 <_free_r+0x2c>
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	6014      	str	r4, [r2, #0]
 8003006:	4628      	mov	r0, r5
 8003008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800300c:	f000 b90c 	b.w	8003228 <__malloc_unlock>
 8003010:	42a3      	cmp	r3, r4
 8003012:	d908      	bls.n	8003026 <_free_r+0x42>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	1821      	adds	r1, r4, r0
 8003018:	428b      	cmp	r3, r1
 800301a:	bf01      	itttt	eq
 800301c:	6819      	ldreq	r1, [r3, #0]
 800301e:	685b      	ldreq	r3, [r3, #4]
 8003020:	1809      	addeq	r1, r1, r0
 8003022:	6021      	streq	r1, [r4, #0]
 8003024:	e7ed      	b.n	8003002 <_free_r+0x1e>
 8003026:	461a      	mov	r2, r3
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	b10b      	cbz	r3, 8003030 <_free_r+0x4c>
 800302c:	42a3      	cmp	r3, r4
 800302e:	d9fa      	bls.n	8003026 <_free_r+0x42>
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	1850      	adds	r0, r2, r1
 8003034:	42a0      	cmp	r0, r4
 8003036:	d10b      	bne.n	8003050 <_free_r+0x6c>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	4401      	add	r1, r0
 800303c:	1850      	adds	r0, r2, r1
 800303e:	4283      	cmp	r3, r0
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	d1e0      	bne.n	8003006 <_free_r+0x22>
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4401      	add	r1, r0
 800304a:	6011      	str	r1, [r2, #0]
 800304c:	6053      	str	r3, [r2, #4]
 800304e:	e7da      	b.n	8003006 <_free_r+0x22>
 8003050:	d902      	bls.n	8003058 <_free_r+0x74>
 8003052:	230c      	movs	r3, #12
 8003054:	602b      	str	r3, [r5, #0]
 8003056:	e7d6      	b.n	8003006 <_free_r+0x22>
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	1821      	adds	r1, r4, r0
 800305c:	428b      	cmp	r3, r1
 800305e:	bf01      	itttt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	1809      	addeq	r1, r1, r0
 8003066:	6021      	streq	r1, [r4, #0]
 8003068:	6063      	str	r3, [r4, #4]
 800306a:	6054      	str	r4, [r2, #4]
 800306c:	e7cb      	b.n	8003006 <_free_r+0x22>
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	20008100 	.word	0x20008100

08003074 <sbrk_aligned>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4e0e      	ldr	r6, [pc, #56]	; (80030b0 <sbrk_aligned+0x3c>)
 8003078:	460c      	mov	r4, r1
 800307a:	6831      	ldr	r1, [r6, #0]
 800307c:	4605      	mov	r5, r0
 800307e:	b911      	cbnz	r1, 8003086 <sbrk_aligned+0x12>
 8003080:	f000 f8bc 	bl	80031fc <_sbrk_r>
 8003084:	6030      	str	r0, [r6, #0]
 8003086:	4621      	mov	r1, r4
 8003088:	4628      	mov	r0, r5
 800308a:	f000 f8b7 	bl	80031fc <_sbrk_r>
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	d00a      	beq.n	80030a8 <sbrk_aligned+0x34>
 8003092:	1cc4      	adds	r4, r0, #3
 8003094:	f024 0403 	bic.w	r4, r4, #3
 8003098:	42a0      	cmp	r0, r4
 800309a:	d007      	beq.n	80030ac <sbrk_aligned+0x38>
 800309c:	1a21      	subs	r1, r4, r0
 800309e:	4628      	mov	r0, r5
 80030a0:	f000 f8ac 	bl	80031fc <_sbrk_r>
 80030a4:	3001      	adds	r0, #1
 80030a6:	d101      	bne.n	80030ac <sbrk_aligned+0x38>
 80030a8:	f04f 34ff 	mov.w	r4, #4294967295
 80030ac:	4620      	mov	r0, r4
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	20008104 	.word	0x20008104

080030b4 <_malloc_r>:
 80030b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b8:	1ccd      	adds	r5, r1, #3
 80030ba:	f025 0503 	bic.w	r5, r5, #3
 80030be:	3508      	adds	r5, #8
 80030c0:	2d0c      	cmp	r5, #12
 80030c2:	bf38      	it	cc
 80030c4:	250c      	movcc	r5, #12
 80030c6:	2d00      	cmp	r5, #0
 80030c8:	4607      	mov	r7, r0
 80030ca:	db01      	blt.n	80030d0 <_malloc_r+0x1c>
 80030cc:	42a9      	cmp	r1, r5
 80030ce:	d905      	bls.n	80030dc <_malloc_r+0x28>
 80030d0:	230c      	movs	r3, #12
 80030d2:	2600      	movs	r6, #0
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	4630      	mov	r0, r6
 80030d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030dc:	4e2e      	ldr	r6, [pc, #184]	; (8003198 <_malloc_r+0xe4>)
 80030de:	f000 f89d 	bl	800321c <__malloc_lock>
 80030e2:	6833      	ldr	r3, [r6, #0]
 80030e4:	461c      	mov	r4, r3
 80030e6:	bb34      	cbnz	r4, 8003136 <_malloc_r+0x82>
 80030e8:	4629      	mov	r1, r5
 80030ea:	4638      	mov	r0, r7
 80030ec:	f7ff ffc2 	bl	8003074 <sbrk_aligned>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	4604      	mov	r4, r0
 80030f4:	d14d      	bne.n	8003192 <_malloc_r+0xde>
 80030f6:	6834      	ldr	r4, [r6, #0]
 80030f8:	4626      	mov	r6, r4
 80030fa:	2e00      	cmp	r6, #0
 80030fc:	d140      	bne.n	8003180 <_malloc_r+0xcc>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	4631      	mov	r1, r6
 8003102:	4638      	mov	r0, r7
 8003104:	eb04 0803 	add.w	r8, r4, r3
 8003108:	f000 f878 	bl	80031fc <_sbrk_r>
 800310c:	4580      	cmp	r8, r0
 800310e:	d13a      	bne.n	8003186 <_malloc_r+0xd2>
 8003110:	6821      	ldr	r1, [r4, #0]
 8003112:	3503      	adds	r5, #3
 8003114:	1a6d      	subs	r5, r5, r1
 8003116:	f025 0503 	bic.w	r5, r5, #3
 800311a:	3508      	adds	r5, #8
 800311c:	2d0c      	cmp	r5, #12
 800311e:	bf38      	it	cc
 8003120:	250c      	movcc	r5, #12
 8003122:	4638      	mov	r0, r7
 8003124:	4629      	mov	r1, r5
 8003126:	f7ff ffa5 	bl	8003074 <sbrk_aligned>
 800312a:	3001      	adds	r0, #1
 800312c:	d02b      	beq.n	8003186 <_malloc_r+0xd2>
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	442b      	add	r3, r5
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	e00e      	b.n	8003154 <_malloc_r+0xa0>
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	1b52      	subs	r2, r2, r5
 800313a:	d41e      	bmi.n	800317a <_malloc_r+0xc6>
 800313c:	2a0b      	cmp	r2, #11
 800313e:	d916      	bls.n	800316e <_malloc_r+0xba>
 8003140:	1961      	adds	r1, r4, r5
 8003142:	42a3      	cmp	r3, r4
 8003144:	6025      	str	r5, [r4, #0]
 8003146:	bf18      	it	ne
 8003148:	6059      	strne	r1, [r3, #4]
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	bf08      	it	eq
 800314e:	6031      	streq	r1, [r6, #0]
 8003150:	5162      	str	r2, [r4, r5]
 8003152:	604b      	str	r3, [r1, #4]
 8003154:	4638      	mov	r0, r7
 8003156:	f104 060b 	add.w	r6, r4, #11
 800315a:	f000 f865 	bl	8003228 <__malloc_unlock>
 800315e:	f026 0607 	bic.w	r6, r6, #7
 8003162:	1d23      	adds	r3, r4, #4
 8003164:	1af2      	subs	r2, r6, r3
 8003166:	d0b6      	beq.n	80030d6 <_malloc_r+0x22>
 8003168:	1b9b      	subs	r3, r3, r6
 800316a:	50a3      	str	r3, [r4, r2]
 800316c:	e7b3      	b.n	80030d6 <_malloc_r+0x22>
 800316e:	6862      	ldr	r2, [r4, #4]
 8003170:	42a3      	cmp	r3, r4
 8003172:	bf0c      	ite	eq
 8003174:	6032      	streq	r2, [r6, #0]
 8003176:	605a      	strne	r2, [r3, #4]
 8003178:	e7ec      	b.n	8003154 <_malloc_r+0xa0>
 800317a:	4623      	mov	r3, r4
 800317c:	6864      	ldr	r4, [r4, #4]
 800317e:	e7b2      	b.n	80030e6 <_malloc_r+0x32>
 8003180:	4634      	mov	r4, r6
 8003182:	6876      	ldr	r6, [r6, #4]
 8003184:	e7b9      	b.n	80030fa <_malloc_r+0x46>
 8003186:	230c      	movs	r3, #12
 8003188:	4638      	mov	r0, r7
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	f000 f84c 	bl	8003228 <__malloc_unlock>
 8003190:	e7a1      	b.n	80030d6 <_malloc_r+0x22>
 8003192:	6025      	str	r5, [r4, #0]
 8003194:	e7de      	b.n	8003154 <_malloc_r+0xa0>
 8003196:	bf00      	nop
 8003198:	20008100 	.word	0x20008100

0800319c <_realloc_r>:
 800319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a0:	4680      	mov	r8, r0
 80031a2:	4614      	mov	r4, r2
 80031a4:	460e      	mov	r6, r1
 80031a6:	b921      	cbnz	r1, 80031b2 <_realloc_r+0x16>
 80031a8:	4611      	mov	r1, r2
 80031aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ae:	f7ff bf81 	b.w	80030b4 <_malloc_r>
 80031b2:	b92a      	cbnz	r2, 80031c0 <_realloc_r+0x24>
 80031b4:	f7ff ff16 	bl	8002fe4 <_free_r>
 80031b8:	4625      	mov	r5, r4
 80031ba:	4628      	mov	r0, r5
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031c0:	f000 f838 	bl	8003234 <_malloc_usable_size_r>
 80031c4:	4284      	cmp	r4, r0
 80031c6:	4607      	mov	r7, r0
 80031c8:	d802      	bhi.n	80031d0 <_realloc_r+0x34>
 80031ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031ce:	d812      	bhi.n	80031f6 <_realloc_r+0x5a>
 80031d0:	4621      	mov	r1, r4
 80031d2:	4640      	mov	r0, r8
 80031d4:	f7ff ff6e 	bl	80030b4 <_malloc_r>
 80031d8:	4605      	mov	r5, r0
 80031da:	2800      	cmp	r0, #0
 80031dc:	d0ed      	beq.n	80031ba <_realloc_r+0x1e>
 80031de:	42bc      	cmp	r4, r7
 80031e0:	4622      	mov	r2, r4
 80031e2:	4631      	mov	r1, r6
 80031e4:	bf28      	it	cs
 80031e6:	463a      	movcs	r2, r7
 80031e8:	f7ff fed4 	bl	8002f94 <memcpy>
 80031ec:	4631      	mov	r1, r6
 80031ee:	4640      	mov	r0, r8
 80031f0:	f7ff fef8 	bl	8002fe4 <_free_r>
 80031f4:	e7e1      	b.n	80031ba <_realloc_r+0x1e>
 80031f6:	4635      	mov	r5, r6
 80031f8:	e7df      	b.n	80031ba <_realloc_r+0x1e>
	...

080031fc <_sbrk_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	2300      	movs	r3, #0
 8003200:	4d05      	ldr	r5, [pc, #20]	; (8003218 <_sbrk_r+0x1c>)
 8003202:	4604      	mov	r4, r0
 8003204:	4608      	mov	r0, r1
 8003206:	602b      	str	r3, [r5, #0]
 8003208:	f7fe fdd4 	bl	8001db4 <_sbrk>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d102      	bne.n	8003216 <_sbrk_r+0x1a>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	b103      	cbz	r3, 8003216 <_sbrk_r+0x1a>
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	20008108 	.word	0x20008108

0800321c <__malloc_lock>:
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <__malloc_lock+0x8>)
 800321e:	f000 b811 	b.w	8003244 <__retarget_lock_acquire_recursive>
 8003222:	bf00      	nop
 8003224:	2000810c 	.word	0x2000810c

08003228 <__malloc_unlock>:
 8003228:	4801      	ldr	r0, [pc, #4]	; (8003230 <__malloc_unlock+0x8>)
 800322a:	f000 b80c 	b.w	8003246 <__retarget_lock_release_recursive>
 800322e:	bf00      	nop
 8003230:	2000810c 	.word	0x2000810c

08003234 <_malloc_usable_size_r>:
 8003234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003238:	1f18      	subs	r0, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	bfbc      	itt	lt
 800323e:	580b      	ldrlt	r3, [r1, r0]
 8003240:	18c0      	addlt	r0, r0, r3
 8003242:	4770      	bx	lr

08003244 <__retarget_lock_acquire_recursive>:
 8003244:	4770      	bx	lr

08003246 <__retarget_lock_release_recursive>:
 8003246:	4770      	bx	lr

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
