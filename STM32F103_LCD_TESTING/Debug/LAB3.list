
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a8  080028a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080028a8  080028a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a8  080028a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080028b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002920  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002920  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000905b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1c  00000000  00000000  000290f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005163  00000000  00000000  0002ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  0002fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a08  00000000  00000000  000302d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f3b  00000000  00000000  00031ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d20  00000000  00000000  0004ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000907e8  00000000  00000000  0005493b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e5123  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011e4  00000000  00000000  000e5174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08001dfc 	.word	0x08001dfc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08001dfc 	.word	0x08001dfc

08000224 <LCD_REG_Config>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000224:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000228:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800022a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800022e:	2100      	movs	r1, #0
 8000230:	2081      	movs	r0, #129	; 0x81
 8000232:	f04f 0c30 	mov.w	ip, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000236:	f04f 04ed 	mov.w	r4, #237	; 0xed
 800023a:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800023c:	4b70      	ldr	r3, [pc, #448]	; (8000400 <LCD_REG_Config+0x1dc>)
 800023e:	f04f 0803 	mov.w	r8, #3
 8000242:	8019      	strh	r1, [r3, #0]
 8000244:	8018      	strh	r0, [r3, #0]
 8000246:	f8a3 c000 	strh.w	ip, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800024a:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800024c:	f04f 0464 	mov.w	r4, #100	; 0x64
 8000250:	801c      	strh	r4, [r3, #0]
 8000252:	f04f 0412 	mov.w	r4, #18
 8000256:	f8a3 8000 	strh.w	r8, [r3]
 800025a:	801c      	strh	r4, [r3, #0]
 800025c:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800025e:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 8000262:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000264:	f04f 0085 	mov.w	r0, #133	; 0x85
 8000268:	f04f 0b10 	mov.w	fp, #16
 800026c:	8018      	strh	r0, [r3, #0]
 800026e:	f04f 0078 	mov.w	r0, #120	; 0x78
 8000272:	f8a3 b000 	strh.w	fp, [r3]
 8000276:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000278:	f04f 00cb 	mov.w	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800027c:	f04f 0939 	mov.w	r9, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000280:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000282:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000286:	f8a3 9000 	strh.w	r9, [r3]
 800028a:	8018      	strh	r0, [r3, #0]
 800028c:	f04f 0034 	mov.w	r0, #52	; 0x34
 8000290:	8019      	strh	r1, [r3, #0]
 8000292:	8018      	strh	r0, [r3, #0]
 8000294:	f04f 0002 	mov.w	r0, #2
 8000298:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800029a:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 800029e:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002a0:	f04f 0020 	mov.w	r0, #32
 80002a4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002a6:	f04f 00ea 	mov.w	r0, #234	; 0xea
 80002aa:	8010      	strh	r0, [r2, #0]
 80002ac:	f04f 00b1 	mov.w	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002b0:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002b2:	f04f 04b6 	mov.w	r4, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002b6:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002b8:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002ba:	f04f 001b 	mov.w	r0, #27
 80002be:	8019      	strh	r1, [r3, #0]
 80002c0:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c2:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c4:	f04f 040a 	mov.w	r4, #10
 80002c8:	801c      	strh	r4, [r3, #0]
 80002ca:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 80002ce:	801c      	strh	r4, [r3, #0]
 80002d0:	4620      	mov	r0, r4
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002d2:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 80002d6:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002d8:	f04f 0435 	mov.w	r4, #53	; 0x35
 80002dc:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002de:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 80002e2:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002e4:	f04f 0411 	mov.w	r4, #17
 80002e8:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002ea:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 80002ee:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002f0:	f04f 0445 	mov.w	r4, #69	; 0x45
 80002f4:	801c      	strh	r4, [r3, #0]
 80002f6:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002f8:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 80002fc:	8014      	strh	r4, [r2, #0]
 80002fe:	f04f 04f2 	mov.w	r4, #242	; 0xf2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	8018      	strh	r0, [r3, #0]
 8000304:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000306:	8014      	strh	r4, [r2, #0]
 8000308:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 800030c:	f04f 0426 	mov.w	r4, #38	; 0x26
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000310:	8019      	strh	r1, [r3, #0]
 8000312:	270f      	movs	r7, #15
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000314:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000316:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000318:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800031a:	f04f 0024 	mov.w	r0, #36	; 0x24
 800031e:	801f      	strh	r7, [r3, #0]
 8000320:	801c      	strh	r4, [r3, #0]
 8000322:	8018      	strh	r0, [r3, #0]
 8000324:	f04f 000b 	mov.w	r0, #11
 8000328:	8018      	strh	r0, [r3, #0]
 800032a:	f04f 000e 	mov.w	r0, #14
 800032e:	f04f 0409 	mov.w	r4, #9
 8000332:	8018      	strh	r0, [r3, #0]
 8000334:	f04f 0054 	mov.w	r0, #84	; 0x54
 8000338:	801c      	strh	r4, [r3, #0]
 800033a:	8018      	strh	r0, [r3, #0]
 800033c:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8000340:	8018      	strh	r0, [r3, #0]
 8000342:	f04f 0046 	mov.w	r0, #70	; 0x46
 8000346:	8018      	strh	r0, [r3, #0]
 8000348:	f04f 000c 	mov.w	r0, #12
 800034c:	8018      	strh	r0, [r3, #0]
 800034e:	f04f 0017 	mov.w	r0, #23
 8000352:	f04f 0a07 	mov.w	sl, #7
 8000356:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000358:	f04f 00e1 	mov.w	r0, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800035c:	801c      	strh	r4, [r3, #0]
 800035e:	801f      	strh	r7, [r3, #0]
 8000360:	f8a3 a000 	strh.w	sl, [r3]
 8000364:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000366:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000368:	f04f 0019 	mov.w	r0, #25
 800036c:	8019      	strh	r1, [r3, #0]
 800036e:	8018      	strh	r0, [r3, #0]
 8000370:	f04f 001b 	mov.w	r0, #27
 8000374:	8018      	strh	r0, [r3, #0]
 8000376:	f04f 0004 	mov.w	r0, #4
 800037a:	262a      	movs	r6, #42	; 0x2a
 800037c:	8018      	strh	r0, [r3, #0]
 800037e:	f04f 0047 	mov.w	r0, #71	; 0x47
 8000382:	f8a3 b000 	strh.w	fp, [r3]
 8000386:	f04f 0e06 	mov.w	lr, #6
 800038a:	f8a3 a000 	strh.w	sl, [r3]
 800038e:	801e      	strh	r6, [r3, #0]
 8000390:	8018      	strh	r0, [r3, #0]
 8000392:	f04f 0038 	mov.w	r0, #56	; 0x38
 8000396:	f8a3 9000 	strh.w	r9, [r3]
 800039a:	f8a3 8000 	strh.w	r8, [r3]
 800039e:	f8a3 e000 	strh.w	lr, [r3]
 80003a2:	f8a3 e000 	strh.w	lr, [r3]
 80003a6:	f8a3 c000 	strh.w	ip, [r3]
 80003aa:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003ac:	f04f 0036 	mov.w	r0, #54	; 0x36
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003b0:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003b2:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003b4:	f04f 0068 	mov.w	r0, #104	; 0x68
 80003b8:	8018      	strh	r0, [r3, #0]
 80003ba:	f04f 00ef 	mov.w	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003be:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003c0:	8019      	strh	r1, [r3, #0]
 80003c2:	8019      	strh	r1, [r3, #0]
 80003c4:	8019      	strh	r1, [r3, #0]
 80003c6:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003c8:	f04f 002b 	mov.w	r0, #43	; 0x2b
 80003cc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003ce:	8019      	strh	r1, [r3, #0]
 80003d0:	8019      	strh	r1, [r3, #0]
 80003d2:	f04f 013f 	mov.w	r1, #63	; 0x3f
 80003d6:	801d      	strh	r5, [r3, #0]
 80003d8:	f04f 0055 	mov.w	r0, #85	; 0x55
 80003dc:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003de:	f04f 013a 	mov.w	r1, #58	; 0x3a
 80003e2:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003e4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003e6:	f04f 0311 	mov.w	r3, #17
 80003ea:	4906      	ldr	r1, [pc, #24]	; (8000404 <LCD_REG_Config+0x1e0>)
 80003ec:	8013      	strh	r3, [r2, #0]
void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80003ee:	3901      	subs	r1, #1
 80003f0:	d1fd      	bne.n	80003ee <LCD_REG_Config+0x1ca>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003f2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80003f6:	2229      	movs	r2, #41	; 0x29
 80003f8:	801a      	strh	r2, [r3, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 80003fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003fe:	bf00      	nop
 8000400:	60020000 	.word	0x60020000
 8000404:	0002bffc 	.word	0x0002bffc

08000408 <LCD_INIT>:
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 800040e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000412:	481b      	ldr	r0, [pc, #108]	; (8000480 <LCD_INIT+0x78>)
 8000414:	f000 fcdc 	bl	8000dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2102      	movs	r1, #2
 800041c:	4819      	ldr	r0, [pc, #100]	; (8000484 <LCD_INIT+0x7c>)
 800041e:	f000 fcd7 	bl	8000dd0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <LCD_INIT+0x80>)
void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000424:	3b01      	subs	r3, #1
 8000426:	d1fd      	bne.n	8000424 <LCD_INIT+0x1c>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2102      	movs	r1, #2
 800042c:	4815      	ldr	r0, [pc, #84]	; (8000484 <LCD_INIT+0x7c>)
 800042e:	f000 fccf 	bl	8000dd0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000432:	4c15      	ldr	r4, [pc, #84]	; (8000488 <LCD_INIT+0x80>)
void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000434:	3c01      	subs	r4, #1
 8000436:	d1fd      	bne.n	8000434 <LCD_INIT+0x2c>
	LCD_REG_Config();
 8000438:	f7ff fef4 	bl	8000224 <LCD_REG_Config>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800043c:	f04f 082a 	mov.w	r8, #42	; 0x2a
 8000440:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000444:	2701      	movs	r7, #1
 8000446:	263f      	movs	r6, #63	; 0x3f
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000448:	252b      	movs	r5, #43	; 0x2b
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800044a:	f04f 0eef 	mov.w	lr, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800044e:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8000452:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000456:	4621      	mov	r1, r4
 8000458:	4a0c      	ldr	r2, [pc, #48]	; (800048c <LCD_INIT+0x84>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800045a:	f8a0 8000 	strh.w	r8, [r0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800045e:	8014      	strh	r4, [r2, #0]
 8000460:	8014      	strh	r4, [r2, #0]
 8000462:	8017      	strh	r7, [r2, #0]
 8000464:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000466:	8005      	strh	r5, [r0, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000468:	8014      	strh	r4, [r2, #0]
 800046a:	8014      	strh	r4, [r2, #0]
 800046c:	8014      	strh	r4, [r2, #0]
 800046e:	f8a2 e000 	strh.w	lr, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000472:	f8a0 c000 	strh.w	ip, [r0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000476:	3b01      	subs	r3, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000478:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 800047a:	d1fc      	bne.n	8000476 <LCD_INIT+0x6e>
}
 800047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000480:	40011400 	.word	0x40011400
 8000484:	40011800 	.word	0x40011800
 8000488:	0002bffc 	.word	0x0002bffc
 800048c:	60020000 	.word	0x60020000

08000490 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000494:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000498:	242a      	movs	r4, #42	; 0x2a
 800049a:	f04f 082b 	mov.w	r8, #43	; 0x2b
 800049e:	272c      	movs	r7, #44	; 0x2c
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80004a0:	fb03 f502 	mul.w	r5, r3, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80004a4:	f102 3eff 	add.w	lr, r2, #4294967295
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80004a8:	4402      	add	r2, r0
{
 80004aa:	f8bd c020 	ldrh.w	ip, [sp, #32]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80004ae:	eb01 0903 	add.w	r9, r1, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004b2:	8034      	strh	r4, [r6, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80004b4:	3a01      	subs	r2, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004b6:	4c14      	ldr	r4, [pc, #80]	; (8000508 <LCD_Clear+0x78>)
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80004b8:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80004ba:	4486      	add	lr, r0
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80004bc:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80004c0:	440b      	add	r3, r1
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80004c2:	ea4f 2a10 	mov.w	sl, r0, lsr #8
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80004c6:	f109 39ff 	add.w	r9, r9, #4294967295
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80004ca:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004cc:	f8a4 a000 	strh.w	sl, [r4]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80004d0:	fa5f fe8e 	uxtb.w	lr, lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004d4:	8020      	strh	r0, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80004d6:	f3c9 290f 	ubfx	r9, r9, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004da:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80004dc:	b2db      	uxtb	r3, r3
	LCD_Write_Data ( usPAGE >> 8  );
 80004de:	0a0a      	lsrs	r2, r1, #8
	LCD_Write_Data ( usPAGE & 0xff  );
 80004e0:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004e2:	f8a4 e000 	strh.w	lr, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004e6:	f8a6 8000 	strh.w	r8, [r6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004ea:	8022      	strh	r2, [r4, #0]
 80004ec:	8021      	strh	r1, [r4, #0]
 80004ee:	f8a4 9000 	strh.w	r9, [r4]
 80004f2:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004f4:	8037      	strh	r7, [r6, #0]
	for ( i = 0; i < usPoint; i ++ )
 80004f6:	b12d      	cbz	r5, 8000504 <LCD_Clear+0x74>
 80004f8:	2300      	movs	r3, #0
 80004fa:	3301      	adds	r3, #1
 80004fc:	429d      	cmp	r5, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004fe:	f8a4 c000 	strh.w	ip, [r4]
	for ( i = 0; i < usPoint; i ++ )
 8000502:	d1fa      	bne.n	80004fa <LCD_Clear+0x6a>
	
}
 8000504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000508:	60020000 	.word	0x60020000

0800050c <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800050c:	4684      	mov	ip, r0
 800050e:	4608      	mov	r0, r1
	while ( * pStr != '\0' )
 8000510:	7811      	ldrb	r1, [r2, #0]
 8000512:	2900      	cmp	r1, #0
 8000514:	f000 8087 	beq.w	8000626 <LCD_DrawString+0x11a>
{
 8000518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800051c:	4617      	mov	r7, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800051e:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000522:	f04f 0800 	mov.w	r8, #0
 8000526:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800052a:	460e      	mov	r6, r1
 800052c:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <LCD_DrawString+0x11c>)
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800052e:	f5bc 7f9c 	cmp.w	ip, #312	; 0x138
 8000532:	d903      	bls.n	800053c <LCD_DrawString+0x30>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000534:	f04f 0c00 	mov.w	ip, #0
			usP += HEIGHT_EN_CHAR;
 8000538:	300a      	adds	r0, #10
 800053a:	b280      	uxth	r0, r0
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800053c:	28e6      	cmp	r0, #230	; 0xe6
 800053e:	d867      	bhi.n	8000610 <LCD_DrawString+0x104>
 8000540:	f10c 0407 	add.w	r4, ip, #7
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000544:	f10c 0e08 	add.w	lr, ip, #8
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000548:	f100 0909 	add.w	r9, r0, #9
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800054c:	ea4f 211c 	mov.w	r1, ip, lsr #8
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000550:	fa5f fa8c 	uxtb.w	sl, ip
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000554:	fa1f f989 	uxth.w	r9, r9
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000558:	fa1f fc8e 	uxth.w	ip, lr
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800055c:	f3c4 2e07 	ubfx	lr, r4, #8, #8
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000560:	b2e4      	uxtb	r4, r4
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000562:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8000566:	f8a5 b000 	strh.w	fp, [r5]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800056a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800056c:	212b      	movs	r1, #43	; 0x2b
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800056e:	f8a3 a000 	strh.w	sl, [r3]
 8000572:	f8a3 e000 	strh.w	lr, [r3]
 8000576:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000578:	8029      	strh	r1, [r5, #0]
 800057a:	212c      	movs	r1, #44	; 0x2c
 800057c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000580:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 800062c <LCD_DrawString+0x120>
 8000584:	0076      	lsls	r6, r6, #1
 8000586:	1e74      	subs	r4, r6, #1
 8000588:	4474      	add	r4, lr
 800058a:	f10e 0e09 	add.w	lr, lr, #9
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800058e:	f8a3 8000 	strh.w	r8, [r3]
 8000592:	4476      	add	r6, lr
 8000594:	8018      	strh	r0, [r3, #0]
 8000596:	f8a3 8000 	strh.w	r8, [r3]
 800059a:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800059e:	8029      	strh	r1, [r5, #0]
		ucTemp = ucAscii_1006 [ ucRelativePositon ] [ ucPage ];
 80005a0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
			if ( ucTemp & 0x01 )
 80005a4:	f011 0e01 	ands.w	lr, r1, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005a8:	bf0c      	ite	eq
 80005aa:	f8a3 e000 	strheq.w	lr, [r3]
 80005ae:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005b0:	f011 0e02 	ands.w	lr, r1, #2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005b4:	bf0c      	ite	eq
 80005b6:	f8a3 e000 	strheq.w	lr, [r3]
 80005ba:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005bc:	f011 0e04 	ands.w	lr, r1, #4
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005c0:	bf0c      	ite	eq
 80005c2:	f8a3 e000 	strheq.w	lr, [r3]
 80005c6:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005c8:	f011 0e08 	ands.w	lr, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005cc:	bf0c      	ite	eq
 80005ce:	f8a3 e000 	strheq.w	lr, [r3]
 80005d2:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005d4:	f011 0e10 	ands.w	lr, r1, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005d8:	bf0c      	ite	eq
 80005da:	f8a3 e000 	strheq.w	lr, [r3]
 80005de:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005e0:	f011 0e20 	ands.w	lr, r1, #32
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005e4:	bf0c      	ite	eq
 80005e6:	f8a3 e000 	strheq.w	lr, [r3]
 80005ea:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005ec:	f011 0e40 	ands.w	lr, r1, #64	; 0x40
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005f0:	bf0c      	ite	eq
 80005f2:	f8a3 e000 	strheq.w	lr, [r3]
 80005f6:	801a      	strhne	r2, [r3, #0]
			if ( ucTemp & 0x01 )
 80005f8:	09c9      	lsrs	r1, r1, #7
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005fa:	bf0c      	ite	eq
 80005fc:	8019      	strheq	r1, [r3, #0]
 80005fe:	801a      	strhne	r2, [r3, #0]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000600:	42a6      	cmp	r6, r4
 8000602:	d1cd      	bne.n	80005a0 <LCD_DrawString+0x94>
	while ( * pStr != '\0' )
 8000604:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8000608:	2e00      	cmp	r6, #0
 800060a:	d190      	bne.n	800052e <LCD_DrawString+0x22>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 800060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	f04f 0909 	mov.w	r9, #9
 8000618:	2407      	movs	r4, #7
 800061a:	f04f 0c08 	mov.w	ip, #8
 800061e:	46f2      	mov	sl, lr
 8000620:	4671      	mov	r1, lr
			usP = LCD_DispWindow_Start_PAGE;
 8000622:	4670      	mov	r0, lr
 8000624:	e79d      	b.n	8000562 <LCD_DrawString+0x56>
 8000626:	4770      	bx	lr
 8000628:	60020000 	.word	0x60020000
 800062c:	08001e14 	.word	0x08001e14

08000630 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000630:	2300      	movs	r3, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000632:	2201      	movs	r2, #1
{
 8000634:	b5d0      	push	{r4, r6, r7, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000636:	2001      	movs	r0, #1
{
 8000638:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000640:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000648:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000654:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000658:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000662:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f000 fbb6 	bl	8000dd8 <HAL_RCC_OscConfig>
 800066c:	b108      	cbz	r0, 8000672 <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	260f      	movs	r6, #15
 8000676:	2702      	movs	r7, #2
 8000678:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	4621      	mov	r1, r4
 8000682:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	e9cd 6700 	strd	r6, r7, [sp]
 8000688:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f000 fd94 	bl	80011b8 <HAL_RCC_ClockConfig>
 8000690:	b108      	cbz	r0, 8000696 <SystemClock_Config+0x66>
 8000692:	b672      	cpsid	i
  while (1)
 8000694:	e7fe      	b.n	8000694 <SystemClock_Config+0x64>
}
 8000696:	b010      	add	sp, #64	; 0x40
 8000698:	bdd0      	pop	{r4, r6, r7, pc}
 800069a:	bf00      	nop

0800069c <main>:
{
 800069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	2400      	movs	r4, #0
{
 80006a2:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 80006a4:	f000 f9ce 	bl	8000a44 <HAL_Init>
  SystemClock_Config();
 80006a8:	f7ff ffc2 	bl	8000630 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80006b0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b4:	4b6d      	ldr	r3, [pc, #436]	; (800086c <main+0x1d0>)
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80006bc:	486c      	ldr	r0, [pc, #432]	; (8000870 <main+0x1d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	f042 0210 	orr.w	r2, r2, #16
 80006c2:	619a      	str	r2, [r3, #24]
 80006c4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = BUTTON_K2_Pin;
 80006c6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	f002 0210 	and.w	r2, r2, #16
 80006ce:	9202      	str	r2, [sp, #8]
 80006d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = BUTTON_K2_Pin;
 80006d4:	2700      	movs	r7, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006da:	619a      	str	r2, [r3, #24]
 80006dc:	699a      	ldr	r2, [r3, #24]
 80006de:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80006e2:	9203      	str	r2, [sp, #12]
 80006e4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	699a      	ldr	r2, [r3, #24]
 80006e8:	f042 0220 	orr.w	r2, r2, #32
 80006ec:	619a      	str	r2, [r3, #24]
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	f002 0220 	and.w	r2, r2, #32
 80006f4:	9204      	str	r2, [sp, #16]
 80006f6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	f042 0204 	orr.w	r2, r2, #4
 80006fe:	619a      	str	r2, [r3, #24]
 8000700:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000702:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	9305      	str	r3, [sp, #20]
 800070a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800070c:	f000 fb60 	bl	8000dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000710:	4622      	mov	r2, r4
 8000712:	2102      	movs	r1, #2
 8000714:	4857      	ldr	r0, [pc, #348]	; (8000874 <main+0x1d8>)
 8000716:	f000 fb5b 	bl	8000dd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800071a:	2302      	movs	r3, #2
  HAL_GPIO_Init(BUTTON_K2_GPIO_Port, &GPIO_InitStruct);
 800071c:	4856      	ldr	r0, [pc, #344]	; (8000878 <main+0x1dc>)
 800071e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = BUTTON_K2_Pin;
 8000720:	e9cd 6706 	strd	r6, r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000724:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000726:	2600      	movs	r6, #0
  HAL_GPIO_Init(BUTTON_K2_GPIO_Port, &GPIO_InitStruct);
 8000728:	f000 fa2a 	bl	8000b80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800072c:	2703      	movs	r7, #3
 800072e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000732:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000734:	484e      	ldr	r0, [pc, #312]	; (8000870 <main+0x1d4>)
 8000736:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800073c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000740:	f000 fa1e 	bl	8000b80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000744:	2202      	movs	r2, #2
 8000746:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000748:	484a      	ldr	r0, [pc, #296]	; (8000874 <main+0x1d8>)
 800074a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800074c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8000750:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000754:	f000 fa14 	bl	8000b80 <HAL_GPIO_Init>
  Timing.AddressSetupTime = 15;
 8000758:	230f      	movs	r3, #15
  Timing.AddressHoldTime = 15;
 800075a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  Timing.BusTurnAroundDuration = 15;
 800075e:	9309      	str	r3, [sp, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000764:	4845      	ldr	r0, [pc, #276]	; (800087c <main+0x1e0>)
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000766:	2210      	movs	r2, #16
  Timing.DataLatency = 17;
 8000768:	2111      	movs	r1, #17
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800076a:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800076e:	6283      	str	r3, [r0, #40]	; 0x28
  Timing.DataSetupTime = 255;
 8000770:	23ff      	movs	r3, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000772:	4f43      	ldr	r7, [pc, #268]	; (8000880 <main+0x1e4>)
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000774:	e9c0 4204 	strd	r4, r2, [r0, #16]
  Timing.CLKDivision = 16;
 8000778:	920a      	str	r2, [sp, #40]	; 0x28
  Timing.DataLatency = 17;
 800077a:	910b      	str	r1, [sp, #44]	; 0x2c
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800077c:	4622      	mov	r2, r4
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800077e:	e9c0 6700 	strd	r6, r7, [r0]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000782:	a906      	add	r1, sp, #24
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000784:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000788:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800078c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000790:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000794:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000798:	940c      	str	r4, [sp, #48]	; 0x30
  Timing.DataSetupTime = 255;
 800079a:	9308      	str	r3, [sp, #32]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800079c:	f000 fddc 	bl	8001358 <HAL_SRAM_Init>
 80007a0:	b108      	cbz	r0, 80007a6 <main+0x10a>
 80007a2:	b672      	cpsid	i
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x108>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <main+0x1e8>)
 80007a8:	4605      	mov	r5, r0
 80007aa:	69d3      	ldr	r3, [r2, #28]
      LCD_DrawString(0, i * 10, "This is an Apple One LCD testing program"); // 40 chars
 80007ac:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8000888 <main+0x1ec>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80007b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b4:	61d3      	str	r3, [r2, #28]
  LCD_INIT();
 80007b6:	f7ff fe27 	bl	8000408 <LCD_INIT>
      sprintf(str, "This is a line %d", i + 1);
 80007ba:	4f34      	ldr	r7, [pc, #208]	; (800088c <main+0x1f0>)
{
 80007bc:	2400      	movs	r4, #0
      LCD_DrawString(0, i * 10, "This is an Apple One LCD testing program"); // 40 chars
 80007be:	4621      	mov	r1, r4
    for (int i = 0; i < 24; i++) {
 80007c0:	340a      	adds	r4, #10
      LCD_DrawString(0, i * 10, "This is an Apple One LCD testing program"); // 40 chars
 80007c2:	4642      	mov	r2, r8
 80007c4:	2000      	movs	r0, #0
    for (int i = 0; i < 24; i++) {
 80007c6:	b2a4      	uxth	r4, r4
      LCD_DrawString(0, i * 10, "This is an Apple One LCD testing program"); // 40 chars
 80007c8:	f7ff fea0 	bl	800050c <LCD_DrawString>
    for (int i = 0; i < 24; i++) {
 80007cc:	2cf0      	cmp	r4, #240	; 0xf0
 80007ce:	d1f6      	bne.n	80007be <main+0x122>
    HAL_Delay(5000);
 80007d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80007d4:	f000 f95a 	bl	8000a8c <HAL_Delay>
    LCD_Clear(LCD_MIN_COL, LCD_MIN_PAGE, LCD_MAX_COL, LCD_MAX_PAGE, 0x0000);
 80007d8:	2100      	movs	r1, #0
 80007da:	460e      	mov	r6, r1
 80007dc:	4623      	mov	r3, r4
 80007de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007e2:	4608      	mov	r0, r1
 80007e4:	9500      	str	r5, [sp, #0]
 80007e6:	f7ff fe53 	bl	8000490 <LCD_Clear>
    for (int i = 0; i < 24; i++) {
 80007ea:	4634      	mov	r4, r6
      sprintf(str, "This is a line %d", i + 1);
 80007ec:	3401      	adds	r4, #1
 80007ee:	4622      	mov	r2, r4
 80007f0:	4639      	mov	r1, r7
 80007f2:	a806      	add	r0, sp, #24
 80007f4:	f000 fe88 	bl	8001508 <siprintf>
      LCD_DrawString(0, (i * 10) % 240, str);
 80007f8:	4631      	mov	r1, r6
 80007fa:	2000      	movs	r0, #0
 80007fc:	aa06      	add	r2, sp, #24
 80007fe:	f7ff fe85 	bl	800050c <LCD_DrawString>
    for (int i = 0; i < 24; i++) {
 8000802:	360a      	adds	r6, #10
 8000804:	2c18      	cmp	r4, #24
 8000806:	b2b6      	uxth	r6, r6
 8000808:	d1f0      	bne.n	80007ec <main+0x150>
    HAL_Delay(5000);
 800080a:	f241 3088 	movw	r0, #5000	; 0x1388
 800080e:	f000 f93d 	bl	8000a8c <HAL_Delay>
    LCD_Clear(LCD_MIN_COL, LCD_MIN_PAGE, LCD_MAX_COL, LCD_MAX_PAGE, 0x0000);
 8000812:	2100      	movs	r1, #0
 8000814:	23f0      	movs	r3, #240	; 0xf0
 8000816:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800081a:	4608      	mov	r0, r1
 800081c:	9500      	str	r5, [sp, #0]
    for (int i = 0; i < 256; i++) {
 800081e:	460c      	mov	r4, r1
      LCD_DrawString((i % 40) * 8, (i / 40) * 10, str);
 8000820:	4e1b      	ldr	r6, [pc, #108]	; (8000890 <main+0x1f4>)
    LCD_Clear(LCD_MIN_COL, LCD_MIN_PAGE, LCD_MAX_COL, LCD_MAX_PAGE, 0x0000);
 8000822:	f7ff fe35 	bl	8000490 <LCD_Clear>
      LCD_DrawString((i % 40) * 8, (i / 40) * 10, str);
 8000826:	fba6 3104 	umull	r3, r1, r6, r4
 800082a:	0949      	lsrs	r1, r1, #5
 800082c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000830:	eba4 00c1 	sub.w	r0, r4, r1, lsl #3
 8000834:	00c0      	lsls	r0, r0, #3
 8000836:	0049      	lsls	r1, r1, #1
      str[0] = i;
 8000838:	f88d 4018 	strb.w	r4, [sp, #24]
      LCD_DrawString((i % 40) * 8, (i / 40) * 10, str);
 800083c:	aa06      	add	r2, sp, #24
 800083e:	b289      	uxth	r1, r1
 8000840:	b280      	uxth	r0, r0
    for (int i = 0; i < 256; i++) {
 8000842:	3401      	adds	r4, #1
      str[1] = '\0';
 8000844:	f88d 5019 	strb.w	r5, [sp, #25]
      LCD_DrawString((i % 40) * 8, (i / 40) * 10, str);
 8000848:	f7ff fe60 	bl	800050c <LCD_DrawString>
    for (int i = 0; i < 256; i++) {
 800084c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8000850:	d1e9      	bne.n	8000826 <main+0x18a>
    HAL_Delay(5000);
 8000852:	f241 3088 	movw	r0, #5000	; 0x1388
 8000856:	f000 f919 	bl	8000a8c <HAL_Delay>
    LCD_Clear(LCD_MIN_COL, LCD_MIN_PAGE, LCD_MAX_COL, LCD_MAX_PAGE, 0x0000);
 800085a:	2100      	movs	r1, #0
 800085c:	23f0      	movs	r3, #240	; 0xf0
 800085e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000862:	4608      	mov	r0, r1
 8000864:	9500      	str	r5, [sp, #0]
 8000866:	f7ff fe13 	bl	8000490 <LCD_Clear>
    for (int i = 0; i < 24; i++) {
 800086a:	e7a7      	b.n	80007bc <main+0x120>
 800086c:	40021000 	.word	0x40021000
 8000870:	40011400 	.word	0x40011400
 8000874:	40011800 	.word	0x40011800
 8000878:	40011000 	.word	0x40011000
 800087c:	20000090 	.word	0x20000090
 8000880:	a0000104 	.word	0xa0000104
 8000884:	40010000 	.word	0x40010000
 8000888:	08002814 	.word	0x08002814
 800088c:	08002840 	.word	0x08002840
 8000890:	cccccccd 	.word	0xcccccccd

08000894 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x3c>)
{
 8000896:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000898:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800089c:	f042 0201 	orr.w	r2, r2, #1
 80008a0:	619a      	str	r2, [r3, #24]
 80008a2:	699a      	ldr	r2, [r3, #24]
 80008a4:	f002 0201 	and.w	r2, r2, #1
 80008a8:	9200      	str	r2, [sp, #0]
 80008aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	69da      	ldr	r2, [r3, #28]
 80008ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008be:	684b      	ldr	r3, [r1, #4]
 80008c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	b002      	add	sp, #8
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80008d8:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80008da:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_SRAM_MspInit+0x5c>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80008de:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 80008e0:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80008e2:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 80008e4:	bb1a      	cbnz	r2, 800092e <HAL_SRAM_MspInit+0x56>
  FSMC_Initialized = 1;
 80008e6:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008ea:	f64f 7480 	movw	r4, #65408	; 0xff80
 80008ee:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80008f4:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 80008f8:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008fa:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <HAL_SRAM_MspInit+0x60>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000902:	6153      	str	r3, [r2, #20]
 8000904:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000906:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000910:	e9cd 4502 	strd	r4, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000916:	f000 f933 	bl	8000b80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800091a:	f64c 72b3 	movw	r2, #53171	; 0xcfb3
 800091e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <HAL_SRAM_MspInit+0x64>)
 8000922:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000924:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f000 f929 	bl	8000b80 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800092e:	b007      	add	sp, #28
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	bf00      	nop
 8000934:	200000d8 	.word	0x200000d8
 8000938:	40011800 	.word	0x40011800
 800093c:	40011400 	.word	0x40011400

08000940 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler>
 8000942:	bf00      	nop

08000944 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <HardFault_Handler>
 8000946:	bf00      	nop

08000948 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler>
 800094a:	bf00      	nop

0800094c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <BusFault_Handler>
 800094e:	bf00      	nop

08000950 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler>
 8000952:	bf00      	nop

08000954 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <DebugMon_Handler>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <PendSV_Handler>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 b882 	b.w	8000a68 <HAL_IncTick>

08000964 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	490d      	ldr	r1, [pc, #52]	; (800099c <_sbrk+0x38>)
{
 8000966:	4603      	mov	r3, r0
 8000968:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096a:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <_sbrk+0x3c>)
 800096c:	4c0d      	ldr	r4, [pc, #52]	; (80009a4 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800096e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000972:	b120      	cbz	r0, 800097e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000974:	4403      	add	r3, r0
 8000976:	4293      	cmp	r3, r2
 8000978:	d807      	bhi.n	800098a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800097a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800097c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800097e:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <_sbrk+0x44>)
 8000980:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4403      	add	r3, r0
 8000984:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8000986:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000988:	d9f7      	bls.n	800097a <_sbrk+0x16>
    errno = ENOMEM;
 800098a:	f000 fd93 	bl	80014b4 <__errno>
 800098e:	220c      	movs	r2, #12
 8000990:	4603      	mov	r3, r0
    return (void *)-1;
 8000992:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	200000dc 	.word	0x200000dc
 80009a0:	20010000 	.word	0x20010000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200000f8 	.word	0x200000f8

080009ac <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b0:	f7ff fffc 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009b6:	490c      	ldr	r1, [pc, #48]	; (80009e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009cc:	4c09      	ldr	r4, [pc, #36]	; (80009f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f000 fd71 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fe5d 	bl	800069c <main>
  bx lr
 80009e2:	4770      	bx	lr
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009ec:	080028b0 	.word	0x080028b0
  ldr r2, =_sbss
 80009f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009f4:	200000f4 	.word	0x200000f4

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <HAL_InitTick+0x3c>)
{
 8000a04:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a06:	7811      	ldrb	r1, [r2, #0]
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <HAL_InitTick+0x40>)
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	fbb2 f0f3 	udiv	r0, r2, r3
 8000a14:	f000 f89c 	bl	8000b50 <HAL_SYSTICK_Config>
 8000a18:	b908      	cbnz	r0, 8000a1e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	2d0f      	cmp	r5, #15
 8000a1c:	d901      	bls.n	8000a22 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a20:	bd38      	pop	{r3, r4, r5, pc}
 8000a22:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	4602      	mov	r2, r0
 8000a26:	4629      	mov	r1, r5
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f852 	bl	8000ad4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_InitTick+0x44>)
 8000a32:	4620      	mov	r0, r4
 8000a34:	601d      	str	r5, [r3, #0]
}
 8000a36:	bd38      	pop	{r3, r4, r5, pc}
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008

08000a44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x20>)
{
 8000a46:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a52:	f000 f82d 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f7ff ffd0 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a5c:	f7ff ff1a 	bl	8000894 <HAL_MspInit>
}
 8000a60:	2000      	movs	r0, #0
 8000a62:	bd08      	pop	{r3, pc}
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x10>)
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_IncTick+0x14>)
 8000a6c:	6811      	ldr	r1, [r2, #0]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	440b      	add	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200000e0 	.word	0x200000e0
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a80:	4b01      	ldr	r3, [pc, #4]	; (8000a88 <HAL_GetTick+0x8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000e0 	.word	0x200000e0

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b538      	push	{r3, r4, r5, lr}
 8000a8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff6 	bl	8000a80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a94:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000a96:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000a98:	d002      	beq.n	8000aa0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_Delay+0x20>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	1b40      	subs	r0, r0, r5
 8000aa6:	42a0      	cmp	r0, r4
 8000aa8:	d3fa      	bcc.n	8000aa0 <HAL_Delay+0x14>
  {
  }
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab0:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4906      	ldr	r1, [pc, #24]	; (8000ad0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000acc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad6:	b500      	push	{lr}
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ade:	f1c3 0e07 	rsb	lr, r3, #7
 8000ae2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aea:	bf28      	it	cs
 8000aec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af0:	f1bc 0f06 	cmp.w	ip, #6
 8000af4:	d91b      	bls.n	8000b2e <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	fa0c fc03 	lsl.w	ip, ip, r3
 8000b00:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 3cff 	mov.w	ip, #4294967295
 8000b08:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b0c:	ea21 010c 	bic.w	r1, r1, ip
 8000b10:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000b18:	db0c      	blt.n	8000b34 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	0109      	lsls	r1, r1, #4
 8000b1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b20:	b2c9      	uxtb	r1, r1
 8000b22:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b26:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b2e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b30:	4613      	mov	r3, r2
 8000b32:	e7e7      	b.n	8000b04 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_NVIC_SetPriority+0x78>)
 8000b36:	f000 000f 	and.w	r0, r0, #15
 8000b3a:	0109      	lsls	r1, r1, #4
 8000b3c:	b2c9      	uxtb	r1, r1
 8000b3e:	4403      	add	r3, r0
 8000b40:	7619      	strb	r1, [r3, #24]
 8000b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00
 8000b4c:	e000ecfc 	.word	0xe000ecfc

08000b50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	3801      	subs	r0, #1
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d20f      	bcs.n	8000b78 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b64:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	4c05      	ldr	r4, [pc, #20]	; (8000b7c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b68:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000b72:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b74:	6119      	str	r1, [r3, #16]
 8000b76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2001      	movs	r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b84:	680e      	ldr	r6, [r1, #0]
{
 8000b86:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	f000 80be 	beq.w	8000d0a <HAL_GPIO_Init+0x18a>
 8000b8e:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b90:	4f85      	ldr	r7, [pc, #532]	; (8000da8 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8000b92:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000b94:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b96:	4d85      	ldr	r5, [pc, #532]	; (8000dac <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8000b98:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8000db0 <HAL_GPIO_Init+0x230>
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000b9e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba0:	fa36 f403 	lsrs.w	r4, r6, r3
 8000ba4:	f102 0204 	add.w	r2, r2, #4
 8000ba8:	f000 80af 	beq.w	8000d0a <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8000bac:	2401      	movs	r4, #1
 8000bae:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000bb0:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb4:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8000bb8:	d1f1      	bne.n	8000b9e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000bba:	684e      	ldr	r6, [r1, #4]
 8000bbc:	2e12      	cmp	r6, #18
 8000bbe:	f200 80a7 	bhi.w	8000d10 <HAL_GPIO_Init+0x190>
 8000bc2:	2e12      	cmp	r6, #18
 8000bc4:	d81a      	bhi.n	8000bfc <HAL_GPIO_Init+0x7c>
 8000bc6:	e8df f006 	tbb	[pc, r6]
 8000bca:	c2b0      	.short	0xc2b0
 8000bcc:	1919d7be 	.word	0x1919d7be
 8000bd0:	19191919 	.word	0x19191919
 8000bd4:	19191919 	.word	0x19191919
 8000bd8:	ba191919 	.word	0xba191919
 8000bdc:	c5          	.byte	0xc5
 8000bdd:	00          	.byte	0x00
 8000bde:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8000db4 <HAL_GPIO_Init+0x234>
 8000be2:	4576      	cmp	r6, lr
 8000be4:	f000 80a1 	beq.w	8000d2a <HAL_GPIO_Init+0x1aa>
 8000be8:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8000bec:	4576      	cmp	r6, lr
 8000bee:	f000 809c 	beq.w	8000d2a <HAL_GPIO_Init+0x1aa>
 8000bf2:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8000bf6:	4576      	cmp	r6, lr
 8000bf8:	f000 8097 	beq.w	8000d2a <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bfc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8000c00:	bf9c      	itt	ls
 8000c02:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c04:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c06:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c0a:	bf84      	itt	hi
 8000c0c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c10:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c14:	f8de 4000 	ldr.w	r4, [lr]
 8000c18:	fa0a f90b 	lsl.w	r9, sl, fp
 8000c1c:	fa06 fb0b 	lsl.w	fp, r6, fp
 8000c20:	ea24 040b 	bic.w	r4, r4, fp
 8000c24:	ea44 0409 	orr.w	r4, r4, r9
 8000c28:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2c:	684c      	ldr	r4, [r1, #4]
 8000c2e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000c32:	f000 8082 	beq.w	8000d3a <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c36:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c3a:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3e:	f04e 0e01 	orr.w	lr, lr, #1
 8000c42:	f8c7 e018 	str.w	lr, [r7, #24]
 8000c46:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c4a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4e:	f00e 0e01 	and.w	lr, lr, #1
 8000c52:	f8cd e004 	str.w	lr, [sp, #4]
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000c5a:	f023 0e03 	bic.w	lr, r3, #3
 8000c5e:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000c62:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000c66:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c6a:	fa06 f609 	lsl.w	r6, r6, r9
 8000c6e:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c72:	f8df b144 	ldr.w	fp, [pc, #324]	; 8000db8 <HAL_GPIO_Init+0x238>
 8000c76:	4558      	cmp	r0, fp
 8000c78:	d01b      	beq.n	8000cb2 <HAL_GPIO_Init+0x132>
 8000c7a:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8000c7e:	4558      	cmp	r0, fp
 8000c80:	d073      	beq.n	8000d6a <HAL_GPIO_Init+0x1ea>
 8000c82:	f8df b138 	ldr.w	fp, [pc, #312]	; 8000dbc <HAL_GPIO_Init+0x23c>
 8000c86:	4558      	cmp	r0, fp
 8000c88:	d068      	beq.n	8000d5c <HAL_GPIO_Init+0x1dc>
 8000c8a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000dc0 <HAL_GPIO_Init+0x240>
 8000c8e:	4558      	cmp	r0, fp
 8000c90:	d07c      	beq.n	8000d8c <HAL_GPIO_Init+0x20c>
 8000c92:	f8df b130 	ldr.w	fp, [pc, #304]	; 8000dc4 <HAL_GPIO_Init+0x244>
 8000c96:	4558      	cmp	r0, fp
 8000c98:	d07f      	beq.n	8000d9a <HAL_GPIO_Init+0x21a>
 8000c9a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8000dc8 <HAL_GPIO_Init+0x248>
 8000c9e:	4558      	cmp	r0, fp
 8000ca0:	bf0c      	ite	eq
 8000ca2:	f04f 0b05 	moveq.w	fp, #5
 8000ca6:	f04f 0b06 	movne.w	fp, #6
 8000caa:	fa0b f909 	lsl.w	r9, fp, r9
 8000cae:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb2:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb6:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000cbc:	bf14      	ite	ne
 8000cbe:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc2:	ea26 060c 	biceq.w	r6, r6, ip
 8000cc6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cca:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000cce:	bf14      	ite	ne
 8000cd0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd4:	ea26 060c 	biceq.w	r6, r6, ip
 8000cd8:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cda:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cdc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce0:	bf14      	ite	ne
 8000ce2:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ce6:	ea26 060c 	biceq.w	r6, r6, ip
 8000cea:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cec:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf0:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf2:	d01f      	beq.n	8000d34 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf4:	ea44 040c 	orr.w	r4, r4, ip
 8000cf8:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	680e      	ldr	r6, [r1, #0]
	position++;
 8000cfc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	fa36 f403 	lsrs.w	r4, r6, r3
 8000d02:	f102 0204 	add.w	r2, r2, #4
 8000d06:	f47f af51 	bne.w	8000bac <HAL_GPIO_Init+0x2c>
  }
}
 8000d0a:	b003      	add	sp, #12
 8000d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000d10:	4546      	cmp	r6, r8
 8000d12:	d00a      	beq.n	8000d2a <HAL_GPIO_Init+0x1aa>
 8000d14:	f67f af63 	bls.w	8000bde <HAL_GPIO_Init+0x5e>
 8000d18:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8000dcc <HAL_GPIO_Init+0x24c>
 8000d1c:	4576      	cmp	r6, lr
 8000d1e:	d004      	beq.n	8000d2a <HAL_GPIO_Init+0x1aa>
 8000d20:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000d24:	4576      	cmp	r6, lr
 8000d26:	f47f af69 	bne.w	8000bfc <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d2a:	688e      	ldr	r6, [r1, #8]
 8000d2c:	bb3e      	cbnz	r6, 8000d7e <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2e:	f04f 0a04 	mov.w	sl, #4
 8000d32:	e763      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d34:	ea24 040c 	bic.w	r4, r4, ip
 8000d38:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	680e      	ldr	r6, [r1, #0]
 8000d3c:	e72f      	b.n	8000b9e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d3e:	68cc      	ldr	r4, [r1, #12]
 8000d40:	f104 0a04 	add.w	sl, r4, #4
          break;
 8000d44:	e75a      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d46:	68cc      	ldr	r4, [r1, #12]
 8000d48:	f104 0a08 	add.w	sl, r4, #8
          break;
 8000d4c:	e756      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d4e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000d52:	e753      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d54:	68cc      	ldr	r4, [r1, #12]
 8000d56:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8000d5a:	e74f      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d5c:	f04f 0b02 	mov.w	fp, #2
 8000d60:	fa0b f909 	lsl.w	r9, fp, r9
 8000d64:	ea46 0609 	orr.w	r6, r6, r9
 8000d68:	e7a3      	b.n	8000cb2 <HAL_GPIO_Init+0x132>
 8000d6a:	f04f 0b01 	mov.w	fp, #1
 8000d6e:	fa0b f909 	lsl.w	r9, fp, r9
 8000d72:	ea46 0609 	orr.w	r6, r6, r9
 8000d76:	e79c      	b.n	8000cb2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000d78:	f04f 0a00 	mov.w	sl, #0
 8000d7c:	e73e      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d7e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000d84:	bf0c      	ite	eq
 8000d86:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d88:	6144      	strne	r4, [r0, #20]
 8000d8a:	e737      	b.n	8000bfc <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8c:	f04f 0b03 	mov.w	fp, #3
 8000d90:	fa0b f909 	lsl.w	r9, fp, r9
 8000d94:	ea46 0609 	orr.w	r6, r6, r9
 8000d98:	e78b      	b.n	8000cb2 <HAL_GPIO_Init+0x132>
 8000d9a:	f04f 0b04 	mov.w	fp, #4
 8000d9e:	fa0b f909 	lsl.w	r9, fp, r9
 8000da2:	ea46 0609 	orr.w	r6, r6, r9
 8000da6:	e784      	b.n	8000cb2 <HAL_GPIO_Init+0x132>
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010400 	.word	0x40010400
 8000db0:	10220000 	.word	0x10220000
 8000db4:	10120000 	.word	0x10120000
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40011400 	.word	0x40011400
 8000dc4:	40011800 	.word	0x40011800
 8000dc8:	40011c00 	.word	0x40011c00
 8000dcc:	10310000 	.word	0x10310000

08000dd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	b902      	cbnz	r2, 8000dd4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd2:	0409      	lsls	r1, r1, #16
 8000dd4:	6101      	str	r1, [r0, #16]
  }
}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	f000 81b6 	beq.w	800114a <HAL_RCC_OscConfig+0x372>
{
 8000dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	4604      	mov	r4, r0
 8000de6:	07dd      	lsls	r5, r3, #31
{
 8000de8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	d535      	bpl.n	8000e58 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dec:	499a      	ldr	r1, [pc, #616]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000dee:	684a      	ldr	r2, [r1, #4]
 8000df0:	f002 020c 	and.w	r2, r2, #12
 8000df4:	2a04      	cmp	r2, #4
 8000df6:	f000 80ef 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfa:	684a      	ldr	r2, [r1, #4]
 8000dfc:	f002 020c 	and.w	r2, r2, #12
 8000e00:	2a08      	cmp	r2, #8
 8000e02:	f000 80e5 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	6863      	ldr	r3, [r4, #4]
 8000e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0c:	d010      	beq.n	8000e30 <HAL_RCC_OscConfig+0x58>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 810c 	beq.w	800102c <HAL_RCC_OscConfig+0x254>
 8000e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e18:	f000 8182 	beq.w	8001120 <HAL_RCC_OscConfig+0x348>
 8000e1c:	4b8e      	ldr	r3, [pc, #568]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e004      	b.n	8000e3a <HAL_RCC_OscConfig+0x62>
 8000e30:	4a89      	ldr	r2, [pc, #548]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fe21 	bl	8000a80 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4e86      	ldr	r6, [pc, #536]	; (8001058 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000e40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	e005      	b.n	8000e50 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fe1c 	bl	8000a80 <HAL_GetTick>
 8000e48:	1b40      	subs	r0, r0, r5
 8000e4a:	2864      	cmp	r0, #100	; 0x64
 8000e4c:	f200 80ea 	bhi.w	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e50:	6833      	ldr	r3, [r6, #0]
 8000e52:	039a      	lsls	r2, r3, #14
 8000e54:	d5f6      	bpl.n	8000e44 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	079f      	lsls	r7, r3, #30
 8000e5a:	d528      	bpl.n	8000eae <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e5c:	4a7e      	ldr	r2, [pc, #504]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000e5e:	6851      	ldr	r1, [r2, #4]
 8000e60:	f011 0f0c 	tst.w	r1, #12
 8000e64:	f000 808d 	beq.w	8000f82 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e68:	6851      	ldr	r1, [r2, #4]
 8000e6a:	f001 010c 	and.w	r1, r1, #12
 8000e6e:	2908      	cmp	r1, #8
 8000e70:	f000 8083 	beq.w	8000f7a <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	6923      	ldr	r3, [r4, #16]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8118 	beq.w	80010ac <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4b77      	ldr	r3, [pc, #476]	; (800105c <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e80:	4e75      	ldr	r6, [pc, #468]	; (8001058 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000e82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e84:	f7ff fdfc 	bl	8000a80 <HAL_GetTick>
 8000e88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8a:	e005      	b.n	8000e98 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fdf8 	bl	8000a80 <HAL_GetTick>
 8000e90:	1b40      	subs	r0, r0, r5
 8000e92:	2802      	cmp	r0, #2
 8000e94:	f200 80c6 	bhi.w	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	6833      	ldr	r3, [r6, #0]
 8000e9a:	0798      	lsls	r0, r3, #30
 8000e9c:	d5f6      	bpl.n	8000e8c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9e:	6833      	ldr	r3, [r6, #0]
 8000ea0:	6962      	ldr	r2, [r4, #20]
 8000ea2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ea6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eaa:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	071a      	lsls	r2, r3, #28
 8000eb0:	d41f      	bmi.n	8000ef2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb2:	075d      	lsls	r5, r3, #29
 8000eb4:	d542      	bpl.n	8000f3c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb6:	4b68      	ldr	r3, [pc, #416]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000eb8:	69da      	ldr	r2, [r3, #28]
 8000eba:	00d0      	lsls	r0, r2, #3
 8000ebc:	d57d      	bpl.n	8000fba <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	4e67      	ldr	r6, [pc, #412]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000ec2:	6833      	ldr	r3, [r6, #0]
 8000ec4:	05d9      	lsls	r1, r3, #23
 8000ec6:	f140 809d 	bpl.w	8001004 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eca:	68e3      	ldr	r3, [r4, #12]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	f000 80fe 	beq.w	80010ce <HAL_RCC_OscConfig+0x2f6>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80ca 	beq.w	800106c <HAL_RCC_OscConfig+0x294>
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000edc:	6a1a      	ldr	r2, [r3, #32]
 8000ede:	f000 812c 	beq.w	800113a <HAL_RCC_OscConfig+0x362>
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	621a      	str	r2, [r3, #32]
 8000ee8:	6a1a      	ldr	r2, [r3, #32]
 8000eea:	f022 0204 	bic.w	r2, r2, #4
 8000eee:	621a      	str	r2, [r3, #32]
 8000ef0:	e0f2      	b.n	80010d8 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef2:	69a3      	ldr	r3, [r4, #24]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d04f      	beq.n	8000f98 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4b58      	ldr	r3, [pc, #352]	; (800105c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efc:	4e56      	ldr	r6, [pc, #344]	; (8001058 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8000efe:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000f02:	f7ff fdbd 	bl	8000a80 <HAL_GetTick>
 8000f06:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f08:	e005      	b.n	8000f16 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fdb9 	bl	8000a80 <HAL_GetTick>
 8000f0e:	1b40      	subs	r0, r0, r5
 8000f10:	2802      	cmp	r0, #2
 8000f12:	f200 8087 	bhi.w	8001024 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000f18:	079b      	lsls	r3, r3, #30
 8000f1a:	d5f6      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f1c:	4b51      	ldr	r3, [pc, #324]	; (8001064 <HAL_RCC_OscConfig+0x28c>)
 8000f1e:	4a52      	ldr	r2, [pc, #328]	; (8001068 <HAL_RCC_OscConfig+0x290>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0a5b      	lsrs	r3, r3, #9
 8000f28:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f2a:	bf00      	nop
  }
  while (Delay --);
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	9201      	str	r2, [sp, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f9      	bne.n	8000f2a <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	075d      	lsls	r5, r3, #29
 8000f3a:	d4bc      	bmi.n	8000eb6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3c:	69e0      	ldr	r0, [r4, #28]
 8000f3e:	b1c0      	cbz	r0, 8000f72 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f40:	4d45      	ldr	r5, [pc, #276]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f42:	686b      	ldr	r3, [r5, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	f000 80d8 	beq.w	80010fe <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f54:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f56:	f000 80fa 	beq.w	800114e <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fd91 	bl	8000a80 <HAL_GetTick>
 8000f5e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f60:	e004      	b.n	8000f6c <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff fd8d 	bl	8000a80 <HAL_GetTick>
 8000f66:	1b00      	subs	r0, r0, r4
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d85b      	bhi.n	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	d4f7      	bmi.n	8000f62 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8000f72:	2000      	movs	r0, #0
}
 8000f74:	b002      	add	sp, #8
 8000f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7a:	6852      	ldr	r2, [r2, #4]
 8000f7c:	03d6      	lsls	r6, r2, #15
 8000f7e:	f53f af79 	bmi.w	8000e74 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	0795      	lsls	r5, r2, #30
 8000f88:	d530      	bpl.n	8000fec <HAL_RCC_OscConfig+0x214>
 8000f8a:	6922      	ldr	r2, [r4, #16]
 8000f8c:	2a01      	cmp	r2, #1
 8000f8e:	d02d      	beq.n	8000fec <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8000f90:	2001      	movs	r0, #1
}
 8000f92:	b002      	add	sp, #8
 8000f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000f98:	4a30      	ldr	r2, [pc, #192]	; (800105c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	4e2f      	ldr	r6, [pc, #188]	; (8001058 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8000f9c:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fd6e 	bl	8000a80 <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e004      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fd6a 	bl	8000a80 <HAL_GetTick>
 8000fac:	1b40      	subs	r0, r0, r5
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d838      	bhi.n	8001024 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000fb4:	079f      	lsls	r7, r3, #30
 8000fb6:	d4f7      	bmi.n	8000fa8 <HAL_RCC_OscConfig+0x1d0>
 8000fb8:	e7bd      	b.n	8000f36 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000fbc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fc2:	61da      	str	r2, [r3, #28]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000fce:	e777      	b.n	8000ec0 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd0:	684a      	ldr	r2, [r1, #4]
 8000fd2:	03d0      	lsls	r0, r2, #15
 8000fd4:	f57f af17 	bpl.w	8000e06 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	0391      	lsls	r1, r2, #14
 8000fde:	f57f af3b 	bpl.w	8000e58 <HAL_RCC_OscConfig+0x80>
 8000fe2:	6862      	ldr	r2, [r4, #4]
 8000fe4:	2a00      	cmp	r2, #0
 8000fe6:	f47f af37 	bne.w	8000e58 <HAL_RCC_OscConfig+0x80>
 8000fea:	e7d1      	b.n	8000f90 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fec:	491a      	ldr	r1, [pc, #104]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000fee:	6960      	ldr	r0, [r4, #20]
 8000ff0:	680a      	ldr	r2, [r1, #0]
 8000ff2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ff6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000ffa:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffc:	071a      	lsls	r2, r3, #28
 8000ffe:	f57f af58 	bpl.w	8000eb2 <HAL_RCC_OscConfig+0xda>
 8001002:	e776      	b.n	8000ef2 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001004:	6833      	ldr	r3, [r6, #0]
 8001006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800100c:	f7ff fd38 	bl	8000a80 <HAL_GetTick>
 8001010:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	6833      	ldr	r3, [r6, #0]
 8001014:	05da      	lsls	r2, r3, #23
 8001016:	f53f af58 	bmi.w	8000eca <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101a:	f7ff fd31 	bl	8000a80 <HAL_GetTick>
 800101e:	1bc0      	subs	r0, r0, r7
 8001020:	2864      	cmp	r0, #100	; 0x64
 8001022:	d9f6      	bls.n	8001012 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8001024:	2003      	movs	r0, #3
}
 8001026:	b002      	add	sp, #8
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	4d0a      	ldr	r5, [pc, #40]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 800102e:	682b      	ldr	r3, [r5, #0]
 8001030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800103e:	f7ff fd1f 	bl	8000a80 <HAL_GetTick>
 8001042:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001044:	e004      	b.n	8001050 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001046:	f7ff fd1b 	bl	8000a80 <HAL_GetTick>
 800104a:	1b80      	subs	r0, r0, r6
 800104c:	2864      	cmp	r0, #100	; 0x64
 800104e:	d8e9      	bhi.n	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	039b      	lsls	r3, r3, #14
 8001054:	d4f7      	bmi.n	8001046 <HAL_RCC_OscConfig+0x26e>
 8001056:	e6fe      	b.n	8000e56 <HAL_RCC_OscConfig+0x7e>
 8001058:	40021000 	.word	0x40021000
 800105c:	42420000 	.word	0x42420000
 8001060:	40007000 	.word	0x40007000
 8001064:	20000000 	.word	0x20000000
 8001068:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	4e50      	ldr	r6, [pc, #320]	; (80011b0 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001072:	6a33      	ldr	r3, [r6, #32]
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6233      	str	r3, [r6, #32]
 800107a:	6a33      	ldr	r3, [r6, #32]
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001082:	f7ff fcfd 	bl	8000a80 <HAL_GetTick>
 8001086:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	e004      	b.n	8001094 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108a:	f7ff fcf9 	bl	8000a80 <HAL_GetTick>
 800108e:	1bc0      	subs	r0, r0, r7
 8001090:	4540      	cmp	r0, r8
 8001092:	d8c7      	bhi.n	8001024 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	6a33      	ldr	r3, [r6, #32]
 8001096:	0798      	lsls	r0, r3, #30
 8001098:	d4f7      	bmi.n	800108a <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 800109a:	2d00      	cmp	r5, #0
 800109c:	f43f af4e 	beq.w	8000f3c <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a0:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <HAL_RCC_OscConfig+0x3d8>)
 80010a2:	69d3      	ldr	r3, [r2, #28]
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	e747      	b.n	8000f3c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80010ac:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	4e40      	ldr	r6, [pc, #256]	; (80011b0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80010b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff fce5 	bl	8000a80 <HAL_GetTick>
 80010b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b8:	e004      	b.n	80010c4 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fce1 	bl	8000a80 <HAL_GetTick>
 80010be:	1b40      	subs	r0, r0, r5
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d8af      	bhi.n	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c4:	6833      	ldr	r3, [r6, #0]
 80010c6:	0799      	lsls	r1, r3, #30
 80010c8:	d4f7      	bmi.n	80010ba <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	e6ef      	b.n	8000eae <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ce:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <HAL_RCC_OscConfig+0x3d8>)
 80010d0:	6a13      	ldr	r3, [r2, #32]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80010d8:	f7ff fcd2 	bl	8000a80 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010dc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e2:	4f33      	ldr	r7, [pc, #204]	; (80011b0 <HAL_RCC_OscConfig+0x3d8>)
 80010e4:	e004      	b.n	80010f0 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fccb 	bl	8000a80 <HAL_GetTick>
 80010ea:	1b80      	subs	r0, r0, r6
 80010ec:	4540      	cmp	r0, r8
 80010ee:	d899      	bhi.n	8001024 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	079b      	lsls	r3, r3, #30
 80010f4:	d5f7      	bpl.n	80010e6 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80010f6:	2d00      	cmp	r5, #0
 80010f8:	f43f af20 	beq.w	8000f3c <HAL_RCC_OscConfig+0x164>
 80010fc:	e7d0      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010fe:	2801      	cmp	r0, #1
 8001100:	f43f af38 	beq.w	8000f74 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8001104:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	6a22      	ldr	r2, [r4, #32]
 8001108:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800110c:	4291      	cmp	r1, r2
 800110e:	f47f af3f 	bne.w	8000f90 <HAL_RCC_OscConfig+0x1b8>
 8001112:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001114:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001118:	1a18      	subs	r0, r3, r0
 800111a:	bf18      	it	ne
 800111c:	2001      	movne	r0, #1
 800111e:	e729      	b.n	8000f74 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001124:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e67f      	b.n	8000e3a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113a:	f042 0204 	orr.w	r2, r2, #4
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	621a      	str	r2, [r3, #32]
 8001148:	e7c6      	b.n	80010d8 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
}
 800114c:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800114e:	f7ff fc97 	bl	8000a80 <HAL_GetTick>
 8001152:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001154:	e005      	b.n	8001162 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fc93 	bl	8000a80 <HAL_GetTick>
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	2802      	cmp	r0, #2
 800115e:	f63f af61 	bhi.w	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	0199      	lsls	r1, r3, #6
 8001166:	d4f6      	bmi.n	8001156 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001168:	6a23      	ldr	r3, [r4, #32]
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d105      	bne.n	800117c <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001170:	686a      	ldr	r2, [r5, #4]
 8001172:	68a1      	ldr	r1, [r4, #8]
 8001174:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001178:	430a      	orrs	r2, r1
 800117a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800117c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800117e:	4d0c      	ldr	r5, [pc, #48]	; (80011b0 <HAL_RCC_OscConfig+0x3d8>)
 8001180:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001182:	686a      	ldr	r2, [r5, #4]
 8001184:	430b      	orrs	r3, r1
 8001186:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800118a:	490a      	ldr	r1, [pc, #40]	; (80011b4 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800118c:	4313      	orrs	r3, r2
 800118e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001190:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001192:	f7ff fc75 	bl	8000a80 <HAL_GetTick>
 8001196:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001198:	e005      	b.n	80011a6 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fc71 	bl	8000a80 <HAL_GetTick>
 800119e:	1b00      	subs	r0, r0, r4
 80011a0:	2802      	cmp	r0, #2
 80011a2:	f63f af3f 	bhi.w	8001024 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	019a      	lsls	r2, r3, #6
 80011aa:	d5f6      	bpl.n	800119a <HAL_RCC_OscConfig+0x3c2>
 80011ac:	e6e1      	b.n	8000f72 <HAL_RCC_OscConfig+0x19a>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	42420000 	.word	0x42420000

080011b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011b8:	2800      	cmp	r0, #0
 80011ba:	f000 80b1 	beq.w	8001320 <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011be:	4a5e      	ldr	r2, [pc, #376]	; (8001338 <HAL_RCC_ClockConfig+0x180>)
{
 80011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	4604      	mov	r4, r0
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	428b      	cmp	r3, r1
 80011ce:	460d      	mov	r5, r1
{
 80011d0:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d2:	d20d      	bcs.n	80011f0 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	f023 0307 	bic.w	r3, r3, #7
 80011da:	430b      	orrs	r3, r1
 80011dc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d003      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
}
 80011ea:	b006      	add	sp, #24
 80011ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	079e      	lsls	r6, r3, #30
 80011f4:	d514      	bpl.n	8001220 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f6:	0758      	lsls	r0, r3, #29
 80011f8:	d504      	bpl.n	8001204 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011fa:	4950      	ldr	r1, [pc, #320]	; (800133c <HAL_RCC_ClockConfig+0x184>)
 80011fc:	684a      	ldr	r2, [r1, #4]
 80011fe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001202:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001204:	0719      	lsls	r1, r3, #28
 8001206:	d504      	bpl.n	8001212 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001208:	494c      	ldr	r1, [pc, #304]	; (800133c <HAL_RCC_ClockConfig+0x184>)
 800120a:	684a      	ldr	r2, [r1, #4]
 800120c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001210:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001212:	494a      	ldr	r1, [pc, #296]	; (800133c <HAL_RCC_ClockConfig+0x184>)
 8001214:	68a0      	ldr	r0, [r4, #8]
 8001216:	684a      	ldr	r2, [r1, #4]
 8001218:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800121c:	4302      	orrs	r2, r0
 800121e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001220:	07da      	lsls	r2, r3, #31
 8001222:	d520      	bpl.n	8001266 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001224:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001228:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122c:	d07a      	beq.n	8001324 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122e:	2a02      	cmp	r2, #2
 8001230:	d073      	beq.n	800131a <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	079e      	lsls	r6, r3, #30
 8001234:	d5d8      	bpl.n	80011e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4e41      	ldr	r6, [pc, #260]	; (800133c <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123c:	6873      	ldr	r3, [r6, #4]
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	4313      	orrs	r3, r2
 8001244:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001246:	f7ff fc1b 	bl	8000a80 <HAL_GetTick>
 800124a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124c:	e004      	b.n	8001258 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124e:	f7ff fc17 	bl	8000a80 <HAL_GetTick>
 8001252:	1bc0      	subs	r0, r0, r7
 8001254:	4540      	cmp	r0, r8
 8001256:	d868      	bhi.n	800132a <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001258:	6873      	ldr	r3, [r6, #4]
 800125a:	6862      	ldr	r2, [r4, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001264:	d1f3      	bne.n	800124e <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001266:	4a34      	ldr	r2, [pc, #208]	; (8001338 <HAL_RCC_ClockConfig+0x180>)
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	42ab      	cmp	r3, r5
 8001270:	d909      	bls.n	8001286 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	f023 0307 	bic.w	r3, r3, #7
 8001278:	432b      	orrs	r3, r5
 800127a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	42ab      	cmp	r3, r5
 8001284:	d1b0      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	0758      	lsls	r0, r3, #29
 800128a:	d506      	bpl.n	800129a <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	492b      	ldr	r1, [pc, #172]	; (800133c <HAL_RCC_ClockConfig+0x184>)
 800128e:	68e0      	ldr	r0, [r4, #12]
 8001290:	684a      	ldr	r2, [r1, #4]
 8001292:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001296:	4302      	orrs	r2, r0
 8001298:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129a:	0719      	lsls	r1, r3, #28
 800129c:	d507      	bpl.n	80012ae <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800129e:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_RCC_ClockConfig+0x184>)
 80012a0:	6921      	ldr	r1, [r4, #16]
 80012a2:	6853      	ldr	r3, [r2, #4]
 80012a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012ac:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ae:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_RCC_ClockConfig+0x188>)
 80012b4:	ad06      	add	r5, sp, #24
 80012b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b8:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80012bc:	491f      	ldr	r1, [pc, #124]	; (800133c <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012be:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 80012c2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012c4:	f002 030c 	and.w	r3, r2, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d011      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_RCC_ClockConfig+0x184>)
 80012d0:	481d      	ldr	r0, [pc, #116]	; (8001348 <HAL_RCC_ClockConfig+0x190>)
 80012d2:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80012d4:	491d      	ldr	r1, [pc, #116]	; (800134c <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80012da:	5c80      	ldrb	r0, [r0, r2]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_RCC_ClockConfig+0x198>)
 80012de:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80012e0:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80012e4:	f7ff fb8a 	bl	80009fc <HAL_InitTick>
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
}
 80012ea:	b006      	add	sp, #24
 80012ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012f0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80012f4:	3318      	adds	r3, #24
 80012f6:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f8:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012fe:	d516      	bpl.n	800132e <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001300:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001302:	4910      	ldr	r1, [pc, #64]	; (8001344 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001304:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001308:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800130c:	3218      	adds	r2, #24
 800130e:	446a      	add	r2, sp
 8001310:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001314:	fbb3 f3f2 	udiv	r3, r3, r2
 8001318:	e7d9      	b.n	80012ce <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	019f      	lsls	r7, r3, #6
 800131c:	d48b      	bmi.n	8001236 <HAL_RCC_ClockConfig+0x7e>
 800131e:	e763      	b.n	80011e8 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
}
 8001322:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001324:	039b      	lsls	r3, r3, #14
 8001326:	d486      	bmi.n	8001236 <HAL_RCC_ClockConfig+0x7e>
 8001328:	e75e      	b.n	80011e8 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 800132a:	2003      	movs	r0, #3
 800132c:	e75d      	b.n	80011ea <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	e7cb      	b.n	80012ce <HAL_RCC_ClockConfig+0x116>
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000
 800133c:	40021000 	.word	0x40021000
 8001340:	08002864 	.word	0x08002864
 8001344:	007a1200 	.word	0x007a1200
 8001348:	08002854 	.word	0x08002854
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000
 8001354:	003d0900 	.word	0x003d0900

08001358 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001358:	b368      	cbz	r0, 80013b6 <HAL_SRAM_Init+0x5e>
 800135a:	6983      	ldr	r3, [r0, #24]
{
 800135c:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800135e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001362:	4604      	mov	r4, r0
 8001364:	d029      	beq.n	80013ba <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001366:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800136a:	4615      	mov	r5, r2
 800136c:	460e      	mov	r6, r1
 800136e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001372:	b1db      	cbz	r3, 80013ac <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001374:	4621      	mov	r1, r4
 8001376:	f851 0b08 	ldr.w	r0, [r1], #8
 800137a:	f000 f821 	bl	80013c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800137e:	4631      	mov	r1, r6
 8001380:	68a2      	ldr	r2, [r4, #8]
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	f000 f852 	bl	800142c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001388:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 800138c:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800138e:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001392:	f000 f86d 	bl	8001470 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 800139a:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800139c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80013a0:	432b      	orrs	r3, r5
 80013a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 80013a6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80013ac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 80013b0:	f7ff fa92 	bl	80008d8 <HAL_SRAM_MspInit>
 80013b4:	e7de      	b.n	8001374 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
}
 80013b8:	4770      	bx	lr
    return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
}
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	bf00      	nop

080013c0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80013c0:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 80013c2:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80013c4:	688b      	ldr	r3, [r1, #8]
{
 80013c6:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	bf0c      	ite	eq
 80013cc:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 80013d0:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80013d2:	684e      	ldr	r6, [r1, #4]
 80013d4:	680c      	ldr	r4, [r1, #0]
 80013d6:	4333      	orrs	r3, r6
 80013d8:	68ce      	ldr	r6, [r1, #12]
 80013da:	4d13      	ldr	r5, [pc, #76]	; (8001428 <FSMC_NORSRAM_Init+0x68>)
 80013dc:	4333      	orrs	r3, r6
 80013de:	690e      	ldr	r6, [r1, #16]
 80013e0:	4333      	orrs	r3, r6
 80013e2:	694e      	ldr	r6, [r1, #20]
 80013e4:	4333      	orrs	r3, r6
 80013e6:	69ce      	ldr	r6, [r1, #28]
 80013e8:	4333      	orrs	r3, r6
 80013ea:	6a0e      	ldr	r6, [r1, #32]
 80013ec:	4333      	orrs	r3, r6
 80013ee:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80013f0:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80013f2:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 80013f6:	f026 0601 	bic.w	r6, r6, #1
 80013fa:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80013fe:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8001400:	4333      	orrs	r3, r6
 8001402:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8001404:	4333      	orrs	r3, r6
 8001406:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8001408:	4333      	orrs	r3, r6
 800140a:	698e      	ldr	r6, [r1, #24]
 800140c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800140e:	4333      	orrs	r3, r6
 8001410:	430b      	orrs	r3, r1
 8001412:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8001416:	400d      	ands	r5, r1
 8001418:	432b      	orrs	r3, r5
 800141a:	ea43 030c 	orr.w	r3, r3, ip
 800141e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001422:	bc70      	pop	{r4, r5, r6}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	fff00080 	.word	0xfff00080

0800142c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800142c:	4603      	mov	r3, r0
 800142e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001432:	6853      	ldr	r3, [r2, #4]
{
 8001434:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001436:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 800143a:	698c      	ldr	r4, [r1, #24]
 800143c:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 800143e:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001440:	4323      	orrs	r3, r4
 8001442:	684c      	ldr	r4, [r1, #4]
 8001444:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001448:	688c      	ldr	r4, [r1, #8]
 800144a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800144e:	68cc      	ldr	r4, [r1, #12]
 8001450:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001454:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8001458:	f104 3eff 	add.w	lr, r4, #4294967295
 800145c:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8001460:	3902      	subs	r1, #2
 8001462:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001466:	ea43 030c 	orr.w	r3, r3, ip
 800146a:	6053      	str	r3, [r2, #4]
}
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop

08001470 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001474:	d005      	beq.n	8001482 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001476:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800147a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800147e:	2000      	movs	r0, #0
 8001480:	4770      	bx	lr
{
 8001482:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001484:	680b      	ldr	r3, [r1, #0]
 8001486:	698d      	ldr	r5, [r1, #24]
 8001488:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800148c:	432b      	orrs	r3, r5
 800148e:	684d      	ldr	r5, [r1, #4]
 8001490:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001494:	688d      	ldr	r5, [r1, #8]
 8001496:	68c9      	ldr	r1, [r1, #12]
 8001498:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800149c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014a0:	4903      	ldr	r1, [pc, #12]	; (80014b0 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 80014a2:	4021      	ands	r1, r4
 80014a4:	430b      	orrs	r3, r1
 80014a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80014aa:	bc30      	pop	{r4, r5}
 80014ac:	2000      	movs	r0, #0
 80014ae:	4770      	bx	lr
 80014b0:	cff00000 	.word	0xcff00000

080014b4 <__errno>:
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <__errno+0x8>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000000c 	.word	0x2000000c

080014c0 <__libc_init_array>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	2600      	movs	r6, #0
 80014c4:	4d0c      	ldr	r5, [pc, #48]	; (80014f8 <__libc_init_array+0x38>)
 80014c6:	4c0d      	ldr	r4, [pc, #52]	; (80014fc <__libc_init_array+0x3c>)
 80014c8:	1b64      	subs	r4, r4, r5
 80014ca:	10a4      	asrs	r4, r4, #2
 80014cc:	42a6      	cmp	r6, r4
 80014ce:	d109      	bne.n	80014e4 <__libc_init_array+0x24>
 80014d0:	f000 fc94 	bl	8001dfc <_init>
 80014d4:	2600      	movs	r6, #0
 80014d6:	4d0a      	ldr	r5, [pc, #40]	; (8001500 <__libc_init_array+0x40>)
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <__libc_init_array+0x44>)
 80014da:	1b64      	subs	r4, r4, r5
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d105      	bne.n	80014ee <__libc_init_array+0x2e>
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80014e8:	4798      	blx	r3
 80014ea:	3601      	adds	r6, #1
 80014ec:	e7ee      	b.n	80014cc <__libc_init_array+0xc>
 80014ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80014f2:	4798      	blx	r3
 80014f4:	3601      	adds	r6, #1
 80014f6:	e7f2      	b.n	80014de <__libc_init_array+0x1e>
 80014f8:	080028a8 	.word	0x080028a8
 80014fc:	080028a8 	.word	0x080028a8
 8001500:	080028a8 	.word	0x080028a8
 8001504:	080028ac 	.word	0x080028ac

08001508 <siprintf>:
 8001508:	b40e      	push	{r1, r2, r3}
 800150a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800150e:	b500      	push	{lr}
 8001510:	b09c      	sub	sp, #112	; 0x70
 8001512:	ab1d      	add	r3, sp, #116	; 0x74
 8001514:	9002      	str	r0, [sp, #8]
 8001516:	9006      	str	r0, [sp, #24]
 8001518:	9107      	str	r1, [sp, #28]
 800151a:	9104      	str	r1, [sp, #16]
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <siprintf+0x38>)
 800151e:	4909      	ldr	r1, [pc, #36]	; (8001544 <siprintf+0x3c>)
 8001520:	f853 2b04 	ldr.w	r2, [r3], #4
 8001524:	9105      	str	r1, [sp, #20]
 8001526:	6800      	ldr	r0, [r0, #0]
 8001528:	a902      	add	r1, sp, #8
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f000 f868 	bl	8001600 <_svfiprintf_r>
 8001530:	2200      	movs	r2, #0
 8001532:	9b02      	ldr	r3, [sp, #8]
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	b01c      	add	sp, #112	; 0x70
 8001538:	f85d eb04 	ldr.w	lr, [sp], #4
 800153c:	b003      	add	sp, #12
 800153e:	4770      	bx	lr
 8001540:	2000000c 	.word	0x2000000c
 8001544:	ffff0208 	.word	0xffff0208

08001548 <__ssputs_r>:
 8001548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800154c:	688e      	ldr	r6, [r1, #8]
 800154e:	4682      	mov	sl, r0
 8001550:	429e      	cmp	r6, r3
 8001552:	460c      	mov	r4, r1
 8001554:	4690      	mov	r8, r2
 8001556:	461f      	mov	r7, r3
 8001558:	d838      	bhi.n	80015cc <__ssputs_r+0x84>
 800155a:	898a      	ldrh	r2, [r1, #12]
 800155c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001560:	d032      	beq.n	80015c8 <__ssputs_r+0x80>
 8001562:	6825      	ldr	r5, [r4, #0]
 8001564:	6909      	ldr	r1, [r1, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	eba5 0901 	sub.w	r9, r5, r1
 800156c:	6965      	ldr	r5, [r4, #20]
 800156e:	444b      	add	r3, r9
 8001570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001578:	106d      	asrs	r5, r5, #1
 800157a:	429d      	cmp	r5, r3
 800157c:	bf38      	it	cc
 800157e:	461d      	movcc	r5, r3
 8001580:	0553      	lsls	r3, r2, #21
 8001582:	d531      	bpl.n	80015e8 <__ssputs_r+0xa0>
 8001584:	4629      	mov	r1, r5
 8001586:	f000 fb6f 	bl	8001c68 <_malloc_r>
 800158a:	4606      	mov	r6, r0
 800158c:	b950      	cbnz	r0, 80015a4 <__ssputs_r+0x5c>
 800158e:	230c      	movs	r3, #12
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f8ca 3000 	str.w	r3, [sl]
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159e:	81a3      	strh	r3, [r4, #12]
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	464a      	mov	r2, r9
 80015a6:	6921      	ldr	r1, [r4, #16]
 80015a8:	f000 face 	bl	8001b48 <memcpy>
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80015b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b6:	81a3      	strh	r3, [r4, #12]
 80015b8:	6126      	str	r6, [r4, #16]
 80015ba:	444e      	add	r6, r9
 80015bc:	6026      	str	r6, [r4, #0]
 80015be:	463e      	mov	r6, r7
 80015c0:	6165      	str	r5, [r4, #20]
 80015c2:	eba5 0509 	sub.w	r5, r5, r9
 80015c6:	60a5      	str	r5, [r4, #8]
 80015c8:	42be      	cmp	r6, r7
 80015ca:	d900      	bls.n	80015ce <__ssputs_r+0x86>
 80015cc:	463e      	mov	r6, r7
 80015ce:	4632      	mov	r2, r6
 80015d0:	4641      	mov	r1, r8
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	f000 fac6 	bl	8001b64 <memmove>
 80015d8:	68a3      	ldr	r3, [r4, #8]
 80015da:	2000      	movs	r0, #0
 80015dc:	1b9b      	subs	r3, r3, r6
 80015de:	60a3      	str	r3, [r4, #8]
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	4433      	add	r3, r6
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	e7db      	b.n	80015a0 <__ssputs_r+0x58>
 80015e8:	462a      	mov	r2, r5
 80015ea:	f000 fbb1 	bl	8001d50 <_realloc_r>
 80015ee:	4606      	mov	r6, r0
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d1e1      	bne.n	80015b8 <__ssputs_r+0x70>
 80015f4:	4650      	mov	r0, sl
 80015f6:	6921      	ldr	r1, [r4, #16]
 80015f8:	f000 face 	bl	8001b98 <_free_r>
 80015fc:	e7c7      	b.n	800158e <__ssputs_r+0x46>
	...

08001600 <_svfiprintf_r>:
 8001600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001604:	4698      	mov	r8, r3
 8001606:	898b      	ldrh	r3, [r1, #12]
 8001608:	4607      	mov	r7, r0
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	460d      	mov	r5, r1
 800160e:	4614      	mov	r4, r2
 8001610:	b09d      	sub	sp, #116	; 0x74
 8001612:	d50e      	bpl.n	8001632 <_svfiprintf_r+0x32>
 8001614:	690b      	ldr	r3, [r1, #16]
 8001616:	b963      	cbnz	r3, 8001632 <_svfiprintf_r+0x32>
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	f000 fb25 	bl	8001c68 <_malloc_r>
 800161e:	6028      	str	r0, [r5, #0]
 8001620:	6128      	str	r0, [r5, #16]
 8001622:	b920      	cbnz	r0, 800162e <_svfiprintf_r+0x2e>
 8001624:	230c      	movs	r3, #12
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	e0d1      	b.n	80017d2 <_svfiprintf_r+0x1d2>
 800162e:	2340      	movs	r3, #64	; 0x40
 8001630:	616b      	str	r3, [r5, #20]
 8001632:	2300      	movs	r3, #0
 8001634:	9309      	str	r3, [sp, #36]	; 0x24
 8001636:	2320      	movs	r3, #32
 8001638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800163c:	2330      	movs	r3, #48	; 0x30
 800163e:	f04f 0901 	mov.w	r9, #1
 8001642:	f8cd 800c 	str.w	r8, [sp, #12]
 8001646:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80017ec <_svfiprintf_r+0x1ec>
 800164a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800164e:	4623      	mov	r3, r4
 8001650:	469a      	mov	sl, r3
 8001652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001656:	b10a      	cbz	r2, 800165c <_svfiprintf_r+0x5c>
 8001658:	2a25      	cmp	r2, #37	; 0x25
 800165a:	d1f9      	bne.n	8001650 <_svfiprintf_r+0x50>
 800165c:	ebba 0b04 	subs.w	fp, sl, r4
 8001660:	d00b      	beq.n	800167a <_svfiprintf_r+0x7a>
 8001662:	465b      	mov	r3, fp
 8001664:	4622      	mov	r2, r4
 8001666:	4629      	mov	r1, r5
 8001668:	4638      	mov	r0, r7
 800166a:	f7ff ff6d 	bl	8001548 <__ssputs_r>
 800166e:	3001      	adds	r0, #1
 8001670:	f000 80aa 	beq.w	80017c8 <_svfiprintf_r+0x1c8>
 8001674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001676:	445a      	add	r2, fp
 8001678:	9209      	str	r2, [sp, #36]	; 0x24
 800167a:	f89a 3000 	ldrb.w	r3, [sl]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a2 	beq.w	80017c8 <_svfiprintf_r+0x1c8>
 8001684:	2300      	movs	r3, #0
 8001686:	f04f 32ff 	mov.w	r2, #4294967295
 800168a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800168e:	f10a 0a01 	add.w	sl, sl, #1
 8001692:	9304      	str	r3, [sp, #16]
 8001694:	9307      	str	r3, [sp, #28]
 8001696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800169a:	931a      	str	r3, [sp, #104]	; 0x68
 800169c:	4654      	mov	r4, sl
 800169e:	2205      	movs	r2, #5
 80016a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016a4:	4851      	ldr	r0, [pc, #324]	; (80017ec <_svfiprintf_r+0x1ec>)
 80016a6:	f000 fa41 	bl	8001b2c <memchr>
 80016aa:	9a04      	ldr	r2, [sp, #16]
 80016ac:	b9d8      	cbnz	r0, 80016e6 <_svfiprintf_r+0xe6>
 80016ae:	06d0      	lsls	r0, r2, #27
 80016b0:	bf44      	itt	mi
 80016b2:	2320      	movmi	r3, #32
 80016b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016b8:	0711      	lsls	r1, r2, #28
 80016ba:	bf44      	itt	mi
 80016bc:	232b      	movmi	r3, #43	; 0x2b
 80016be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016c2:	f89a 3000 	ldrb.w	r3, [sl]
 80016c6:	2b2a      	cmp	r3, #42	; 0x2a
 80016c8:	d015      	beq.n	80016f6 <_svfiprintf_r+0xf6>
 80016ca:	4654      	mov	r4, sl
 80016cc:	2000      	movs	r0, #0
 80016ce:	f04f 0c0a 	mov.w	ip, #10
 80016d2:	9a07      	ldr	r2, [sp, #28]
 80016d4:	4621      	mov	r1, r4
 80016d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016da:	3b30      	subs	r3, #48	; 0x30
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d94e      	bls.n	800177e <_svfiprintf_r+0x17e>
 80016e0:	b1b0      	cbz	r0, 8001710 <_svfiprintf_r+0x110>
 80016e2:	9207      	str	r2, [sp, #28]
 80016e4:	e014      	b.n	8001710 <_svfiprintf_r+0x110>
 80016e6:	eba0 0308 	sub.w	r3, r0, r8
 80016ea:	fa09 f303 	lsl.w	r3, r9, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	46a2      	mov	sl, r4
 80016f2:	9304      	str	r3, [sp, #16]
 80016f4:	e7d2      	b.n	800169c <_svfiprintf_r+0x9c>
 80016f6:	9b03      	ldr	r3, [sp, #12]
 80016f8:	1d19      	adds	r1, r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	9103      	str	r1, [sp, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bfbb      	ittet	lt
 8001702:	425b      	neglt	r3, r3
 8001704:	f042 0202 	orrlt.w	r2, r2, #2
 8001708:	9307      	strge	r3, [sp, #28]
 800170a:	9307      	strlt	r3, [sp, #28]
 800170c:	bfb8      	it	lt
 800170e:	9204      	strlt	r2, [sp, #16]
 8001710:	7823      	ldrb	r3, [r4, #0]
 8001712:	2b2e      	cmp	r3, #46	; 0x2e
 8001714:	d10c      	bne.n	8001730 <_svfiprintf_r+0x130>
 8001716:	7863      	ldrb	r3, [r4, #1]
 8001718:	2b2a      	cmp	r3, #42	; 0x2a
 800171a:	d135      	bne.n	8001788 <_svfiprintf_r+0x188>
 800171c:	9b03      	ldr	r3, [sp, #12]
 800171e:	3402      	adds	r4, #2
 8001720:	1d1a      	adds	r2, r3, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	9203      	str	r2, [sp, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	bfb8      	it	lt
 800172a:	f04f 33ff 	movlt.w	r3, #4294967295
 800172e:	9305      	str	r3, [sp, #20]
 8001730:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80017f0 <_svfiprintf_r+0x1f0>
 8001734:	2203      	movs	r2, #3
 8001736:	4650      	mov	r0, sl
 8001738:	7821      	ldrb	r1, [r4, #0]
 800173a:	f000 f9f7 	bl	8001b2c <memchr>
 800173e:	b140      	cbz	r0, 8001752 <_svfiprintf_r+0x152>
 8001740:	2340      	movs	r3, #64	; 0x40
 8001742:	eba0 000a 	sub.w	r0, r0, sl
 8001746:	fa03 f000 	lsl.w	r0, r3, r0
 800174a:	9b04      	ldr	r3, [sp, #16]
 800174c:	3401      	adds	r4, #1
 800174e:	4303      	orrs	r3, r0
 8001750:	9304      	str	r3, [sp, #16]
 8001752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001756:	2206      	movs	r2, #6
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <_svfiprintf_r+0x1f4>)
 800175a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800175e:	f000 f9e5 	bl	8001b2c <memchr>
 8001762:	2800      	cmp	r0, #0
 8001764:	d038      	beq.n	80017d8 <_svfiprintf_r+0x1d8>
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <_svfiprintf_r+0x1f8>)
 8001768:	bb1b      	cbnz	r3, 80017b2 <_svfiprintf_r+0x1b2>
 800176a:	9b03      	ldr	r3, [sp, #12]
 800176c:	3307      	adds	r3, #7
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	3308      	adds	r3, #8
 8001774:	9303      	str	r3, [sp, #12]
 8001776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001778:	4433      	add	r3, r6
 800177a:	9309      	str	r3, [sp, #36]	; 0x24
 800177c:	e767      	b.n	800164e <_svfiprintf_r+0x4e>
 800177e:	460c      	mov	r4, r1
 8001780:	2001      	movs	r0, #1
 8001782:	fb0c 3202 	mla	r2, ip, r2, r3
 8001786:	e7a5      	b.n	80016d4 <_svfiprintf_r+0xd4>
 8001788:	2300      	movs	r3, #0
 800178a:	f04f 0c0a 	mov.w	ip, #10
 800178e:	4619      	mov	r1, r3
 8001790:	3401      	adds	r4, #1
 8001792:	9305      	str	r3, [sp, #20]
 8001794:	4620      	mov	r0, r4
 8001796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800179a:	3a30      	subs	r2, #48	; 0x30
 800179c:	2a09      	cmp	r2, #9
 800179e:	d903      	bls.n	80017a8 <_svfiprintf_r+0x1a8>
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0c5      	beq.n	8001730 <_svfiprintf_r+0x130>
 80017a4:	9105      	str	r1, [sp, #20]
 80017a6:	e7c3      	b.n	8001730 <_svfiprintf_r+0x130>
 80017a8:	4604      	mov	r4, r0
 80017aa:	2301      	movs	r3, #1
 80017ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80017b0:	e7f0      	b.n	8001794 <_svfiprintf_r+0x194>
 80017b2:	ab03      	add	r3, sp, #12
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	462a      	mov	r2, r5
 80017b8:	4638      	mov	r0, r7
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_svfiprintf_r+0x1fc>)
 80017bc:	a904      	add	r1, sp, #16
 80017be:	f3af 8000 	nop.w
 80017c2:	1c42      	adds	r2, r0, #1
 80017c4:	4606      	mov	r6, r0
 80017c6:	d1d6      	bne.n	8001776 <_svfiprintf_r+0x176>
 80017c8:	89ab      	ldrh	r3, [r5, #12]
 80017ca:	065b      	lsls	r3, r3, #25
 80017cc:	f53f af2c 	bmi.w	8001628 <_svfiprintf_r+0x28>
 80017d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80017d2:	b01d      	add	sp, #116	; 0x74
 80017d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d8:	ab03      	add	r3, sp, #12
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	462a      	mov	r2, r5
 80017de:	4638      	mov	r0, r7
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <_svfiprintf_r+0x1fc>)
 80017e2:	a904      	add	r1, sp, #16
 80017e4:	f000 f87c 	bl	80018e0 <_printf_i>
 80017e8:	e7eb      	b.n	80017c2 <_svfiprintf_r+0x1c2>
 80017ea:	bf00      	nop
 80017ec:	08002875 	.word	0x08002875
 80017f0:	0800287b 	.word	0x0800287b
 80017f4:	0800287f 	.word	0x0800287f
 80017f8:	00000000 	.word	0x00000000
 80017fc:	08001549 	.word	0x08001549

08001800 <_printf_common>:
 8001800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001804:	4616      	mov	r6, r2
 8001806:	4699      	mov	r9, r3
 8001808:	688a      	ldr	r2, [r1, #8]
 800180a:	690b      	ldr	r3, [r1, #16]
 800180c:	4607      	mov	r7, r0
 800180e:	4293      	cmp	r3, r2
 8001810:	bfb8      	it	lt
 8001812:	4613      	movlt	r3, r2
 8001814:	6033      	str	r3, [r6, #0]
 8001816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800181a:	460c      	mov	r4, r1
 800181c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001820:	b10a      	cbz	r2, 8001826 <_printf_common+0x26>
 8001822:	3301      	adds	r3, #1
 8001824:	6033      	str	r3, [r6, #0]
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	0699      	lsls	r1, r3, #26
 800182a:	bf42      	ittt	mi
 800182c:	6833      	ldrmi	r3, [r6, #0]
 800182e:	3302      	addmi	r3, #2
 8001830:	6033      	strmi	r3, [r6, #0]
 8001832:	6825      	ldr	r5, [r4, #0]
 8001834:	f015 0506 	ands.w	r5, r5, #6
 8001838:	d106      	bne.n	8001848 <_printf_common+0x48>
 800183a:	f104 0a19 	add.w	sl, r4, #25
 800183e:	68e3      	ldr	r3, [r4, #12]
 8001840:	6832      	ldr	r2, [r6, #0]
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	42ab      	cmp	r3, r5
 8001846:	dc28      	bgt.n	800189a <_printf_common+0x9a>
 8001848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800184c:	1e13      	subs	r3, r2, #0
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	bf18      	it	ne
 8001852:	2301      	movne	r3, #1
 8001854:	0692      	lsls	r2, r2, #26
 8001856:	d42d      	bmi.n	80018b4 <_printf_common+0xb4>
 8001858:	4649      	mov	r1, r9
 800185a:	4638      	mov	r0, r7
 800185c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001860:	47c0      	blx	r8
 8001862:	3001      	adds	r0, #1
 8001864:	d020      	beq.n	80018a8 <_printf_common+0xa8>
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	68e5      	ldr	r5, [r4, #12]
 800186a:	f003 0306 	and.w	r3, r3, #6
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf18      	it	ne
 8001872:	2500      	movne	r5, #0
 8001874:	6832      	ldr	r2, [r6, #0]
 8001876:	f04f 0600 	mov.w	r6, #0
 800187a:	68a3      	ldr	r3, [r4, #8]
 800187c:	bf08      	it	eq
 800187e:	1aad      	subeq	r5, r5, r2
 8001880:	6922      	ldr	r2, [r4, #16]
 8001882:	bf08      	it	eq
 8001884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001888:	4293      	cmp	r3, r2
 800188a:	bfc4      	itt	gt
 800188c:	1a9b      	subgt	r3, r3, r2
 800188e:	18ed      	addgt	r5, r5, r3
 8001890:	341a      	adds	r4, #26
 8001892:	42b5      	cmp	r5, r6
 8001894:	d11a      	bne.n	80018cc <_printf_common+0xcc>
 8001896:	2000      	movs	r0, #0
 8001898:	e008      	b.n	80018ac <_printf_common+0xac>
 800189a:	2301      	movs	r3, #1
 800189c:	4652      	mov	r2, sl
 800189e:	4649      	mov	r1, r9
 80018a0:	4638      	mov	r0, r7
 80018a2:	47c0      	blx	r8
 80018a4:	3001      	adds	r0, #1
 80018a6:	d103      	bne.n	80018b0 <_printf_common+0xb0>
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018b0:	3501      	adds	r5, #1
 80018b2:	e7c4      	b.n	800183e <_printf_common+0x3e>
 80018b4:	2030      	movs	r0, #48	; 0x30
 80018b6:	18e1      	adds	r1, r4, r3
 80018b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80018c2:	4422      	add	r2, r4
 80018c4:	3302      	adds	r3, #2
 80018c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80018ca:	e7c5      	b.n	8001858 <_printf_common+0x58>
 80018cc:	2301      	movs	r3, #1
 80018ce:	4622      	mov	r2, r4
 80018d0:	4649      	mov	r1, r9
 80018d2:	4638      	mov	r0, r7
 80018d4:	47c0      	blx	r8
 80018d6:	3001      	adds	r0, #1
 80018d8:	d0e6      	beq.n	80018a8 <_printf_common+0xa8>
 80018da:	3601      	adds	r6, #1
 80018dc:	e7d9      	b.n	8001892 <_printf_common+0x92>
	...

080018e0 <_printf_i>:
 80018e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018e4:	7e0f      	ldrb	r7, [r1, #24]
 80018e6:	4691      	mov	r9, r2
 80018e8:	2f78      	cmp	r7, #120	; 0x78
 80018ea:	4680      	mov	r8, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	469a      	mov	sl, r3
 80018f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80018f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80018f6:	d807      	bhi.n	8001908 <_printf_i+0x28>
 80018f8:	2f62      	cmp	r7, #98	; 0x62
 80018fa:	d80a      	bhi.n	8001912 <_printf_i+0x32>
 80018fc:	2f00      	cmp	r7, #0
 80018fe:	f000 80d9 	beq.w	8001ab4 <_printf_i+0x1d4>
 8001902:	2f58      	cmp	r7, #88	; 0x58
 8001904:	f000 80a4 	beq.w	8001a50 <_printf_i+0x170>
 8001908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800190c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001910:	e03a      	b.n	8001988 <_printf_i+0xa8>
 8001912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001916:	2b15      	cmp	r3, #21
 8001918:	d8f6      	bhi.n	8001908 <_printf_i+0x28>
 800191a:	a101      	add	r1, pc, #4	; (adr r1, 8001920 <_printf_i+0x40>)
 800191c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001920:	08001979 	.word	0x08001979
 8001924:	0800198d 	.word	0x0800198d
 8001928:	08001909 	.word	0x08001909
 800192c:	08001909 	.word	0x08001909
 8001930:	08001909 	.word	0x08001909
 8001934:	08001909 	.word	0x08001909
 8001938:	0800198d 	.word	0x0800198d
 800193c:	08001909 	.word	0x08001909
 8001940:	08001909 	.word	0x08001909
 8001944:	08001909 	.word	0x08001909
 8001948:	08001909 	.word	0x08001909
 800194c:	08001a9b 	.word	0x08001a9b
 8001950:	080019bd 	.word	0x080019bd
 8001954:	08001a7d 	.word	0x08001a7d
 8001958:	08001909 	.word	0x08001909
 800195c:	08001909 	.word	0x08001909
 8001960:	08001abd 	.word	0x08001abd
 8001964:	08001909 	.word	0x08001909
 8001968:	080019bd 	.word	0x080019bd
 800196c:	08001909 	.word	0x08001909
 8001970:	08001909 	.word	0x08001909
 8001974:	08001a85 	.word	0x08001a85
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	1d1a      	adds	r2, r3, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	602a      	str	r2, [r5, #0]
 8001980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001988:	2301      	movs	r3, #1
 800198a:	e0a4      	b.n	8001ad6 <_printf_i+0x1f6>
 800198c:	6820      	ldr	r0, [r4, #0]
 800198e:	6829      	ldr	r1, [r5, #0]
 8001990:	0606      	lsls	r6, r0, #24
 8001992:	f101 0304 	add.w	r3, r1, #4
 8001996:	d50a      	bpl.n	80019ae <_printf_i+0xce>
 8001998:	680e      	ldr	r6, [r1, #0]
 800199a:	602b      	str	r3, [r5, #0]
 800199c:	2e00      	cmp	r6, #0
 800199e:	da03      	bge.n	80019a8 <_printf_i+0xc8>
 80019a0:	232d      	movs	r3, #45	; 0x2d
 80019a2:	4276      	negs	r6, r6
 80019a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019a8:	230a      	movs	r3, #10
 80019aa:	485e      	ldr	r0, [pc, #376]	; (8001b24 <_printf_i+0x244>)
 80019ac:	e019      	b.n	80019e2 <_printf_i+0x102>
 80019ae:	680e      	ldr	r6, [r1, #0]
 80019b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80019b4:	602b      	str	r3, [r5, #0]
 80019b6:	bf18      	it	ne
 80019b8:	b236      	sxthne	r6, r6
 80019ba:	e7ef      	b.n	800199c <_printf_i+0xbc>
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	1d19      	adds	r1, r3, #4
 80019c2:	6029      	str	r1, [r5, #0]
 80019c4:	0601      	lsls	r1, r0, #24
 80019c6:	d501      	bpl.n	80019cc <_printf_i+0xec>
 80019c8:	681e      	ldr	r6, [r3, #0]
 80019ca:	e002      	b.n	80019d2 <_printf_i+0xf2>
 80019cc:	0646      	lsls	r6, r0, #25
 80019ce:	d5fb      	bpl.n	80019c8 <_printf_i+0xe8>
 80019d0:	881e      	ldrh	r6, [r3, #0]
 80019d2:	2f6f      	cmp	r7, #111	; 0x6f
 80019d4:	bf0c      	ite	eq
 80019d6:	2308      	moveq	r3, #8
 80019d8:	230a      	movne	r3, #10
 80019da:	4852      	ldr	r0, [pc, #328]	; (8001b24 <_printf_i+0x244>)
 80019dc:	2100      	movs	r1, #0
 80019de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80019e2:	6865      	ldr	r5, [r4, #4]
 80019e4:	2d00      	cmp	r5, #0
 80019e6:	bfa8      	it	ge
 80019e8:	6821      	ldrge	r1, [r4, #0]
 80019ea:	60a5      	str	r5, [r4, #8]
 80019ec:	bfa4      	itt	ge
 80019ee:	f021 0104 	bicge.w	r1, r1, #4
 80019f2:	6021      	strge	r1, [r4, #0]
 80019f4:	b90e      	cbnz	r6, 80019fa <_printf_i+0x11a>
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	d04d      	beq.n	8001a96 <_printf_i+0x1b6>
 80019fa:	4615      	mov	r5, r2
 80019fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a00:	fb03 6711 	mls	r7, r3, r1, r6
 8001a04:	5dc7      	ldrb	r7, [r0, r7]
 8001a06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a0a:	4637      	mov	r7, r6
 8001a0c:	42bb      	cmp	r3, r7
 8001a0e:	460e      	mov	r6, r1
 8001a10:	d9f4      	bls.n	80019fc <_printf_i+0x11c>
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d10b      	bne.n	8001a2e <_printf_i+0x14e>
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	07de      	lsls	r6, r3, #31
 8001a1a:	d508      	bpl.n	8001a2e <_printf_i+0x14e>
 8001a1c:	6923      	ldr	r3, [r4, #16]
 8001a1e:	6861      	ldr	r1, [r4, #4]
 8001a20:	4299      	cmp	r1, r3
 8001a22:	bfde      	ittt	le
 8001a24:	2330      	movle	r3, #48	; 0x30
 8001a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a2e:	1b52      	subs	r2, r2, r5
 8001a30:	6122      	str	r2, [r4, #16]
 8001a32:	464b      	mov	r3, r9
 8001a34:	4621      	mov	r1, r4
 8001a36:	4640      	mov	r0, r8
 8001a38:	f8cd a000 	str.w	sl, [sp]
 8001a3c:	aa03      	add	r2, sp, #12
 8001a3e:	f7ff fedf 	bl	8001800 <_printf_common>
 8001a42:	3001      	adds	r0, #1
 8001a44:	d14c      	bne.n	8001ae0 <_printf_i+0x200>
 8001a46:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4a:	b004      	add	sp, #16
 8001a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a50:	4834      	ldr	r0, [pc, #208]	; (8001b24 <_printf_i+0x244>)
 8001a52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001a56:	6829      	ldr	r1, [r5, #0]
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a5e:	6029      	str	r1, [r5, #0]
 8001a60:	061d      	lsls	r5, r3, #24
 8001a62:	d514      	bpl.n	8001a8e <_printf_i+0x1ae>
 8001a64:	07df      	lsls	r7, r3, #31
 8001a66:	bf44      	itt	mi
 8001a68:	f043 0320 	orrmi.w	r3, r3, #32
 8001a6c:	6023      	strmi	r3, [r4, #0]
 8001a6e:	b91e      	cbnz	r6, 8001a78 <_printf_i+0x198>
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	f023 0320 	bic.w	r3, r3, #32
 8001a76:	6023      	str	r3, [r4, #0]
 8001a78:	2310      	movs	r3, #16
 8001a7a:	e7af      	b.n	80019dc <_printf_i+0xfc>
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	f043 0320 	orr.w	r3, r3, #32
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	2378      	movs	r3, #120	; 0x78
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <_printf_i+0x248>)
 8001a88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a8c:	e7e3      	b.n	8001a56 <_printf_i+0x176>
 8001a8e:	0659      	lsls	r1, r3, #25
 8001a90:	bf48      	it	mi
 8001a92:	b2b6      	uxthmi	r6, r6
 8001a94:	e7e6      	b.n	8001a64 <_printf_i+0x184>
 8001a96:	4615      	mov	r5, r2
 8001a98:	e7bb      	b.n	8001a12 <_printf_i+0x132>
 8001a9a:	682b      	ldr	r3, [r5, #0]
 8001a9c:	6826      	ldr	r6, [r4, #0]
 8001a9e:	1d18      	adds	r0, r3, #4
 8001aa0:	6961      	ldr	r1, [r4, #20]
 8001aa2:	6028      	str	r0, [r5, #0]
 8001aa4:	0635      	lsls	r5, r6, #24
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	d501      	bpl.n	8001aae <_printf_i+0x1ce>
 8001aaa:	6019      	str	r1, [r3, #0]
 8001aac:	e002      	b.n	8001ab4 <_printf_i+0x1d4>
 8001aae:	0670      	lsls	r0, r6, #25
 8001ab0:	d5fb      	bpl.n	8001aaa <_printf_i+0x1ca>
 8001ab2:	8019      	strh	r1, [r3, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4615      	mov	r5, r2
 8001ab8:	6123      	str	r3, [r4, #16]
 8001aba:	e7ba      	b.n	8001a32 <_printf_i+0x152>
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	1d1a      	adds	r2, r3, #4
 8001ac2:	602a      	str	r2, [r5, #0]
 8001ac4:	681d      	ldr	r5, [r3, #0]
 8001ac6:	6862      	ldr	r2, [r4, #4]
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f000 f82f 	bl	8001b2c <memchr>
 8001ace:	b108      	cbz	r0, 8001ad4 <_printf_i+0x1f4>
 8001ad0:	1b40      	subs	r0, r0, r5
 8001ad2:	6060      	str	r0, [r4, #4]
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	6123      	str	r3, [r4, #16]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ade:	e7a8      	b.n	8001a32 <_printf_i+0x152>
 8001ae0:	462a      	mov	r2, r5
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	4640      	mov	r0, r8
 8001ae6:	6923      	ldr	r3, [r4, #16]
 8001ae8:	47d0      	blx	sl
 8001aea:	3001      	adds	r0, #1
 8001aec:	d0ab      	beq.n	8001a46 <_printf_i+0x166>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	079b      	lsls	r3, r3, #30
 8001af2:	d413      	bmi.n	8001b1c <_printf_i+0x23c>
 8001af4:	68e0      	ldr	r0, [r4, #12]
 8001af6:	9b03      	ldr	r3, [sp, #12]
 8001af8:	4298      	cmp	r0, r3
 8001afa:	bfb8      	it	lt
 8001afc:	4618      	movlt	r0, r3
 8001afe:	e7a4      	b.n	8001a4a <_printf_i+0x16a>
 8001b00:	2301      	movs	r3, #1
 8001b02:	4632      	mov	r2, r6
 8001b04:	4649      	mov	r1, r9
 8001b06:	4640      	mov	r0, r8
 8001b08:	47d0      	blx	sl
 8001b0a:	3001      	adds	r0, #1
 8001b0c:	d09b      	beq.n	8001a46 <_printf_i+0x166>
 8001b0e:	3501      	adds	r5, #1
 8001b10:	68e3      	ldr	r3, [r4, #12]
 8001b12:	9903      	ldr	r1, [sp, #12]
 8001b14:	1a5b      	subs	r3, r3, r1
 8001b16:	42ab      	cmp	r3, r5
 8001b18:	dcf2      	bgt.n	8001b00 <_printf_i+0x220>
 8001b1a:	e7eb      	b.n	8001af4 <_printf_i+0x214>
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	f104 0619 	add.w	r6, r4, #25
 8001b22:	e7f5      	b.n	8001b10 <_printf_i+0x230>
 8001b24:	08002886 	.word	0x08002886
 8001b28:	08002897 	.word	0x08002897

08001b2c <memchr>:
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b510      	push	{r4, lr}
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4402      	add	r2, r0
 8001b34:	4293      	cmp	r3, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	d101      	bne.n	8001b3e <memchr+0x12>
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	e003      	b.n	8001b46 <memchr+0x1a>
 8001b3e:	7804      	ldrb	r4, [r0, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	428c      	cmp	r4, r1
 8001b44:	d1f6      	bne.n	8001b34 <memchr+0x8>
 8001b46:	bd10      	pop	{r4, pc}

08001b48 <memcpy>:
 8001b48:	440a      	add	r2, r1
 8001b4a:	4291      	cmp	r1, r2
 8001b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b50:	d100      	bne.n	8001b54 <memcpy+0xc>
 8001b52:	4770      	bx	lr
 8001b54:	b510      	push	{r4, lr}
 8001b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b5a:	4291      	cmp	r1, r2
 8001b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b60:	d1f9      	bne.n	8001b56 <memcpy+0xe>
 8001b62:	bd10      	pop	{r4, pc}

08001b64 <memmove>:
 8001b64:	4288      	cmp	r0, r1
 8001b66:	b510      	push	{r4, lr}
 8001b68:	eb01 0402 	add.w	r4, r1, r2
 8001b6c:	d902      	bls.n	8001b74 <memmove+0x10>
 8001b6e:	4284      	cmp	r4, r0
 8001b70:	4623      	mov	r3, r4
 8001b72:	d807      	bhi.n	8001b84 <memmove+0x20>
 8001b74:	1e43      	subs	r3, r0, #1
 8001b76:	42a1      	cmp	r1, r4
 8001b78:	d008      	beq.n	8001b8c <memmove+0x28>
 8001b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b82:	e7f8      	b.n	8001b76 <memmove+0x12>
 8001b84:	4601      	mov	r1, r0
 8001b86:	4402      	add	r2, r0
 8001b88:	428a      	cmp	r2, r1
 8001b8a:	d100      	bne.n	8001b8e <memmove+0x2a>
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b96:	e7f7      	b.n	8001b88 <memmove+0x24>

08001b98 <_free_r>:
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d040      	beq.n	8001c22 <_free_r+0x8a>
 8001ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ba4:	1f0c      	subs	r4, r1, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bfb8      	it	lt
 8001baa:	18e4      	addlt	r4, r4, r3
 8001bac:	f000 f910 	bl	8001dd0 <__malloc_lock>
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <_free_r+0x8c>)
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	b933      	cbnz	r3, 8001bc4 <_free_r+0x2c>
 8001bb6:	6063      	str	r3, [r4, #4]
 8001bb8:	6014      	str	r4, [r2, #0]
 8001bba:	4628      	mov	r0, r5
 8001bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bc0:	f000 b90c 	b.w	8001ddc <__malloc_unlock>
 8001bc4:	42a3      	cmp	r3, r4
 8001bc6:	d908      	bls.n	8001bda <_free_r+0x42>
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	1821      	adds	r1, r4, r0
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	bf01      	itttt	eq
 8001bd0:	6819      	ldreq	r1, [r3, #0]
 8001bd2:	685b      	ldreq	r3, [r3, #4]
 8001bd4:	1809      	addeq	r1, r1, r0
 8001bd6:	6021      	streq	r1, [r4, #0]
 8001bd8:	e7ed      	b.n	8001bb6 <_free_r+0x1e>
 8001bda:	461a      	mov	r2, r3
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	b10b      	cbz	r3, 8001be4 <_free_r+0x4c>
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	d9fa      	bls.n	8001bda <_free_r+0x42>
 8001be4:	6811      	ldr	r1, [r2, #0]
 8001be6:	1850      	adds	r0, r2, r1
 8001be8:	42a0      	cmp	r0, r4
 8001bea:	d10b      	bne.n	8001c04 <_free_r+0x6c>
 8001bec:	6820      	ldr	r0, [r4, #0]
 8001bee:	4401      	add	r1, r0
 8001bf0:	1850      	adds	r0, r2, r1
 8001bf2:	4283      	cmp	r3, r0
 8001bf4:	6011      	str	r1, [r2, #0]
 8001bf6:	d1e0      	bne.n	8001bba <_free_r+0x22>
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4401      	add	r1, r0
 8001bfe:	6011      	str	r1, [r2, #0]
 8001c00:	6053      	str	r3, [r2, #4]
 8001c02:	e7da      	b.n	8001bba <_free_r+0x22>
 8001c04:	d902      	bls.n	8001c0c <_free_r+0x74>
 8001c06:	230c      	movs	r3, #12
 8001c08:	602b      	str	r3, [r5, #0]
 8001c0a:	e7d6      	b.n	8001bba <_free_r+0x22>
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	1821      	adds	r1, r4, r0
 8001c10:	428b      	cmp	r3, r1
 8001c12:	bf01      	itttt	eq
 8001c14:	6819      	ldreq	r1, [r3, #0]
 8001c16:	685b      	ldreq	r3, [r3, #4]
 8001c18:	1809      	addeq	r1, r1, r0
 8001c1a:	6021      	streq	r1, [r4, #0]
 8001c1c:	6063      	str	r3, [r4, #4]
 8001c1e:	6054      	str	r4, [r2, #4]
 8001c20:	e7cb      	b.n	8001bba <_free_r+0x22>
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
 8001c24:	200000e4 	.word	0x200000e4

08001c28 <sbrk_aligned>:
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	4e0e      	ldr	r6, [pc, #56]	; (8001c64 <sbrk_aligned+0x3c>)
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	6831      	ldr	r1, [r6, #0]
 8001c30:	4605      	mov	r5, r0
 8001c32:	b911      	cbnz	r1, 8001c3a <sbrk_aligned+0x12>
 8001c34:	f000 f8bc 	bl	8001db0 <_sbrk_r>
 8001c38:	6030      	str	r0, [r6, #0]
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f000 f8b7 	bl	8001db0 <_sbrk_r>
 8001c42:	1c43      	adds	r3, r0, #1
 8001c44:	d00a      	beq.n	8001c5c <sbrk_aligned+0x34>
 8001c46:	1cc4      	adds	r4, r0, #3
 8001c48:	f024 0403 	bic.w	r4, r4, #3
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	d007      	beq.n	8001c60 <sbrk_aligned+0x38>
 8001c50:	1a21      	subs	r1, r4, r0
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 f8ac 	bl	8001db0 <_sbrk_r>
 8001c58:	3001      	adds	r0, #1
 8001c5a:	d101      	bne.n	8001c60 <sbrk_aligned+0x38>
 8001c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8001c60:	4620      	mov	r0, r4
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	200000e8 	.word	0x200000e8

08001c68 <_malloc_r>:
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6c:	1ccd      	adds	r5, r1, #3
 8001c6e:	f025 0503 	bic.w	r5, r5, #3
 8001c72:	3508      	adds	r5, #8
 8001c74:	2d0c      	cmp	r5, #12
 8001c76:	bf38      	it	cc
 8001c78:	250c      	movcc	r5, #12
 8001c7a:	2d00      	cmp	r5, #0
 8001c7c:	4607      	mov	r7, r0
 8001c7e:	db01      	blt.n	8001c84 <_malloc_r+0x1c>
 8001c80:	42a9      	cmp	r1, r5
 8001c82:	d905      	bls.n	8001c90 <_malloc_r+0x28>
 8001c84:	230c      	movs	r3, #12
 8001c86:	2600      	movs	r6, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c90:	4e2e      	ldr	r6, [pc, #184]	; (8001d4c <_malloc_r+0xe4>)
 8001c92:	f000 f89d 	bl	8001dd0 <__malloc_lock>
 8001c96:	6833      	ldr	r3, [r6, #0]
 8001c98:	461c      	mov	r4, r3
 8001c9a:	bb34      	cbnz	r4, 8001cea <_malloc_r+0x82>
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	f7ff ffc2 	bl	8001c28 <sbrk_aligned>
 8001ca4:	1c43      	adds	r3, r0, #1
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	d14d      	bne.n	8001d46 <_malloc_r+0xde>
 8001caa:	6834      	ldr	r4, [r6, #0]
 8001cac:	4626      	mov	r6, r4
 8001cae:	2e00      	cmp	r6, #0
 8001cb0:	d140      	bne.n	8001d34 <_malloc_r+0xcc>
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	4631      	mov	r1, r6
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	eb04 0803 	add.w	r8, r4, r3
 8001cbc:	f000 f878 	bl	8001db0 <_sbrk_r>
 8001cc0:	4580      	cmp	r8, r0
 8001cc2:	d13a      	bne.n	8001d3a <_malloc_r+0xd2>
 8001cc4:	6821      	ldr	r1, [r4, #0]
 8001cc6:	3503      	adds	r5, #3
 8001cc8:	1a6d      	subs	r5, r5, r1
 8001cca:	f025 0503 	bic.w	r5, r5, #3
 8001cce:	3508      	adds	r5, #8
 8001cd0:	2d0c      	cmp	r5, #12
 8001cd2:	bf38      	it	cc
 8001cd4:	250c      	movcc	r5, #12
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7ff ffa5 	bl	8001c28 <sbrk_aligned>
 8001cde:	3001      	adds	r0, #1
 8001ce0:	d02b      	beq.n	8001d3a <_malloc_r+0xd2>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	442b      	add	r3, r5
 8001ce6:	6023      	str	r3, [r4, #0]
 8001ce8:	e00e      	b.n	8001d08 <_malloc_r+0xa0>
 8001cea:	6822      	ldr	r2, [r4, #0]
 8001cec:	1b52      	subs	r2, r2, r5
 8001cee:	d41e      	bmi.n	8001d2e <_malloc_r+0xc6>
 8001cf0:	2a0b      	cmp	r2, #11
 8001cf2:	d916      	bls.n	8001d22 <_malloc_r+0xba>
 8001cf4:	1961      	adds	r1, r4, r5
 8001cf6:	42a3      	cmp	r3, r4
 8001cf8:	6025      	str	r5, [r4, #0]
 8001cfa:	bf18      	it	ne
 8001cfc:	6059      	strne	r1, [r3, #4]
 8001cfe:	6863      	ldr	r3, [r4, #4]
 8001d00:	bf08      	it	eq
 8001d02:	6031      	streq	r1, [r6, #0]
 8001d04:	5162      	str	r2, [r4, r5]
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	4638      	mov	r0, r7
 8001d0a:	f104 060b 	add.w	r6, r4, #11
 8001d0e:	f000 f865 	bl	8001ddc <__malloc_unlock>
 8001d12:	f026 0607 	bic.w	r6, r6, #7
 8001d16:	1d23      	adds	r3, r4, #4
 8001d18:	1af2      	subs	r2, r6, r3
 8001d1a:	d0b6      	beq.n	8001c8a <_malloc_r+0x22>
 8001d1c:	1b9b      	subs	r3, r3, r6
 8001d1e:	50a3      	str	r3, [r4, r2]
 8001d20:	e7b3      	b.n	8001c8a <_malloc_r+0x22>
 8001d22:	6862      	ldr	r2, [r4, #4]
 8001d24:	42a3      	cmp	r3, r4
 8001d26:	bf0c      	ite	eq
 8001d28:	6032      	streq	r2, [r6, #0]
 8001d2a:	605a      	strne	r2, [r3, #4]
 8001d2c:	e7ec      	b.n	8001d08 <_malloc_r+0xa0>
 8001d2e:	4623      	mov	r3, r4
 8001d30:	6864      	ldr	r4, [r4, #4]
 8001d32:	e7b2      	b.n	8001c9a <_malloc_r+0x32>
 8001d34:	4634      	mov	r4, r6
 8001d36:	6876      	ldr	r6, [r6, #4]
 8001d38:	e7b9      	b.n	8001cae <_malloc_r+0x46>
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	f000 f84c 	bl	8001ddc <__malloc_unlock>
 8001d44:	e7a1      	b.n	8001c8a <_malloc_r+0x22>
 8001d46:	6025      	str	r5, [r4, #0]
 8001d48:	e7de      	b.n	8001d08 <_malloc_r+0xa0>
 8001d4a:	bf00      	nop
 8001d4c:	200000e4 	.word	0x200000e4

08001d50 <_realloc_r>:
 8001d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d54:	4680      	mov	r8, r0
 8001d56:	4614      	mov	r4, r2
 8001d58:	460e      	mov	r6, r1
 8001d5a:	b921      	cbnz	r1, 8001d66 <_realloc_r+0x16>
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d62:	f7ff bf81 	b.w	8001c68 <_malloc_r>
 8001d66:	b92a      	cbnz	r2, 8001d74 <_realloc_r+0x24>
 8001d68:	f7ff ff16 	bl	8001b98 <_free_r>
 8001d6c:	4625      	mov	r5, r4
 8001d6e:	4628      	mov	r0, r5
 8001d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d74:	f000 f838 	bl	8001de8 <_malloc_usable_size_r>
 8001d78:	4284      	cmp	r4, r0
 8001d7a:	4607      	mov	r7, r0
 8001d7c:	d802      	bhi.n	8001d84 <_realloc_r+0x34>
 8001d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001d82:	d812      	bhi.n	8001daa <_realloc_r+0x5a>
 8001d84:	4621      	mov	r1, r4
 8001d86:	4640      	mov	r0, r8
 8001d88:	f7ff ff6e 	bl	8001c68 <_malloc_r>
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d0ed      	beq.n	8001d6e <_realloc_r+0x1e>
 8001d92:	42bc      	cmp	r4, r7
 8001d94:	4622      	mov	r2, r4
 8001d96:	4631      	mov	r1, r6
 8001d98:	bf28      	it	cs
 8001d9a:	463a      	movcs	r2, r7
 8001d9c:	f7ff fed4 	bl	8001b48 <memcpy>
 8001da0:	4631      	mov	r1, r6
 8001da2:	4640      	mov	r0, r8
 8001da4:	f7ff fef8 	bl	8001b98 <_free_r>
 8001da8:	e7e1      	b.n	8001d6e <_realloc_r+0x1e>
 8001daa:	4635      	mov	r5, r6
 8001dac:	e7df      	b.n	8001d6e <_realloc_r+0x1e>
	...

08001db0 <_sbrk_r>:
 8001db0:	b538      	push	{r3, r4, r5, lr}
 8001db2:	2300      	movs	r3, #0
 8001db4:	4d05      	ldr	r5, [pc, #20]	; (8001dcc <_sbrk_r+0x1c>)
 8001db6:	4604      	mov	r4, r0
 8001db8:	4608      	mov	r0, r1
 8001dba:	602b      	str	r3, [r5, #0]
 8001dbc:	f7fe fdd2 	bl	8000964 <_sbrk>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	d102      	bne.n	8001dca <_sbrk_r+0x1a>
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	b103      	cbz	r3, 8001dca <_sbrk_r+0x1a>
 8001dc8:	6023      	str	r3, [r4, #0]
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	200000ec 	.word	0x200000ec

08001dd0 <__malloc_lock>:
 8001dd0:	4801      	ldr	r0, [pc, #4]	; (8001dd8 <__malloc_lock+0x8>)
 8001dd2:	f000 b811 	b.w	8001df8 <__retarget_lock_acquire_recursive>
 8001dd6:	bf00      	nop
 8001dd8:	200000f0 	.word	0x200000f0

08001ddc <__malloc_unlock>:
 8001ddc:	4801      	ldr	r0, [pc, #4]	; (8001de4 <__malloc_unlock+0x8>)
 8001dde:	f000 b80c 	b.w	8001dfa <__retarget_lock_release_recursive>
 8001de2:	bf00      	nop
 8001de4:	200000f0 	.word	0x200000f0

08001de8 <_malloc_usable_size_r>:
 8001de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dec:	1f18      	subs	r0, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bfbc      	itt	lt
 8001df2:	580b      	ldrlt	r3, [r1, r0]
 8001df4:	18c0      	addlt	r0, r0, r3
 8001df6:	4770      	bx	lr

08001df8 <__retarget_lock_acquire_recursive>:
 8001df8:	4770      	bx	lr

08001dfa <__retarget_lock_release_recursive>:
 8001dfa:	4770      	bx	lr

08001dfc <_init>:
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	bf00      	nop
 8001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e02:	bc08      	pop	{r3}
 8001e04:	469e      	mov	lr, r3
 8001e06:	4770      	bx	lr

08001e08 <_fini>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr
